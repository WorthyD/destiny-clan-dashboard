{
    "pipes": [
        {
            "name": "BungieDatePipe",
            "id": "pipe-BungieDatePipe-d73a3eacb4db1fadf1cb0069280e9f9b7d488afa6981b423003121bc859ca2a112ea2be326c41c2cfe4266b8fe665409c85be608095a086e38b7221c901fa547",
            "file": "projects/components/src/lib/pipes/bungie-date/bungie-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'bungieDate'\r\n})\r\nexport class BungieDatePipe extends DatePipe implements PipeTransform {\r\n\r\n  constructor(@Inject(LOCALE_ID) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override transform(date: Date | string): any {\r\n    const d2 = new Date(date)\r\n    return super.transform(d2, 'yyyy-MM-dd');\r\n  }\r\n}\r\n"
        },
        {
            "name": "BungieDateTimePipe",
            "id": "pipe-BungieDateTimePipe-5e0e0ebd393be8fb509346d91ede0ec63610f0f9f0f54af18f0e5c66fcdcd77c3d1fd4214c3c68cc012e5bb79279051456030d4a207ef27b9ba601cfb6c0efc2",
            "file": "projects/components/src/lib/pipes/bungie-date/bungie-date-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDateTime",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'bungieDateTime'\r\n})\r\nexport class BungieDateTimePipe extends DatePipe implements PipeTransform {\r\n  constructor(@Inject(LOCALE_ID) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override transform(date: Date): any {\r\n    return super.transform(date, 'yyyy-MM-dd h:mm a') || '';\r\n  }\r\n}\r\n"
        },
        {
            "name": "ClassIconPipe",
            "id": "pipe-ClassIconPipe-bf9996fcdaecec48b23489b2457f139ca5afb872916c03e1d3160a59c8a0c16cc15a4abcca88f5862cdfa60b907486829e94698997152efbc4d72144266e8365",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "classType",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classType",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "classicon",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit, Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Component({\r\n  selector: 'app-class-cell',\r\n  template: `\r\n    <div [ngClass]=\"(profile?.characters.data)[characterHash].classType | classicon\">\r\n      {{ (profile?.characters.data)[characterHash].light }}\r\n    </div>\r\n  `,\r\n  styles: [\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClassCellComponent {\r\n  @Input() characterHash: string;\r\n\r\n  @Input() profile: MemberProfile;\r\n\r\n  constructor() {}\r\n\r\n  getIcon(): string {\r\n    const classType = (this.profile?.characters.data)[this.characterHash].classType;\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan';\r\n      case 1:\r\n        return 'hunter';\r\n      case 2:\r\n        return 'warlock';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'classicon',\r\n  pure: true\r\n})\r\nexport class ClassIconPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(classType: number): any {\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan-cell';\r\n      case 1:\r\n        return 'hunter-cell';\r\n      case 2:\r\n        return 'warlock-cell';\r\n    }\r\n  }\r\n}\r\n"
        },
        {
            "name": "MemberTypePipe",
            "id": "pipe-MemberTypePipe-cac8cba040a879a01a0a9a7084b035dcb7703190a669046163ec9484ddab90c8975463e284aee7d29381b66704a667769cda89139f098547f2d38f350fa5dcb8",
            "file": "projects/components/src/lib/pipes/member-type/member-type.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "memberType",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MembershipTypes } from '@destiny/data/models/enums';\r\n\r\n@Pipe({\r\n  name: 'memberType'\r\n})\r\nexport class MemberTypePipe implements PipeTransform {\r\n  transform(value: number): string {\r\n    switch (value) {\r\n      case MembershipTypes.Xbox:\r\n        return 'xbox';\r\n      case MembershipTypes.Psn:\r\n        return 'playstation';\r\n      case MembershipTypes.Steam:\r\n        return 'steam';\r\n      case MembershipTypes.Stadia:\r\n        return 'stadia';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n"
        },
        {
            "name": "PlaytimeMillisecondsPipe",
            "id": "pipe-PlaytimeMillisecondsPipe-05bb18d846d7a6ec1a21471ec8270558cc58b5c8c39983392f1f8a0081c23f34a313fde87e46edc0b03ec44d054f9c2f6dcbb6743e00dafb251e790bf200048b",
            "file": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "playtimems",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'playtime'\r\n})\r\nexport class PlaytimePipe implements PipeTransform {\r\n  transform(input: number, showSeconds: boolean = true): string {\r\n    let totalSeconds = input;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = showSeconds ? ':' + String(Math.floor(totalSeconds % 60)).padStart(2, '0') : '';\r\n\r\n    return hours + ':' + minutes + seconds;\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'playtimems'\r\n})\r\nexport class PlaytimeMillisecondsPipe implements PipeTransform {\r\n  transform(input: number): string {\r\n    if (input === 0) {\r\n      return '';\r\n    }\r\n    let totalSeconds = input / 1000;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, '0');\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n  }\r\n}\r\n"
        },
        {
            "name": "PlaytimePipe",
            "id": "pipe-PlaytimePipe-05bb18d846d7a6ec1a21471ec8270558cc58b5c8c39983392f1f8a0081c23f34a313fde87e46edc0b03ec44d054f9c2f6dcbb6743e00dafb251e790bf200048b",
            "file": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "playtime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'playtime'\r\n})\r\nexport class PlaytimePipe implements PipeTransform {\r\n  transform(input: number, showSeconds: boolean = true): string {\r\n    let totalSeconds = input;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = showSeconds ? ':' + String(Math.floor(totalSeconds % 60)).padStart(2, '0') : '';\r\n\r\n    return hours + ':' + minutes + seconds;\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'playtimems'\r\n})\r\nexport class PlaytimeMillisecondsPipe implements PipeTransform {\r\n  transform(input: number): string {\r\n    if (input === 0) {\r\n      return '';\r\n    }\r\n    let totalSeconds = input / 1000;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, '0');\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Activity",
            "id": "interface-Activity-f60c561c9418a4a0af42a64922e42f4575e2d0272e2cebfe30b28f5479126bd032146e7e8e6006449b2e5883db8c4b81c82551fbe7e3e41c5ec481450c3eb824",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  lastNinetyDays?: number;\r\n  lastMonth?: number;\r\n  lastWeek?: number;\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "abbreviatedName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hashes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isGuidedGames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isVaulted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActivityCollection",
            "id": "interface-ActivityCollection-363c00b399a461c5d00b80c913e00edbfcc7eeaa678a03bb9f7b2054c3551c77df9d59c9892c72ba35c07b225c60e3578eb0a9fbc68abbd3cdb1324efefe9156",
            "file": "projects/data/src/lib/clan/base-member-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseClanService } from './base-clan.service';\r\n//import { ClanDatabase } from './ClanDatabase';\r\n//import { StoreId, DBObject } from './app-indexed-db';\r\nimport { groupActivitiesByDate } from '../utility/group-activity-by-date';\r\n\r\n//import { Destiny2Service, DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup } from 'bungie-api-angular';\r\n\r\n// import { MemberProfile } from 'bungie-models';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of, from, defer, concat, EMPTY, forkJoin } from 'rxjs';\r\nimport { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { MemberActivityStats } from '../models/MemberActivityStat';\r\nimport { MemberActivityTime } from '../models/MemberActivityTime';\r\nimport { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from '../models';\r\n//import { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityTime } from 'projects/bungie-models/src/lib/models/MemberActivityTime';\r\n//import { MemberActivityStats } from 'projects/bungie-models/src/lib/models/MemberActivityStat';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\ninterface ActivityCollection {\r\n  activities: any[];\r\n}\r\nexport class BaseMemberActivityService extends BaseClanService {\r\n  private ACTIVITY_GET_COUNT = 250;\r\n  constructor(\r\n    private clanDbPBase: ClanDatabase,\r\n    private tableNamePBase: StoreId,\r\n    private apiKey: string,\r\n    // private d2ServiceBase: Destiny2Service,\r\n    public startValue: Date,\r\n    public maxRequestCount: Number,\r\n    public activityTypeId = 0\r\n  ) {\r\n    super(clanDbPBase, tableNamePBase);\r\n  }\r\n\r\n  public getMemberCharacterActivityFromAPI(member: MemberProfile, characterId: number, pageNumber = 0) {\r\n    // https://www.bungie.net/Platform/Destiny2/3/Account/4611686018483900283/Character/2305843009471454818/Stats/Activities/?count=250&mode=0&page=10\r\n\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.profile.data.userInfo.membershipType}/Account/${member.profile.data.userInfo.membershipId}/Character/${characterId}/Stats/Activities/?count=${this.ACTIVITY_GET_COUNT}&mode=${this.activityTypeId}&page=${pageNumber}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n\r\n    // return this.d2ServiceBase.destiny2GetActivityHistory(\r\n    //   characterId,\r\n    //   member.profile.data.userInfo.membershipId,\r\n    //   member.profile.data.userInfo.membershipType,\r\n    //   this.ACTIVITY_GET_COUNT,\r\n    //   this.activityTypeId,\r\n    //   pageNumber\r\n    // );\r\n  }\r\n\r\n  private activitiesContainExpiredYear(activities, expiration) {\r\n    if (!activities) {\r\n      return true;\r\n    }\r\n\r\n    return !!activities.find((x) => {\r\n      const activityYear = new Date(x.period);\r\n      return activityYear <= expiration;\r\n    });\r\n  }\r\n\r\n  private getAllRecentActivity(member: MemberProfile, characterId: number): Observable<ActivityCollection> {\r\n    const maxConcurrentCount = 4;\r\n    const fetchPage = (page = 0) => {\r\n      return this.getMemberCharacterActivityFromAPI(member, characterId, page).pipe(\r\n        map((x: any) => {\r\n          const nextPage =\r\n            this.activitiesContainExpiredYear(x?.Response?.activities, this.startValue) || page >= this.maxRequestCount\r\n              ? null\r\n              : page + maxConcurrentCount;\r\n\r\n          const activities = x?.Response?.activities || [];\r\n          return { activities, nextPage };\r\n        })\r\n      );\r\n    };\r\n\r\n    const getItems = (page) =>\r\n      defer(() => fetchPage(page)).pipe(\r\n        mergeMap(({ activities, nextPage }) => {\r\n          const items$ = from(activities);\r\n          const next$ = nextPage ? getItems(nextPage) : EMPTY;\r\n          return concat(items$, next$);\r\n        })\r\n      );\r\n\r\n    const batchedRequest = [];\r\n    for (let i = 0; i < maxConcurrentCount; i++) {\r\n      batchedRequest.push(getItems(i).pipe(toArray()));\r\n    }\r\n\r\n    return forkJoin(batchedRequest).pipe(\r\n      map((x: any) => {\r\n        return {\r\n          activities: x.flat()\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getMemberActivityId(member: MemberProfile, characterId: number) {\r\n    return `${this.getMemberProfileId(member)}-${characterId}`;\r\n  }\r\n  getMemberProfileId(member: MemberProfile) {\r\n    return `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`;\r\n  }\r\n\r\n  /**\r\n   *  Pulls character activity from cache and will return fresh data if cache is exipred\r\n   */\r\n  getMemberCharacterActivity(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean\r\n\r\n    // ): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    const characterActivityId = this.getMemberActivityId(member, characterId);\r\n\r\n    return from(this.getDataFromCache(clanId.toString(), characterActivityId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        // if (this.isCacheValid(cachedData, 720, new Date(member.profile.data.dateLastPlayed))) {\r\n        //   return of(cachedData.data);\r\n        // }\r\n\r\n        // return this.getFreshMemberCharacterActivity(clanId, member, characterId, characterActivityId, cachedData);\r\n\r\n        if (useCache) {\r\n          return this.verifyCacheIntegrity(clanId, member, characterId, cachedData);\r\n        }\r\n        return of(cachedData.data);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if Cached data is fresh enough to use. Triggers new call if too old.\r\n   *\r\n   */\r\n  verifyCacheIntegrity(clanId, memberProfile: MemberProfile, characterId, cachedData: DBObject) {\r\n    const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n    if (this.isCacheValid(cachedData, 720, new Date(memberProfile.profile.data.dateLastPlayed))) {\r\n      return of(cachedData.data);\r\n    }\r\n\r\n    return this.getFreshMemberCharacterActivity(clanId, memberProfile, characterId, characterActivityId, cachedData);\r\n  }\r\n\r\n  /**\r\n   * Calls for fresh character activity. Updates cache. Falls back on cache on failure.\r\n   */\r\n  getFreshMemberCharacterActivity(\r\n    clanId: string,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    characterActivityId: string,\r\n    cachedData: DBObject\r\n    //): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    return this.getAllRecentActivity(member, characterId).pipe(\r\n      map((activityResponse) => {\r\n        if (activityResponse.activities) {\r\n          // serialize:\r\n          const slimmedActivities = activityResponse.activities.map((x) => {\r\n            return clanMemberActivitySerializer(x);\r\n          });\r\n\r\n          this.updateDB(clanId, characterActivityId, slimmedActivities);\r\n          return slimmedActivities;\r\n        }\r\n        return of([]);\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error?.ErrorStatus === 'DestinyPrivacyRestriction') {\r\n          this.updateDB(clanId, characterActivityId, []);\r\n          return of([]);\r\n        }\r\n        if (cachedData && cachedData.data) {\r\n          return of(cachedData.data);\r\n        }\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  groupActivitiesToMember(memberProfile: MemberProfile, allActivities: DBObject[], activityMode: number = 0) {\r\n    const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n\r\n    const memberActivitiesDB = allActivities.filter((x) => x.id.startsWith(memberProfileId));\r\n\r\n    const memberActivitiesSerialized = memberActivitiesDB.map((activityDB) =>\r\n      activityDB.data.map((activity) => clanMemberActivitySerializer(activity))\r\n    );\r\n\r\n    const allFilteredActivities =\r\n      activityMode > 0\r\n        ? memberActivitiesSerialized.map((items) =>\r\n            items.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1)\r\n          )\r\n        : memberActivitiesSerialized;\r\n\r\n    const timed = groupActivitiesByDate([].concat(...allFilteredActivities));\r\n\r\n    return {\r\n      id: memberProfileId,\r\n      activities: timed\r\n    };\r\n  }\r\n\r\n  groupActivitiesToMembers(\r\n    memberProfiles: MemberProfile[],\r\n    allActivities: DBObject[],\r\n    activityMode: number = 0\r\n  ): any[] {\r\n    return memberProfiles.map((memberProfile) => {\r\n      return this.groupActivitiesToMember(memberProfile, allActivities, activityMode);\r\n    });\r\n  }\r\n\r\n  getAllActivitiesFromCache(\r\n    clanId: number,\r\n    memberProfiles: MemberProfile[],\r\n    activityMode = 0\r\n  ): Observable<MemberActivityTime[]> {\r\n    return from(this.getAllDataFromCache(clanId.toString())).pipe(\r\n      map((x) => {\r\n        const y = this.groupActivitiesToMembers(memberProfiles, x, activityMode);\r\n        return y;\r\n      })\r\n    );\r\n  }\r\n  // TODO: Turn this up to 11\r\n  updateAllActivityCache(clanId: number, memberProfiles: MemberProfile[], progress?: (done) => any) {\r\n    const memberProfilesObs = from(memberProfiles);\r\n    const cacheDataObs = from(this.getAllDataFromCache(clanId.toString()));\r\n\r\n    return cacheDataObs.pipe(\r\n      switchMap((cachedData) => {\r\n        let complete = 0;\r\n        return memberProfilesObs.pipe(\r\n          mergeMap((memberProfile) => {\r\n            if (!memberProfile?.profile?.data?.characterIds) {\r\n              return of();\r\n            }\r\n            return from(memberProfile.profile.data.characterIds).pipe(\r\n              mergeMap((characterId: number) => {\r\n                const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n                const characterActivityCache = cachedData.find((x) => x.id === characterActivityId);\r\n\r\n                return this.verifyCacheIntegrity(clanId, memberProfile, characterId, characterActivityCache);\r\n              }),\r\n              toArray(),\r\n              map((x) => {\r\n                const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n                return {\r\n                  id: memberProfileId\r\n                };\r\n              })\r\n            );\r\n          }, 3),\r\n          tap((x) => {\r\n            complete++;\r\n            if (progress) {\r\n              progress(complete);\r\n            }\r\n          }),\r\n          toArray()\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getMemberActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityStats> {\r\n    if (!member?.profile) {\r\n      return of(null);\r\n    }\r\n    return from(member.profile.data.characterIds).pipe(\r\n      mergeMap((characterId: number) => {\r\n        return this.getMemberCharacterActivitySerialized(clanId, member, characterId, useCache, activityMode);\r\n      }),\r\n      map((x) => {\r\n        return x.activities;\r\n      }),\r\n      toArray(),\r\n      map((x) => {\r\n        return {\r\n          id: `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`,\r\n          activities: [].concat(...x)\r\n        };\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n  getMemberCharacterActivitySerialized(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ) {\r\n    return this.getMemberCharacterActivity(clanId, member, characterId, useCache).pipe(\r\n      map((activity) => {\r\n        if (activityMode > 0) {\r\n          activity = activity.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1);\r\n        }\r\n        return {\r\n          activities: activity.map((a) => clanMemberActivitySerializer(a))\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActivityStats",
            "id": "interface-ActivityStats-f60c561c9418a4a0af42a64922e42f4575e2d0272e2cebfe30b28f5479126bd032146e7e8e6006449b2e5883db8c4b81c82551fbe7e3e41c5ec481450c3eb824",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  lastNinetyDays?: number;\r\n  lastMonth?: number;\r\n  lastWeek?: number;\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "memberProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStats",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-2063d2b99f0f1cc705d346a65f92f0424fed9c8522dc46c28273e23ce69bf7fa322c821936866d16bb5116e0bafe27b5595766abd4feab802dae150d80aaff96",
            "file": "projects/clan-dashboard/src/app/core/core.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { ManifestReducer, ManifestState, ManifestEffects } from './store/manifest';\r\nimport { ClansEffects, ClansState, ClansReducer } from './store/clans';\r\nimport { initStateFromLocalStorage } from './store/meta-reducers/init-state-from-local-storage.reducer';\r\nimport { NotificationState, NotificationReducer } from './store/notifications';\r\n\r\nexport const coreEffects = [ManifestEffects, ClansEffects];\r\n\r\nexport const coreReducers: ActionReducerMap<AppState> = {\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer,\r\n  notifications: NotificationReducer\r\n};\r\n\r\nexport const metaReducers: MetaReducer<AppState>[] = [initStateFromLocalStorage];\r\n\r\nexport interface AppState {\r\n  manifest: ManifestState;\r\n  clans: ClansState;\r\n  notifications: NotificationState;\r\n}\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationState",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CachedManifest",
            "id": "interface-CachedManifest-a9e706bee60e02635b39679b5f52141fd6e4c1e1b4d916af3979d084d63d9fd83afb541608ef386bf302c575f219b2acf7450cf65e8077e969c6370b6864d199",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\nimport { ManifestDatabaseService } from './manifest-database.service';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v1';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(private d2service: Destiny2Service, private db: ManifestDatabaseService) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate > nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    return this.db.getValues('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        this.db.closeDatabase('manifest');\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.update('manifest', 'allData', [dbObject]).then((db) => {\r\n            this.db.closeDatabase('manifest');\r\n          });\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfig",
            "id": "interface-ClanConfig-aa7507e715de91b10c94c1f6921c70cd2a252fdca6a4b483fb4bc308d5be8b696b4f3676194f46b9d735e607a66d518766a7c29b292b4901d8343ea2b359f13a",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  clanName: string;\r\n  clanTag: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n  memberRecentActivityUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clanId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "clanName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "memberRecentActivityUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "memberUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "profileUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfigMembers",
            "id": "interface-ClanConfigMembers-f8582b47fd7d3be4aa17f488a2e18db929e942ee2dd9e13092336a93b0cd7dd842d6ed26d97cce34f6ec831363ab69c7ce97a51404d77f9d6220b908143bb1a1",
            "file": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  from,\r\n  map,\r\n  mergeMap,\r\n  Observable,\r\n  shareReplay,\r\n  Subject,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  tap,\r\n  toArray\r\n} from 'rxjs';\r\nimport {\r\n  selectEnabledClans,\r\n  selectEnabledClanIds,\r\n  selectLastRecentActivityUpdate\r\n} from '../store/clans/clans.selectors';\r\n\r\nexport interface ClanConfigMembers {\r\n  clan: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClansMembersService {\r\n  private reloadClanMembers$ = new BehaviorSubject<void>(undefined);\r\n\r\n  activeClans$ = this.store.select(selectEnabledClans);\r\n\r\n  private _clanMembers$ = this.activeClans$.pipe(\r\n    switchMap((activeClans) => {\r\n      return from(activeClans).pipe(\r\n        mergeMap((clan) => {\r\n          return this.memberService.getClanMembersSerialized(clan.clanId).pipe(\r\n            map((result) => {\r\n              return { clan, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      ) as Observable<ClanConfigMembers[]>;\r\n    })\r\n  );\r\n\r\n  public clanMembers$ = this.reloadClanMembers$.pipe(\r\n    mergeMap(() => this._clanMembers$),\r\n    shareReplay(1)\r\n  );\r\n\r\n  forceReload() {\r\n    // Calling next will complete the current cache instance\r\n    this.reloadClanMembers$.next();\r\n  }\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService\r\n  ) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfigMembers",
            "id": "interface-ClanConfigMembers-a37c1e79e635b8a3d6dbbf4bda0c847d12b4fba298a90af78eec21f532ed359eac73cd91488e8e8c27e62b132756d2188cd60d98e44cfc944df17e0ab5ae3526-1",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  mergeMap,\r\n  map,\r\n  catchError,\r\n  toArray,\r\n  switchMap,\r\n  tap,\r\n  take,\r\n  filter,\r\n  distinctUntilChanged,\r\n  concatMap\r\n} from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClan, updateClanProfileSync } from '../../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ProfileUpdaterService } from './profile-updater.service';\r\nimport { MemberActivityUpdaterService } from './member-activity-updater.service';\r\nimport { ClanDetailsService } from '@destiny/data/clan/clan-details';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AppOfflineDialogComponent } from '../../layout/app-offline-dialog/app-offline-dialog.component';\r\n\r\nexport interface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n  profiles?: any[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n  showLog = true;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig,\r\n    private clanDetailsService: ClanDetailsService,\r\n    private profileUpdaterService: ProfileUpdaterService,\r\n    private memberActivityUpdaterService: MemberActivityUpdaterService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      take(1),\r\n      tap((x) => this.showLog && console.log('Starting Updater', x)),\r\n      switchMap((activeClans) => this.clanUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Starting Member Updater', x)),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profileUpdaterService.profilesUpdate(clans)),\r\n      tap((x) => this.showLog && console.log('Member Profile Update Complete', x)),\r\n      switchMap((clans) => this.memberActivityUpdaterService.membersActivityUpdate(clans)),\r\n      tap((x) => this.showLog && console.log('Member Recent Activity Update Complete', x))\r\n    );\r\n  }\r\n\r\n  clanUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      // TODO: Double check concat map\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        //concatMap((clanConfig: ClanConfig) => {\r\n        return this.clanDetailsService.getClanDetailsSerialized(clanConfig.clanId, false).pipe(\r\n          map((result) => {\r\n            const newConfig = {\r\n              ...clanConfig,\r\n              clanName: result.name,\r\n              clanTag: result.clanInfo.clanCallsign\r\n            };\r\n            this.store.dispatch(updateClan({ clan: newConfig }));\r\n\r\n            return newConfig;\r\n          })\r\n        );\r\n      }, 1),\r\n\r\n      toArray(),\r\n      catchError((err) => {\r\n        if (err.message === 'System Offline') {\r\n          const acknowledgeOffline = window.sessionStorage.getItem(\r\n            this.appConfig.constants.D2DASHBOARD_ACKNOWLEDGE_OFFLINE\r\n          );\r\n          if (!acknowledgeOffline) {\r\n            this.dialog.open(AppOfflineDialogComponent);\r\n          }\r\n        }\r\n        throw err;\r\n      })\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ClanConfigMembers-1"
        },
        {
            "name": "ClanDetails",
            "id": "interface-ClanDetails-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "about",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "memberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanInfo",
            "id": "interface-ClanInfo-129683e091b73ab8b1c71aff918b61b9b392331188735bd3b8cb9c3bb878265a96ccc5bff8b54a828930006a87db5f4b0ccdbf8c2bb5e72a200ffe2bda5e9862",
            "file": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClans } from '@core/store/clans';\r\nimport { from, of } from 'rxjs';\r\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\r\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\r\nimport { ClansDetailsModule } from '../clans-details-shell/clans-details.module';\r\n\r\ninterface ClanInfo {\r\n  ClanName: string;\r\n  ClanMemberCount: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ClansDetailsModule\r\n})\r\nexport class ClansDetailsService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  clanInfo$ = this.activeClanIds$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId, true);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(private store: Store, private dataService: DataService) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "ClanMemberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "ClanName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMember",
            "id": "interface-ClanMember-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "bungieNetUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "destinyUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isOnline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lastOnlineStatusChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "memberType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMemberProfile",
            "id": "interface-ClanMemberProfile-2ca2f1672168314f9ff3af75b6b286f788e36ecc3a2320ae83f1c1ba64137bb8d44aa4717331541e60f0b66c9d33d2d9934a82aaa660527a3cb603d4bafc0e7b",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/data-access/clans-roster.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClanIds, selectEnabledClans, selectLastProfileUpdate } from '@core/store/clans';\r\nimport {\r\n  forkJoin,\r\n  from,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  tap,\r\n  toArray,\r\n  combineLatest,\r\n  distinctUntilChanged,\r\n  Observable\r\n} from 'rxjs';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\n\r\nexport interface ClanMemberProfile {\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  member: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n}\r\n\r\n@Injectable()\r\nexport class ClansRosterService {\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(clanAndMembers.clan.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              switchMap((resultProfiles: MemberProfile[]) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    },\r\n                    member,\r\n                    profile: resultProfiles.find((profile) => {\r\n                      return getClanMemberId(member) === getMemberProfileId(profile);\r\n                    })\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  activeClanPeople$ = this.clanProfiles$;\r\n\r\n  constructor(private memberService: ClansMembersService, private profileService: ProfileService) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "member",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMembersServiceInterface",
            "id": "interface-ClanMembersServiceInterface-d62de745f09221ef0a8063c3462fc92537d9fd527ac47185e06898e946566a5a619307bbdd734e097c30023e628096a5f605491e39c4b6355bc4cbf40d04eb0a",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ClanMembersServiceInterface {\r\n  getClanMembersSerialized: (clanId: string) => Observable<GroupsV2GroupMember[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "getClanMembersSerialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanProgression",
            "id": "interface-ClanProgression-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dailyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dailyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "levelCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nextLevelAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "progressionHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "progressToNextLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stepIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "weeklyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "weeklyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanSearchResultItem",
            "id": "interface-ClanSearchResultItem-37c4dfe0747b3be660aab7dfc0254a0158d00f55a9eef9e729bf8a3648fe41bfe5b6cc398b93207a05e6ca688ae0bab3c63a9af785d4b68dd579f538ea644b05",
            "file": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ClanSearchResultItemType = 'player' | 'clan';\r\n\r\nexport interface ClanSearchResultItem {\r\n  iconName: string;\r\n  name: string;\r\n  clanInfo: any;\r\n  type: ClanSearchResultItemType;\r\n  memberInfo?: any;\r\n  id?: string;\r\n}\r\n\r\n// iconName: this.getIcon(membership.membershipType),\r\n// name: displayName,\r\n// membershipType: membership.membershipType,\r\n// membershipId: membership.membershipId,\r\n// type: 'player'\r\n",
            "properties": [
                {
                    "name": "clanInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "memberInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanSearchResultItemType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClansState",
            "id": "interface-ClansState-aa7507e715de91b10c94c1f6921c70cd2a252fdca6a4b483fb4bc308d5be8b696b4f3676194f46b9d735e607a66d518766a7c29b292b4901d8343ea2b359f13a",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  clanName: string;\r\n  clanTag: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n  memberRecentActivityUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "CuratedClan",
            "id": "interface-CuratedClan-a9f369074b333fd647cf8b6eb04fce32381d4e271353307200593c3eb5c51c84f01a1d988d788e4507dcf483ae73883bf210e5c3581323d869a3d8ef039a7307",
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ClanConfig } from '@core/store/clans';\r\nconst dod_clans_pc = [\r\n  2073131, // Chums\r\n  4322250, // DoD Dad Guard\r\n  2866236, // GMT\r\n  4430645, //Family Pride\r\n  4473297, // Guiding light\r\n  4767446 // Lucid Loops\r\n];\r\nconst dod_clans_all = [\r\n  4803739, //DoD Still Vexier Than You\r\n  4523816, //DoD Lightforged\r\n  223562, //DoD Westside\r\n  523657, //DoD Battleborn\r\n  3872451, //DoD Battleborn Ascendant\r\n  1726332 //DoD California\r\n];\r\nconst dod_clans_ps = [2942177, 1288185, 2071608, 1771725, 1161209, 2180975, 3136336, 1186355, 1375802];\r\n\r\nconst dod_clans_xbox = [\r\n  910604, //DOD Chattawhyte Krew\r\n  849654, //DoD Empire/Orbit/Rebellion/United\r\n  1179713, //DoD Iron Warlords\r\n  4271754, //DoD Shenanigans,\r\n  3219957, //DoD Storm ,\r\n  4748154, // DoD West Coast Blueberries\r\n  806412, // DoD X1 Foxtrot,\r\n  167225 //Dads of Destiny X1 Ghost\r\n];\r\ninterface CuratedClan {\r\n  key: string;\r\n  title: string;\r\n  clans?: ClanConfig[];\r\n  subGroups?: {\r\n    title: string;\r\n    clans: ClanConfig[];\r\n  }[];\r\n}\r\n\r\nfunction m(c) {\r\n  return c.map((x) => {\r\n    return {\r\n      clanId: x.toString(),\r\n      clanName: '',\r\n      clanTag: '',\r\n      enabled: false,\r\n      memberUpdate: '',\r\n      profileUpdate: '',\r\n      memberRecentActivityUpdate: ''\r\n    };\r\n  });\r\n}\r\n\r\nexport const DOD: CuratedClan = {\r\n  key: 'dod',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'All Platforms',\r\n      clans: m(dod_clans_all)\r\n    },\r\n    {\r\n      title: 'PC',\r\n      clans: m(dod_clans_pc)\r\n    },\r\n    {\r\n      title: 'Playstation',\r\n      clans: m(dod_clans_ps)\r\n    },\r\n    {\r\n      title: 'Play Station',\r\n      clans: m(dod_clans_xbox)\r\n    }\r\n  ]\r\n};\r\n\r\nexport const ALL_CLANS = [DOD];\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "subGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataLabel",
            "id": "interface-DataLabel-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceMetadata",
            "id": "interface-DataSourceMetadata-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "accessor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceOptions",
            "id": "interface-DataSourceOptions-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]> | T[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DataSourceMetadata<T>>",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DateFilter",
            "id": "interface-DateFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateEquality",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DateFiltererMetadata",
            "id": "interface-DateFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DBObject",
            "id": "interface-DBObject-7de43f518c699151b6f172c5f8ae4278a7bb440561b4db455e983e6bff6d72d70a5887043d459a45798c5c61838453051df6d5d87b37f1d94c0df3919b1ac48b",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 5;\r\n\r\nexport enum StoreId {\r\n  CacheDetails = 'CacheDetails', //TODO: Verify\r\n  ClanDetails = 'ClanDetails',\r\n  ClanRewards = 'ClanRewards', // TODO: Verify\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberActivityStats = 'MemberActivityStats', // TODO: Verify\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\n  ProfileMilestones = 'ProfileMilestones', // TODO  Verfiy\r\n  ProfileMetrics = 'ProfileMetrics', // TODO: Verify\r\n  Raids = 'Raids' // TODO verify\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(name, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "createDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsActivity-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "directorActivityHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The unique hash identifier of the DestinyActivityDefinition that was played.</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nThe unique hash identifier of the DestinyActivityDefinition that was played.\n"
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The unique identifier for this <em>specific</em> match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nThe unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\n"
                },
                {
                    "name": "isPrivate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether or not the match was a private match.</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nWhether or not the match was a private match.\n"
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The Membership Type indicating the platform on which this match was played.</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nThe Membership Type indicating the platform on which this match was played.\n"
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Indicates the most specific game mode of the activity that we could find.</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nIndicates the most specific game mode of the activity that we could find.\n"
                },
                {
                    "name": "modes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "<p>The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nThe list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\n"
                },
                {
                    "name": "referenceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it&#39;d be named activityHash. Too late now.</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nThe unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsActivity-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9-1",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "directorActivityHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isPrivate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "modes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "referenceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DestinyHistoricalStatsDestinyHistoricalStatsActivity-1"
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                    "optional": true,
                    "description": "<p>If the period group is for a specific activity, this property will be set.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nIf the period group is for a specific activity, this property will be set.\n"
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is &#39;all time&#39;.</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nPeriod for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\n"
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Collection of stats for the period.</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nCollection of stats for the period.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValue-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nWhen a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\n"
                },
                {
                    "name": "basic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "<p>Basic stat value.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nBasic stat value.\n"
                },
                {
                    "name": "pga",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "<p>Per game average for the statistic, if applicable</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nPer game average for the statistic, if applicable\n"
                },
                {
                    "name": "statId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Unique ID for this stat</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nUnique ID for this stat\n"
                },
                {
                    "name": "weighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "<p>Weighted value of the stat if a weight greater than 1 has been assigned.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nWeighted value of the stat if a weight greater than 1 has been assigned.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValue-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9-1",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "basic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pga",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "statId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "weighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DestinyHistoricalStatsDestinyHistoricalStatsValue-1"
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValuePair-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Localized formated version of the value.</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nLocalized formated version of the value.\n"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Raw value of the statistic</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nRaw value of the statistic\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValuePair-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9-1",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair-1"
        },
        {
            "name": "ExporterMetadata",
            "id": "interface-ExporterMetadata-6fd70bab3e8f04e07bd5d3c76ecc283bc3bc10327a526bf4500abf22d6d6f39ad285556b487ddbc6d9ab0d18f2347de66b00e705e8faedb5e5f6e3003440fae7",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, startWith, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport type ExporterContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  contextProvider?: ExporterContextProvider<T, C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n  private contextProvider: ExporterContextProvider<T, C>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, context]) => {\r\n        const keys = [];\r\n        this.metadata.forEach((value, key) => keys.push(key));\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.text(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExporterOptions",
            "id": "interface-ExporterOptions-6fd70bab3e8f04e07bd5d3c76ecc283bc3bc10327a526bf4500abf22d6d6f39ad285556b487ddbc6d9ab0d18f2347de66b00e705e8faedb5e5f6e3003440fae7",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, startWith, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport type ExporterContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  contextProvider?: ExporterContextProvider<T, C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n  private contextProvider: ExporterContextProvider<T, C>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, context]) => {\r\n        const keys = [];\r\n        this.metadata.forEach((value, key) => keys.push(key));\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.text(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExporterContextProvider<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ExporterMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FiltererOptions",
            "id": "interface-FiltererOptions-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltererContextProvider<C>",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltererState",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | FiltererMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "tokenizeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FiltererState",
            "id": "interface-FiltererState-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterOption",
            "id": "interface-FilterOption-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperMetadata",
            "id": "interface-GrouperMetadata-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "groupingFunction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "titleTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperOptions",
            "id": "interface-GrouperOptions-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GrouperState",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | GrouperMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperState",
            "id": "interface-GrouperState-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupLabel",
            "id": "interface-GroupLabel-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupsV2GroupUserInfoCard",
            "id": "interface-GroupsV2GroupUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "LastSeenDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "LastSeenDisplayNameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Item",
            "id": "interface-Item-24e1476103123c36d74a29f65830ff696cab0b36b73b712c3e13978acbdd2ef542925bbb7fb53ca218b18bc726102ff89a4b9533bda9340fc532dc4cc16d7cd1",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnChanges {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() header: string;\r\n  @Input() isLoading: boolean = undefined;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  itemCount: Observable<number>;\r\n  loadingSize = new Array(25).fill('_').map((x) => x);\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 25, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dataSource'] || changes['filterer'] || changes['sorter'] || changes['viewer'] || changes['loading']) {\r\n      if (this.filterer && this.sorter && this.viewer) {\r\n        if (this.isLoading === true) {\r\n          this.showLoading();\r\n        } else {\r\n          this.loadData();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    if (this.dataSource && this.filterer && this.sorter && this.viewer) {\r\n      const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n      this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n        map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n      );\r\n      this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n      this.views = this.viewer.getViews();\r\n      this.displayedColumns = this.viewer.state.pipe(\r\n        map((state) => {\r\n          return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n        })\r\n      );\r\n\r\n      this.renderedHtml = this.renderedData.pipe(\r\n        map((items) => {\r\n          const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n          items.forEach((item) => {\r\n            const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n            this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n            renderedHtml.set(item, itemRenderedViews);\r\n          });\r\n          return renderedHtml;\r\n        }),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  private showLoading() {\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.viewer.exportData(this.header?.toLowerCase()?.replace(' ', '_'), curatedData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "assignees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "dbAdded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "dbModified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "reporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ManifestState",
            "id": "interface-ManifestState-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isApiDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityRecentStats",
            "id": "interface-MemberActivityRecentStats-f60c561c9418a4a0af42a64922e42f4575e2d0272e2cebfe30b28f5479126bd032146e7e8e6006449b2e5883db8c4b81c82551fbe7e3e41c5ec481450c3eb824",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  lastNinetyDays?: number;\r\n  lastMonth?: number;\r\n  lastWeek?: number;\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStatsActivity[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lastMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lastNinetyDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lastWeek",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityRecentStats",
            "id": "interface-MemberActivityRecentStats-ffcd40637850919a7b208023a528cba6f08b8b06556c3d599a6b554ebe6d03ad8f1b18f1717148f27f7a8c5eee7e4b188f9de0e8b2ffbeebef9a2d94f7f329fe-1",
            "file": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  lastNinetyDays: number;\r\n  lastMonth: number;\r\n  lastWeek: number;\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStatsActivity[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lastMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastNinetyDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastWeek",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberActivityRecentStats-1"
        },
        {
            "name": "MemberActivityRecentStatsActivity",
            "id": "interface-MemberActivityRecentStatsActivity-f60c561c9418a4a0af42a64922e42f4575e2d0272e2cebfe30b28f5479126bd032146e7e8e6006449b2e5883db8c4b81c82551fbe7e3e41c5ec481450c3eb824",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  lastNinetyDays?: number;\r\n  lastMonth?: number;\r\n  lastWeek?: number;\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityRecentStatsActivity",
            "id": "interface-MemberActivityRecentStatsActivity-ffcd40637850919a7b208023a528cba6f08b8b06556c3d599a6b554ebe6d03ad8f1b18f1717148f27f7a8c5eee7e4b188f9de0e8b2ffbeebef9a2d94f7f329fe-1",
            "file": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  lastNinetyDays: number;\r\n  lastMonth: number;\r\n  lastWeek: number;\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberActivityRecentStatsActivity-1"
        },
        {
            "name": "MemberActivityStat",
            "id": "interface-MemberActivityStat-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityStats",
            "id": "interface-MemberActivityStats-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityStat[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityTime",
            "id": "interface-MemberActivityTime-0e229c407cb7e3944ddbdf8182f6494a84cf8c09a0c2a3da4f351d905a53de789a5d16917e2495a334781747f6c36ea30eb6acb7a089f50cc12b652bda6fe498",
            "file": "projects/data/src/lib/models/MemberActivityTime.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityTime {\r\n  id: string;\r\n  activities: MemberActivityTimeActivities[];\r\n}\r\n\r\ninterface MemberActivityTimeActivities {\r\n  date: Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityTimeActivities[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityTimeActivities",
            "id": "interface-MemberActivityTimeActivities-0e229c407cb7e3944ddbdf8182f6494a84cf8c09a0c2a3da4f351d905a53de789a5d16917e2495a334781747f6c36ea30eb6acb7a089f50cc12b652bda6fe498",
            "file": "projects/data/src/lib/models/MemberActivityTime.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityTime {\r\n  id: string;\r\n  activities: MemberActivityTimeActivities[];\r\n}\r\n\r\ninterface MemberActivityTimeActivities {\r\n  date: Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-363c00b399a461c5d00b80c913e00edbfcc7eeaa678a03bb9f7b2054c3551c77df9d59c9892c72ba35c07b225c60e3578eb0a9fbc68abbd3cdb1324efefe9156",
            "file": "projects/data/src/lib/clan/base-member-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseClanService } from './base-clan.service';\r\n//import { ClanDatabase } from './ClanDatabase';\r\n//import { StoreId, DBObject } from './app-indexed-db';\r\nimport { groupActivitiesByDate } from '../utility/group-activity-by-date';\r\n\r\n//import { Destiny2Service, DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup } from 'bungie-api-angular';\r\n\r\n// import { MemberProfile } from 'bungie-models';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of, from, defer, concat, EMPTY, forkJoin } from 'rxjs';\r\nimport { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { MemberActivityStats } from '../models/MemberActivityStat';\r\nimport { MemberActivityTime } from '../models/MemberActivityTime';\r\nimport { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from '../models';\r\n//import { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityTime } from 'projects/bungie-models/src/lib/models/MemberActivityTime';\r\n//import { MemberActivityStats } from 'projects/bungie-models/src/lib/models/MemberActivityStat';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\ninterface ActivityCollection {\r\n  activities: any[];\r\n}\r\nexport class BaseMemberActivityService extends BaseClanService {\r\n  private ACTIVITY_GET_COUNT = 250;\r\n  constructor(\r\n    private clanDbPBase: ClanDatabase,\r\n    private tableNamePBase: StoreId,\r\n    private apiKey: string,\r\n    // private d2ServiceBase: Destiny2Service,\r\n    public startValue: Date,\r\n    public maxRequestCount: Number,\r\n    public activityTypeId = 0\r\n  ) {\r\n    super(clanDbPBase, tableNamePBase);\r\n  }\r\n\r\n  public getMemberCharacterActivityFromAPI(member: MemberProfile, characterId: number, pageNumber = 0) {\r\n    // https://www.bungie.net/Platform/Destiny2/3/Account/4611686018483900283/Character/2305843009471454818/Stats/Activities/?count=250&mode=0&page=10\r\n\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.profile.data.userInfo.membershipType}/Account/${member.profile.data.userInfo.membershipId}/Character/${characterId}/Stats/Activities/?count=${this.ACTIVITY_GET_COUNT}&mode=${this.activityTypeId}&page=${pageNumber}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n\r\n    // return this.d2ServiceBase.destiny2GetActivityHistory(\r\n    //   characterId,\r\n    //   member.profile.data.userInfo.membershipId,\r\n    //   member.profile.data.userInfo.membershipType,\r\n    //   this.ACTIVITY_GET_COUNT,\r\n    //   this.activityTypeId,\r\n    //   pageNumber\r\n    // );\r\n  }\r\n\r\n  private activitiesContainExpiredYear(activities, expiration) {\r\n    if (!activities) {\r\n      return true;\r\n    }\r\n\r\n    return !!activities.find((x) => {\r\n      const activityYear = new Date(x.period);\r\n      return activityYear <= expiration;\r\n    });\r\n  }\r\n\r\n  private getAllRecentActivity(member: MemberProfile, characterId: number): Observable<ActivityCollection> {\r\n    const maxConcurrentCount = 4;\r\n    const fetchPage = (page = 0) => {\r\n      return this.getMemberCharacterActivityFromAPI(member, characterId, page).pipe(\r\n        map((x: any) => {\r\n          const nextPage =\r\n            this.activitiesContainExpiredYear(x?.Response?.activities, this.startValue) || page >= this.maxRequestCount\r\n              ? null\r\n              : page + maxConcurrentCount;\r\n\r\n          const activities = x?.Response?.activities || [];\r\n          return { activities, nextPage };\r\n        })\r\n      );\r\n    };\r\n\r\n    const getItems = (page) =>\r\n      defer(() => fetchPage(page)).pipe(\r\n        mergeMap(({ activities, nextPage }) => {\r\n          const items$ = from(activities);\r\n          const next$ = nextPage ? getItems(nextPage) : EMPTY;\r\n          return concat(items$, next$);\r\n        })\r\n      );\r\n\r\n    const batchedRequest = [];\r\n    for (let i = 0; i < maxConcurrentCount; i++) {\r\n      batchedRequest.push(getItems(i).pipe(toArray()));\r\n    }\r\n\r\n    return forkJoin(batchedRequest).pipe(\r\n      map((x: any) => {\r\n        return {\r\n          activities: x.flat()\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getMemberActivityId(member: MemberProfile, characterId: number) {\r\n    return `${this.getMemberProfileId(member)}-${characterId}`;\r\n  }\r\n  getMemberProfileId(member: MemberProfile) {\r\n    return `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`;\r\n  }\r\n\r\n  /**\r\n   *  Pulls character activity from cache and will return fresh data if cache is exipred\r\n   */\r\n  getMemberCharacterActivity(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean\r\n\r\n    // ): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    const characterActivityId = this.getMemberActivityId(member, characterId);\r\n\r\n    return from(this.getDataFromCache(clanId.toString(), characterActivityId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        // if (this.isCacheValid(cachedData, 720, new Date(member.profile.data.dateLastPlayed))) {\r\n        //   return of(cachedData.data);\r\n        // }\r\n\r\n        // return this.getFreshMemberCharacterActivity(clanId, member, characterId, characterActivityId, cachedData);\r\n\r\n        if (useCache) {\r\n          return this.verifyCacheIntegrity(clanId, member, characterId, cachedData);\r\n        }\r\n        return of(cachedData.data);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if Cached data is fresh enough to use. Triggers new call if too old.\r\n   *\r\n   */\r\n  verifyCacheIntegrity(clanId, memberProfile: MemberProfile, characterId, cachedData: DBObject) {\r\n    const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n    if (this.isCacheValid(cachedData, 720, new Date(memberProfile.profile.data.dateLastPlayed))) {\r\n      return of(cachedData.data);\r\n    }\r\n\r\n    return this.getFreshMemberCharacterActivity(clanId, memberProfile, characterId, characterActivityId, cachedData);\r\n  }\r\n\r\n  /**\r\n   * Calls for fresh character activity. Updates cache. Falls back on cache on failure.\r\n   */\r\n  getFreshMemberCharacterActivity(\r\n    clanId: string,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    characterActivityId: string,\r\n    cachedData: DBObject\r\n    //): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    return this.getAllRecentActivity(member, characterId).pipe(\r\n      map((activityResponse) => {\r\n        if (activityResponse.activities) {\r\n          // serialize:\r\n          const slimmedActivities = activityResponse.activities.map((x) => {\r\n            return clanMemberActivitySerializer(x);\r\n          });\r\n\r\n          this.updateDB(clanId, characterActivityId, slimmedActivities);\r\n          return slimmedActivities;\r\n        }\r\n        return of([]);\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error?.ErrorStatus === 'DestinyPrivacyRestriction') {\r\n          this.updateDB(clanId, characterActivityId, []);\r\n          return of([]);\r\n        }\r\n        if (cachedData && cachedData.data) {\r\n          return of(cachedData.data);\r\n        }\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  groupActivitiesToMember(memberProfile: MemberProfile, allActivities: DBObject[], activityMode: number = 0) {\r\n    const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n\r\n    const memberActivitiesDB = allActivities.filter((x) => x.id.startsWith(memberProfileId));\r\n\r\n    const memberActivitiesSerialized = memberActivitiesDB.map((activityDB) =>\r\n      activityDB.data.map((activity) => clanMemberActivitySerializer(activity))\r\n    );\r\n\r\n    const allFilteredActivities =\r\n      activityMode > 0\r\n        ? memberActivitiesSerialized.map((items) =>\r\n            items.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1)\r\n          )\r\n        : memberActivitiesSerialized;\r\n\r\n    const timed = groupActivitiesByDate([].concat(...allFilteredActivities));\r\n\r\n    return {\r\n      id: memberProfileId,\r\n      activities: timed\r\n    };\r\n  }\r\n\r\n  groupActivitiesToMembers(\r\n    memberProfiles: MemberProfile[],\r\n    allActivities: DBObject[],\r\n    activityMode: number = 0\r\n  ): any[] {\r\n    return memberProfiles.map((memberProfile) => {\r\n      return this.groupActivitiesToMember(memberProfile, allActivities, activityMode);\r\n    });\r\n  }\r\n\r\n  getAllActivitiesFromCache(\r\n    clanId: number,\r\n    memberProfiles: MemberProfile[],\r\n    activityMode = 0\r\n  ): Observable<MemberActivityTime[]> {\r\n    return from(this.getAllDataFromCache(clanId.toString())).pipe(\r\n      map((x) => {\r\n        const y = this.groupActivitiesToMembers(memberProfiles, x, activityMode);\r\n        return y;\r\n      })\r\n    );\r\n  }\r\n  // TODO: Turn this up to 11\r\n  updateAllActivityCache(clanId: number, memberProfiles: MemberProfile[], progress?: (done) => any) {\r\n    const memberProfilesObs = from(memberProfiles);\r\n    const cacheDataObs = from(this.getAllDataFromCache(clanId.toString()));\r\n\r\n    return cacheDataObs.pipe(\r\n      switchMap((cachedData) => {\r\n        let complete = 0;\r\n        return memberProfilesObs.pipe(\r\n          mergeMap((memberProfile) => {\r\n            if (!memberProfile?.profile?.data?.characterIds) {\r\n              return of();\r\n            }\r\n            return from(memberProfile.profile.data.characterIds).pipe(\r\n              mergeMap((characterId: number) => {\r\n                const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n                const characterActivityCache = cachedData.find((x) => x.id === characterActivityId);\r\n\r\n                return this.verifyCacheIntegrity(clanId, memberProfile, characterId, characterActivityCache);\r\n              }),\r\n              toArray(),\r\n              map((x) => {\r\n                const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n                return {\r\n                  id: memberProfileId\r\n                };\r\n              })\r\n            );\r\n          }, 3),\r\n          tap((x) => {\r\n            complete++;\r\n            if (progress) {\r\n              progress(complete);\r\n            }\r\n          }),\r\n          toArray()\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getMemberActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityStats> {\r\n    if (!member?.profile) {\r\n      return of(null);\r\n    }\r\n    return from(member.profile.data.characterIds).pipe(\r\n      mergeMap((characterId: number) => {\r\n        return this.getMemberCharacterActivitySerialized(clanId, member, characterId, useCache, activityMode);\r\n      }),\r\n      map((x) => {\r\n        return x.activities;\r\n      }),\r\n      toArray(),\r\n      map((x) => {\r\n        return {\r\n          id: `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`,\r\n          activities: [].concat(...x)\r\n        };\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n  getMemberCharacterActivitySerialized(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ) {\r\n    return this.getMemberCharacterActivity(clanId, member, characterId, useCache).pipe(\r\n      map((activity) => {\r\n        if (activityMode > 0) {\r\n          activity = activity.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1);\r\n        }\r\n        return {\r\n          activities: activity.map((a) => clanMemberActivitySerializer(a))\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-63af9742cb69db8cc3781e27ddd2538b008cfe29c97c20e292d5950dde500cafa8abe1f19cf54845c74971a3cb9dc1214c6dd17c86bfdf0fc9d821eb84bc693f-1",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyResponsesDestinyProfileResponse } from 'bungie-api-angular';\r\n\r\nexport interface MemberProfile extends DestinyResponsesDestinyProfileResponse {\r\n  id?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "DestinyResponsesDestinyProfileResponse",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberProfile-1"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-ce62e7b64544c29cd482e6c80ef9b9db6c6ce1064dfbab5fdf486270f4139c3fa45835f0796e784cde66190725807c2f3bf7cf30e2eddf819d56c45d80e55060-2",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of, throwError } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  private profileComponents = [100, 104, 200, 202, 800, 900];\r\n\r\n  // TODO: Pull this from somewhere else.\r\n  private TRACKED_HASHES = [3902035969, 2770852111];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getProfileFromAPI(member: ClanMember) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.destinyUserInfo.membershipType}/Profile/${\r\n      member.destinyUserInfo.membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (!data.Response) {\r\n            throw data;\r\n          }\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => {\r\n          console.log('error', err);\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, member);\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, member);\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap((member) => this.getSerializedProfile(clanId, member, collectionHashes, profileRecords), 100)\r\n    ) as Observable<T>;\r\n  }\r\n\r\n  getSerializedProfilesFromCache(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile[]> {\r\n    return from(members).pipe(\r\n      mergeMap((member) => this.getSerializedProfileFromCache(clanId, member, collectionHashes, profileRecords), 100),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedProfile(clanId, member, [], []), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(profile, this.TRACKED_HASHES, collectionHashes, profileRecords) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n  getSerializedProfileFromCache(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(\r\n          profile?.data || [],\r\n          this.TRACKED_HASHES,\r\n          collectionHashes,\r\n          profileRecords\r\n        ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "MemberProfile-2"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-460c3f90c5c8c013459de1380d72fafab2f5f3649e442868653ec22e854dfba2ba1ea0dac97628d6a02300c095fc41553aa3901c08102cbb728c6fad88686af6-3",
            "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseMemberActivityService } from '../base-member-activity.service';\r\n// import { ClanDatabase } from '../ClanDatabase';\r\n// import { StoreId } from '../app-indexed-db';\r\nimport { from, Observable } from 'rxjs';\r\nimport { mergeMap, map, toArray } from 'rxjs/operators';\r\n// import { MemberActivityStats, MemberProfile, MemberActivityRecentStats } from 'bungie-models';\r\n\r\n//import { clanMemberRecentActivitySerializer } from './clan-member-recent-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityRecentStats } from 'projects/bungie-models/src/lib/models/MemberActivityRecentStats';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\n// import { MemberProfile } from '../../models';\r\nimport { MemberActivityRecentStats } from '../../models/MemberActivityRecentStats';\r\nimport { clanMemberRecentActivitySerializer } from './clan-member-recent-activity.serializer';\r\n\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\nexport class ClanMemberRecentActivityService extends BaseMemberActivityService {\r\n  private concurrentRequests = 5;\r\n  constructor(private clanDB: ClanDatabase, private baseApiKey: string) {\r\n    super(\r\n      clanDB,\r\n      StoreId.MemberRecentActivities,\r\n      baseApiKey,\r\n      // d2Service,\r\n      new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 90)),\r\n      8\r\n    );\r\n  }\r\n  getSerializedProfileActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityRecentStats> {\r\n    return this.getMemberActivity(clanId, member, useCache, activityMode).pipe(\r\n      map((profileActivity) => {\r\n        return clanMemberRecentActivitySerializer(profileActivity);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "MemberProfile-3"
        },
        {
            "name": "MockListItem",
            "id": "interface-MockListItem-2d0f4d57b8580d738e53b9671eccd9d51750034e3ac75e1b4c75264c5c67b47b8664cce69bd0238a060f0f0fe865010b0c899febdcdd892f43623f5183860662",
            "file": "projects/components/src/lib/__mocks__/ListItems.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MockListItem {\r\n  id: number;\r\n  name: string;\r\n  startDate: string;\r\n  isPublic;\r\n}\r\nconst names = [\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n];\r\n\r\nexport const MOCK_LIST_ITEMS: MockListItem[] = names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n});\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-45bbc55de57abfb56541e267e2510259720f986a8d78f07efa4254a87df1a951c452af637835d33fe5bd695bd4cebeb136447e1e99c43eb67151e386901ef7af",
            "file": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\ninterface Notification {\r\n  title: string;\r\n  data: {\r\n    total?: number;\r\n    progress: number;\r\n    complete?: number;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss']\r\n})\r\nexport class NotificationsComponent {\r\n  @Input() notifications: Notification[];\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-22ada295925fee64fea7bd2fe71a1ef75781c3ff1f6f6ab9a0057e46d159b1bc8d2c6a6810c790517b1c6d177937c33fe9f25ffb2bf95c396079e9c02dc90ec1-1",
            "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  data: any;\r\n}\r\n\r\nexport interface NotificationState extends EntityState<Notification> {}\r\n\r\nexport const NotificationAdapter: EntityAdapter<Notification> = createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n});\r\n\r\nexport const NotificationInitialState: NotificationState = NotificationAdapter.getInitialState();\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Notification-1"
        },
        {
            "name": "NotificationState",
            "id": "interface-NotificationState-22ada295925fee64fea7bd2fe71a1ef75781c3ff1f6f6ab9a0057e46d159b1bc8d2c6a6810c790517b1c6d177937c33fe9f25ffb2bf95c396079e9c02dc90ec1",
            "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  data: any;\r\n}\r\n\r\nexport interface NotificationState extends EntityState<Notification> {}\r\n\r\nexport const NotificationAdapter: EntityAdapter<Notification> = createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n});\r\n\r\nexport const NotificationInitialState: NotificationState = NotificationAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "NumberFilter",
            "id": "interface-NumberFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberEquality",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NumberFiltererMetadata",
            "id": "interface-NumberFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ProfileRecentActivity",
            "id": "interface-ProfileRecentActivity-065d7821cbd01d674044482ef8f9d3d06a233b8f9edc6ed4831a875ed88965dccbe14300d22e6f77b61168c53d19e1c15abd648d73dcb424166ba5f1f4ae9f18",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/models/profile-recent-activity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActivityStats, MemberProfile } from '@destiny/data/models';\r\nimport { MemberActivityTime } from 'projects/data/src/lib/models/MemberActivityTime';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface ProfileRecentActivity {\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  clanMember: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n  profileActivity: ActivityStats;\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "profileActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityStats",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedViewWithChildren",
            "id": "interface-RenderedViewWithChildren-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RenderedView[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedViewWithText",
            "id": "interface-RenderedViewWithText-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedWithComponent",
            "id": "interface-RenderedWithComponent-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RosterActivityResources",
            "id": "interface-RosterActivityResources-ce60c0dfb0a1e3489a5d9b700e1e40af5c2a3098027c6d61c7c2d1e0bc360090c156d368db6f5c72e780b40dae97a08e4611f6a16daec21f03e5607f4031a2c7",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { BungieDatePipe, BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { combineLatest, filter, map, Observable, of, tap } from 'rxjs';\r\nimport { RecentActivityService } from '../data-access/recent-activity.service';\r\nimport { ProfileRecentActivity } from '../models/profile-recent-activity';\r\nimport {\r\n  CLAN_ROSTER_EXPORTER_METADATA,\r\n  RECENT_ACTIVITY_FILTERER_METADATA,\r\n  RECENT_ACTIVITY_SORTER_METADATA,\r\n  RECENT_ACTIVITY_VIEWER_METADATA\r\n} from './recent-activity-metadata';\r\n\r\ninterface RosterActivityResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-recent-activity-viewer',\r\n  templateUrl: './recent-activity.component.html',\r\n  styleUrls: ['./recent-activity.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RecentActivityComponent implements OnInit {\r\n  constructor(\r\n    private recentActivityService: RecentActivityService,\r\n    private playtimePipe: PlaytimePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n\r\n  clanProfileActivity$ = this.recentActivityService.activeClanActivity$;\r\n  activityViewer = new Viewer({\r\n    metadata: RECENT_ACTIVITY_VIEWER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  }, '2Dashboard_Roster_Activity_Table_Viewer');\r\n  activityFilterer = new Filterer({ metadata: RECENT_ACTIVITY_FILTERER_METADATA });\r\n  activitySorter = new Sorter({ metadata: RECENT_ACTIVITY_SORTER_METADATA });\r\n  activityExporter = new Exporter({\r\n    metadata: CLAN_ROSTER_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  });\r\n  isLoading = true;\r\n\r\n  rosterRecentActivityInfo$: Observable<RosterActivityResources> = combineLatest([this.clanProfileActivity$]).pipe(\r\n    map(([clanProfiles]) => {\r\n      return {\r\n        dataSource: new DataSource<ProfileRecentActivity>({ data: clanProfiles }),\r\n        viewer: this.activityViewer,\r\n        filterer: this.activityFilterer,\r\n        exporter: this.activityExporter,\r\n        sorter: this.activitySorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n  createViewContextProvider() {\r\n    return of((item: ProfileRecentActivity) => ({\r\n      item,\r\n      playTimePipe: this.playtimePipe,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n  ngOnInit(): void {}\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Exporter",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RosterResources",
            "id": "interface-RosterResources-490b8beb90e68565d04a7bcb79460fd35b0dfb644ed685a2062451766dfe8d499ab2197a967cb82c3fcdb2e606019f979fd99ae9f88a5205b0e6045dc07d2986",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewRef, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Grouper, Sorter, Viewer } from '@destiny/components';\r\nimport { combineLatest, delay, filter, map, Observable, of, tap } from 'rxjs';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { ClanMemberProfile, ClansRosterService } from '../data-access/clans-roster.service';\r\nimport { CLAN_ROSTER_VIEWER_METADATA } from './clan-roster-metadata';\r\nimport { CLAN_ROSTER_FILTERER_METADATA } from './clan-roster-metadata/ClanRosterFilterer';\r\nimport { CLAN_ROSTER_SORTER_METADATA } from './clan-roster-metadata/ClanRosterSorter';\r\nimport { CLAN_ROSTER_EXPORTER_METADATA } from './clan-roster-metadata/ClanRosterExporter';\r\n\r\ninterface RosterResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-clans-roster',\r\n  templateUrl: './clans-roster.component.html',\r\n  styleUrls: ['./clans-roster.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansRosterComponent {\r\n  constructor(\r\n    private clansRosterService: ClansRosterService,\r\n    private bungieDatePage: BungieDatePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n  // stuff2$ = this.clansRosterService.activeClanPeople$;\r\n  //members$ = this.clansRosterService.clanMembers$;\r\n  //profiles$ = this.clansRosterService.clanProfiles$;\r\n\r\n  rosterViewer = new Viewer(\r\n    {\r\n      metadata: CLAN_ROSTER_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Table_Viewer'\r\n  );\r\n  rosterFilter = new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA });\r\n  rosterSorter = new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA });\r\n  rosterExporter = new Exporter({ metadata: CLAN_ROSTER_EXPORTER_METADATA });\r\n  isLoading = true;\r\n\r\n  rosterInfo$: Observable<RosterResources> = this.clansRosterService.activeClanPeople$.pipe(\r\n    map((clanProfiles) => {\r\n      return {\r\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\r\n        viewer: this.rosterViewer,\r\n        filterer: this.rosterFilter,\r\n        exporter: this.rosterExporter,\r\n        sorter: this.rosterSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n\r\n  createViewContextProvider() {\r\n    return of((item: ClanMemberProfile) => ({\r\n      item,\r\n      datePipe: this.bungieDatePage,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Exporter",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SealClanMember",
            "id": "interface-SealClanMember-3e242353690b4108dce1f69feece0288ab2fc31787da6c45984b26f858e929f798ab35ceec751fdf8fa409837552c2a75779386416c785b47b1614bf75471531",
            "file": "projects/clan-dashboard/src/app/features/seals/models/seal-clan-member.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MemberProfile } from '@destiny/data/models';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface SealClanMember {\r\n  clanMember: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  sealProgression: {\r\n    completedTriumphCount: number;\r\n    totalTriumphCount:number;\r\n    completionPercentage: number;\r\n    isCompleted: boolean;\r\n    isGilded: boolean;\r\n    gildedCount: number;\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clanMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sealProgression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SealDefinition",
            "id": "interface-SealDefinition-0eb2eccbfd2e191fbdc32313950fdac7210bf4d82d5f1438009f15fd59a27a8b4d8a0fa3250fe93fa4cef771f89a145d04d29533756d8278879935f4809d464a",
            "file": "projects/data/src/lib/models/SealDefinition.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsPresentationDestinyPresentationNodeDefinition } from \"bungie-api-angular\";\r\n\r\nexport interface SealDefinition extends  DestinyDefinitionsPresentationDestinyPresentationNodeDefinition {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DestinyDefinitionsPresentationDestinyPresentationNodeDefinition"
        },
        {
            "name": "SealDetailsResources",
            "id": "interface-SealDetailsResources-1abdfd7ed5cd294d43d02ff384d71946a21b3f5c737226e29012ef609d5ae87ec6353f1cb14e9dbdbbc2623e5b5bca8cd85b78c4f2d0b5dacc20086c13b56ea8",
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { combineLatest, filter, map, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { SealsService } from '../data-access/seals.service';\r\nimport { SealClanMember } from '../models/seal-clan-member';\r\nimport {\r\n  SEAL_DETAILS_EXPORTER_METADATA,\r\n  SEAL_DETAILS_FILTERER_METADATA,\r\n  SEAL_DETAILS_SORTER_METADATA,\r\n  SEAL_DETAILS_VIEWER_METADATA\r\n} from './seal-details-metadata';\r\n\r\ninterface SealDetailsResources {\r\n  loading: Observable<boolean>;\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-seal-details',\r\n  templateUrl: './seal-details.component.html',\r\n  styleUrls: ['./seal-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SealDetailsComponent {\r\n  constructor(private route: ActivatedRoute, private sealsService: SealsService) {}\r\n\r\n  sealDetails$ = this.route.paramMap.pipe(\r\n    switchMap((params) => {\r\n      return this.sealsService.getSealDetails$(params.get('hash'));\r\n    })\r\n  );\r\n  isLoading = true;\r\n  sealDetailsViewer = new Viewer({\r\n    metadata: SEAL_DETAILS_VIEWER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  }, '2Dashboard_Seals_Details_Viewer');\r\n  sealDetailsFilterer = new Filterer({ metadata: SEAL_DETAILS_FILTERER_METADATA });\r\n  sealDetailsSorter = new Sorter({ metadata: SEAL_DETAILS_SORTER_METADATA });\r\n  sealDetailsExporter = new Exporter({\r\n    metadata: SEAL_DETAILS_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  });\r\n  createViewContextProvider() {\r\n    return of((item: SealClanMember) => ({\r\n      item\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n\r\n\r\n\r\n  sealDetailsInfo$:Observable<SealDetailsResources> = combineLatest([this.sealDetails$]).pipe(\r\n    map(([sealDetails]) => {\r\n      return {\r\n        loading: of(false),\r\n        dataSource: new DataSource<SealClanMember>({ data: sealDetails }),\r\n        viewer: this.sealDetailsViewer,\r\n        filterer: this.sealDetailsFilterer,\r\n        exporter: this.sealDetailsExporter,\r\n        sorter: this.sealDetailsSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n    //filter((ds) => !!ds)\r\n  );\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Exporter",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SealListItem",
            "id": "interface-SealListItem-328cdec5a78e52f1f82efa1cba0b11bd818fe20b1c16ef879beece0856db8296d15d4f37d6e9b7a4f126e7b49f701d3d558fe04132b47668be6f2bcebba5add2",
            "file": "projects/clan-dashboard/src/app/features/seals/models/seal-list-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SealDefinition } from '@destiny/data/models';\r\n\r\nexport interface SealListItem {\r\n  seal: SealDefinition;\r\n  totalMembers: number;\r\n  completedCount: number;\r\n  gildedCount: number;\r\n  isGilded: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "completedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "gildedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isGilded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "seal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealDefinition",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterMetadata",
            "id": "interface-SorterMetadata-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "comparator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortComparator<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterOptions",
            "id": "interface-SorterOptions-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterContextProvider<C>",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterState",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SorterMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterState",
            "id": "interface-SorterState-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "reverse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SortLabel",
            "id": "interface-SortLabel-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-aa7507e715de91b10c94c1f6921c70cd2a252fdca6a4b483fb4bc308d5be8b696b4f3676194f46b9d735e607a66d518766a7c29b292b4901d8343ea2b359f13a",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  clanName: string;\r\n  clanTag: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n  memberRecentActivityUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState"
        },
        {
            "name": "State",
            "id": "interface-State-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e-1",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "StateFilter",
            "id": "interface-StateFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateEquality",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateFiltererMetadata",
            "id": "interface-StateFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TablePage",
            "id": "interface-TablePage-24e1476103123c36d74a29f65830ff696cab0b36b73b712c3e13978acbdd2ef542925bbb7fb53ca218b18bc726102ff89a4b9533bda9340fc532dc4cc16d7cd1",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnChanges {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() header: string;\r\n  @Input() isLoading: boolean = undefined;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  itemCount: Observable<number>;\r\n  loadingSize = new Array(25).fill('_').map((x) => x);\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 25, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dataSource'] || changes['filterer'] || changes['sorter'] || changes['viewer'] || changes['loading']) {\r\n      if (this.filterer && this.sorter && this.viewer) {\r\n        if (this.isLoading === true) {\r\n          this.showLoading();\r\n        } else {\r\n          this.loadData();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    if (this.dataSource && this.filterer && this.sorter && this.viewer) {\r\n      const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n      this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n        map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n      );\r\n      this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n      this.views = this.viewer.getViews();\r\n      this.displayedColumns = this.viewer.state.pipe(\r\n        map((state) => {\r\n          return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n        })\r\n      );\r\n\r\n      this.renderedHtml = this.renderedData.pipe(\r\n        map((items) => {\r\n          const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n          items.forEach((item) => {\r\n            const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n            this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n            renderedHtml.set(item, itemRenderedViews);\r\n          });\r\n          return renderedHtml;\r\n        }),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  private showLoading() {\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.viewer.exportData(this.header?.toLowerCase()?.replace(' ', '_'), curatedData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextFilter",
            "id": "interface-TextFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextEquality",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextFiltererMetadata",
            "id": "interface-TextFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFilterAutocomplete<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserUserInfoCard",
            "id": "interface-UserUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-412de9841625217badeaaa446181087d6a0f07078c3cb0c7838be9f33a04b2f2b50e24c47de34e326a8a3bfe3fbd84dc96481cec052c5079439543799fb706e7",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { MemberTypeComponent } from '@destiny/components/icons';\r\nimport { ClassCellComponent } from '../../components/class-cell/class-cell.component';\r\nimport { ClanMemberProfile } from '../../data-access/clans-roster.service';\r\nimport { MembershipTypes } from '@destiny/data/models';\r\n\r\ninterface ViewContext {\r\n  item: ClanMemberProfile;\r\n  datePipe: BungieDatePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\n\r\nexport const CLAN_ROSTER_VIEWER_METADATA = new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      plainText: (item: ClanMemberProfile) => `${getMembershipType(item.member.destinyUserInfo.membershipType)}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        //        styles: {},\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member?.destinyUserInfo?.membershipType || 0 }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ClanMemberProfile) => `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member?.destinyUserInfo?.displayName || ''}` })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      plainText: (item: ClanMemberProfile) => `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member?.bungieNetUserInfo?.displayName || ''}` })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      plainText: (item: ClanMemberProfile) => ``,\r\n      render: (item: ClanMemberProfile) => {\r\n        const characterIds = item.profile?.profile?.data?.characterIds;\r\n        return {\r\n          classList: 'characters-cell',\r\n          children: characterIds?.map((id) => {\r\n            return {\r\n              classList: 'character-cell',\r\n              component: ClassCellComponent,\r\n              data: {\r\n                characterHash: id,\r\n                profile: item.profile\r\n              }\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        classList: 'power-cell',\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.activeScore}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.lifetimeScore}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clan',\r\n    {\r\n      label: 'Clan',\r\n      plainText: (item: ClanMemberProfile) => `${item.clan.clanName}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      plainText: (item: ClanMemberProfile, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ClanMemberProfile, context: ViewContext) => `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n]);\r\n\r\nfunction getMembershipType(value) {\r\n  switch (value) {\r\n    case MembershipTypes.Xbox:\r\n      return 'xbox';\r\n    case MembershipTypes.Psn:\r\n      return 'playstation';\r\n    case MembershipTypes.Steam:\r\n      return 'steam';\r\n    case MembershipTypes.Stadia:\r\n      return 'stadia';\r\n    default:\r\n      return ``;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "datePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDatePipe",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-cf4d28e4451ecbb3645121dcdaabcab34d987cb31d866ee04d0ff06a444763691e8d91571d51893bcc59a596e7744f4c27025cd2f96bff29dc0a64b66e2eb0e2-1",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExporterMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { MembershipTypes } from '@destiny/data/models/enums';\r\nimport { ProfileRecentActivity } from '../../models/profile-recent-activity';\r\ninterface ViewContext {\r\n  item: ProfileRecentActivity;\r\n  playTimePipe: PlaytimePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\n// import { MockListItem } from './ListItems';\r\nexport const CLAN_ROSTER_EXPORTER_METADATA = new Map<string, ExporterMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastWeek)}`\r\n    }\r\n  ],\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastMonth)}`\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90 Days (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastNinetyDays)}`\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      text: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile?.data?.dateLastPlayed as unknown as Date)}`\r\n    }\r\n  ]\r\n]);\r\n\r\nconst convertToMinutes = (totalSeconds) => String(Math.floor(totalSeconds / 60));\r\n",
            "properties": [
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileRecentActivity",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "playTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlaytimePipe",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ViewContext-1"
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-5e38e21ca568badeb18f0bb9ce2125dbba1a0b1265e644bce9ebd11e76eccc22ef27c41a40bd410a265d1cee116fafb44dfb13387fea9735857ffcd334a5627e-2",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe } from '@destiny/components/pipes';\r\nimport { PlaytimePipe } from '@destiny/components/pipes/playtime';\r\nimport { ProfileRecentActivity } from '../../models/profile-recent-activity';\r\n\r\ninterface ViewContext {\r\n  item: ProfileRecentActivity;\r\n  playTimePipe: PlaytimePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\nexport const RECENT_ACTIVITY_VIEWER_METADATA = new Map<string, ViewerMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clanMember?.destinyUserInfo?.displayName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90 Days',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n]);\r\n",
            "properties": [
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileRecentActivity",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "playTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlaytimePipe",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ViewContext-2"
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-b76cd7ef261706bd60868956369a362aed93e5e1074cd2088c4d44ee2f5bed5167e6bfaa7b6375083608fab5d3fd96ef139c61df4e5d2af79c48e09060248f52-3",
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { getMemberName } from '@destiny/data/utility';\r\nimport { SealClanMember } from '../../models/seal-clan-member';\r\n\r\ninterface ViewContext {\r\n  item: SealClanMember;\r\n}\r\n\r\nexport const SEAL_DETAILS_VIEWER_METADATA = new Map<string, ViewerMetadata<SealClanMember, ViewContext>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      plainText: (item: SealClanMember) => `${getMemberName(item.clanMember)}`,\r\n      render: (item: SealClanMember) => ({ text: `${getMemberName(item.clanMember)}` })\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      plainText: (item: SealClanMember) => `${item.clan.clanName}`,\r\n      render: (item: SealClanMember) => ({ text: `${item.clan.clanName}` })\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        text: item.sealProgression.isCompleted ? 'X' : ''\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isGilded ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        text: item.sealProgression.isGilded ? 'X' : ''\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.gildedCount || ''}`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.gildedCount || ''}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed Count',\r\n      plainText: (item: SealClanMember) =>\r\n        `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Completed',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.completionPercentage}%`\r\n      })\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n]);\r\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealClanMember",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "ViewContext-3"
        },
        {
            "name": "ViewerMetadata",
            "id": "interface-ViewerMetadata-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "isSticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "plainText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "render",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerOptions",
            "id": "interface-ViewerOptions-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerContextProvider<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerState",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewerMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerState",
            "id": "interface-ViewerState-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewLabel",
            "id": "interface-ViewLabel-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isSticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ActivityDefinitionService",
            "id": "injectable-ActivityDefinitionService-1f5510b4a23118a63d0a1e34a2639fdb113b22b34b461b39119448980cdda9e61d633669b6e0023ba4aa63a2d8dd313ae8aca02481e13c7a6700727a7bcfae2f",
            "file": "projects/clan-dashboard/src/app/core/definition-services/activity-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityDefinitionService  extends BaseDefinitionService<DestinyDefinitionsDestinyActivityDefinition> {}{\r\n}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ActivityModeDefinitionService",
            "id": "injectable-ActivityModeDefinitionService-8c396bade508f0cd61136e4ba5a2bb555e28e246d289b3ed3708d7d2794d961b159289e7a4cec5bda02957e0638b500c7ddbd70d7ad78d1a19430fc8363e44f5",
            "file": "projects/clan-dashboard/src/app/core/definition-services/activity-mode-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsDestinyActivityModeDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityModeDefinitionService extends BaseDefinitionService<DestinyDefinitionsDestinyActivityModeDefinition> {}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ClanDetailService",
            "id": "injectable-ClanDetailService-c6f1681573ffe3a34bc00026d92f50c406c3e082a52f7ea8d6080029d2ea5efdbe91df7d6e1205346dca45031eb9bbdde7fa56896163b34a45c8b880eced3916",
            "file": "projects/clan-dashboard/src/app/features/clan-details/data-access/clan-detail.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupV2Card, GroupV2Service } from 'bungie-api-angular';\r\nimport { forkJoin, map, Observable, take } from 'rxjs';\r\nimport { ClanDetailsModule } from '../clan-details.module';\r\n\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { addClan, removeClan } from '@core/store/clans/clans.actions';\r\n\r\n@Injectable({\r\n  //Note can't figure out how to provide in the module I want.\r\n  providedIn: 'root'\r\n})\r\nexport class ClanDetailService {\r\n  constructor(\r\n    private groupService: GroupV2Service,\r\n    private httpClient: HttpClient,\r\n    private store: Store,\r\n    private db: ClanDatabase\r\n  ) {}\r\n\r\n  getClan(clanId) {\r\n    return this.groupService.groupV2GetGroup(clanId).pipe(\r\n      map((clanResult) => {\r\n        return clanResult.Response.detail;\r\n      })\r\n    );\r\n  }\r\n\r\n  removeClan(clanId: string) {\r\n    this.store.dispatch(removeClan({ clanId }));\r\n    this.db.purgeDatabase(clanId);\r\n  }\r\n\r\n  addClan(clan: GroupsV2GroupV2Card) {\r\n    this.store.dispatch(\r\n      addClan({ clanId: clan.groupId.toString(), clanName: clan.name, clanTag: clan.clanInfo.clanCallsign || '' })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanDetailsService",
            "id": "injectable-ClanDetailsService-1340017e9078c9fa09690b0e7a9cf12281f6af9d54b40d3545e26c703262535d98eb1a8e22dfb47aed8c7eb273369ea81fa5e084fe1c4cf5802811105b3b142e",
            "file": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanDetails'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanDetails",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupV2Service } from 'bungie-api-angular';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { clanDetailSerializer } from './clan-detail-serializer';\r\nimport { CLAN_LEVEL_HASH } from '../../hashes/clan-details';\r\n\r\n@Injectable()\r\nexport class ClanDetailsService extends BaseClanService {\r\n  // private tableName: StoreId = 'ClanDetails';\r\n  private rowId = 'ClanDetails';\r\n\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n  private getClanDetailsFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetGroup(clanId as unknown as number);\r\n  }\r\n\r\n  private getClanDetails(clanId: string, ignoreOffline: boolean) {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanDetailsFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              const clanDetails = clanDetailSerializer(clanDetail.Response.detail, [CLAN_LEVEL_HASH]);\r\n              this.updateDB(clanId, this.rowId, clanDetails);\r\n\r\n              return clanDetails;\r\n            }\r\n            throw Error('Clan Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (error?.error?.ErrorStatus === 'SystemDisabled' && !ignoreOffline) {\r\n              throw Error('System Offline');\r\n            }\r\n\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getClanDetailsSerialized(clanId: string, ignoreOffline: boolean) {\r\n    return this.getClanDetails(clanId, ignoreOffline);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClanMembersService",
            "id": "injectable-ClanMembersService-621927e444c1fa804e9188f8d03c2618407ebb00476b7357ad29523ed927c081b383792067b983df2827461a794642d1f160ca07a94b78cc723c4449199424da",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanMembers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanMembers",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from, Observable } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n\r\n@Injectable()\r\nexport class ClanMembersService extends BaseClanService implements ClanMembersServiceInterface {\r\n  private rowId = 'ClanMembers';\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n\r\n  private getClanMembersFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetMembersOfGroup(1, clanId as unknown as number);\r\n  }\r\n\r\n  private getClanMembers(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanMembersFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              this.updateDB(clanId, this.rowId, clanDetail.Response.results);\r\n\r\n              return clanDetail.Response.results;\r\n            }\r\n            throw Error('Clan Members Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO do a lightweight cache\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return this.getClanMembers(clanId).pipe(\r\n      map((x) => {\r\n        // TODO; Serialize\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClansDetailsService",
            "id": "injectable-ClansDetailsService-129683e091b73ab8b1c71aff918b61b9b392331188735bd3b8cb9c3bb878265a96ccc5bff8b54a828930006a87db5f4b0ccdbf8c2bb5e72a200ffe2bda5e9862",
            "file": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "clanInfo$",
                    "defaultValue": "this.activeClanIds$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId, true);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClans } from '@core/store/clans';\r\nimport { from, of } from 'rxjs';\r\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\r\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\r\nimport { ClansDetailsModule } from '../clans-details-shell/clans-details.module';\r\n\r\ninterface ClanInfo {\r\n  ClanName: string;\r\n  ClanMemberCount: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: ClansDetailsModule\r\n})\r\nexport class ClansDetailsService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  clanInfo$ = this.activeClanIds$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId, true);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(private store: Store, private dataService: DataService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanSearchService",
            "id": "injectable-ClanSearchService-1fe5e08a32207792d5edcd9d0ec0160d61f57f2c130ca71dc760af9f211a2db0c3bbf03df2882d5b345221dc648d7e4c942adb670a9c0ff36bddc67997533834",
            "file": "projects/clan-dashboard/src/app/features/clan-search/data-access/clan-search.service.ts",
            "properties": [
                {
                    "name": "clans$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinedSearch",
                    "args": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findPlayerClan",
                    "args": [
                        {
                            "name": "selectedItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"people\" | \"xbox\" | \"playstation\" | \"steam\" | \"sports_esports\"",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numericClanSearch",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textClanSearch",
                    "args": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanSearchResultItem[]>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textPlayerSearch",
                    "args": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanSearchResultItem[]>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { addClan } from '@core/store/clans';\r\nimport { selectAllClans } from '@core/store/clans/clans.selectors';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupV2Card, GroupV2Service } from 'bungie-api-angular';\r\nimport { forkJoin, map, Observable, take } from 'rxjs';\r\nimport { ClanSearchModule } from '../clan-search-shell/clan-search-shell.module';\r\nimport { SearchErrorDialogComponent } from '../components/search-error-dialog/search-error-dialog.component';\r\nimport { ClanSearchResultItem } from '../models/ClanSearchResultItem';\r\n\r\n@Injectable({\r\n  providedIn: ClanSearchModule\r\n})\r\nexport class ClanSearchService {\r\n  constructor(\r\n    private groupService: GroupV2Service,\r\n    private httpClient: HttpClient,\r\n    private store: Store,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  clans$ = this.store.select(selectAllClans);\r\n\r\n  numericClanSearch(clanId) {\r\n    return this.groupService.groupV2GetGroup(clanId).pipe(\r\n      map((clanResult) => {\r\n        const c = clanResult.Response.detail;\r\n        return [\r\n          {\r\n            iconName: this.getIcon(-1),\r\n            type: 'clan',\r\n            name: c.name,\r\n            id: c.groupId.toString(),\r\n            clanInfo: c\r\n          }\r\n        ];\r\n      })\r\n    );\r\n  }\r\n  textClanSearch(currentQuery): Observable<ClanSearchResultItem[]> {\r\n    return this.groupService\r\n      .groupV2GroupSearch({\r\n        name: currentQuery,\r\n        groupType: 1,\r\n        groupMemberCountFilter: null,\r\n        tagText: null,\r\n        localeFilter: null\r\n      })\r\n      .pipe(\r\n        map((clanListResults) => {\r\n          const clanList = clanListResults.Response.results;\r\n\r\n          return clanList.slice(0, 10).map((c) => {\r\n            return {\r\n              iconName: this.getIcon(-1),\r\n              type: 'clan',\r\n              name: c.name,\r\n              id: c.groupId.toString(),\r\n              clanInfo: c\r\n            };\r\n          });\r\n        })\r\n      );\r\n  }\r\n  combinedSearch(currentQuery) {\r\n    const clanSearch = this.textClanSearch(currentQuery);\r\n    const playerSearch = this.textPlayerSearch(currentQuery);\r\n\r\n    return forkJoin([clanSearch, playerSearch]).pipe(\r\n      map(([clanSearchResults, playerSearchResults]) => {\r\n        return [...clanSearchResults, ...playerSearchResults];\r\n      })\r\n    );\r\n  }\r\n  textPlayerSearch(currentQuery): Observable<ClanSearchResultItem[]> {\r\n    const url = `https://www.bungie.net/Platform/User/Search/Prefix/${currentQuery}/0`;\r\n    return this.httpClient.get(url).pipe(\r\n      map((searchResults: any) => {\r\n        return searchResults.Response.searchResults.slice(0, 10).map((profile) => {\r\n          const displayName = `${profile.bungieGlobalDisplayName}#${profile.bungieGlobalDisplayNameCode}`;\r\n          const memberships = profile.destinyMemberships;\r\n          const crossSaveOverride = memberships.find((x) => x.crossSaveOverride !== 0);\r\n          let membership;\r\n          if (crossSaveOverride) {\r\n            membership = memberships.find((x) => x.membershipType === crossSaveOverride.crossSaveOverride);\r\n          } else {\r\n            membership = memberships[0];\r\n          }\r\n\r\n          return {\r\n            iconName: this.getIcon(membership.membershipType),\r\n            name: displayName,\r\n            memberInfo: membership,\r\n            type: 'player'\r\n          };\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  findPlayerClan(selectedItem) {\r\n    return this.groupService\r\n      .groupV2GetGroupsForMember(0, 1, selectedItem.membershipId, selectedItem.membershipType)\r\n      .pipe(take(1))\r\n      .subscribe(({ Response }) => {\r\n        if (Response.totalResults > 0) {\r\n          //this.persistSelection(Response.results[0]?.group);\r\n          //this.open(Response.results[0]?.group);\r\n          this.addClan(Response.results[0]?.group);\r\n        } else {\r\n          this.dialog.open(SearchErrorDialogComponent, { data: 'No clan found for the user.' });\r\n        }\r\n      });\r\n  }\r\n\r\n  addClan(clan: GroupsV2GroupV2Card) {\r\n    this.store.dispatch(\r\n      addClan({ clanId: clan.groupId.toString(), clanName: clan.name, clanTag: clan.clanInfo.clanCallsign || '' })\r\n    );\r\n  }\r\n\r\n  getIcon(type: number) {\r\n    switch (type) {\r\n      case -1:\r\n        return 'people';\r\n      case 1:\r\n        return 'xbox';\r\n      case 2:\r\n        return 'playstation';\r\n      case 3:\r\n        return 'steam';\r\n      default:\r\n        return 'sports_esports';\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansEffects",
            "id": "injectable-ClansEffects-8226e516d1c6adcd2009b8a02cd5b53c81a870504d025e7d6a8fb4d56c7f09135dc67c056c1005d93fc6ef826ecc6e416faf99fa42ea73c4e027e4b989bedf37",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
            "properties": [
                {
                    "name": "persistSettings$",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(\r\n          clanActions.addClan,\r\n          clanActions.removeClan,\r\n          clanActions.setClans,\r\n          clanActions.updateClan\r\n        ),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updateLastMemberActivitySync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanMemberActivitySync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, memberRecentActivityUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "updateLastProfileSync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { LocalStorageService } from '@core/services/local-storage.service';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType, concatLatestFrom } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of, combineLatest, merge } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport * as clanActions from './clans.actions';\r\nimport { selectClansState } from './clans.selectors';\r\nimport { tap, withLatestFrom, distinctUntilChanged, filter } from 'rxjs/operators';\r\n\r\nconst CLANS_KEY = 'clans';\r\n@Injectable()\r\nexport class ClansEffects {\r\n  constructor(private actions$: Actions, private store: Store, private localStorageService: LocalStorageService) {}\r\n\r\n  persistSettings$ = createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(\r\n          clanActions.addClan,\r\n          clanActions.removeClan,\r\n          clanActions.setClans,\r\n          clanActions.updateClan\r\n        ),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  updateLastProfileSync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n\r\n  updateLastMemberActivitySync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanMemberActivitySync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, memberRecentActivityUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansMembersService",
            "id": "injectable-ClansMembersService-f8582b47fd7d3be4aa17f488a2e18db929e942ee2dd9e13092336a93b0cd7dd842d6ed26d97cce34f6ec831363ab69c7ce97a51404d77f9d6220b908143bb1a1",
            "file": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
            "properties": [
                {
                    "name": "_clanMembers$",
                    "defaultValue": "this.activeClans$.pipe(\r\n    switchMap((activeClans) => {\r\n      return from(activeClans).pipe(\r\n        mergeMap((clan) => {\r\n          return this.memberService.getClanMembersSerialized(clan.clanId).pipe(\r\n            map((result) => {\r\n              return { clan, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      ) as Observable<ClanConfigMembers[]>;\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activeClans$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "clanMembers$",
                    "defaultValue": "this.reloadClanMembers$.pipe(\r\n    mergeMap(() => this._clanMembers$),\r\n    shareReplay(1)\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reloadClanMembers$",
                    "defaultValue": "new BehaviorSubject<void>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "forceReload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  from,\r\n  map,\r\n  mergeMap,\r\n  Observable,\r\n  shareReplay,\r\n  Subject,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  tap,\r\n  toArray\r\n} from 'rxjs';\r\nimport {\r\n  selectEnabledClans,\r\n  selectEnabledClanIds,\r\n  selectLastRecentActivityUpdate\r\n} from '../store/clans/clans.selectors';\r\n\r\nexport interface ClanConfigMembers {\r\n  clan: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClansMembersService {\r\n  private reloadClanMembers$ = new BehaviorSubject<void>(undefined);\r\n\r\n  activeClans$ = this.store.select(selectEnabledClans);\r\n\r\n  private _clanMembers$ = this.activeClans$.pipe(\r\n    switchMap((activeClans) => {\r\n      return from(activeClans).pipe(\r\n        mergeMap((clan) => {\r\n          return this.memberService.getClanMembersSerialized(clan.clanId).pipe(\r\n            map((result) => {\r\n              return { clan, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      ) as Observable<ClanConfigMembers[]>;\r\n    })\r\n  );\r\n\r\n  public clanMembers$ = this.reloadClanMembers$.pipe(\r\n    mergeMap(() => this._clanMembers$),\r\n    shareReplay(1)\r\n  );\r\n\r\n  forceReload() {\r\n    // Calling next will complete the current cache instance\r\n    this.reloadClanMembers$.next();\r\n  }\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansRosterService",
            "id": "injectable-ClansRosterService-2ca2f1672168314f9ff3af75b6b286f788e36ecc3a2320ae83f1c1ba64137bb8d44aa4717331541e60f0b66c9d33d2d9934a82aaa660527a3cb603d4bafc0e7b",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/data-access/clans-roster.service.ts",
            "properties": [
                {
                    "name": "activeClanPeople$",
                    "defaultValue": "this.clanProfiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(clanAndMembers.clan.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              switchMap((resultProfiles: MemberProfile[]) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    },\r\n                    member,\r\n                    profile: resultProfiles.find((profile) => {\r\n                      return getClanMemberId(member) === getMemberProfileId(profile);\r\n                    })\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClanIds, selectEnabledClans, selectLastProfileUpdate } from '@core/store/clans';\r\nimport {\r\n  forkJoin,\r\n  from,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  tap,\r\n  toArray,\r\n  combineLatest,\r\n  distinctUntilChanged,\r\n  Observable\r\n} from 'rxjs';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\n\r\nexport interface ClanMemberProfile {\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  member: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n}\r\n\r\n@Injectable()\r\nexport class ClansRosterService {\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(clanAndMembers.clan.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              switchMap((resultProfiles: MemberProfile[]) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    },\r\n                    member,\r\n                    profile: resultProfiles.find((profile) => {\r\n                      return getClanMemberId(member) === getMemberProfileId(profile);\r\n                    })\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  activeClanPeople$ = this.clanProfiles$;\r\n\r\n  constructor(private memberService: ClansMembersService, private profileService: ProfileService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanUpdaterService",
            "id": "injectable-ClanUpdaterService-a37c1e79e635b8a3d6dbbf4bda0c847d12b4fba298a90af78eec21f532ed359eac73cd91488e8e8c27e62b132756d2188cd60d98e44cfc944df17e0ab5ae3526",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [
                {
                    "name": "clanUpdate",
                    "args": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "memberUpdate",
                    "args": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  mergeMap,\r\n  map,\r\n  catchError,\r\n  toArray,\r\n  switchMap,\r\n  tap,\r\n  take,\r\n  filter,\r\n  distinctUntilChanged,\r\n  concatMap\r\n} from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClan, updateClanProfileSync } from '../../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ProfileUpdaterService } from './profile-updater.service';\r\nimport { MemberActivityUpdaterService } from './member-activity-updater.service';\r\nimport { ClanDetailsService } from '@destiny/data/clan/clan-details';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AppOfflineDialogComponent } from '../../layout/app-offline-dialog/app-offline-dialog.component';\r\n\r\nexport interface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n  profiles?: any[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n  showLog = true;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig,\r\n    private clanDetailsService: ClanDetailsService,\r\n    private profileUpdaterService: ProfileUpdaterService,\r\n    private memberActivityUpdaterService: MemberActivityUpdaterService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      take(1),\r\n      tap((x) => this.showLog && console.log('Starting Updater', x)),\r\n      switchMap((activeClans) => this.clanUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Starting Member Updater', x)),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profileUpdaterService.profilesUpdate(clans)),\r\n      tap((x) => this.showLog && console.log('Member Profile Update Complete', x)),\r\n      switchMap((clans) => this.memberActivityUpdaterService.membersActivityUpdate(clans)),\r\n      tap((x) => this.showLog && console.log('Member Recent Activity Update Complete', x))\r\n    );\r\n  }\r\n\r\n  clanUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      // TODO: Double check concat map\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        //concatMap((clanConfig: ClanConfig) => {\r\n        return this.clanDetailsService.getClanDetailsSerialized(clanConfig.clanId, false).pipe(\r\n          map((result) => {\r\n            const newConfig = {\r\n              ...clanConfig,\r\n              clanName: result.name,\r\n              clanTag: result.clanInfo.clanCallsign\r\n            };\r\n            this.store.dispatch(updateClan({ clan: newConfig }));\r\n\r\n            return newConfig;\r\n          })\r\n        );\r\n      }, 1),\r\n\r\n      toArray(),\r\n      catchError((err) => {\r\n        if (err.message === 'System Offline') {\r\n          const acknowledgeOffline = window.sessionStorage.getItem(\r\n            this.appConfig.constants.D2DASHBOARD_ACKNOWLEDGE_OFFLINE\r\n          );\r\n          if (!acknowledgeOffline) {\r\n            this.dialog.open(AppOfflineDialogComponent);\r\n          }\r\n        }\r\n        throw err;\r\n      })\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDetailsService",
                        "type": "ClanDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileUpdaterService",
                        "type": "ProfileUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberActivityUpdaterService",
                        "type": "MemberActivityUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDetailsService",
                        "type": "ClanDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileUpdaterService",
                        "type": "ProfileUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberActivityUpdaterService",
                        "type": "MemberActivityUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-deaa322a3b7e2c1a0c821dc259fbcafd8abac7ad5b1cfcb6db3a6b90e49769a71382b4566241aa68194864bf1b44155a93c1f82ba8b84d51115c69c5914f4ce1",
            "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTests that localStorage exists, can be written to, and read from.",
                    "description": "<p>Tests that localStorage exists, can be written to, and read from.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nconst APP_PREFIX = 'D2DASH-';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() {}\r\n\r\n  static loadInitialState() {\r\n    return Object.keys(localStorage).reduce((state: any, storageKey) => {\r\n      if (storageKey.includes(APP_PREFIX)) {\r\n        const stateKeys = storageKey\r\n          .replace(APP_PREFIX, '')\r\n          //.toLowerCase()\r\n          .split('.')\r\n          .map((key) =>\r\n            key\r\n              .split('-')\r\n              .map((token, index) => (index === 0 ? token : token.charAt(0).toUpperCase() + token.slice(1)))\r\n              .join('')\r\n          );\r\n        let currentStateRef = state;\r\n        stateKeys.forEach((key, index) => {\r\n          if (index === stateKeys.length - 1) {\r\n            currentStateRef[key] = JSON.parse(localStorage.getItem(storageKey));\r\n            return;\r\n          }\r\n          currentStateRef[key] = currentStateRef[key] || {};\r\n          currentStateRef = currentStateRef[key];\r\n        });\r\n      }\r\n      return state;\r\n    }, {});\r\n  }\r\n\r\n  setItem(key: string, value: any) {\r\n    localStorage.setItem(`${APP_PREFIX}${key}`, JSON.stringify(value));\r\n  }\r\n\r\n  getItem(key: string) {\r\n    return JSON.parse(localStorage.getItem(`${APP_PREFIX}${key}`));\r\n  }\r\n\r\n  removeItem(key: string) {\r\n    localStorage.removeItem(`${APP_PREFIX}${key}`);\r\n  }\r\n\r\n  /** Tests that localStorage exists, can be written to, and read from. */\r\n  testLocalStorage() {\r\n    const testValue = 'testValue';\r\n    const testKey = 'testKey';\r\n    let retrievedValue: string;\r\n    const errorMessage = 'localStorage did not return expected value';\r\n\r\n    this.setItem(testKey, testValue);\r\n    retrievedValue = this.getItem(testKey);\r\n    this.removeItem(testKey);\r\n\r\n    if (retrievedValue !== testValue) {\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ManifestDatabaseService",
            "id": "injectable-ManifestDatabaseService-6f8892c42255d27eabc0ee0cfc52060927c17710ed345276ac4757ad4d90e58199cff3b4fd91c7ebc90ac959cfac592532666a46c43c9bd1ff932bb4eb846a3b",
            "file": "projects/data/src/lib/manifest/manifest-database.service.ts",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValues",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppIndexedDb, StoreId } from '../db/app-indexed-db';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestDatabaseService {\r\n\r\n  private database: AppIndexedDb;\r\n\r\n  getValues(repository: string): Promise<any[]> {\r\n    return this.getDatabase(repository).getAllData('allData');\r\n  }\r\n\r\n  closeDatabase(repository: string) {\r\n    return this.getDatabase(repository).close();\r\n  }\r\n\r\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\r\n    return this.getDatabase(repository).updateValues(entities, type);\r\n  }\r\n\r\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\r\n    return this.getDatabase(repository).removeValues(ids, type);\r\n  }\r\n\r\n  removeAll(repository: string, type: StoreId) {\r\n    return this.getDatabase(repository).removeAllValues(type);\r\n  }\r\n\r\n  private getDatabase(repository: string) {\r\n    if (this.database && this.database.name === repository) {\r\n      return this.database;\r\n    }\r\n\r\n    if (this.database) {\r\n      this.database.close();\r\n    }\r\n\r\n    this.database = new AppIndexedDb(repository);\r\n    return this.database;\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "ManifestEffects",
            "id": "injectable-ManifestEffects-365e4c14b9d9983fc71afee97b3b3a3080268ca76b81b9493e833c34cccebae3a9781fc6a66d1ac6ba3315d77320f826302b85d101dea8fdd0f254c3a0646d40",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
            "properties": [
                {
                    "name": "loadManifest$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { loadManifest, loadManifestComplete, loadManifestFailure } from './manifest.actions';\r\n\r\n@Injectable()\r\nexport class ManifestEffects {\r\n  constructor(private actions$: Actions, private manifestService: ManifestService, private store: Store) {}\r\n\r\n  loadManifest$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestLoaderService",
            "id": "injectable-ManifestLoaderService-a9e706bee60e02635b39679b5f52141fd6e4c1e1b4d916af3979d084d63d9fd83afb541608ef386bf302c575f219b2acf7450cf65e8077e969c6370b6864d199",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getManifest",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getManifestFromCache",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadManifestData",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'"
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CachedManifest>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pruneTables",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestDefinitionsArchive",
                    "args": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\nimport { ManifestDatabaseService } from './manifest-database.service';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v1';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(private d2service: Destiny2Service, private db: ManifestDatabaseService) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate > nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    return this.db.getValues('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        this.db.closeDatabase('manifest');\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.update('manifest', 'allData', [dbObject]).then((db) => {\r\n            this.db.closeDatabase('manifest');\r\n          });\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "ManifestDatabaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "ManifestDatabaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestService",
            "id": "injectable-ManifestService-87d35cc8b1920e8fa2230779bc7a3d02257987b5a15ea98c6fa2128b70b3ced19e2c657697bcec1bd3c2ccd19824f8a1853c3b731e4a738e983cc13440ba6f4a",
            "file": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadManifest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivityDefinitionService } from '@core/definition-services/activity-definition.service';\r\nimport { ActivityModeDefinitionService } from '@core/definition-services/activity-mode-definition.service';\r\nimport { MilestoneDefinitionService } from '@core/definition-services/milestone-definition.service';\r\nimport { PresentationNodeDefinitionService } from '@core/definition-services/presentation-node-definition.service';\r\nimport { RecordDefinitionService } from '@core/definition-services/record-definition.service';\r\nimport { ManifestLoaderService } from '@destiny/data/manifest';\r\nimport { catchError, map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestService {\r\n  constructor(\r\n    private loader: ManifestLoaderService,\r\n    private activityService: ActivityDefinitionService,\r\n    private activityModeService: ActivityModeDefinitionService,\r\n    private milestoneDefinitionService: MilestoneDefinitionService,\r\n    private presentationNodeDefinitionService: PresentationNodeDefinitionService,\r\n    private recordDefinitionService: RecordDefinitionService\r\n  ) {}\r\n\r\n  loadManifest() {\r\n    console.time('loadManifest');\r\n    const tables = [\r\n      //'DestinyChecklistDefinition',\r\n      //'DestinyObjectiveDefinition',\r\n      //'DestinyStatDefinition',\r\n      //'DestinyVendorDefinition',\r\n      //'DestinyInventoryItemDefinition',\r\n      //'DestinyClassDefinition',\r\n      //'DestinySandboxPerkDefinition',\r\n      //'DestinyEnergyTypeDefinition',\r\n      //'DestinyCollectibleDefinition',\r\n      'DestinyPresentationNodeDefinition',\r\n      'DestinyRecordDefinition',\r\n      'DestinySeasonDefinition',\r\n      //'DestinySeasonPassDefinition',\r\n      'DestinyMilestoneDefinition',\r\n      'DestinyActivityDefinition',\r\n      'DestinyActivityModeDefinition'\r\n      //'DestinyPlaceDefinition',\r\n      //'DestinyFactionDefinition'\r\n    ];\r\n    return this.loader.loadManifestData('en', tables).pipe(\r\n      map((x) => {\r\n        if (x && x.data) {\r\n          if (x.data.DestinyActivityModeDefinition) {\r\n            this.activityModeService.initializeCache(x.data.DestinyActivityModeDefinition);\r\n          }\r\n          if (x.data.DestinyActivityDefinition) {\r\n            this.activityService.initializeCache(x.data.DestinyActivityDefinition);\r\n          }\r\n\r\n          if (x.data.DestinyMilestoneDefinition) {\r\n            this.milestoneDefinitionService.initializeCache(x.data.DestinyMilestoneDefinition);\r\n          }\r\n\r\n          if (x.data.DestinyRecordDefinition) {\r\n            this.recordDefinitionService.initializeCache(x.data.DestinyRecordDefinition);\r\n          }\r\n\r\n          if (x.data.DestinyPresentationNodeDefinition) {\r\n            this.presentationNodeDefinitionService.initializeCache(x.data.DestinyPresentationNodeDefinition);\r\n          }\r\n        }\r\n\r\n        console.timeEnd('loadManifest');\r\n        return true;\r\n      }),\r\n      catchError((error) => {\r\n        console.log('caught error');\r\n        throw error;\r\n      })\r\n    );\r\n    // .catch((err: any) => {\r\n    //   console.error(err);\r\n    // });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "presentationNodeDefinitionService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recordDefinitionService",
                        "type": "RecordDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "presentationNodeDefinitionService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recordDefinitionService",
                        "type": "RecordDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemberActivityUpdaterService",
            "id": "injectable-MemberActivityUpdaterService-60318c2fe87f6f8cda32579c4ef3fd7b4fef531d526624470570416e59c47697a3858cb9ddf172b68dff57ad9543e39edec5b2ca49828081b70ad9bd6a82da0f",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/member-activity-updater.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "memberActivityUpdate",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "membersActivityUpdate",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { ProfileRecentActivityWorkerService } from '../../../workers/profile-recent-activity/profile-recent-activity.service';\r\nimport { ClanConfigMembers } from './clan-updater.service';\r\nimport { filter, from, map, mergeMap, Observable, of, take, toArray } from 'rxjs';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { updateClanMemberActivitySync } from '@core/store/clans';\r\nimport { addNotification, removeNotification, updateNotification } from '../../store/notifications';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MemberActivityUpdaterService {\r\n  constructor(\r\n    private store: Store,\r\n    private profileRecentActivityWorkerService: ProfileRecentActivityWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n\r\n  membersActivityUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      mergeMap((x) => {\r\n        return this.memberActivityUpdate(x);\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  memberActivityUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.memberRecentActivityUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      this.store.dispatch(\r\n        addNotification({\r\n          notification: {\r\n            id: 'memberProfile',\r\n            title: `Updating ${clan.clanConfig.clanName} Recent Activity`,\r\n            data: { progress: 0, total: clan.members.length }\r\n          }\r\n        })\r\n      );\r\n\r\n      const progress = (progressCount) => {\r\n        this.store.dispatch(\r\n          updateNotification({\r\n            notification: {\r\n              id: 'memberProfile',\r\n              title: `Updating ${clan.clanConfig.clanName} Recent Activity`,\r\n              data: { progress: progressCount, total: clan.members.length }\r\n            }\r\n          })\r\n        );\r\n      };\r\n\r\n      return this.profileRecentActivityWorkerService\r\n        .updateAllRecentActivityCache(clan.clanConfig.clanId, clan.profiles, progress)\r\n        .pipe(\r\n          take(1),\r\n          map((x) => {\r\n\r\n            // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n            this.store.dispatch(\r\n              removeNotification({\r\n                notification: {\r\n                  id: 'memberProfile',\r\n                  title: `Updating ${clan.clanConfig.clanName} Recent Activity`,\r\n                  data: { progress: clan.members.length, total: clan.members.length }\r\n                }\r\n              })\r\n            );\r\n\r\n            // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n            this.store.dispatch(updateClanMemberActivitySync({ clanId: clan.clanConfig.clanId }));\r\n\r\n            return clan;\r\n          })\r\n        );\r\n    }\r\n    return of(clan);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MilestoneDefinitionService",
            "id": "injectable-MilestoneDefinitionService-f2e895e7c658849bccec2344fe20302066ad808eb408ac1aa06da71f08e1f0868f5fe67640dc25f2065cf4387fd00418eb3c1f991ff566c5d644aa0050872b83",
            "file": "projects/clan-dashboard/src/app/core/definition-services/milestone-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsMilestonesDestinyMilestoneDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MilestoneDefinitionService extends BaseDefinitionService<DestinyDefinitionsMilestonesDestinyMilestoneDefinition> {}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "PresentationNodeDefinitionService",
            "id": "injectable-PresentationNodeDefinitionService-309c4c6b9d8ea09fe4c9fa9633d482d63323e32723d74cca8bee213311e18c1ce1f523fdf2b57262f087e3efbab1cc89ea909ae1aec1f774d2400f9c46699420",
            "file": "projects/clan-dashboard/src/app/core/definition-services/presentation-node-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsPresentationDestinyPresentationNodeDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PresentationNodeDefinitionService  extends BaseDefinitionService<DestinyDefinitionsPresentationDestinyPresentationNodeDefinition> {\r\n\r\n}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ProfileRecentActivityWorkerService",
            "id": "injectable-ProfileRecentActivityWorkerService-0a02f3b9dade59f738c14bf43c25158fd885f6c0aaa99007e7b3602ee3460cdf2f1fa4233a20883d80f80bf5693ee5e912acdcc141bc0135a3198689ee8dd525",
            "file": "projects/clan-dashboard/src/app/workers/profile-recent-activity/profile-recent-activity.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllRecentActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRecentClanActivitiesByActivityId",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllRecentActivityCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MemberProfile } from 'projects/data/src/lib/models';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileRecentActivityWorkerService {\r\n  constructor() {}\r\n  updateAllRecentActivityCache(clanId: string, clanMembers: any[], progress?: (done) => any): Observable<boolean> {\r\n    const activityCacheComplete: Subject<boolean> = new Subject();\r\n    const worker = new Worker(new URL('./profile-recent-activity-updater.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        activityCacheComplete.next(true);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return activityCacheComplete;\r\n  }\r\n\r\n  //getAllRecentActivitiesFromCache(clanId: string, memberProfiles: MemberProfile[]): Observable<any> {\r\n  getAllRecentActivitiesFromCache(clanId: string, memberProfiles: any[]): Observable<any> {\r\n    const memberActivities = new Subject();\r\n    const worker = new Worker(new URL('./profile-recent-activity-getter.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      memberActivities.next(data.data);\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      memberProfiles,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return memberActivities;\r\n  }\r\n\r\n  getAllRecentClanActivitiesByActivityId(clanId: string, memberProfiles: MemberProfile[], activityId: number): Observable<any> {\r\n    const memberActivities = new Subject();\r\n    const worker = new Worker(new URL('./clan-activity-recent-activity-getter.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      memberActivities.next(data.data);\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      memberProfiles,\r\n      apiKey: environment.apiKey,\r\n      activityId\r\n    });\r\n    return memberActivities;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "ProfileUpdaterService",
            "id": "injectable-ProfileUpdaterService-e1cdad3cee91ced595b8b5fad733ef56708576554e3a8463f1d18721cf07fe922eaf22c28d43843475ee97cf853adb21856b5ac65abb2846985e568af529700f",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/profile-updater.service.ts",
            "properties": [
                {
                    "name": "profileService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileService",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "profilesUpdate",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileUpdate",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap, take, filter } from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClanProfileSync } from '../../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ClanConfigMembers } from './clan-updater.service';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { ClansMembersService } from '../clans-members.service';\r\nimport { addNotification, removeNotification, updateNotification } from '../../store/notifications';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileUpdaterService {\r\n  profileService: ProfileService;\r\n  constructor(\r\n    private store: Store,\r\n    private clanMemberService: ClansMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {\r\n    const clanDB = new ClanDatabase();\r\n    this.profileService = new ProfileService(clanDB, appConfig.apiKey);\r\n  }\r\n\r\n  profilesUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      // TODO Verify Merge Map is appropriate for this.\r\n      mergeMap((x) => {\r\n        return this.profileUpdate(x).pipe(map((cm) => cm));\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  profileUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.profileUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      this.store.dispatch(\r\n        addNotification({\r\n          notification: {\r\n            id: 'memberProfile',\r\n            title: `Updating ${clan.clanConfig.clanName} Profiles`,\r\n            data: { progress: 0, total: clan.members.length }\r\n          }\r\n        })\r\n      );\r\n      const progress = (progressCount) => {\r\n        this.store.dispatch(\r\n          updateNotification({\r\n            notification: {\r\n              id: 'memberProfile',\r\n              title: `Updating ${clan.clanConfig.clanName} Profiles`, // TODO ADD clann\r\n              data: { progress: progressCount, total: clan.members.length }\r\n            }\r\n          })\r\n        );\r\n      };\r\n      return this.profileWorkerService.loadProfiles(clan.clanConfig.clanId, clan.members, progress).pipe(\r\n        filter((x) => x.length > 0),\r\n        take(1),\r\n        map((x) => {\r\n\r\n          // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n          this.store.dispatch(\r\n            removeNotification({\r\n              notification: {\r\n                id: 'memberProfile',\r\n                title: `Updating ${clan.clanConfig.clanName} Profiles`,\r\n                data: { progress: clan.members.length, total: clan.members.length }\r\n              }\r\n            })\r\n          );\r\n\r\n          // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n          this.store.dispatch(updateClanProfileSync({ clanId: clan.clanConfig.clanId }));\r\n\r\n          this.clanMemberService.forceReload();\r\n          return {\r\n            ...clan,\r\n            profiles: x\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    return this.profileService.getSerializedProfilesFromCache(clan.clanConfig.clanId, clan.members, [], []).pipe(\r\n      map((x) => {\r\n        return { ...clan, profiles: x };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanMemberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanMemberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileWorkerService",
            "id": "injectable-ProfileWorkerService-0c8d1dc1925d8e962a5bfaffd336b8a9231d007f405410984b03fc6669d9af344f5f96312897f1cb0b063e4ce9b52c8ac470955dcd1143f8f4b1ad31b7f5f66a",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n//import { MemberProfile, ClanMember } from 'bungie-models';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileWorkerService {\r\n  constructor() {}\r\n  //  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n  //members: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n\r\n  // loadProfiles(clanId: string, clanMembers: ClanMember[], progress?: (done) => any): void {\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): Observable<MemberProfile[]> {\r\n    // const activityCacheComplete: Subject<boolean> = new Subject();\r\n    const members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n\r\n    const worker = new Worker(new URL('./profile.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        members.next(data.data);\r\n        //activityCacheComplete.next(true);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return members;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "RecentActivityService",
            "id": "injectable-RecentActivityService-9d081d28b4c635a1b308e4267f77a4756c4c32cd2527888f28cf39ba6ed8ac2ba731ff72182ebdd573a44ff5592b8957f0ed6a58d3b0467a65aabd25fc1cfcb3",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/data-access/recent-activity.service.ts",
            "properties": [
                {
                    "name": "activeClanActivity$",
                    "defaultValue": "this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(clanAndMembers.clan.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n\r\n                return this.profileActivityService\r\n                  .getAllRecentActivitiesFromCache(clanAndMembers.clan.clanId, memberProfiles)\r\n                  .pipe(\r\n                    take(1),\r\n                    map((clanActivities) => {\r\n                      return clanAndMembers.members.map((member) => {\r\n                        return {\r\n                          clanMember: member,\r\n                          profileActivity: clanActivities.find(\r\n                            (ca) => getMemberProfileId(ca.memberProfile) === getClanMemberId(member)\r\n                          ),\r\n                          profile: memberProfiles.find((m) => getMemberProfileId(m) === getClanMemberId(member)),\r\n                          clan: {\r\n                            clanId: clanAndMembers.clan.clanId,\r\n                            clanName: clanAndMembers.clan.clanName,\r\n                            clanTag: clanAndMembers.clan.clanTag\r\n                          }\r\n                        };\r\n                      });\r\n\r\n\r\n                    })\r\n                  );\r\n              })\r\n\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProfileRecentActivity[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClanIds, selectEnabledClans, selectLastRecentActivityUpdate } from '@core/store/clans';\r\nimport { combineLatest, from, map, mergeMap, Observable, switchMap, take, tap, toArray } from 'rxjs';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { ProfileRecentActivityWorkerService } from '../../../workers/profile-recent-activity/profile-recent-activity.service';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileRecentActivity } from '../models/profile-recent-activity';\r\nimport { RecentActivityModule } from '../recent-activity-shell/recent-activity.module';\r\n\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\n\r\n@Injectable({\r\n  providedIn: RecentActivityModule\r\n})\r\nexport class RecentActivityService {\r\n\r\n  activeClanActivity$: Observable<ProfileRecentActivity[]> = this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(clanAndMembers.clan.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n\r\n                return this.profileActivityService\r\n                  .getAllRecentActivitiesFromCache(clanAndMembers.clan.clanId, memberProfiles)\r\n                  .pipe(\r\n                    take(1),\r\n                    map((clanActivities) => {\r\n                      return clanAndMembers.members.map((member) => {\r\n                        return {\r\n                          clanMember: member,\r\n                          profileActivity: clanActivities.find(\r\n                            (ca) => getMemberProfileId(ca.memberProfile) === getClanMemberId(member)\r\n                          ),\r\n                          profile: memberProfiles.find((m) => getMemberProfileId(m) === getClanMemberId(member)),\r\n                          clan: {\r\n                            clanId: clanAndMembers.clan.clanId,\r\n                            clanName: clanAndMembers.clan.clanName,\r\n                            clanTag: clanAndMembers.clan.clanTag\r\n                          }\r\n                        };\r\n                      });\r\n\r\n\r\n                    })\r\n                  );\r\n              })\r\n\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  );\r\n\r\n\r\n  constructor(\r\n    private memberService: ClansMembersService,\r\n    private profileService: ProfileService,\r\n    private profileActivityService: ProfileRecentActivityWorkerService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileActivityService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileActivityService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecordDefinitionService",
            "id": "injectable-RecordDefinitionService-9b48736291ebe2832dd2eed71d69ab4881c99a5ad26b8080e3d279ba34640fc07b1207bbcbe301e53f003b8f73b741ecbb61c514e3943e7d33338d20418e3a40",
            "file": "projects/clan-dashboard/src/app/core/definition-services/record-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsRecordsDestinyRecordDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RecordDefinitionService extends BaseDefinitionService<DestinyDefinitionsRecordsDestinyRecordDefinition> {}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "SealsService",
            "id": "injectable-SealsService-4dc3b810d5c885afcf7a0b8d730499ccfc92bb2d00c285954a1f10dbed290b04e4333353a8ecb5c35c091f27cf81e4002a4d382d4c43dc7bc8897021945d1481",
            "file": "projects/clan-dashboard/src/app/features/seals/data-access/seals.service.ts",
            "properties": [
                {
                    "name": "allNodes",
                    "defaultValue": "this.getNodes(this.currentSealNodes)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.clansMembersService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          const hashes = this.sealNodes.filter((x) => x.completionRecordHash).map((x) => x.completionRecordHash);\r\n          const gildedHashes = [];\r\n          hashes.forEach((hash) => {\r\n            const record = this.recordNodeService.definitions[hash as number];\r\n            if (record.titleInfo && record.titleInfo.gildingTrackingRecordHash) {\r\n              gildedHashes.push(record.titleInfo.gildingTrackingRecordHash);\r\n            }\r\n          });\r\n\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              [],\r\n              [...hashes, ...gildedHashes]\r\n            )\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clanMember: member,\r\n                    profile: memberProfiles.find(\r\n                      (m) => getMemberProfileId(m) === getClanMemberId(member)\r\n                    ) as MemberProfile,\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    }\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "currentSealNodes",
                    "defaultValue": "this.presentationNodeService.definitions[this.appConfig.constants.CURRENT_SEALS_HASH]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "milestonesWithProfiles$",
                    "defaultValue": "this.clanProfiles$.pipe(\r\n    map((cp) => {\r\n      return this.sealNodes\r\n        .filter((x) => x.redacted === false)\r\n        .map((seal) => {\r\n          const sealRecord = this.recordNodeService.definitions[seal.completionRecordHash as number];\r\n          const sealGildingRecord =\r\n            sealRecord && sealRecord.titleInfo && sealRecord.titleInfo.gildingTrackingRecordHash\r\n              ? sealRecord.titleInfo.gildingTrackingRecordHash\r\n              : 0;\r\n\r\n          return {\r\n            seal: seal,\r\n            totalMembers: cp.length,\r\n            completedCount: this.getCompletionCount(cp, seal.completionRecordHash),\r\n            gildedCount: this.getCompletionCount(cp, sealGildingRecord),\r\n            isGilded: sealGildingRecord > 0\r\n          };\r\n        });\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SealListItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "sealNodes",
                    "defaultValue": "this.getDefinitionsByHash(this.allNodes)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [
                {
                    "name": "getCompletionCount",
                    "args": [
                        {
                            "name": "memberProfiles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "completionHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "memberProfiles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "completionHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefinitionsByHash",
                    "args": [
                        {
                            "name": "allNodes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "allNodes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodes",
                    "args": [
                        {
                            "name": "node",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSealDetails$",
                    "args": [
                        {
                            "name": "sealHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SealClanMember[]>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sealHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { PresentationNodeDefinitionService } from '@core/definition-services/presentation-node-definition.service';\r\nimport { RecordDefinitionService } from '@core/definition-services/record-definition.service';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { profileSerializer } from 'projects/data/src/lib/clan/profiles/profile.serializer';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { from, map, mergeMap, Observable, of, switchMap, toArray } from 'rxjs';\r\nimport { SealClanMember } from '../models/seal-clan-member';\r\nimport { SealListItem } from '../models/seal-list-item';\r\nimport { SealsModule } from '../seals-shell/seals.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SealsService {\r\n  constructor(\r\n    private presentationNodeService: PresentationNodeDefinitionService,\r\n    private recordNodeService: RecordDefinitionService,\r\n    private clansMembersService: ClansMembersService,\r\n    private profileService: ProfileService,\r\n    private appConfig: AppConfig\r\n  ) {\r\n    // this.milestonesWithProfiles$.subscribe((x) => console.log('sub', x));\r\n  }\r\n  //legacySealNode = this.presentationNodeService.definitions[1881970629]; //.getDefinitionsByHash(1881970629);\r\n  currentSealNodes = this.presentationNodeService.definitions[this.appConfig.constants.CURRENT_SEALS_HASH];\r\n  //allNodes = this.getNodes(this.currentSealNodes).concat(this.getNodes(this.legacySealNode));\r\n  allNodes = this.getNodes(this.currentSealNodes);\r\n\r\n  sealNodes = this.getDefinitionsByHash(this.allNodes);\r\n\r\n  private getNodes(node) {\r\n    return node.children.presentationNodes.map((x) => x.presentationNodeHash);\r\n  }\r\n\r\n  private getDefinitionsByHash(allNodes: any[]) {\r\n    return allNodes.map((h) => {\r\n      return this.presentationNodeService.definitions[h];\r\n    });\r\n  }\r\n\r\n  clanProfiles$ = this.clansMembersService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          const hashes = this.sealNodes.filter((x) => x.completionRecordHash).map((x) => x.completionRecordHash);\r\n          const gildedHashes = [];\r\n          hashes.forEach((hash) => {\r\n            const record = this.recordNodeService.definitions[hash as number];\r\n            if (record.titleInfo && record.titleInfo.gildingTrackingRecordHash) {\r\n              gildedHashes.push(record.titleInfo.gildingTrackingRecordHash);\r\n            }\r\n          });\r\n\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              [],\r\n              [...hashes, ...gildedHashes]\r\n            )\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clanMember: member,\r\n                    profile: memberProfiles.find(\r\n                      (m) => getMemberProfileId(m) === getClanMemberId(member)\r\n                    ) as MemberProfile,\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    }\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  );\r\n\r\n  milestonesWithProfiles$: Observable<SealListItem[]> = this.clanProfiles$.pipe(\r\n    map((cp) => {\r\n      return this.sealNodes\r\n        .filter((x) => x.redacted === false)\r\n        .map((seal) => {\r\n          const sealRecord = this.recordNodeService.definitions[seal.completionRecordHash as number];\r\n          const sealGildingRecord =\r\n            sealRecord && sealRecord.titleInfo && sealRecord.titleInfo.gildingTrackingRecordHash\r\n              ? sealRecord.titleInfo.gildingTrackingRecordHash\r\n              : 0;\r\n\r\n          return {\r\n            seal: seal,\r\n            totalMembers: cp.length,\r\n            completedCount: this.getCompletionCount(cp, seal.completionRecordHash),\r\n            gildedCount: this.getCompletionCount(cp, sealGildingRecord),\r\n            isGilded: sealGildingRecord > 0\r\n          };\r\n        });\r\n    })\r\n  );\r\n\r\n  getSealDetails$(sealHash): Observable<SealClanMember[]> {\r\n    const sealCompletionHash = this.sealNodes.find((h) => h.hash == sealHash)?.completionRecordHash;\r\n    const sealRecord = this.recordNodeService.definitions[sealCompletionHash as number];\r\n    const sealGildingRecord =\r\n      sealRecord && sealRecord.titleInfo && sealRecord.titleInfo.gildingTrackingRecordHash\r\n        ? sealRecord.titleInfo.gildingTrackingRecordHash\r\n        : 0;\r\n\r\n    return this.clanProfiles$.pipe(\r\n      map((clanProfiles) => {\r\n        return clanProfiles.map((clanProfile) => {\r\n          const profileProgression = clanProfile.profile.profileRecords.data.records[sealCompletionHash]?.objectives[0];\r\n          const gildedProgression =\r\n            sealGildingRecord > 0 ? clanProfile.profile.profileRecords.data.records[sealGildingRecord] : undefined;\r\n\r\n          return {\r\n            clanMember: clanProfile.clanMember,\r\n            profile: profileSerializer(clanProfile.profile, [], [], []), // Strip records to minimize size of object\r\n            clan: clanProfile.clan,\r\n            sealProgression: {\r\n              isGilded: gildedProgression ? gildedProgression.objectives[0].complete : undefined,\r\n              gildedCount: gildedProgression ? gildedProgression.completedCount : undefined,\r\n              isCompleted: profileProgression?.complete,\r\n              completedTriumphCount: profileProgression?.progress || 0,\r\n              totalTriumphCount: profileProgression?.completionValue || 0,\r\n              completionPercentage:\r\n                profileProgression?.progress > 0\r\n                  ? Math.floor((profileProgression?.progress / profileProgression?.completionValue) * 100)\r\n                  : 0\r\n            }\r\n          };\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  private getCompletionCount(memberProfiles, completionHash) {\r\n    return memberProfiles.filter((m) => {\r\n      const records = m.profile?.profileRecords?.data?.records[completionHash]?.objectives[0];\r\n\r\n      if (records) {\r\n        return records.complete;\r\n      }\r\n      return false;\r\n    }).length;\r\n  }\r\n  //   private getGildedCount(memberProfiles, gildedHash){\r\n  // return memberProfiles.filter((m) => {\r\n  //       const records = m.profile?.profileRecords?.data?.records[gildedHash]?.objectives[0];\r\n\r\n  //       if (records) {\r\n  //         return records.complete;\r\n  //       }\r\n  //       return false;\r\n  //     }).length;\r\n\r\n  //   }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "presentationNodeService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recordNodeService",
                        "type": "RecordDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clansMembersService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "presentationNodeService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recordNodeService",
                        "type": "RecordDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clansMembersService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorybookService",
            "id": "injectable-StorybookService-ee71627bfa4c7884f3ba6720a3b94ca2b896ad045923dea37bd9154e189bf288d1384ee7fa0bd293385daaadbf69c9bff571f58c5c949a6da401b0a305dd773c",
            "file": "projects/components/src/lib/storybook/storybook.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from '../icons/register-icons';\r\n\r\n@Injectable()\r\nexport class StorybookService {\r\n\r\n    constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n        registerIcons(iconRegistry, domSanitizer);\r\n }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "ClanResolveGuard",
            "id": "injectable-ClanResolveGuard-d5d4908d137aac682979d92489836f0124cad9451d75ed4dc8a985d10ad1233f97a48db491bb278fb07c1985ab57c00caf093f150ed860d1baad26e4f9bd5f46",
            "file": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { map, Observable, of } from 'rxjs';\r\nimport { selectTotalClans } from '@core/store/clans/clans.selectors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanResolveGuard implements CanActivate {\r\n  constructor(private store: Store, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.store.select(selectTotalClans).pipe(\r\n      map((clans) => {\r\n        if (!clans || clans === 0) {\r\n          return this.router.parseUrl('/clan-search');\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ApiKeyInterceptor",
            "id": "injectable-ApiKeyInterceptor-4793ba3d596c9301d951ef639da9925af9cd9d50355437590e973583799c64856dafc927815e578d58deadbab7aa24486d98923a4fb232f487887b71dc7d3e25",
            "file": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\n@Injectable()\r\nexport class ApiKeyInterceptor implements HttpInterceptor {\r\n  constructor(private appConfig: AppConfig) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add the header to the cloned request\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('x-api-key', this.appConfig.apiKey)\r\n    });\r\n\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppConfig",
            "id": "class-AppConfig-1b6d8fabed406fa3751b36d267eadbb1e900f4326cd493963fdad7d99df3d9f0aa011b009ef368effd9855138e13059543b74946b1895dc452946a5fc08f29a3",
            "file": "projects/clan-dashboard/src/app/core/config/app-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DeepPartial } from '@destiny/data/models';\r\nimport { baseConstants } from '../../../environments/constants';\r\n\r\nexport class AppConfig {\r\n  readonly constants: DeepPartial<typeof baseConstants>\r\n  readonly apiKey: string;\r\n  readonly appVersion: string;\r\n  readonly production: boolean\r\n}\r\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "constants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeepPartial<>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-6d580bd28cedc748c5beca3ce1092e9b9ead3d26da9ec543171d7fb8703433d851bfb8cc2dfa5a6ef78b3782c8bdeac8e62ae11122207cfe4ba9b68466ce17ea",
            "file": "projects/data/src/lib/db/app-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 2;\r\n\r\nexport type StoreId = 'allData';\r\n\r\nexport const STORE_IDS: StoreId[] = ['allData'];\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string) {\r\n    super(name, DB_VERSION, STORE_IDS);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-7de43f518c699151b6f172c5f8ae4278a7bb440561b4db455e983e6bff6d72d70a5887043d459a45798c5c61838453051df6d5d87b37f1d94c0df3919b1ac48b-1",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 5;\r\n\r\nexport enum StoreId {\r\n  CacheDetails = 'CacheDetails', //TODO: Verify\r\n  ClanDetails = 'ClanDetails',\r\n  ClanRewards = 'ClanRewards', // TODO: Verify\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberActivityStats = 'MemberActivityStats', // TODO: Verify\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\n  ProfileMilestones = 'ProfileMilestones', // TODO  Verfiy\r\n  ProfileMetrics = 'ProfileMetrics', // TODO: Verify\r\n  Raids = 'Raids' // TODO verify\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(name, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppIndexedDb-1"
        },
        {
            "name": "BaseAppIndexedDb",
            "id": "class-BaseAppIndexedDb-66daad047a313f870118df28cf0ea1b0fd920b87492a27de397c5634e8b6fd4ba01d82bd89cffdedc66818bd6608d9f9b6d72fb4d5eb6b14e6f1ef981d553f20",
            "file": "projects/data/src/lib/db/base-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { openDB, deleteDB, IDBPDatabase } from 'idb';\r\n\r\nexport class BaseAppIndexedDb {\r\n  name: string;\r\n  dbVersion: number;\r\n  storeIds: string[];\r\n\r\n  private db: Promise<IDBPDatabase>;\r\n\r\n  constructor(name: string, dbVersion: number, storeIds: string[], initializeValues: boolean = true) {\r\n    this.dbVersion = dbVersion;\r\n    this.storeIds = storeIds;\r\n\r\n    if (initializeValues) {\r\n      this.resetInitialValues();\r\n    }\r\n    this.name = name;\r\n    this.openDb();\r\n  }\r\n\r\n  close() {\r\n    return this.db.then((db) => db.close());\r\n  }\r\n\r\n  private resetInitialValues() {}\r\n\r\n  getAllData(store: string) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).getAll();\r\n    });\r\n  }\r\n\r\n  getById(store: string, id) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).get(id);\r\n    });\r\n  }\r\n\r\n  removeData() {\r\n   return this.db\r\n      .then((db) => {\r\n        this.resetInitialValues();\r\n        db.close();\r\n        return deleteDB(this.name);\r\n      })\r\n      .then(() => this.openDb());\r\n  }\r\n\r\n  purgeDatabase() {\r\n    console.log('purching db');\r\n    return this.close().then((db) => {\r\n      console.log('purching db done');\r\n\r\n      return deleteDB(this.name).catch((x) => {\r\n      console.log('error deleting', x);\r\n      });\r\n    });\r\n  }\r\n\r\n  updateValues(values: any[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      values.forEach((v) => store.put(v));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeValues(ids: string[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      ids.forEach((id) => store.delete(id));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeAllValues(collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      return store.clear();\r\n    });\r\n  }\r\n\r\n  private openDb() {\r\n    const base = this;\r\n    this.db = openDB(this.name, this.dbVersion, {\r\n      upgrade(db, oldVersion, newVersion, transaction) {\r\n        base.storeIds.forEach((collectionId) => {\r\n          if (!db.objectStoreNames.contains(collectionId)) {\r\n            const objectStore = db.createObjectStore(collectionId, {\r\n              keyPath: 'id'\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseClanAggregateTimeService",
            "id": "class-BaseClanAggregateTimeService-e10ea803c286f7521dbfdab4b12b0f7da0eaac4655d96e1b1e5b512adab54bafe15fe94d11a793fa9b7f3cfadbbe812e2304c2a2030397f775bb69a0c61eedce",
            "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/base-clan-aggregate-time.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { from, Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../../clan/clan-database';\r\nimport { ClanMemberRecentActivityService } from '../../clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\nimport { ActivityStats, MemberProfile } from '../../models';\r\nimport { MemberActivityTime } from '../../models/MemberActivityTime';\r\n// import { AppConfig } from 'src/app/app.config';\r\n// import { ClanMemberRecentActivityService } from '../../clan-db/clan-member-recent-activity/clan-member-recent-activity.service';\r\n// import { ClanDatabase } from '../../clan-db/ClanDatabase';\r\n// import { ClanMemberRecentActivityService, ClanDatabase } from '../../clan-db';\r\n\r\nexport abstract class BaseClanAggregateTimeService {\r\n  readonly CONCURRENT_COUNT = 10;\r\n  private memberActivityService: ClanMemberRecentActivityService;\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {\r\n    this.memberActivityService = new ClanMemberRecentActivityService(clanDb, apiKey);\r\n  }\r\n\r\n  abstract getClanActivityStatsForDuration(memberActivities: MemberActivityTime[], activityMode, count);\r\n\r\n  filterDates(memberActivities: MemberActivityTime[], startDate: Date): MemberActivityTime[] {\r\n    return memberActivities.map((ma) => {\r\n      return {\r\n        id: ma.id,\r\n        activities: ma.activities.filter((x) => x.date > startDate)\r\n      };\r\n    });\r\n  }\r\n\r\n  /** @deprecated use gender field instead */\r\n  getClanActivityStats(clanId: number, clanMemberProfiles: MemberProfile[], startDate: Date, activityMode: number = 0) {\r\n    return from(clanMemberProfiles).pipe(\r\n      mergeMap((member) => {\r\n        return this.getMemberActivityStats(clanId, member, startDate, activityMode);\r\n      }, this.CONCURRENT_COUNT)\r\n    );\r\n  }\r\n\r\n  /** @deprecated use gender field instead */\r\n  private getMemberActivityStats(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    startDate: Date,\r\n    activityMode: number = 0\r\n    // TODO: Update\r\n  ): Observable<any> {\r\n    return this.memberActivityService.getMemberActivity(clanId, member, false, activityMode).pipe(\r\n      map((memberActivityResponse) => {\r\n        return {\r\n          memberProfile: { profile: member.profile },\r\n          stats: {\r\n            id: memberActivityResponse.id,\r\n            activities: memberActivityResponse.activities.filter((x) => new Date(x.period) > startDate)\r\n          }\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "CONCURRENT_COUNT",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "memberActivityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberRecentActivityService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "filterDates",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MemberActivityTime[]",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanActivityStatsForDuration",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "count",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseClanService",
            "id": "class-BaseClanService-90d92405f1a8d87d72776f077a0069b1779211a0acb8aac1176886061d068381f2947a77145820dc5e02ed0ec5c89597e4bfda437238aa39f499ab6b36bc2475",
            "file": "projects/data/src/lib/clan/base-clan.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { isValidDate, nowPlusMinutes } from '../utility/date-utils';\r\n\r\nexport class BaseClanService {\r\n  tableName;\r\n  constructor(private clanDbBase: ClanDatabase, private tableNameBase: StoreId) {\r\n    this.tableName = tableNameBase;\r\n  }\r\n\r\n  getDataFromCache(clanId: string, rowId: string): Promise<DBObject> {\r\n    return this.clanDbBase.getById(clanId, this.tableNameBase, rowId);\r\n  }\r\n\r\n  getAllDataFromCache(clanId: string): Promise<DBObject[]> {\r\n    return this.clanDbBase.getAll(clanId, this.tableNameBase);\r\n  }\r\n\r\n  isCacheValid(cachedData: DBObject, minuteExpiration: number, lastActivity?: Date) {\r\n    if (cachedData && cachedData.createDate) {\r\n      const cacheDate = cachedData.createDate;\r\n      let expireDate;\r\n      if (isValidDate(lastActivity)) {\r\n        if (minuteExpiration === 0) {\r\n          expireDate = lastActivity;\r\n        } else {\r\n          const minuteXP = nowPlusMinutes(-minuteExpiration);\r\n          const lastActivityXP = lastActivity;\r\n          expireDate = minuteXP > lastActivityXP ? lastActivityXP : minuteXP;\r\n        }\r\n      } else {\r\n        expireDate = nowPlusMinutes(-minuteExpiration);\r\n      }\r\n      return cacheDate > expireDate;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateDB(clanId: string, rowId: string, data: any) {\r\n    this.clanDbBase.update(clanId, this.tableName, [\r\n      {\r\n        id: rowId,\r\n        createDate: new Date(),\r\n        data: data\r\n      }\r\n    ]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseDefinitionService",
            "id": "class-BaseDefinitionService-3f1a4648ea287776f456b1f058117617b612ec6fd42a4596d0f7c570dd5d6b28cab6983914692317701e0b3089ced78ea8977fc313cb46dba973f2df08bdab4c",
            "file": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class BaseDefinitionService<T> {\r\n  definitions: T[];\r\n  initializeCache(defs: T[]) {\r\n    this.definitions = defs;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseMemberActivityService",
            "id": "class-BaseMemberActivityService-363c00b399a461c5d00b80c913e00edbfcc7eeaa678a03bb9f7b2054c3551c77df9d59c9892c72ba35c07b225c60e3578eb0a9fbc68abbd3cdb1324efefe9156",
            "file": "projects/data/src/lib/clan/base-member-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseClanService } from './base-clan.service';\r\n//import { ClanDatabase } from './ClanDatabase';\r\n//import { StoreId, DBObject } from './app-indexed-db';\r\nimport { groupActivitiesByDate } from '../utility/group-activity-by-date';\r\n\r\n//import { Destiny2Service, DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup } from 'bungie-api-angular';\r\n\r\n// import { MemberProfile } from 'bungie-models';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of, from, defer, concat, EMPTY, forkJoin } from 'rxjs';\r\nimport { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { MemberActivityStats } from '../models/MemberActivityStat';\r\nimport { MemberActivityTime } from '../models/MemberActivityTime';\r\nimport { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from '../models';\r\n//import { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityTime } from 'projects/bungie-models/src/lib/models/MemberActivityTime';\r\n//import { MemberActivityStats } from 'projects/bungie-models/src/lib/models/MemberActivityStat';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\ninterface ActivityCollection {\r\n  activities: any[];\r\n}\r\nexport class BaseMemberActivityService extends BaseClanService {\r\n  private ACTIVITY_GET_COUNT = 250;\r\n  constructor(\r\n    private clanDbPBase: ClanDatabase,\r\n    private tableNamePBase: StoreId,\r\n    private apiKey: string,\r\n    // private d2ServiceBase: Destiny2Service,\r\n    public startValue: Date,\r\n    public maxRequestCount: Number,\r\n    public activityTypeId = 0\r\n  ) {\r\n    super(clanDbPBase, tableNamePBase);\r\n  }\r\n\r\n  public getMemberCharacterActivityFromAPI(member: MemberProfile, characterId: number, pageNumber = 0) {\r\n    // https://www.bungie.net/Platform/Destiny2/3/Account/4611686018483900283/Character/2305843009471454818/Stats/Activities/?count=250&mode=0&page=10\r\n\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.profile.data.userInfo.membershipType}/Account/${member.profile.data.userInfo.membershipId}/Character/${characterId}/Stats/Activities/?count=${this.ACTIVITY_GET_COUNT}&mode=${this.activityTypeId}&page=${pageNumber}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n\r\n    // return this.d2ServiceBase.destiny2GetActivityHistory(\r\n    //   characterId,\r\n    //   member.profile.data.userInfo.membershipId,\r\n    //   member.profile.data.userInfo.membershipType,\r\n    //   this.ACTIVITY_GET_COUNT,\r\n    //   this.activityTypeId,\r\n    //   pageNumber\r\n    // );\r\n  }\r\n\r\n  private activitiesContainExpiredYear(activities, expiration) {\r\n    if (!activities) {\r\n      return true;\r\n    }\r\n\r\n    return !!activities.find((x) => {\r\n      const activityYear = new Date(x.period);\r\n      return activityYear <= expiration;\r\n    });\r\n  }\r\n\r\n  private getAllRecentActivity(member: MemberProfile, characterId: number): Observable<ActivityCollection> {\r\n    const maxConcurrentCount = 4;\r\n    const fetchPage = (page = 0) => {\r\n      return this.getMemberCharacterActivityFromAPI(member, characterId, page).pipe(\r\n        map((x: any) => {\r\n          const nextPage =\r\n            this.activitiesContainExpiredYear(x?.Response?.activities, this.startValue) || page >= this.maxRequestCount\r\n              ? null\r\n              : page + maxConcurrentCount;\r\n\r\n          const activities = x?.Response?.activities || [];\r\n          return { activities, nextPage };\r\n        })\r\n      );\r\n    };\r\n\r\n    const getItems = (page) =>\r\n      defer(() => fetchPage(page)).pipe(\r\n        mergeMap(({ activities, nextPage }) => {\r\n          const items$ = from(activities);\r\n          const next$ = nextPage ? getItems(nextPage) : EMPTY;\r\n          return concat(items$, next$);\r\n        })\r\n      );\r\n\r\n    const batchedRequest = [];\r\n    for (let i = 0; i < maxConcurrentCount; i++) {\r\n      batchedRequest.push(getItems(i).pipe(toArray()));\r\n    }\r\n\r\n    return forkJoin(batchedRequest).pipe(\r\n      map((x: any) => {\r\n        return {\r\n          activities: x.flat()\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getMemberActivityId(member: MemberProfile, characterId: number) {\r\n    return `${this.getMemberProfileId(member)}-${characterId}`;\r\n  }\r\n  getMemberProfileId(member: MemberProfile) {\r\n    return `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`;\r\n  }\r\n\r\n  /**\r\n   *  Pulls character activity from cache and will return fresh data if cache is exipred\r\n   */\r\n  getMemberCharacterActivity(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean\r\n\r\n    // ): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    const characterActivityId = this.getMemberActivityId(member, characterId);\r\n\r\n    return from(this.getDataFromCache(clanId.toString(), characterActivityId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        // if (this.isCacheValid(cachedData, 720, new Date(member.profile.data.dateLastPlayed))) {\r\n        //   return of(cachedData.data);\r\n        // }\r\n\r\n        // return this.getFreshMemberCharacterActivity(clanId, member, characterId, characterActivityId, cachedData);\r\n\r\n        if (useCache) {\r\n          return this.verifyCacheIntegrity(clanId, member, characterId, cachedData);\r\n        }\r\n        return of(cachedData.data);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if Cached data is fresh enough to use. Triggers new call if too old.\r\n   *\r\n   */\r\n  verifyCacheIntegrity(clanId, memberProfile: MemberProfile, characterId, cachedData: DBObject) {\r\n    const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n    if (this.isCacheValid(cachedData, 720, new Date(memberProfile.profile.data.dateLastPlayed))) {\r\n      return of(cachedData.data);\r\n    }\r\n\r\n    return this.getFreshMemberCharacterActivity(clanId, memberProfile, characterId, characterActivityId, cachedData);\r\n  }\r\n\r\n  /**\r\n   * Calls for fresh character activity. Updates cache. Falls back on cache on failure.\r\n   */\r\n  getFreshMemberCharacterActivity(\r\n    clanId: string,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    characterActivityId: string,\r\n    cachedData: DBObject\r\n    //): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    return this.getAllRecentActivity(member, characterId).pipe(\r\n      map((activityResponse) => {\r\n        if (activityResponse.activities) {\r\n          // serialize:\r\n          const slimmedActivities = activityResponse.activities.map((x) => {\r\n            return clanMemberActivitySerializer(x);\r\n          });\r\n\r\n          this.updateDB(clanId, characterActivityId, slimmedActivities);\r\n          return slimmedActivities;\r\n        }\r\n        return of([]);\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error?.ErrorStatus === 'DestinyPrivacyRestriction') {\r\n          this.updateDB(clanId, characterActivityId, []);\r\n          return of([]);\r\n        }\r\n        if (cachedData && cachedData.data) {\r\n          return of(cachedData.data);\r\n        }\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  groupActivitiesToMember(memberProfile: MemberProfile, allActivities: DBObject[], activityMode: number = 0) {\r\n    const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n\r\n    const memberActivitiesDB = allActivities.filter((x) => x.id.startsWith(memberProfileId));\r\n\r\n    const memberActivitiesSerialized = memberActivitiesDB.map((activityDB) =>\r\n      activityDB.data.map((activity) => clanMemberActivitySerializer(activity))\r\n    );\r\n\r\n    const allFilteredActivities =\r\n      activityMode > 0\r\n        ? memberActivitiesSerialized.map((items) =>\r\n            items.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1)\r\n          )\r\n        : memberActivitiesSerialized;\r\n\r\n    const timed = groupActivitiesByDate([].concat(...allFilteredActivities));\r\n\r\n    return {\r\n      id: memberProfileId,\r\n      activities: timed\r\n    };\r\n  }\r\n\r\n  groupActivitiesToMembers(\r\n    memberProfiles: MemberProfile[],\r\n    allActivities: DBObject[],\r\n    activityMode: number = 0\r\n  ): any[] {\r\n    return memberProfiles.map((memberProfile) => {\r\n      return this.groupActivitiesToMember(memberProfile, allActivities, activityMode);\r\n    });\r\n  }\r\n\r\n  getAllActivitiesFromCache(\r\n    clanId: number,\r\n    memberProfiles: MemberProfile[],\r\n    activityMode = 0\r\n  ): Observable<MemberActivityTime[]> {\r\n    return from(this.getAllDataFromCache(clanId.toString())).pipe(\r\n      map((x) => {\r\n        const y = this.groupActivitiesToMembers(memberProfiles, x, activityMode);\r\n        return y;\r\n      })\r\n    );\r\n  }\r\n  // TODO: Turn this up to 11\r\n  updateAllActivityCache(clanId: number, memberProfiles: MemberProfile[], progress?: (done) => any) {\r\n    const memberProfilesObs = from(memberProfiles);\r\n    const cacheDataObs = from(this.getAllDataFromCache(clanId.toString()));\r\n\r\n    return cacheDataObs.pipe(\r\n      switchMap((cachedData) => {\r\n        let complete = 0;\r\n        return memberProfilesObs.pipe(\r\n          mergeMap((memberProfile) => {\r\n            if (!memberProfile?.profile?.data?.characterIds) {\r\n              return of();\r\n            }\r\n            return from(memberProfile.profile.data.characterIds).pipe(\r\n              mergeMap((characterId: number) => {\r\n                const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n                const characterActivityCache = cachedData.find((x) => x.id === characterActivityId);\r\n\r\n                return this.verifyCacheIntegrity(clanId, memberProfile, characterId, characterActivityCache);\r\n              }),\r\n              toArray(),\r\n              map((x) => {\r\n                const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n                return {\r\n                  id: memberProfileId\r\n                };\r\n              })\r\n            );\r\n          }, 3),\r\n          tap((x) => {\r\n            complete++;\r\n            if (progress) {\r\n              progress(complete);\r\n            }\r\n          }),\r\n          toArray()\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getMemberActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityStats> {\r\n    if (!member?.profile) {\r\n      return of(null);\r\n    }\r\n    return from(member.profile.data.characterIds).pipe(\r\n      mergeMap((characterId: number) => {\r\n        return this.getMemberCharacterActivitySerialized(clanId, member, characterId, useCache, activityMode);\r\n      }),\r\n      map((x) => {\r\n        return x.activities;\r\n      }),\r\n      toArray(),\r\n      map((x) => {\r\n        return {\r\n          id: `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`,\r\n          activities: [].concat(...x)\r\n        };\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n  getMemberCharacterActivitySerialized(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ) {\r\n    return this.getMemberCharacterActivity(clanId, member, characterId, useCache).pipe(\r\n      map((activity) => {\r\n        if (activityMode > 0) {\r\n          activity = activity.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1);\r\n        }\r\n        return {\r\n          activities: activity.map((a) => clanMemberActivitySerializer(a))\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDbPBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableNamePBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "startValue",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxRequestCount",
                        "type": "Number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityTypeId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "clanDbPBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableNamePBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "startValue",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maxRequestCount",
                        "type": "Number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityTypeId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "ACTIVITY_GET_COUNT",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activityTypeId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxRequestCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "activitiesContainExpiredYear",
                    "args": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityTime[]>",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRecentActivity",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityCollection>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFreshMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls for fresh character activity. Updates cache. Falls back on cache on failure.\n",
                    "description": "<p>Calls for fresh character activity. Updates cache. Falls back on cache on failure.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityStats>",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivityId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Pulls character activity from cache and will return fresh data if cache is exipred\n",
                    "description": "<p> Pulls character activity from cache and will return fresh data if cache is exipred</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCharacterActivityFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCharacterActivitySerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesToMember",
                    "args": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: string; activities: any; }",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesToMembers",
                    "args": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllActivityCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyCacheIntegrity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if Cached data is fresh enough to use. Triggers new call if too old.\n\n",
                    "description": "<p>Determines if Cached data is fresh enough to use. Triggers new call if too old.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseClanService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanActivityService",
            "id": "class-ClanActivityService-0099918717c497981d052c17182a6639c100cb8d80afdf99a86c9d8901692b7e055ea42e3589a84a5d267a72a349b0ed555e829710f3e4cf903e81071f393c97",
            "file": "projects/data/src/lib/stat-aggregators/clan-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { forkJoin, from, Observable, of } from 'rxjs';\r\nimport { map, mergeMap, toArray } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../clan/clan-database';\r\nimport { ClanMemberRecentActivityService } from '../clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\nimport { ActivityStats } from '../models/ActivityStats';\r\n// import { ActivityStats } from '../models';\r\n// import { ClanDatabase, ClanMemberRecentActivityService } from '../clan-db';\r\n\r\nexport class ClanActivityService {\r\n  readonly CONCURRENT_COUNT = 10;\r\n  private memberActivityService: ClanMemberRecentActivityService;\r\n  constructor(private clanDb: ClanDatabase, private apiKey) {\r\n    this.memberActivityService = new ClanMemberRecentActivityService(clanDb, apiKey);\r\n  }\r\n\r\n  //getClanActivityStats(clanId: number, clanMemberProfiles: MemberProfile[], activityMode: number = 0) {\r\n  getClanActivityStats(clanId: number, clanMemberProfiles: any[], activityMode: number = 0) {\r\n    return from(clanMemberProfiles).pipe(\r\n      mergeMap((member) => {\r\n        return this.getMemberActivityStats(clanId, member, activityMode);\r\n      }, this.CONCURRENT_COUNT),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  private getMemberActivityStats(clanId: number, member: any, activityMode: number = 0): Observable<ActivityStats> {\r\n    // private getMemberActivityStats(clanId: number, member: any, activityMode: number = 0): Observable<any> {\r\n    return this.memberActivityService.getSerializedProfileActivity(clanId, member, true, activityMode).pipe(\r\n      map((memberActivityResponse) => {\r\n        return {\r\n          memberProfile: { profile: member?.profile },\r\n          stats: memberActivityResponse\r\n        };\r\n      })\r\n    );\r\n    //return of(null);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "CONCURRENT_COUNT",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "memberActivityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberRecentActivityService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getClanActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityStats>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanDatabase",
            "id": "class-ClanDatabase-7d9053c3c77b56fd0f6882a34e8eac14c9dbb97ab2b6c503ec44f2b061402dd3fe417e2f18d7755b2a04a28f6cc239237e96bae4edd1494a66e5ae464cdb642f",
            "file": "projects/data/src/lib/clan/clan-database.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AppIndexedDb, StoreId, DBObject, STORE_IDS } from '../db/clan-indexed-db';\r\n\r\nexport class ClanDatabase {\r\n  private database: AppIndexedDb;\r\n\r\n  getAll(repository: string, type: StoreId): Promise<DBObject[]> {\r\n    return this.getDatabase(repository).getAllData(type);\r\n  }\r\n\r\n  getById(repository: string, type: StoreId, id: string): Promise<DBObject> {\r\n    return this.getDatabase(repository).getById(type, id);\r\n  }\r\n\r\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\r\n    return this.getDatabase(repository).updateValues(entities, type);\r\n  }\r\n\r\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\r\n    return this.getDatabase(repository).removeValues(ids, type);\r\n  }\r\n\r\n  removeAll(repository: string, type: StoreId) {\r\n    return this.getDatabase(repository).removeAllValues(type);\r\n  }\r\n\r\n  deleteDatabase(repository: string) {\r\n    return this.getDatabase(repository, false).purgeDatabase();\r\n  }\r\n\r\n  purgeDatabase(repository: string) {\r\n    STORE_IDS.forEach((storeId) => {\r\n      this.getDatabase(repository, false).removeAllValues(storeId);\r\n    });\r\n  }\r\n\r\n  private getDatabase(repository: string, initializeValues: boolean = true) {\r\n    if (this.database && this.database.name === repository) {\r\n      return this.database;\r\n    }\r\n\r\n    if (this.database) {\r\n      this.database.close();\r\n    }\r\n\r\n    this.database = new AppIndexedDb(repository, initializeValues);\r\n    return this.database;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "purgeDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanMemberRecentActivityService",
            "id": "class-ClanMemberRecentActivityService-460c3f90c5c8c013459de1380d72fafab2f5f3649e442868653ec22e854dfba2ba1ea0dac97628d6a02300c095fc41553aa3901c08102cbb728c6fad88686af6",
            "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseMemberActivityService } from '../base-member-activity.service';\r\n// import { ClanDatabase } from '../ClanDatabase';\r\n// import { StoreId } from '../app-indexed-db';\r\nimport { from, Observable } from 'rxjs';\r\nimport { mergeMap, map, toArray } from 'rxjs/operators';\r\n// import { MemberActivityStats, MemberProfile, MemberActivityRecentStats } from 'bungie-models';\r\n\r\n//import { clanMemberRecentActivitySerializer } from './clan-member-recent-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityRecentStats } from 'projects/bungie-models/src/lib/models/MemberActivityRecentStats';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\n// import { MemberProfile } from '../../models';\r\nimport { MemberActivityRecentStats } from '../../models/MemberActivityRecentStats';\r\nimport { clanMemberRecentActivitySerializer } from './clan-member-recent-activity.serializer';\r\n\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\nexport class ClanMemberRecentActivityService extends BaseMemberActivityService {\r\n  private concurrentRequests = 5;\r\n  constructor(private clanDB: ClanDatabase, private baseApiKey: string) {\r\n    super(\r\n      clanDB,\r\n      StoreId.MemberRecentActivities,\r\n      baseApiKey,\r\n      // d2Service,\r\n      new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 90)),\r\n      8\r\n    );\r\n  }\r\n  getSerializedProfileActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityRecentStats> {\r\n    return this.getMemberActivity(clanId, member, useCache, activityMode).pipe(\r\n      map((profileActivity) => {\r\n        return clanMemberRecentActivitySerializer(profileActivity);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDB",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseApiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "clanDB",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseApiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ACTIVITY_GET_COUNT",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "activityTypeId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "maxRequestCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "startValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getSerializedProfileActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityRecentStats>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activitiesContainExpiredYear",
                    "args": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getAllActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityTime[]>",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getAllRecentActivity",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityCollection>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getFreshMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls for fresh character activity. Updates cache. Falls back on cache on failure.\n",
                    "description": "<p>Calls for fresh character activity. Updates cache. Falls back on cache on failure.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityStats>",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberActivityId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Pulls character activity from cache and will return fresh data if cache is exipred\n",
                    "description": "<p> Pulls character activity from cache and will return fresh data if cache is exipred</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberCharacterActivityFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberCharacterActivitySerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "groupActivitiesToMember",
                    "args": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: string; activities: any; }",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "groupActivitiesToMembers",
                    "args": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "updateAllActivityCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "verifyCacheIntegrity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if Cached data is fresh enough to use. Triggers new call if too old.\n\n",
                    "description": "<p>Determines if Cached data is fresh enough to use. Triggers new call if too old.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseMemberActivityService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanMembersServiceMock",
            "id": "class-ClanMembersServiceMock-007118e7e7cc0e00831f7ed9cb4b7195838d5fc7c7db3339ef6303539664ddf1582d4d0d3c52c8202dbc6079eee9a9ee069ca6235c9bd28f3465cfcb34c4fb5f",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nexport class ClanMembersServiceMock implements ClanMembersServiceInterface {\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    console.log('returning');\r\n    return of([]);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ClanMembersServiceInterface"
            ]
        },
        {
            "name": "DailyClanAggregateTimeService",
            "id": "class-DailyClanAggregateTimeService-9a6c313a649cc1504409bda0bf2647f6372b8ff4577a2a5542e227143df309a69d1c8577b3eb15902482f3b1e2284ce6c7a3f8f69fcafa9066b8fe9f371e68ff",
            "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MemberActivityTime } from '../../models/MemberActivityTime';\r\nimport { nowPlusDays } from '../../utility/date-utils';\r\nimport { groupActivityStatsByDate } from '../../utility/group-activity-by-date';\r\nimport { BaseClanAggregateTimeService } from './base-clan-aggregate-time.service';\r\n\r\nexport class DailyClanAggregateTimeService extends BaseClanAggregateTimeService {\r\n  getClanActivityStatsForDuration(memberActivities: MemberActivityTime[], activityMode: any, days = 60) {\r\n    const x = this.filterDates(memberActivities, nowPlusDays(-days));\r\n\r\n    const activities = [...x.map((y) => y.activities)];\r\n    const flatActivities = [].concat.apply([], activities);\r\n    const summedActivities = groupActivityStatsByDate(flatActivities);\r\n    return summedActivities;\r\n  }\r\n  getClanActivityByPlayer(memberActivities: MemberActivityTime[], activityMode: any, days = 60) {\r\n    const x = this.filterDates(memberActivities, nowPlusDays(-days));\r\n\r\n    const results = x.map((y) => {\r\n      return {\r\n        id: y.id,\r\n        seconds: y.activities.reduce((prev, next) => prev + next.seconds, 0)\r\n      };\r\n    });\r\n\r\n    return results;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "CONCURRENT_COUNT",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "memberActivityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberRecentActivityService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanActivityByPlayer",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanActivityStatsForDuration",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "filterDates",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MemberActivityTime[]",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "getClanActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "getMemberActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseClanAggregateTimeService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DataSource",
            "id": "class-DataSource-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "DataSourceOptions<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "DataSourceOptions<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DataSourceMetadata<T>>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDataLabelsWithType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataLabel[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataProperty",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "V",
                    "typeParameters": [
                        "V"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Exporter",
            "id": "class-Exporter-6fd70bab3e8f04e07bd5d3c76ecc283bc3bc10327a526bf4500abf22d6d6f39ad285556b487ddbc6d9ab0d18f2347de66b00e705e8faedb5e5f6e3003440fae7",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, startWith, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport type ExporterContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  contextProvider?: ExporterContextProvider<T, C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n  private contextProvider: ExporterContextProvider<T, C>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, context]) => {\r\n        const keys = [];\r\n        this.metadata.forEach((value, key) => keys.push(key));\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.text(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ExporterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ExporterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExporterContextProvider<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ExporterMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "exportData",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Filterer",
            "id": "class-Filterer-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "FiltererOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "FiltererOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | FiltererMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<FiltererState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "tokenizeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets a stream that returns the items and updates whenever the filters or search changes.",
                    "description": "<p>Gets a stream that returns the items and updates whenever the filters or search changes.</p>\n"
                },
                {
                    "name": "getFilterOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "FilterOption[]",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStateFilterOptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformTextFilterOptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Group",
            "id": "class-Group-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Grouper",
            "id": "class-Grouper-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "GrouperOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "GrouperOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | GrouperMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<GrouperState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "getGroupMetadata",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GrouperMetadata<T, C>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "GroupLabel[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "group",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Group[]>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performGrouping",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Group[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileService",
            "id": "class-ProfileService-ce62e7b64544c29cd482e6c80ef9b9db6c6ce1064dfbab5fdf486270f4139c3fa45835f0796e784cde66190725807c2f3bf7cf30e2eddf819d56c45d80e55060",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of, throwError } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  private profileComponents = [100, 104, 200, 202, 800, 900];\r\n\r\n  // TODO: Pull this from somewhere else.\r\n  private TRACKED_HASHES = [3902035969, 2770852111];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getProfileFromAPI(member: ClanMember) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.destinyUserInfo.membershipType}/Profile/${\r\n      member.destinyUserInfo.membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (!data.Response) {\r\n            throw data;\r\n          }\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => {\r\n          console.log('error', err);\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, member);\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, member);\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap((member) => this.getSerializedProfile(clanId, member, collectionHashes, profileRecords), 100)\r\n    ) as Observable<T>;\r\n  }\r\n\r\n  getSerializedProfilesFromCache(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile[]> {\r\n    return from(members).pipe(\r\n      mergeMap((member) => this.getSerializedProfileFromCache(clanId, member, collectionHashes, profileRecords), 100),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedProfile(clanId, member, [], []), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(profile, this.TRACKED_HASHES, collectionHashes, profileRecords) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n  getSerializedProfileFromCache(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(\r\n          profile?.data || [],\r\n          this.TRACKED_HASHES,\r\n          collectionHashes,\r\n          profileRecords\r\n        ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "profileComponents",
                    "defaultValue": "[100, 104, 200, 202, 800, 900]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "defaultValue": "StoreId.MemberProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "TRACKED_HASHES",
                    "defaultValue": "[3902035969, 2770852111]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfileFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfilesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfilesWithProgress",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileWorkerServiceMock",
            "id": "class-ProfileWorkerServiceMock-bb4952e9bfda54453fa61f22c1caef9fc33b840aeef62b54441e0683fc9e2175b310bb090b7c153db66ce86b12dec7c8f3157598da51ae597c5dbf96eb47aa8e",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, delay, of, take, tap } from 'rxjs';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\nexport class ProfileWorkerServiceMock {\r\n  constructor() {}\r\n  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): void {\r\n    of(true)\r\n      .pipe(\r\n        delay(10),\r\n        tap(() => progress({ progress: 10 })),\r\n        delay(10),\r\n        tap(() => progress({ progress: 20 })),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this.members.next([{}, {}]);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Sorter",
            "id": "class-Sorter-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "SorterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "SorterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterContextProvider<C>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SorterMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<SorterState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "getSorts",
                    "args": [],
                    "optional": false,
                    "returnType": "SortLabel[]",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Viewer",
            "id": "class-Viewer-e62750be2fc8eb926cf8b2aa1e5742b59c5079ad889a6a57404150f1e6c864d92eebc192af5e6838f350cda8072eb039d6a05af127259c03c14e11543404bd94",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  isSticky?: boolean;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({ id: key, label: value.label, isSticky: value.isSticky || false })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ViewerOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ViewerOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerContextProvider<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewerMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<ViewerState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "stateKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "description": "<p>The viewer carries information to render the items to the view.</p>\n",
            "rawdescription": "\nThe viewer carries information to render the items to the view.",
            "methods": [
                {
                    "name": "exportData",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRenderedView",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RenderedView>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRenderedViews",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RenderedView[]>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSavedState",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewerState",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getViews",
                    "args": [],
                    "optional": false,
                    "returnType": "ViewLabel[]",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RenderedViewDynamicCompDirective",
            "id": "directive-RenderedViewDynamicCompDirective-e67db51be723fe5e12601ae6ace0d5347a7e6b23a52db707710e51f6088ab322e474ada5819ca2512dd0becd664d520b14baf59f4b81b4934340f740e9b1bd44",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view-component.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: '[libDynamicComp]'\r\n})\r\nexport class RenderedViewDynamicCompDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}\r\n",
            "selector": "[libDynamicComp]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ResponsiveSidebarDirective",
            "id": "directive-ResponsiveSidebarDirective-c379868e4617e0794754d8831a9c8f077dc5d2f215d2f2f711333ae5e370b99736802b479509b46b528091a83113f2b25e7dce5498d6d92fd75f6c4abb0a85f1",
            "file": "projects/components/src/lib/shared/directives/responsive-sidebar.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil, filter } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[libResponsiveSidebar]'\r\n})\r\nexport class ResponsiveSidebarDirective implements OnInit, OnDestroy {\r\n  destroy$ = new Subject();\r\n\r\n  @Input() libResponsiveSidebar: number;\r\n\r\n  @Input() canOpen = () => true;\r\n\r\n  constructor(private router: Router, private breakpoint: BreakpointObserver, private sidenav: MatSidenav) {}\r\n\r\n  ngOnInit() {\r\n    const permanent$ = this.breakpoint.observe(`(min-width: ${this.libResponsiveSidebar}px)`).pipe(\r\n      takeUntil(this.destroy$),\r\n      map(({ matches }) => matches)\r\n    );\r\n\r\n    permanent$.subscribe((permanent) => {\r\n      this.sidenav.mode = permanent ? 'side' : 'over';\r\n      this.sidenav.opened = permanent && this.canOpen();\r\n    });\r\n\r\n    this.router.events\r\n      .pipe(\r\n        takeUntil(this.destroy$),\r\n        filter(() => this.sidenav.mode === 'over'),\r\n        filter((event) => event instanceof NavigationEnd)\r\n      )\r\n      .subscribe(() => this.sidenav.close());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next(true);\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "selector": "[libResponsiveSidebar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "canOpen",
                    "defaultValue": "() => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "() => boolean",
                    "decorators": []
                },
                {
                    "name": "libResponsiveSidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breakpoint",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sidenav",
                        "type": "MatSidenav",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpoint",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sidenav",
                        "type": "MatSidenav",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-92c6c5f02edc03583fa531b24cda7bf764ee470833b27dbd82dd435954ccde1b7ef126ba1022c684e1703312aa72809d6c3da467a3753341ac4a1dba7a4996cb",
            "file": "projects/clan-dashboard/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "manifestState$",
                    "defaultValue": "this.store.select(selectManifestState).pipe(\r\n    // eslint-disable-next-line @ngrx/avoid-mapping-selectors\r\n    map((x) => x),\r\n    catchError((err) => {\r\n      console.log('error');\r\n      return of(null);\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { loadManifest, selectManifestState } from '@core/store/manifest';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { registerIcons } from '@destiny/components/icons';\r\nimport { catchError, map, of } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  manifestState$ = this.store.select(selectManifestState).pipe(\r\n    // eslint-disable-next-line @ngrx/avoid-mapping-selectors\r\n    map((x) => x),\r\n    catchError((err) => {\r\n      console.log('error');\r\n      return of(null);\r\n    })\r\n  );\r\n\r\n  constructor(private store: Store, iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n\r\n    this.store.dispatch(loadManifest());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-manifest-container {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"manifestState$ | async as manifestState\">\r\n  <ng-container *ngIf=\"manifestState.loading === false && manifestState.loaded === true else loading\">\r\n    <div class=\"content-wrapper\">\r\n      <router-outlet #o=\"outlet\"></router-outlet>\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"manifestState.error\">\r\n    <div class=\"loading-manifest-container\">\r\n      <h1>Error State</h1>\r\n      <p>Hey something went wrong</p>\r\n    </div>\r\n  </ng-container>\r\n\r\n\r\n  <ng-template #loading>\r\n    <div class=\"loading-manifest-container\">\r\n      <h2>Loading Manifest</h2>\r\n      <mat-spinner mode=\"indeterminate\"></mat-spinner>\r\n    </div>\r\n  </ng-template>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "AppOfflineDialogComponent",
            "id": "component-AppOfflineDialogComponent-cd91dc571f5c4b20e314b5bd32232d275372c141adc5f66e728912e53c63f1dafd334ccc8eab6d5f63688ef3c5c0f9a18e12182cde839987f64faa2ed6929bbd",
            "file": "projects/clan-dashboard/src/app/core/layout/app-offline-dialog/app-offline-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-app-offline-dialog",
            "styleUrls": [
                "./app-offline-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-offline-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AppOfflineDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialogRef, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AppConfig } from '../../config/app-config';\r\n@Component({\r\n  selector: 'app-app-offline-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule],\r\n  templateUrl: './app-offline-dialog.component.html',\r\n  styleUrls: ['./app-offline-dialog.component.scss']\r\n})\r\nexport class AppOfflineDialogComponent {\r\n  constructor(public dialogRef: MatDialogRef<AppOfflineDialogComponent>, private appConfig: AppConfig) {}\r\n  onNoClick(): void {\r\n    window.sessionStorage.setItem(this.appConfig.constants.D2DASHBOARD_ACKNOWLEDGE_OFFLINE, 'true');\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app-offline-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AppOfflineDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AppOfflineDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>API Offline</h1>\r\n<div mat-dialog-content>\r\n  <p>The Bungie API is currently down for maintenance. Look at <a href=\"https://twitter.com/bungiehelp\"\r\n      targe=\"_blank\">@BungieHelp</a> for more information.</p>\r\n  <p>You can continue to view the app based off cached data, but it is not up to date.</p>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Ok</button>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8ceaf520f96e5437b08eeda244d84efb29effe62ddca4fc38eaa229085c2a1126c5715e61445bae741505aca1e4d377b350cb05fadd1dc45d9b2bbf7527029f1",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ClanConfigComponent",
            "id": "component-ClanConfigComponent-d75b672fcb81f0ddd98282db67b938cf673c970698492c3d7bc2e5272493226a0c9638c69cb22ab3dc3044dfea9b4d11cd4b6b915e74f7f44d8612661e1e2ffa",
            "file": "projects/clan-dashboard/src/app/features/config/clan-config/clan-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-config",
            "styleUrls": [
                "./clan-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ClanConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteClanData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { Store } from '@ngrx/store';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\n\r\nimport { removeClan } from '@core/store/clans/clans.actions';\r\n\r\n@Component({\r\n  selector: 'app-clan-config',\r\n  templateUrl: './clan-config.component.html',\r\n  styleUrls: ['./clan-config.component.scss']\r\n})\r\nexport class ClanConfigComponent {\r\n  @Input() clanConfig: ClanConfig;\r\n\r\n  constructor(private db: ClanDatabase, private store: Store) {}\r\n\r\n  deleteClanData() {\r\n    this.store.dispatch(removeClan({ clanId: this.clanConfig.clanId }));\r\n    this.db.purgeDatabase(this.clanConfig.clanId);\r\n     /*\r\n    window.localStorage.removeItem(`lastActivityUpdate-${x}`)\r\n    window.localStorage.removeItem(`lastActivityAllUpdate-${x}`)\r\n    window.localStorage.removeItem(`MANIFEST_PATH_KEY`)\r\n    window.localStorage.removeItem(`MANIFEST_PATH_EXP_KEY`)\r\n    */\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 button {\r\n  float: right;\r\n}\r\n",
                    "styleUrl": "./clan-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div>\r\n  <h3>{{clanConfig.clanTag}} - {{clanConfig.clanName}} <button (click)=\"deleteClanData()\">Delete Clan Data</button></h3>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ClanDetailCellComponent",
            "id": "component-ClanDetailCellComponent-ac34576172ea8eec8fd87c8d49db844007482273da121ec452715f0e89673ba67cc60b7a5d6a67da7b524b7b1e090b9ef97c598a8de050982fe4e3ac1687f18e",
            "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-detail-cell",
            "styleUrls": [
                "./clan-detail-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-detail-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanDetail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "GroupsV2GroupV2",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addClan",
                    "defaultValue": "new EventEmitter<GroupsV2GroupV2>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeClan",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GroupsV2GroupV2 } from 'bungie-api-angular';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n@Component({\r\n  selector: 'app-clan-detail-cell',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatListModule, PipesModule, MatIconModule, MatTooltipModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './clan-detail-cell.component.html',\r\n  styleUrls: ['./clan-detail-cell.component.scss']\r\n})\r\nexport class ClanDetailCellComponent {\r\n  @Input() clanDetail: GroupsV2GroupV2;\r\n  @Input() loading: boolean;\r\n  @Input() showAdd: boolean;\r\n  @Output() removeClan = new EventEmitter<string>();\r\n  @Output() addClan = new EventEmitter<GroupsV2GroupV2>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n.clan-detail {\r\n  width: 100%;\r\n  .mat-mdc-card-title-group {\r\n    display: block;\r\n  }\r\n  .mat-mdc-card-title {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .title-spacer {\r\n      flex: 1 1 auto;\r\n    }\r\n  }\r\n\r\n  &__loading {\r\n    .skeleton-title {\r\n      width: 250px;\r\n      margin-bottom: 0.75rem;\r\n    }\r\n    .skeleton-sub-title {\r\n      width: 250px;\r\n      margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .skeleton-list {\r\n      width: 200px;\r\n    }\r\n    .skeleton-button {\r\n      width: 75px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./clan-detail-cell.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"!loading; else loadingTemplate\">\r\n  <mat-card class=\"clan-detail\">\r\n    <mat-card-header>\r\n      <mat-card-title-group>\r\n        <!-- TODO: Clan Banner -->\r\n        <mat-card-title>\r\n          <div class=\"title-spacer\">{{clanDetail.name}} <ng-container *ngIf=\"clanDetail.clanInfo.clanCallsign\">\r\n              [{{clanDetail.clanInfo.clanCallsign}}]</ng-container>\r\n          </div>\r\n          <a mat-icon-button href=\"https://www.bungie.net/en/ClanV2?groupid={{clanDetail.groupId}}\" target=\"_blank\"\r\n            matTooltip=\"Bungie Group Page\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </a>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          {{clanDetail.motto}}\r\n        </mat-card-subtitle>\r\n      </mat-card-title-group>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <mat-list>\r\n        <mat-list-item>\r\n          <mat-icon matListItemIcon>groups</mat-icon>{{clanDetail.memberCount}} Members\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <mat-icon matListItemIcon>calendar_month</mat-icon> Created\r\n          {{clanDetail.creationDate | bungieDate}}\r\n        </mat-list-item>\r\n        <!-- TODO: OPEN INVITE ONLY -->\r\n      </mat-list>\r\n\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <button *ngIf=\"showAdd\" mat-button (click)=\"addClan.emit(clanDetail)\">Add</button>\r\n      <button *ngIf=\"!showAdd\" mat-button (click)=\"removeClan.emit(clanDetail.groupId.toString())\">Remove</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</ng-container>\r\n<ng-template #loadingTemplate>\r\n  <mat-card class=\"clan-detail clan-detail__loading\">\r\n    <mat-card-header>\r\n      <mat-card-title-group>\r\n        <mat-card-title>\r\n          <span class=\"skeleton-item skeleton-title\"></span>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n        </mat-card-subtitle>\r\n      </mat-card-title-group>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <mat-list>\r\n        <mat-list-item>\r\n          <span class=\"skeleton-item skeleton-list\"></span>\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <span class=\"skeleton-item skeleton-list\"></span>\r\n        </mat-list-item>\r\n        <!-- TODO: OPEN INVITE ONLY -->\r\n      </mat-list>\r\n\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <span class=\"skeleton-item skeleton-button\"></span>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClanDetailComponent",
            "id": "component-ClanDetailComponent-d9f49de037976d57b6c9091a2a169377e9406dec1156ecdb371fac754892101183d02cfed79c5b045d6f188e8893f39ac37e78666ccc124e09f2a60424c1b638",
            "file": "projects/clan-dashboard/src/app/features/clan-details/clan-detail/clan-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-detail",
            "styleUrls": [
                "./clan-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ClanConfig",
                    "decorators": []
                },
                {
                    "name": "showAdd",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clanDetails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GroupsV2GroupV2>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clanDetail",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanDetail",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { ClanDetailService } from '../data-access/clan-detail.service';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { GroupsV2GroupV2 } from 'bungie-api-angular';\r\n\r\n@Component({\r\n  selector: 'app-clan-detail',\r\n  templateUrl: './clan-detail.component.html',\r\n  styleUrls: ['./clan-detail.component.scss']\r\n})\r\nexport class ClanDetailComponent implements OnChanges {\r\n  // export class ClanDetailComponent {\r\n  @Input() clanConfig: ClanConfig;\r\n  @Input() showAdd: boolean = false;\r\n\r\n  constructor(private clanDetailService: ClanDetailService) {}\r\n\r\n  clanDetails$: Observable<GroupsV2GroupV2>;\r\n  loading = false;\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['clanConfig']) {\r\n      this.loading = true;\r\n      if (this.clanConfig.clanId) {\r\n        this.clanDetails$ = this.clanDetailService\r\n          .getClan(this.clanConfig.clanId)\r\n          .pipe(tap(() => (this.loading = false)));\r\n      }\r\n    }\r\n  }\r\n\r\n  removeClan(clanId: string) {\r\n    this.clanDetailService.removeClan(clanId);\r\n  }\r\n  addClan(clanDetail: GroupsV2GroupV2) {\r\n    this.clanDetailService.addClan(clanDetail);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clan-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDetailService",
                        "type": "ClanDetailService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "clanDetailService",
                        "type": "ClanDetailService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<app-clan-detail-cell [clanDetail]=\"clanDetails$ | async\" [loading]=\"loading\" (removeClan)=\"removeClan($event)\"\r\n  [showAdd]=\"showAdd\" (addClan)=\"addClan($event)\"></app-clan-detail-cell>\r\n"
        },
        {
            "name": "ClanInfoComponent",
            "id": "component-ClanInfoComponent-094890e4bed995bacfb73905f9c7d8c4dd408c3f65b83f24d4b4a48b7b884e7913a69091372a84e5bb92b21b8b8493a34b47c69899839e386b791217f04ca544",
            "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-info",
            "styleUrls": [
                "./clan-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-clan-info',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './clan-info.component.html',\n  styleUrls: ['./clan-info.component.scss']\n})\nexport class ClanInfoComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clan-info.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>clan-info works!</p>\n"
        },
        {
            "name": "ClansDetailsComponent",
            "id": "component-ClansDetailsComponent-b380d1cb2bace0c58a06538a42b095e432aa45345a6869a8bbe03dcfd58a361a0ca10c51a0cd99debc51cbd273dbe09995ceb32542fe0aa078688b1c4d8cfa4f",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-details",
            "styleUrls": [
                "./clans-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clansInfo$",
                    "defaultValue": "this.clansDetailsService.clanInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-details',\r\n  templateUrl: './clans-details.component.html',\r\n  styleUrls: ['./clans-details.component.scss']\r\n})\r\nexport class ClansDetailsComponent {\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n  clansInfo$ = this.clansDetailsService.clanInfo$;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clans-wrapper {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n",
                    "styleUrl": "./clans-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clans-wrapper\">\r\n  <ng-container *ngIf=\"clansInfo$ | async as clansInfo\">\r\n    <ng-container *ngFor=\"let clanInfo of clansInfo\">\r\n      <h1>{{clanInfo.name}} - {{clanInfo.clanInfo.clanCallsign}}</h1>\r\n      <h2>Member Count - {{clanInfo.memberCount}}</h2>\r\n      <h2>Level - {{clanInfo.clanInfo.d2ClanProgressions['584850370'].level}} /\r\n        {{clanInfo.clanInfo.d2ClanProgressions['584850370'].levelCap}}</h2>\r\n      <hr>\r\n\r\n    </ng-container>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ClanSearchAutocompleteComponent",
            "id": "component-ClanSearchAutocompleteComponent-892c724f2ac6ab3656b33d5575996b6a1ac8dc06b70daa48e4130bfd57a445c8784ec500ea22a363608f4a5167ab53f90d8a2582f5a0fdf0492fa109518930fd",
            "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search-autocomplete",
            "styleUrls": [
                "./clan-search-autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search-autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoCompleteResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ClanSearchResultItem[]",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addClan",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "addMembersClan",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "searchClans",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autocompleteControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "autocompleteSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { sampleTime } from 'rxjs';\r\nimport { ClanSearchResultItem } from '../../models/ClanSearchResultItem';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n@Component({\r\n  selector: 'app-clan-search-autocomplete',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatAutocompleteModule,\r\n    ReactiveFormsModule,\r\n    MatProgressSpinnerModule,\r\n    MatIconModule\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './clan-search-autocomplete.component.html',\r\n  styleUrls: ['./clan-search-autocomplete.component.scss']\r\n})\r\nexport class ClanSearchAutocompleteComponent implements OnInit {\r\n  @Input() autoCompleteResults: ClanSearchResultItem[];\r\n  @Input() loading: boolean;\r\n\r\n  @Output() addClan = new EventEmitter<any>();\r\n  @Output() addMembersClan = new EventEmitter<any>();\r\n  @Output() searchClans = new EventEmitter<string>();\r\n\r\n  autocompleteControl = new FormControl('');\r\n\r\n  ngOnInit() {\r\n    this.autocompleteControl.valueChanges.pipe(sampleTime(1000)).subscribe((result) => {\r\n      if (typeof result === 'string') {\r\n        this.searchClans.emit(result);\r\n      }\r\n    });\r\n  }\r\n\r\n  autocompleteSelected(event: MatAutocompleteSelectedEvent, input: HTMLInputElement) {\r\n    const selectedItem = event.option.value as ClanSearchResultItem;\r\n    input.value = '';\r\n    input.blur();\r\n    if (selectedItem.type === 'clan') {\r\n      this.addClan.emit(selectedItem.clanInfo);\r\n    } else if (selectedItem.type === 'player') {\r\n      this.addMembersClan.emit(selectedItem);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-spinner,\r\n.clan-result {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  mat-spinner,\r\n  mat-icon {\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n.search {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./clan-search-autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\" class=\"search\">\r\n  <input matInput #clanInput  [matAutocomplete]=\"auto\"\r\n    [formControl]=\"autocompleteControl\" placeholder=\"Search by Player Name, Clan Name, Clan Id, or Bungie Clan URL\">\r\n  <!-- <i matSuffix class=\"material-icons\">mode_edit</i> -->\r\n  <mat-autocomplete #auto=\"matAutocomplete\" autoActiveFirstOption=\"true\"\r\n    (optionSelected)=\"autocompleteSelected($event, clanInput)\">\r\n    <ng-container *ngIf=\"autoCompleteResults || loading\">\r\n      <mat-option disabled class=\"loading\" *ngIf=\"loading\">\r\n        <span class=\"loading-spinner\">\r\n          <mat-spinner matSuffix diameter='35' mode=\"indeterminate\"></mat-spinner>\r\n          Loading\r\n        </span>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let clan of autoCompleteResults\" [value]=\"clan\">\r\n        <span class=\"clan-result\">\r\n          <ng-container *ngIf=\"clan.type === 'player'; else group\">\r\n            <mat-icon [svgIcon]=\"clan.iconName\"></mat-icon>\r\n          </ng-container>\r\n          {{clan.name}}\r\n        </span>\r\n      </mat-option>\r\n      <mat-option disabled *ngIf=\"autoCompleteResults?.length === 0 && !loading\">\r\n        Clan Not Found\r\n      </mat-option>\r\n    </ng-container>\r\n  </mat-autocomplete>\r\n</mat-form-field>\r\n\r\n<ng-template #group>\r\n  <mat-icon>people</mat-icon>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClanSearchComponent",
            "id": "component-ClanSearchComponent-2f152cc4ce30b00c94424f55426deea249b10de3ca9d92153f0106d3f4852c66a8c4bc33d682bc1f2e2c66969416bf62c4a1f82364d7811b05a44f53536227d4",
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search",
            "styleUrls": [
                "./clan-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clans$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { addClan, selectAllClans } from '@core/store/clans';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-clan-search',\r\n  templateUrl: './clan-search.component.html',\r\n  styleUrls: ['./clan-search.component.scss']\r\n})\r\nexport class ClanSearchComponent {\r\n  constructor(private store: Store) {}\r\n\r\n  clans$ = this.store.select(selectAllClans);\r\n  addClan(clanId: string, clanName: string, clanTag: string) {\r\n    this.store.dispatch(addClan({ clanId, clanName, clanTag }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  button {\r\n    margin: 10px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./clan-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"wrapper\">\r\n  <h1>DOD - Quick Start</h1>\r\n  <p>\r\n    Click these two buttons and then let's go.\r\n  </p>\r\n  <button (click)=\"addClan('2073131', 'DoD - Paternal Chums', 'DOD')\">DoD-PC - Chums</button><br>\r\n  <button (click)=\"addClan('4859164', 'DoD - Paternal Champs', 'DOD')\">DoD-PC - Champs</button><br>\r\n  <a routerLink=\"/\">Let's Go</a>\r\n</div>\r\n"
        },
        {
            "name": "ClanSearchCuratedViewComponent",
            "id": "component-ClanSearchCuratedViewComponent-287181c02583a4da025a458881a811aef69c68d0e1c1ec28e4d8368ff6e8e61aaa2324568db58f203cadffac291e38a3654b2a5040c4853c7d327ad370aa14e6",
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search-curated-view",
            "styleUrls": [
                "./clan-search-curated-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search-curated-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeClans$",
                    "defaultValue": "this.clanSearchService.clans$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clans$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return ALL_CLANS.find((x) => x.key === params.get('key'));\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "vm$",
                    "defaultValue": "combineLatest([this.activeClans$, this.clans$]).pipe(\r\n    map(([ac, c]) => {\r\n      return {\r\n        activeClans: ac,\r\n        clans: c\r\n      };\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "clanIsActive",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activeClans",
                            "type": "ClanConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activeClans",
                            "type": "ClanConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { combineLatest, map } from 'rxjs';\r\nimport { ClanSearchService } from '../data-access/clan-search.service';\r\nimport { ALL_CLANS } from './curated_clans';\r\n\r\n@Component({\r\n  selector: 'app-clan-search-curated-view',\r\n  templateUrl: './clan-search-curated-view.component.html',\r\n  styleUrls: ['./clan-search-curated-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClanSearchCuratedViewComponent {\r\n  constructor(private route: ActivatedRoute, private clanSearchService: ClanSearchService) {}\r\n\r\n  activeClans$ = this.clanSearchService.clans$;\r\n\r\n  clans$ = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return ALL_CLANS.find((x) => x.key === params.get('key'));\r\n    })\r\n  );\r\n  vm$ = combineLatest([this.activeClans$, this.clans$]).pipe(\r\n    map(([ac, c]) => {\r\n      return {\r\n        activeClans: ac,\r\n        clans: c\r\n      };\r\n    })\r\n  );\r\n\r\n  // Don't ever do this on a big app.\r\n  // I'm donig this in a controlled state and I'm\r\n  // feeling too lazy to make a pipe\r\n  clanIsActive(clan: ClanConfig, activeClans: ClanConfig[]) {\r\n    return !activeClans.find((x) => x.clanId === clan.clanId);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "header {\r\n  margin: 1rem;\r\n  text-align: center;\r\n}\r\n.found-clans {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  .clan {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 1rem;\r\n  }\r\n}\r\n.clan-groups {\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n  hr {\r\n    width: 98%;\r\n  }\r\n  margin-bottom: 4rem;\r\n}\r\n",
                    "styleUrl": "./clan-search-curated-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"vm$|async as vm\">\r\n  <header>\r\n    <h1>{{vm.clans.title}}</h1>\r\n    <p>\r\n      Please reach out to <a href=\"https://twitter.com/WorthyD\" target=\"_blank\">WorthyD</a> to update\r\n    </p>\r\n    <button color=\"accent\" mat-raised-button routerLink=\"/\">Let's Go</button>\r\n  </header>\r\n  <div class=\"found-clans\">\r\n    <ng-container *ngFor=\"let clan of vm.clans.clans\">\r\n      <app-clan-detail [clanConfig]=\"clan\" [showAdd]=\"clanIsActive(clan, vm.activeClans)\" class=\"clan\">\r\n      </app-clan-detail>\r\n    </ng-container>\r\n\r\n  </div>\r\n  <ng-container *ngFor=\"let clanGroup of vm.clans.subGroups\">\r\n    <div class=\"clan-groups\">\r\n      <h2>{{clanGroup.title}}</h2>\r\n      <div class=\"found-clans\">\r\n        <ng-container *ngFor=\"let clan of clanGroup.clans\">\r\n          <app-clan-detail [clanConfig]=\"clan\" [showAdd]=\"clanIsActive(clan, vm.activeClans)\" class=\"clan\">\r\n          </app-clan-detail>\r\n        </ng-container>\r\n      </div>\r\n      <hr>\r\n    </div>\r\n  </ng-container>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ClanSearchViewComponent",
            "id": "component-ClanSearchViewComponent-c9e2fa9a83c8b3e6a5f0cfcb9a944278939546dc686faa0f104aa7a824e27a15661772ed0177b2ec9ad1e87b9a6a364f787ad969aa1295dbf3fa12aa39af4ea9",
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search-view",
            "styleUrls": [
                "./clan-search-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autoCompleteResults$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "bgClass",
                    "defaultValue": "`bg-${Math.floor(Math.random() * 3) + 1}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clans$",
                    "defaultValue": "this.clanSearchService.clans$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "year",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMembersClan",
                    "args": [
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "demoClan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchClans",
                    "args": [
                        {
                            "name": "search",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupV2Card } from 'bungie-api-angular/lib/model/groupsV2GroupV2Card';\r\nimport { catchError, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { ClanSearchService } from '../data-access/clan-search.service';\r\n\r\n@Component({\r\n  selector: 'app-clan-search-view',\r\n  templateUrl: './clan-search-view.component.html',\r\n  styleUrls: ['./clan-search-view.component.scss']\r\n})\r\nexport class ClanSearchViewComponent {\r\n  constructor(private clanSearchService: ClanSearchService) {}\r\n  year = new Date().getFullYear();\r\n  clans$ = this.clanSearchService.clans$;\r\n\r\n  bgClass = `bg-${Math.floor(Math.random() * 3) + 1}`;\r\n  loading = false;\r\n  autoCompleteResults$: Observable<any>;\r\n\r\n  searchClans(search: any) {\r\n    this.autoCompleteResults$ = of(search).pipe(\r\n      tap(() => (this.loading = true)),\r\n      switchMap((search) => {\r\n        if (!search || search.name) {\r\n          this.loading = false;\r\n          return of([]);\r\n        } else if (!isNaN(search)) {\r\n          return this.clanSearchService.numericClanSearch(search);\r\n        } else if (search.indexOf && search.indexOf('https://www.bungie.net/') > -1) {\r\n          const clanId = search.split('=')[1];\r\n          return this.clanSearchService.numericClanSearch(clanId);\r\n        } else {\r\n          //return this.textClanSearch(currentQuery);\r\n          return this.clanSearchService.combinedSearch(search);\r\n        }\r\n      }),\r\n      tap(() => (this.loading = false)),\r\n      catchError((err) => {\r\n        this.loading = false;\r\n        // Just remapping the data to show the error\r\n        // There are better ways of doing this\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  addClan(clan: GroupsV2GroupV2Card) {\r\n    this.clanSearchService.addClan(clan);\r\n  }\r\n  demoClan() {\r\n    this.clanSearchService.addClan({ groupId: 2073131, name: 'DoD Paternal Chums', clanInfo: { clanCallsign: 'DoD' } });\r\n  }\r\n\r\n  addMembersClan(member: any) {\r\n    this.clanSearchService.findPlayerClan(member);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".home-info {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  @media (min-width: 48em) {\r\n    height: 200px;\r\n  }\r\n  @media (min-width: 96em) {\r\n    height: 400px;\r\n  }\r\n  &::before {\r\n    content: ' ';\r\n    background: #000;\r\n    display: block;\r\n    height: 100%;\r\n    opacity: 0.8;\r\n    position: absolute;\r\n    width: 100%;\r\n    z-index: 1;\r\n  }\r\n\r\n  .info {\r\n    position: relative;\r\n    z-index: 10;\r\n    max-width: 960px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    color: #fff;\r\n  }\r\n}\r\n.bg {\r\n  background-position: center center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n.bg-1 {\r\n  background-image: url('/assets/backgrounds/1.jpg');\r\n}\r\n.bg-2 {\r\n  background-image: url('/assets/backgrounds/2.jpg');\r\n}\r\n.bg-3 {\r\n  background-image: url('/assets/backgrounds/3.jpg');\r\n}\r\n\r\n.alert-card {\r\n  align-items: center;\r\n  background-color: var(--app-warning-background);\r\n  display: inline-flex;\r\n  color: var(--app-warning-text);\r\n  justify-content: center;\r\n  padding: 1rem;\r\n  border-radius: 0.5rem;\r\n  margin: 0 auto;\r\n\r\n  .mat-icon {\r\n    margin-right: 1rem;\r\n  }\r\n  h2 {\r\n    flex: 1;\r\n    margin: 0;\r\n  }\r\n}\r\n.lets-go-btn {\r\n  text-align: center;\r\n  button {\r\n    padding: 2rem 4rem;\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n\r\n.clan-search {\r\n  margin: 3rem auto;\r\n  max-width: 500px;\r\n  h2 {\r\n    text-align: center;\r\n    display: flex;\r\n    align-items: center;\r\n    //margin: 0 auto;\r\n    justify-content: center;\r\n    i {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  h4 {\r\n    text-align: center;\r\n    button {\r\n      font-size: inherit;\r\n    }\r\n  }\r\n  .clan-search-autocomplete {\r\n    display: block;\r\n    max-width: 500px;\r\n  }\r\n}\r\n\r\n.found-clans {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 100%;\r\n  max-width: 1920px;\r\n  margin: 0 auto;\r\n  .clan {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n.app-info {\r\n  width: 100%;\r\n  max-width: 1020px;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  .info-card {\r\n    flex: 0 0 25%;\r\n    max-width: 250px;\r\n    display: flex;\r\n    .icon {\r\n      flex: 0 0 16.6666666667%;\r\n      max-width: 16.6666666667%;\r\n    }\r\n    .info-card-content {\r\n      flex: 0 0 83.3333333333%;\r\n      max-width: 83.3333333333%;\r\n    }\r\n  }\r\n}\r\n\r\nfooter {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./clan-search-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clan-search-wrapper\">\r\n  <div class=\"home-info bg {{bgClass}}\">\r\n    <div class=\"info\">\r\n      <h1>\r\n        Destiny Clan Dashboard\r\n      </h1>\r\n      <h2>View your clan's activity with ease.</h2>\r\n      <p>\r\n        This app is a passion project and I should probably put a bunch of marketing nonsense here. <br> <br> I hope you\r\n        find this thing useful. <a href=\"https://twitter.com/worthyd\">Send me your feedback</a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"clan-search\">\r\n    <h2>Find Your Clan<i class=\"material-icons\"\r\n        matTooltip=\"Search by Clan Name, Clan Id, or Clan URL. Clan Name must search for full clan name. Bungie doesn't support a 'fuzzy' search.\">\r\n        help\r\n      </i></h2>\r\n    <h4>Find your clan and any additional clans you wish to track. Don't have clan? <br>Try <button mat-raised-button\r\n        (click)=\"demoClan()\">this\r\n        one</button> and have a look around.\r\n    </h4>\r\n    <app-clan-search-autocomplete class=\"clan-search-autocomplete\" [autoCompleteResults]=\"autoCompleteResults$ | async\"\r\n      [loading]=\"loading\" (searchClans)=\"searchClans($event)\" (addClan)=\"addClan($event)\"\r\n      (addMembersClan)=\"addMembersClan($event)\"></app-clan-search-autocomplete>\r\n  </div>\r\n  <ng-container *ngIf=\"clans$ | async as clans\">\r\n    <div *ngIf=\"clans.length > 4\">\r\n      <div class=\"alert-card\">\r\n        <mat-icon>warning</mat-icon>\r\n        <h2>Adding too many clans will impact the performance of the application</h2>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"clans.length > 0\" class=\"lets-go-btn\">\r\n      <button color=\"accent\" mat-raised-button routerLink=\"/\">Let's Go</button>\r\n    </div>\r\n    <!-- TODO: Add Let's go -->\r\n\r\n    <div class=\"found-clans\">\r\n      <ng-container *ngFor=\"let clan of clans\">\r\n        <app-clan-detail [clanConfig]=\"clan\" class=\"clan\"></app-clan-detail>\r\n      </ng-container>\r\n\r\n    </div>\r\n\r\n\r\n    <section class=\"app-info\" *ngIf=\"clans.length === 0\">\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\">\r\n            date_range\r\n          </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Seasonal Progress</h3>\r\n          <p>\r\n            View seasonal progress on both a clan and player level.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\">\r\n            group\r\n          </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Roster Activity</h3>\r\n          <p>\r\n            Find out who has been the most active over the last year by viewing interactive heatmaps.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\">\r\n            reduce_capacity\r\n          </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Activity Stats</h3>\r\n          <p>\r\n            Track who has cleared what, who has gotten the rare drops and completed the hardest challenges.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\">\r\n            verified_user\r\n          </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Seal Completion</h3>\r\n          <p>\r\n            Celebrate the accomplishment of completing seals with your clan. Easily view who's finished seals and\r\n            find\r\n            out who needs help.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n    </section>\r\n\r\n  </ng-container>\r\n\r\n\r\n  <footer>\r\n    © {{year}} - <a href=\"https://twitter.com/worthyd\" target=\"_blank\">@WorthyD</a> - <a\r\n      href=\"https://github.com/WorthyD/d2-clandashboard\" target=\"_blank\">Source Code</a> - Not Affiliated with Bungie\r\n  </footer>\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "ClansRosterComponent",
            "id": "component-ClansRosterComponent-490b8beb90e68565d04a7bcb79460fd35b0dfb644ed685a2062451766dfe8d499ab2197a967cb82c3fcdb2e606019f979fd99ae9f88a5205b0e6045dc07d2986",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-roster",
            "styleUrls": [
                "./clans-roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-roster.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "rosterExporter",
                    "defaultValue": "new Exporter({ metadata: CLAN_ROSTER_EXPORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "rosterFilter",
                    "defaultValue": "new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "rosterInfo$",
                    "defaultValue": "this.clansRosterService.activeClanPeople$.pipe(\r\n    map((clanProfiles) => {\r\n      return {\r\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\r\n        viewer: this.rosterViewer,\r\n        filterer: this.rosterFilter,\r\n        exporter: this.rosterExporter,\r\n        sorter: this.rosterSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RosterResources>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "rosterSorter",
                    "defaultValue": "new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "rosterViewer",
                    "defaultValue": "new Viewer(\r\n    {\r\n      metadata: CLAN_ROSTER_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Table_Viewer'\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewRef, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Grouper, Sorter, Viewer } from '@destiny/components';\r\nimport { combineLatest, delay, filter, map, Observable, of, tap } from 'rxjs';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { ClanMemberProfile, ClansRosterService } from '../data-access/clans-roster.service';\r\nimport { CLAN_ROSTER_VIEWER_METADATA } from './clan-roster-metadata';\r\nimport { CLAN_ROSTER_FILTERER_METADATA } from './clan-roster-metadata/ClanRosterFilterer';\r\nimport { CLAN_ROSTER_SORTER_METADATA } from './clan-roster-metadata/ClanRosterSorter';\r\nimport { CLAN_ROSTER_EXPORTER_METADATA } from './clan-roster-metadata/ClanRosterExporter';\r\n\r\ninterface RosterResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-clans-roster',\r\n  templateUrl: './clans-roster.component.html',\r\n  styleUrls: ['./clans-roster.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansRosterComponent {\r\n  constructor(\r\n    private clansRosterService: ClansRosterService,\r\n    private bungieDatePage: BungieDatePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n  // stuff2$ = this.clansRosterService.activeClanPeople$;\r\n  //members$ = this.clansRosterService.clanMembers$;\r\n  //profiles$ = this.clansRosterService.clanProfiles$;\r\n\r\n  rosterViewer = new Viewer(\r\n    {\r\n      metadata: CLAN_ROSTER_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Table_Viewer'\r\n  );\r\n  rosterFilter = new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA });\r\n  rosterSorter = new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA });\r\n  rosterExporter = new Exporter({ metadata: CLAN_ROSTER_EXPORTER_METADATA });\r\n  isLoading = true;\r\n\r\n  rosterInfo$: Observable<RosterResources> = this.clansRosterService.activeClanPeople$.pipe(\r\n    map((clanProfiles) => {\r\n      return {\r\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\r\n        viewer: this.rosterViewer,\r\n        filterer: this.rosterFilter,\r\n        exporter: this.rosterExporter,\r\n        sorter: this.rosterSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n\r\n  createViewContextProvider() {\r\n    return of((item: ClanMemberProfile) => ({\r\n      item,\r\n      datePipe: this.bungieDatePage,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-clans-roster {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.clan-roster {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .clan-roster-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n  .characters-cell {\r\n    display: flex;\r\n    height: 51px;\r\n  }\r\n  .character-cell {\r\n    display: flex;\r\n    flex: 1 1 33.33%;\r\n    align-items: center;\r\n    > * {\r\n      //   display: flex;\r\n      //   align-items: center;\r\n      height: 100%;\r\n      width: 100%;\r\n      //   text-align: center;\r\n      //   justify-content: center;\r\n    }\r\n    div {\r\n      width: 100%;\r\n      height: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      text-align: center;\r\n      justify-content: center;\r\n      min-width: 60px;\r\n    }\r\n    .titan-cell {\r\n      background: rgba(100, 47, 47, 0.8) !important;\r\n      color: #fff;\r\n    }\r\n    .hunter-cell {\r\n      background: rgba(30, 66, 99, 0.8) !important;\r\n      color: #fff;\r\n    }\r\n    .warlock-cell {\r\n      background: rgba(132, 108, 24, 0.8) !important;\r\n      color: #fff;\r\n    }\r\n\r\n    .power-cell {\r\n      background: rgba(183, 140, 37, 0.7);\r\n      color: #fff;\r\n    }\r\n  }\r\n  .power-cell {\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    height: 51px;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    text-align: center;\r\n    width: 100%;\r\n    background-color: #b78c25b3;\r\n    color: #fff;\r\n    padding: 0 16px;\r\n  }\r\n  .mat-column-characters,\r\n  .mat-column-powerLevel {\r\n    padding: 0;\r\n  }\r\n  .score-cell {\r\n    display: flex;\r\n    height: auto;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    text-align: center;\r\n    width: 100%;\r\n  }\r\n}\r\n.loading {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./clans-roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDatePage",
                        "type": "BungieDatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDatePage",
                        "type": "BungieDatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clan-roster\">\r\n  <lib-table-view class=\"clan-roster-table\"\r\n    [isLoading]=\"isLoading\"\r\n    [dataSource]=\"(rosterInfo$ | async)?.dataSource\"\r\n    [header]=\"'Clan Roster'\"\r\n    [viewer]=\"rosterViewer\"\r\n    [filterer]=\"rosterFilter\" [sorter]=\"rosterSorter\"\r\n    [exporter]=\"rosterExporter\">\r\n\r\n  </lib-table-view>\r\n</div>\r\n"
        },
        {
            "name": "ClassCellComponent",
            "id": "component-ClassCellComponent-bf9996fcdaecec48b23489b2457f139ca5afb872916c03e1d3160a59c8a0c16cc15a4abcca88f5862cdfa60b907486829e94698997152efbc4d72144266e8365",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-class-cell",
            "styleUrls": [],
            "styles": [],
            "template": "<div [ngClass]=\"(profile?.characters.data)[characterHash].classType | classicon\">\n  {{ (profile?.characters.data)[characterHash].light }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characterHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "MemberProfile",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit, Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Component({\r\n  selector: 'app-class-cell',\r\n  template: `\r\n    <div [ngClass]=\"(profile?.characters.data)[characterHash].classType | classicon\">\r\n      {{ (profile?.characters.data)[characterHash].light }}\r\n    </div>\r\n  `,\r\n  styles: [\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClassCellComponent {\r\n  @Input() characterHash: string;\r\n\r\n  @Input() profile: MemberProfile;\r\n\r\n  constructor() {}\r\n\r\n  getIcon(): string {\r\n    const classType = (this.profile?.characters.data)[this.characterHash].classType;\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan';\r\n      case 1:\r\n        return 'hunter';\r\n      case 2:\r\n        return 'warlock';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'classicon',\r\n  pure: true\r\n})\r\nexport class ClassIconPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(classType: number): any {\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan-cell';\r\n      case 1:\r\n        return 'hunter-cell';\r\n      case 2:\r\n        return 'warlock-cell';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            }
        },
        {
            "name": "ConfigComponent",
            "id": "component-ConfigComponent-e5422cd0b22b7c6d46bf72f861665a652bf4a6d0834011552481be56f11b795f535c3a7357526ef07df0baef9bad2f84bc6a54d4cd86839c34bae726a1ece9e3",
            "file": "projects/clan-dashboard/src/app/features/config/config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config",
            "styleUrls": [
                "./config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clanConfigs$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { selectAllClans } from '@core/store/clans';\r\n\r\n@Component({\r\n  selector: 'app-config',\r\n  templateUrl: './config.component.html',\r\n  styleUrls: ['./config.component.scss']\r\n})\r\nexport class ConfigComponent  {\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  clanConfigs$ = this.store.select(selectAllClans);\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".config-wrapper {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n}\r\n",
                    "styleUrl": "./config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"config-wrapper\">\r\n  <ng-container *ngFor=\"let clanConfig of clanConfigs$ | async \">\r\n    <app-clan-config [clanConfig]=\"clanConfig\">\r\n\r\n    </app-clan-config>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ConfigComponent",
            "id": "component-ConfigComponent-c551d7c0fcaefb292b78b315bdce5757d4fb889a056d15226ff7f05b825b3e9dbc3f660473d7b081ea27139339a8935c8cd7a80aedca3806ad973cfb2c7f3d06-1",
            "file": "projects/clan-dashboard/src/app/views/config/config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config-view",
            "styleUrls": [
                "./config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-config-view',\r\n  templateUrl: './config.component.html',\r\n  styleUrls: ['./config.component.scss']\r\n})\r\nexport class ConfigComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfigComponent-1",
            "templateData": "<app-config></app-config>\r\n"
        },
        {
            "name": "DisplayOptionsComponent",
            "id": "component-DisplayOptionsComponent-15e2f369158417ddac7494536760fdfec4c69105843f7b3e289b0c9fd84be690adf3ea8400285a8277820c8cf4a002b94a5ac1c0b49a3a3700acbbe87199e3a6",
            "file": "projects/components/src/lib/shared/display-options/display-options.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-display-options",
            "styleUrls": [
                "./display-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./display-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "grouper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Grouper",
                    "decorators": []
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Sorter",
                    "decorators": []
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Viewer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sorts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleViewKey",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { take } from 'rxjs';\r\nimport { Grouper, GroupLabel } from '../../data/grouper';\r\nimport { Sorter, SortLabel } from '../../data/sorter';\r\nimport { Viewer, ViewLabel } from '../../data/viewer';\r\n\r\n@Component({\r\n  selector: 'lib-display-options',\r\n  templateUrl: './display-options.component.html',\r\n  imports: [CommonModule, FormsModule, MatButtonModule, MatMenuModule, MatIconModule],\r\n  standalone: true,\r\n  styleUrls: ['./display-options.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DisplayOptionsComponent implements OnChanges {\r\n  groups: GroupLabel[];\r\n\r\n  sorts: SortLabel[];\r\n\r\n  views: ViewLabel[];\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['grouper']) {\r\n      this.groups = this.grouper ? this.grouper.getGroups() : [];\r\n    }\r\n    if (simpleChanges['sorter']) {\r\n      this.sorts = this.sorter ? this.sorter.getSorts() : [];\r\n    }\r\n    if (simpleChanges['viewer']) {\r\n      this.views = this.viewer ? this.viewer.getViews() : [];\r\n    }\r\n  }\r\n\r\n  setGroup(group: string) {\r\n    this.grouper.setState({ group });\r\n  }\r\n\r\n  setSort(sort: string) {\r\n    this.sorter.state.pipe(take(1)).subscribe((state) => {\r\n      let reverse = state.reverse;\r\n      if (state.sort === sort) {\r\n        reverse = !reverse;\r\n      } else {\r\n        reverse = false;\r\n      }\r\n\r\n      this.sorter.setState({ ...state, sort, reverse });\r\n    });\r\n  }\r\n\r\n  toggleViewKey(view: string) {\r\n    this.viewer.toggle(view);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.mat-button {\r\n  min-width: 0;\r\n  display: block;\r\n  padding: 0 8px;\r\n}\r\n\r\n.button-content {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.options-menu-trigger {\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  font-size: 12px;\r\n}\r\n\r\nbutton.mat-mdc-menu-item {\r\n  mat-icon {\r\n    visibility: hidden;\r\n  }\r\n\r\n  &.selected {\r\n    font-weight: bold;\r\n    mat-icon {\r\n      visibility: visible;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-menu-item {\r\n  //@include slim-menu-item();\r\n}\r\n",
                    "styleUrl": "./display-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<button mat-button [mat-menu-trigger-for]=\"rootMenu\">\r\n  <div class=\"options-menu-trigger\"> Display Options </div>\r\n</button>\r\n\r\n<mat-menu #rootMenu=\"matMenu\">\r\n  <button *ngIf=\"grouper\" mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">\r\n    Group By\r\n  </button>\r\n  <button *ngIf=\"sorter\" mat-menu-item [matMenuTriggerFor]=\"sortingMenu\">\r\n    Sort By\r\n  </button>\r\n  <button *ngIf=\"viewer\" mat-menu-item [matMenuTriggerFor]=\"viewingMenu\">\r\n    View\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Group Menu -->\r\n<mat-menu #groupingMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let group of groups\"\r\n          [class.selected]=\"(grouper.state | async).group === group.id\"\r\n          (click)=\"setGroup(group.id); $event.stopPropagation();\">\r\n    <div class=\"button-content\">\r\n      <mat-icon>check</mat-icon>\r\n      {{group.label}}\r\n    </div>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Sort Menu -->\r\n<mat-menu #sortingMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let sort of sorts\"\r\n          [class.selected]=\"(sorter.state | async).sort === sort.id\"\r\n          (click)=\"setSort(sort.id); $event.stopPropagation();\">\r\n    <div class=\"button-content\">\r\n      <mat-icon>\r\n        {{(sorter.state | async).reverse ? 'arrow_downward' : 'arrow_upward'}}\r\n      </mat-icon>\r\n      {{sort.label}}\r\n    </div>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- View Menu -->\r\n<mat-menu #viewingMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let view of views\"\r\n          [class.selected]=\"(viewer.state | async).views.indexOf(view.id) !== -1\"\r\n          (click)=\"viewer.toggle(view.id); $event.stopPropagation();\">\r\n    <div class=\"button-content\">\r\n      <mat-icon>check</mat-icon>\r\n      {{view.label}}\r\n    </div>\r\n  </button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bda17aa3451a9f731685153f2587877b8267c32007f05e7abad3581336e6bc02346a1b660e8c69c4d90b4526b6e047b3ac1f4246252c9dc83985c9148aab5e97",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            primary\r\n            size=\"small\"\r\n            primary=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-b83fc17e6688681d205facbd77e82b1e18db76ecfd511b35e01fe04e2e34fee75b677ecd09c1de49e875fa412a258df79f5a952fb50a5f1b9bad0541da4f6cea",
            "file": "projects/components/src/lib/icons/member-type.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-icons",
            "styleUrls": [],
            "styles": [],
            "template": "<lib-member-type [type]=\"1\"></lib-member-type>\n<lib-member-type [type]=\"2\"></lib-member-type>\n<lib-member-type [type]=\"3\"></lib-member-type>\n<lib-member-type [type]=\"4\"></lib-member-type>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata } from '@storybook/angular';\r\n/// import { ActivityGridComponent } from './activity-grid.component';\r\n// import { ActivityGridModule } from './activity-grid.module';\r\n// import {MOCK_GRID_ITEMS} from './_MOCK_GRID_ITEMS';\r\n// import { ClanWeeklyProgressComponent } from './clan-weekly-progress.component';\r\n// import { ClanWeeklyProgressModule } from './clan-weekly-progress.module';\r\n//import { MOCK_WEEKLY_PROGRESS } from './_MOCK_WEEKLY_PROGRESS';\r\nimport { StorybookModule } from '../storybook/storybook.module';\r\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from './register-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconsModule } from './icons.module';\r\n\r\n@Component({\r\n  selector: 'lib-icons',\r\n  template: `\r\n    <lib-member-type [type]=\"1\"></lib-member-type>\r\n    <lib-member-type [type]=\"2\"></lib-member-type>\r\n    <lib-member-type [type]=\"3\"></lib-member-type>\r\n    <lib-member-type [type]=\"4\"></lib-member-type>\r\n  `\r\n})\r\nclass IconComponent {\r\n  constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  exports: [IconComponent],\r\n  imports: [CommonModule, MatIconModule, HttpClientModule, IconsModule]\r\n})\r\nclass IconTestModule {}\r\n\r\nexport default {\r\n  title: 'Icons / Member Type',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [IconTestModule, StorybookModule]\r\n    })\r\n  ]\r\n};\r\n\r\nexport const base = () => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n});\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LookupComponent",
            "id": "component-LookupComponent-e48d7c2c055e36aab138345ebaead07b74f716ecf4d48b912049bbeb55450f6f3d6d9057f21c55ded4a0203affc6e3195534da7ce717a9cc3bf64dd3a25d5078",
            "file": "projects/clan-dashboard/src/app/features/sandbox/lookup/lookup.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lookup",
            "styleUrls": [
                "./lookup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lookup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayHash",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "displayObject",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "imageUrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "imgUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "milestoneHash",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "output",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "recordHash",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "loadImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lookupMilestone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lookupPresentation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lookupRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDisplay",
                    "args": [
                        {
                            "name": "thing",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "thing",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PresentationNodeDefinitionService } from '@core/definition-services/presentation-node-definition.service';\r\nimport { MilestoneDefinitionService } from '@core/definition-services/milestone-definition.service';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { RecordDefinitionService } from '@core/definition-services/record-definition.service';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\n@Component({\r\n  selector: 'app-lookup',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, MatTabsModule],\r\n  templateUrl: './lookup.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./lookup.component.scss']\r\n})\r\nexport class LookupComponent {\r\n  constructor(\r\n    private presentationNodeService: PresentationNodeDefinitionService,\r\n    private milestoneDefinitionService: MilestoneDefinitionService,\r\n    private recordDefinitionService: RecordDefinitionService\r\n  ) {}\r\n\r\n  displayObject: any = {};\r\n  displayHash = new FormControl('');\r\n  milestoneHash = new FormControl('');\r\n  recordHash = new FormControl('');\r\n  output = new FormControl('');\r\n  imageUrl = new FormControl('');\r\n  imgUrls = [];\r\n\r\n  lookupPresentation() {\r\n    this.updateDisplay(this.presentationNodeService.definitions[this.displayHash.value as unknown as number]);\r\n  }\r\n  lookupMilestone() {\r\n    this.updateDisplay(this.milestoneDefinitionService.definitions[this.milestoneHash.value as unknown as number]);\r\n  }\r\n  lookupRecord() {\r\n    this.updateDisplay(this.recordDefinitionService.definitions[this.recordHash.value as unknown as number]);\r\n  }\r\n\r\n  updateDisplay(thing: any) {\r\n    this.output.patchValue(JSON.stringify(thing, undefined, 4));\r\n  }\r\n  loadImage() {\r\n    this.imgUrls.push(`//bungie.net/${this.imageUrl.value}`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-lookup {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n.tab-stuff {\r\n  display: flex;\r\n  width: 100%;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  .mat-mdc-tab-body-wrapper {\r\n    flex: 1;\r\n  }\r\n}\r\n.lookup-wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  .section {\r\n    padding: 1rem;\r\n    input {\r\n      display: block;\r\n    }\r\n    select {\r\n      display: block;\r\n    }\r\n  }\r\n  .info {\r\n    width: 75%;\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: auto;\r\n    .info-content {\r\n      margin: 1rem;\r\n      flex: 1;\r\n    }\r\n    textarea {\r\n      display: block;\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./lookup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "presentationNodeService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recordDefinitionService",
                        "type": "RecordDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "presentationNodeService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recordDefinitionService",
                        "type": "RecordDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "  <mat-tab-group class=\"tab-stuff\">\r\n    <mat-tab label=\"Definition Lookups\">\r\n      <div class=\"lookup-wrapper\">\r\n        <div>\r\n          <div class=\"section\">\r\n            <h3>Presentation</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"displayHash\">\r\n            <br>\r\n            <select [formControl]=\"displayHash\">\r\n              <option value=\"2592822840\">\r\n                Ghost Writer\r\n              </option>\r\n            </select>\r\n            <button (click)=\"lookupPresentation()\">Lookup Presentation</button>\r\n            <hr>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h3>Milestones Hashes</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"milestoneHash\">\r\n            <br>\r\n            <select [formControl]=\"milestoneHash\">\r\n\r\n            </select>\r\n            <button (click)=\"lookupMilestone()\">Lookup Presentation</button>\r\n            <hr>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h3>Record Hashes</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"recordHash\">\r\n            <br>\r\n            <select [formControl]=\"recordHash\">\r\n              <option value=\"1089543274\">\r\n                Ghost Writer\r\n              </option>\r\n            </select>\r\n            <button (click)=\"lookupRecord()\">Lookup Presentation</button>\r\n            <hr>\r\n          </div>\r\n        </div>\r\n        <div class=\"info\">\r\n          <div class=\"info-content\">\r\n            <textarea [formControl]=\"output\"></textarea>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </mat-tab>\r\n    <mat-tab label=\"Image Lookup\">\r\n      <div class=\"lookup-wrapper\">\r\n        <div>\r\n          <div class=\"section\">\r\n            <h3>Presentation</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"imageUrl\">\r\n            <br>\r\n            <button (click)=\"loadImage()\">Load Image</button>\r\n          </div>\r\n        </div>\r\n        <div class=\"info\">\r\n          <div class=\"info-content\">\r\n            <ng-container *ngFor=\"let imgUrl of imgUrls\">\r\n              <img src=\"{{imgUrl}}\" alt=\"none\" />\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n"
        },
        {
            "name": "MemberTypeComponent",
            "id": "component-MemberTypeComponent-588fd299f444b31f9fd593297a5ec71485323170276c26684f727f840d3bbdf5096377a5de06ef7916ff23aaf7aaa537af5384bf15902b669dd89ec420e6390b",
            "file": "projects/components/src/lib/icons/member-type.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-member-type",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-icon [svgIcon]=\"type | memberType\" class=\"ico-{{type | memberType}}\"></mat-icon>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-member-type',\r\n  template: `<mat-icon [svgIcon]=\"type | memberType\" class=\"ico-{{type | memberType}}\"></mat-icon>`,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MemberTypeComponent  {\r\n  @Input()\r\n  type;\r\n  constructor(){\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            }
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-45bbc55de57abfb56541e267e2510259720f986a8d78f07efa4254a87df1a951c452af637835d33fe5bd695bd4cebeb136447e1e99c43eb67151e386901ef7af",
            "file": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notifications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Notification[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\ninterface Notification {\r\n  title: string;\r\n  data: {\r\n    total?: number;\r\n    progress: number;\r\n    complete?: number;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss']\r\n})\r\nexport class NotificationsComponent {\r\n  @Input() notifications: Notification[];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  .progress-bar {\r\n    flex: 1;\r\n    padding: 0.5rem;\r\n  }\r\n  .info {\r\n    padding: 0.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngFor=\"let notification of  notifications\" class=\"notification\">\r\n\r\n  <div class=\"info\">\r\n    {{notification.title}}\r\n  </div>\r\n  <div class=\"progress-bar\">\r\n    {{notification.data.progress}} / {{notification.data.total}}\r\n    <!-- <mat-progress-bar mode=\"determinate\" [value]=\"notification.data.progress\"></mat-progress-bar> -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-1fc7c24c98b4f0b0f413d91f5a6126f11ad55647457f5a7f372b7f83fe8ecd6dbe67b5ca4b826ed20b9bfbc04d5606b15f82a203b1311f98b18bd28ec9f4fc7c",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nsection h2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nsection p {\r\n  margin: 1em 0;\r\n}\r\n\r\nsection a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nsection ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nsection li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nsection .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\nsection .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nsection .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\nsection .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RecentActivityComponent",
            "id": "component-RecentActivityComponent-ce60c0dfb0a1e3489a5d9b700e1e40af5c2a3098027c6d61c7c2d1e0bc360090c156d368db6f5c72e780b40dae97a08e4611f6a16daec21f03e5607f4031a2c7",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recent-activity-viewer",
            "styleUrls": [
                "./recent-activity.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recent-activity.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityExporter",
                    "defaultValue": "new Exporter({\r\n    metadata: CLAN_ROSTER_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "activityFilterer",
                    "defaultValue": "new Filterer({ metadata: RECENT_ACTIVITY_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "activitySorter",
                    "defaultValue": "new Sorter({ metadata: RECENT_ACTIVITY_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "activityViewer",
                    "defaultValue": "new Viewer({\r\n    metadata: RECENT_ACTIVITY_VIEWER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  }, '2Dashboard_Roster_Activity_Table_Viewer')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "clanProfileActivity$",
                    "defaultValue": "this.recentActivityService.activeClanActivity$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "rosterRecentActivityInfo$",
                    "defaultValue": "combineLatest([this.clanProfileActivity$]).pipe(\r\n    map(([clanProfiles]) => {\r\n      return {\r\n        dataSource: new DataSource<ProfileRecentActivity>({ data: clanProfiles }),\r\n        viewer: this.activityViewer,\r\n        filterer: this.activityFilterer,\r\n        exporter: this.activityExporter,\r\n        sorter: this.activitySorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RosterActivityResources>",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { BungieDatePipe, BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { combineLatest, filter, map, Observable, of, tap } from 'rxjs';\r\nimport { RecentActivityService } from '../data-access/recent-activity.service';\r\nimport { ProfileRecentActivity } from '../models/profile-recent-activity';\r\nimport {\r\n  CLAN_ROSTER_EXPORTER_METADATA,\r\n  RECENT_ACTIVITY_FILTERER_METADATA,\r\n  RECENT_ACTIVITY_SORTER_METADATA,\r\n  RECENT_ACTIVITY_VIEWER_METADATA\r\n} from './recent-activity-metadata';\r\n\r\ninterface RosterActivityResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-recent-activity-viewer',\r\n  templateUrl: './recent-activity.component.html',\r\n  styleUrls: ['./recent-activity.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RecentActivityComponent implements OnInit {\r\n  constructor(\r\n    private recentActivityService: RecentActivityService,\r\n    private playtimePipe: PlaytimePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n\r\n  clanProfileActivity$ = this.recentActivityService.activeClanActivity$;\r\n  activityViewer = new Viewer({\r\n    metadata: RECENT_ACTIVITY_VIEWER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  }, '2Dashboard_Roster_Activity_Table_Viewer');\r\n  activityFilterer = new Filterer({ metadata: RECENT_ACTIVITY_FILTERER_METADATA });\r\n  activitySorter = new Sorter({ metadata: RECENT_ACTIVITY_SORTER_METADATA });\r\n  activityExporter = new Exporter({\r\n    metadata: CLAN_ROSTER_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  });\r\n  isLoading = true;\r\n\r\n  rosterRecentActivityInfo$: Observable<RosterActivityResources> = combineLatest([this.clanProfileActivity$]).pipe(\r\n    map(([clanProfiles]) => {\r\n      return {\r\n        dataSource: new DataSource<ProfileRecentActivity>({ data: clanProfiles }),\r\n        viewer: this.activityViewer,\r\n        filterer: this.activityFilterer,\r\n        exporter: this.activityExporter,\r\n        sorter: this.activitySorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n  createViewContextProvider() {\r\n    return of((item: ProfileRecentActivity) => ({\r\n      item,\r\n      playTimePipe: this.playtimePipe,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.clan-roster {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .clan-roster-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n}\r\n.loading {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./recent-activity.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recentActivityService",
                        "type": "RecentActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playtimePipe",
                        "type": "PlaytimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "recentActivityService",
                        "type": "RecentActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playtimePipe",
                        "type": "PlaytimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"clan-roster\">\r\n  <lib-table-view class=\"clan-roster-table\" [isLoading]=\"isLoading\"\r\n    [dataSource]=\"(rosterRecentActivityInfo$ | async)?.dataSource\" [header]=\"'Recent Activity'\"\r\n    [viewer]=\"activityViewer\" [filterer]=\"activityFilterer\"\r\n    [sorter]=\"activitySorter\" [exporter]=\"activityExporter\">\r\n  </lib-table-view>\r\n\r\n  <ng-template #loading>\r\n    <div class=\"loading\">\r\n      Loading Roster Activity\r\n    </div>\r\n  </ng-template>\r\n\r\n</div>\r\n"
        },
        {
            "name": "RenderedViewComponent",
            "id": "component-RenderedViewComponent-67d8b45b53cf536106ecd6f6d3c159046098df35cc3d048cc3a95669fe7085785fee9b3a9f94dc6f83ee055e489aa1c087a22fb99a9a0b2451c051c44a99af61",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-rendered-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rendered-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childrenViews",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "RenderedView[]",
                    "decorators": []
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "libDynamicComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RenderedViewDynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "RenderedViewDynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RenderedView[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RenderedView } from '../../data/viewer';\r\nimport { RenderedViewDynamicCompDirective } from './rendered-view-component.directive';\r\n\r\n@Component({\r\n  selector: 'lib-rendered-view',\r\n  templateUrl: './rendered-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RenderedViewComponent implements OnInit {\r\n  @ViewChild(RenderedViewDynamicCompDirective, { static: true }) libDynamicComp!: RenderedViewDynamicCompDirective;\r\n  views: Observable<RenderedView[]>;\r\n\r\n  @Input() text: string;\r\n\r\n  @Input() childrenViews: RenderedView[] = [];\r\n  @Input() component: any;\r\n  @Input() data: any;\r\n\r\n  ngOnInit() {\r\n    // TODO: Keep eye on this for performance.\r\n    if (this.component) {\r\n      const viewContainerRef = this.libDynamicComp.viewContainerRef;\r\n      viewContainerRef.clear();\r\n\r\n      const componentRef = viewContainerRef.createComponent(this.component);\r\n      for (const property in this.data) {\r\n        componentRef.instance[property] = this.data[property];\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "{{text}}\r\n<ng-template libDynamicComp></ng-template>\r\n<ng-container *ngFor=\"let view of childrenViews\">\r\n  <lib-rendered-view *ngIf=\"view\" [class]=\"view.classList || ''\" [ngStyle]=\"view.styles || {}\" [text]=\"view['text']\"\r\n    [component]=\"view['component']\" [data]=\"view['data']\" [childrenViews]=\"view['children']\">\r\n  </lib-rendered-view>\r\n</ng-container>\r\n"
        },
        {
            "name": "SealDetailsComponent",
            "id": "component-SealDetailsComponent-1abdfd7ed5cd294d43d02ff384d71946a21b3f5c737226e29012ef609d5ae87ec6353f1cb14e9dbdbbc2623e5b5bca8cd85b78c4f2d0b5dacc20086c13b56ea8",
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seal-details",
            "styleUrls": [
                "./seal-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seal-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "sealDetails$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    switchMap((params) => {\r\n      return this.sealsService.getSealDetails$(params.get('hash'));\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sealDetailsExporter",
                    "defaultValue": "new Exporter({\r\n    metadata: SEAL_DETAILS_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "sealDetailsFilterer",
                    "defaultValue": "new Filterer({ metadata: SEAL_DETAILS_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "sealDetailsInfo$",
                    "defaultValue": "combineLatest([this.sealDetails$]).pipe(\r\n    map(([sealDetails]) => {\r\n      return {\r\n        loading: of(false),\r\n        dataSource: new DataSource<SealClanMember>({ data: sealDetails }),\r\n        viewer: this.sealDetailsViewer,\r\n        filterer: this.sealDetailsFilterer,\r\n        exporter: this.sealDetailsExporter,\r\n        sorter: this.sealDetailsSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n    //filter((ds) => !!ds)\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SealDetailsResources>",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "sealDetailsSorter",
                    "defaultValue": "new Sorter({ metadata: SEAL_DETAILS_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "sealDetailsViewer",
                    "defaultValue": "new Viewer({\r\n    metadata: SEAL_DETAILS_VIEWER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  }, '2Dashboard_Seals_Details_Viewer')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { combineLatest, filter, map, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { SealsService } from '../data-access/seals.service';\r\nimport { SealClanMember } from '../models/seal-clan-member';\r\nimport {\r\n  SEAL_DETAILS_EXPORTER_METADATA,\r\n  SEAL_DETAILS_FILTERER_METADATA,\r\n  SEAL_DETAILS_SORTER_METADATA,\r\n  SEAL_DETAILS_VIEWER_METADATA\r\n} from './seal-details-metadata';\r\n\r\ninterface SealDetailsResources {\r\n  loading: Observable<boolean>;\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-seal-details',\r\n  templateUrl: './seal-details.component.html',\r\n  styleUrls: ['./seal-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SealDetailsComponent {\r\n  constructor(private route: ActivatedRoute, private sealsService: SealsService) {}\r\n\r\n  sealDetails$ = this.route.paramMap.pipe(\r\n    switchMap((params) => {\r\n      return this.sealsService.getSealDetails$(params.get('hash'));\r\n    })\r\n  );\r\n  isLoading = true;\r\n  sealDetailsViewer = new Viewer({\r\n    metadata: SEAL_DETAILS_VIEWER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  }, '2Dashboard_Seals_Details_Viewer');\r\n  sealDetailsFilterer = new Filterer({ metadata: SEAL_DETAILS_FILTERER_METADATA });\r\n  sealDetailsSorter = new Sorter({ metadata: SEAL_DETAILS_SORTER_METADATA });\r\n  sealDetailsExporter = new Exporter({\r\n    metadata: SEAL_DETAILS_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  });\r\n  createViewContextProvider() {\r\n    return of((item: SealClanMember) => ({\r\n      item\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n\r\n\r\n\r\n  sealDetailsInfo$:Observable<SealDetailsResources> = combineLatest([this.sealDetails$]).pipe(\r\n    map(([sealDetails]) => {\r\n      return {\r\n        loading: of(false),\r\n        dataSource: new DataSource<SealClanMember>({ data: sealDetails }),\r\n        viewer: this.sealDetailsViewer,\r\n        filterer: this.sealDetailsFilterer,\r\n        exporter: this.sealDetailsExporter,\r\n        sorter: this.sealDetailsSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n    //filter((ds) => !!ds)\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.seal-details {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .seal-detail-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n}\r\n",
                    "styleUrl": "./seal-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"seal-details\">\r\n  <lib-table-view class=\"seal-detail-table\" [isLoading]=\"isLoading\"\r\n    [dataSource]=\"(sealDetailsInfo$ | async)?.dataSource\" [header]=\"'Member Seal Progress'\" [viewer]=\"sealDetailsViewer\"\r\n    [filterer]=\"sealDetailsFilterer\" [sorter]=\"sealDetailsSorter\" [exporter]=\"sealDetailsExporter\">\r\n  </lib-table-view>\r\n\r\n  <ng-template #loading>\r\n    <div class=\"loading\">\r\n      Loading Seal Details\r\n    </div>\r\n  </ng-template>\r\n\r\n</div>\r\n"
        },
        {
            "name": "SealMemberProgressTableComponent",
            "id": "component-SealMemberProgressTableComponent-953b088dc7a4886582712b8a465c1505fa33db14f668d48a6bdb123feec22fd44237df6091c4bbfd0780d272b66ede6364f4aab19f32e5f2cf9ab0cdc312147f",
            "file": "projects/clan-dashboard/src/app/features/seals/components/seal-member-progress-table/seal-member-progress-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seal-member-progress-table",
            "styleUrls": [
                "./seal-member-progress-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seal-member-progress-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-seal-member-progress-table',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './seal-member-progress-table.component.html',\r\n  styleUrls: ['./seal-member-progress-table.component.scss']\r\n})\r\nexport class SealMemberProgressTableComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./seal-member-progress-table.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>seal-member-progress-table works!</p>\r\n"
        },
        {
            "name": "SealsDashboardComponent",
            "id": "component-SealsDashboardComponent-228f600c7043ab8e6bda1c3ca5675b2469b609e28cc050c042d59b8834693d69a86d2c786755cac022866fb81cb014b1f606e1839f53afdced76334a5b32733b",
            "file": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seals-dashboard",
            "styleUrls": [
                "./seals-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seals-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "seals$",
                    "defaultValue": "this.sealsService.milestonesWithProfiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { SealsService } from '../data-access/seals.service';\r\n\r\n@Component({\r\n  selector: 'app-seals-dashboard',\r\n  templateUrl: './seals-dashboard.component.html',\r\n  styleUrls: ['./seals-dashboard.component.scss']\r\n})\r\nexport class SealsDashboardComponent {\r\n  constructor(private sealsService: SealsService) {}\r\n  seals$ = this.sealsService.milestonesWithProfiles$;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: auto;\r\n}\r\n.seals-wrapper {\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n",
                    "styleUrl": "./seals-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"seals-wrapper\">\r\n  <ng-container *ngIf=\"{ seals: seals$  | async } as vm\">\r\n    <app-seals-list [sealsList]=\"vm.seals\"></app-seals-list>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "SealsListComponent",
            "id": "component-SealsListComponent-8d686a0768aa56c551f4d2dcbfa002cb4f09d4bce0248bbf664a0f17e49d00f8490bcb19d230b89dcedf9696735d4c858e2f9f53b081606a7ffeffbae083eb75",
            "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seals-list",
            "styleUrls": [
                "./seals-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seals-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sealsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "SealListItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sealListItem",
                            "type": "SealListItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sealListItem",
                            "type": "SealListItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SealListItem } from '@features/seals/models/seal-list-item';\r\nimport { MatCardModule } from '@angular/material/card';\r\n@Component({\r\n  selector: 'app-seals-list',\r\n  templateUrl: './seals-list.component.html',\r\n  styleUrls: ['./seals-list.component.scss'],\r\n  imports: [CommonModule, RouterModule, MatCardModule, MatButtonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true\r\n})\r\nexport class SealsListComponent {\r\n  @Input() sealsList: SealListItem[];\r\n\r\n  trackByFn(index: number, sealListItem: SealListItem) {\r\n    return sealListItem.seal.hash;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading {\r\n  text-align: center;\r\n}\r\n\r\n.seals-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n\r\n  .seal {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n.seal-info {\r\n  padding-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.seal-image {\r\n  height: 126px;\r\n  width: 126px;\r\n}\r\n\r\n/// Loading Styles\r\n.loading {\r\n  .skeleton-title {\r\n    width: 250px;\r\n    margin-bottom: 0.75rem;\r\n  }\r\n  .skeleton-sub-title {\r\n    width: 250px;\r\n    margin-bottom: 0.75rem;\r\n  }\r\n  .seal-info {\r\n    .skeleton-item {\r\n      width: 100px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./seals-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"sealsList; else loading\">\r\n  <p *ngIf=\"!sealsList.length\">\r\n    No Seals Found\r\n  </p>\r\n  <div class=\"seals-container\" *ngIf=\"sealsList\">\r\n    <ng-container *ngFor=\"let sealDetails of sealsList\">\r\n      <mat-card class=\"seal\">\r\n        <mat-card-header>\r\n          <mat-card-title-group>\r\n            <img class=\"seal-image\" src=\"//bungie.net/{{sealDetails.seal?.displayProperties?.icon}}\"\r\n              alt=\"{{sealDetails.seal?.displayProperties?.name}}\">\r\n            <mat-card-title>{{sealDetails.seal.displayProperties.name}}</mat-card-title>\r\n            <mat-card-subtitle>{{sealDetails.seal.displayProperties.description}}</mat-card-subtitle>\r\n          </mat-card-title-group>\r\n        </mat-card-header>\r\n        <mat-card-content class=\"seal-info\">\r\n          <div>\r\n            Complete: {{sealDetails.completedCount}} / {{sealDetails.totalMembers}}\r\n          </div>\r\n          <div *ngIf=\"sealDetails.isGilded\">\r\n            Gilded: {{sealDetails.gildedCount}} / {{sealDetails.totalMembers}}\r\n          </div>\r\n          <div>\r\n            <button mat-button routerLink=\"/seals/{{sealDetails.seal.hash}}\">View</button>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <div class=\"loading seals-container\">\r\n    <ng-container *ngFor=\"let x of ['','','','','','','','','','','','','','']\">\r\n      <mat-card class=\"seal\">\r\n        <mat-card-header>\r\n          <mat-card-title-group>\r\n            <mat-card-title><span class=\"skeleton-item skeleton-title\"></span></mat-card-title>\r\n            <mat-card-subtitle>\r\n              <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n              <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n              <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n            </mat-card-subtitle>\r\n            <span class=\"skeleton-item seal-image\"></span>\r\n          </mat-card-title-group>\r\n        </mat-card-header>\r\n        <mat-card-content class=\"seal-info\">\r\n          <span class=\"skeleton-item\" style=\"width:100px\"></span>\r\n          <span class=\"skeleton-item\"></span>\r\n          <span class=\"skeleton-item\"></span>\r\n        </mat-card-content>\r\n      </mat-card>\r\n\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "SearchErrorDialogComponent",
            "id": "component-SearchErrorDialogComponent-47dd9a6266f174af516d769e02d2e393f83ae6b54b851b7c07f177d2a6c33c4d93fa652f71eff792be1623587043b89577eeca62646f174540e5ffd062272a05",
            "file": "projects/clan-dashboard/src/app/features/clan-search/components/search-error-dialog/search-error-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-error-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 mat-dialog-title>Clan Search Error</h1>\n<div mat-dialog-content>\n  {{ data }}\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-search-error-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <h1 mat-dialog-title>Clan Search Error</h1>\r\n    <div mat-dialog-content>\r\n      {{ data }}\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-button mat-dialog-close>Close</button>\r\n    </mat-dialog-actions>\r\n  `\r\n})\r\nexport class SearchErrorDialogComponent {\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: string) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SettingsMenuComponent",
            "id": "component-SettingsMenuComponent-6c01b02c034c924ab479b010779e5b50dc816cc404b4ff2b850fc88f9140e917977ce4fed6151428bb22507b553ef202868acabe52c41e67924f3075eb8125ae",
            "file": "projects/clan-dashboard/src/app/core/layout/settings-menu/settings-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-menu",
            "styleUrls": [
                "./settings-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "versionNumber",
                    "defaultValue": "this.appConfig.appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule } from '@angular/router';\r\n@Component({\r\n  selector: 'app-settings-menu',\r\n  standalone: true,\r\n  imports: [CommonModule, MatMenuModule, MatIconModule, MatButtonModule, RouterModule],\r\n  templateUrl: './settings-menu.component.html',\r\n  styleUrls: ['./settings-menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SettingsMenuComponent {\r\n  constructor(private appConfig: AppConfig) {}\r\n  versionNumber = this.appConfig.appVersion;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button mat-icon-button [matMenuTriggerFor]=\"settingsMenu\">\r\n  <mat-icon>\r\n    settings\r\n  </mat-icon>\r\n</button>\r\n<mat-menu #settingsMenu=\"matMenu\">\r\n  <a href=\"https://github.com/WorthyD/destiny-clan-dashboard/issues\" target=\"_blank\" mat-menu-item>\r\n    <mat-icon>\r\n      bug_report\r\n    </mat-icon>\r\n    <span> Report a Bug</span>\r\n  </a>\r\n  <a href=\"https://github.com/WorthyD/destiny-clan-dashboard\" target=\"_blank\" mat-menu-item>\r\n    <mat-icon>\r\n      code\r\n    </mat-icon>\r\n    <span> Source Code</span>\r\n  </a>\r\n  <a href=\"https://twitter.com/WorthyD\" target=\"_blank\" mat-menu-item>\r\n    <mat-icon>\r\n      keyboard\r\n    </mat-icon>\r\n    <span> Developer</span>\r\n  </a>\r\n  <!-- <button mat-menu-item>\r\n    <mat-icon>\r\n      help\r\n    </mat-icon>\r\n    <span> About App</span>\r\n  </button> -->\r\n  <a mat-menu-item routerLink=\"config\">\r\n    <mat-icon>\r\n      settings\r\n    </mat-icon>\r\n    <span> Config</span>\r\n  </a>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon>\r\n      info\r\n    </mat-icon>\r\n    <span>\r\n      v {{versionNumber}}\r\n    </span>\r\n  </button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "TableViewComponent",
            "id": "component-TableViewComponent-24e1476103123c36d74a29f65830ff696cab0b36b73b712c3e13978acbdd2ef542925bbb7fb53ca218b18bc726102ff89a4b9533bda9340fc532dc4cc16d7cd1",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-table-view",
            "styleUrls": [
                "./table-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "DataSource",
                    "decorators": []
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "Exporter",
                    "decorators": []
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "Filterer",
                    "decorators": []
                },
                {
                    "name": "grouper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "Grouper",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "Sorter",
                    "decorators": []
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "Viewer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "loadingSize",
                    "defaultValue": "new Array(25).fill('_').map((x) => x)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "page",
                    "defaultValue": "new BehaviorSubject({ size: 25, index: 0 })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TablePage>",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "renderedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "renderedHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Map<Item, Map<string, Observable<RenderedView>>>>",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "export",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnChanges {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() header: string;\r\n  @Input() isLoading: boolean = undefined;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  itemCount: Observable<number>;\r\n  loadingSize = new Array(25).fill('_').map((x) => x);\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 25, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dataSource'] || changes['filterer'] || changes['sorter'] || changes['viewer'] || changes['loading']) {\r\n      if (this.filterer && this.sorter && this.viewer) {\r\n        if (this.isLoading === true) {\r\n          this.showLoading();\r\n        } else {\r\n          this.loadData();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    if (this.dataSource && this.filterer && this.sorter && this.viewer) {\r\n      const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n      this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n        map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n      );\r\n      this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n      this.views = this.viewer.getViews();\r\n      this.displayedColumns = this.viewer.state.pipe(\r\n        map((state) => {\r\n          return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n        })\r\n      );\r\n\r\n      this.renderedHtml = this.renderedData.pipe(\r\n        map((items) => {\r\n          const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n          items.forEach((item) => {\r\n            const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n            this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n            renderedHtml.set(item, itemRenderedViews);\r\n          });\r\n          return renderedHtml;\r\n        }),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  private showLoading() {\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.viewer.exportData(this.header?.toLowerCase()?.replace(' ', '_'), curatedData);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n}\r\n\r\n.filter {\r\n  max-width: 650px;\r\n  margin: 8px auto;\r\n  width: 100%;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h3 {\r\n    margin-left: 16px;\r\n    margin-bottom: 0;\r\n  }\r\n  .header-actions {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.item-count {\r\n  padding-left: 24px;\r\n}\r\n\r\nadvanced-search {\r\n  flex: 1;\r\n  margin-top: 12px;\r\n  padding-left: 24px;\r\n  max-width: 650px;\r\n}\r\n\r\n.header-actions {\r\n  padding: 16px;\r\n}\r\n\r\n.table-container {\r\n  overflow: auto;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n\r\n  th,\r\n  td {\r\n    //   padding-top: 4px;\r\n    //    padding-bottom: 4px;\r\n    white-space: nowrap;\r\n  }\r\n}\r\n\r\n.mat-menu-item {\r\n  //   @include slim-menu-item();\r\n}\r\n",
                    "styleUrl": "./table-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 90
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": " <div class=\"header\">\r\n   <h3>{{header}}</h3>\r\n   <!-- <advanced-search [filterer]=\"filterer\" [dataSource]=\"dataSource\">\r\n   </advanced-search> -->\r\n\r\n   <div class=\"header-actions\">\r\n     <lib-display-options [sorter]=\"sorter\" [viewer]=\"viewer\"></lib-display-options>\r\n     <button mat-button *ngIf=\"exporter\" (click)=\"export()\">Export</button>\r\n   </div>\r\n </div>\r\n\r\n <div class=\"table-container\">\r\n   <table mat-table [dataSource]=\"renderedData\" *ngIf=\"isLoading === false || isLoading === undefined; else loading\">\r\n     <ng-container *ngFor=\"let view of views\" [matColumnDef]=\"view.id\" [sticky]=\"view?.isSticky\">\r\n       <th mat-header-cell *matHeaderCellDef>\r\n         {{view.label}}\r\n       </th>\r\n       <td mat-cell *matCellDef=\"let item\">\r\n         <ng-container *ngIf=\"(renderedHtml | async).get(item).get(view.id) | async as view\">\r\n           <lib-rendered-view *ngIf=\"view\" [class]=\"view.classList || ''\" [ngStyle]=\"view.styles || {}\"\r\n             [text]=\"view['text'] || ''\" [childrenViews]=\"view['children'] || null\"\r\n             [component]=\"view['component'] || null\" [data]=\"view['data'] || null\">\r\n           </lib-rendered-view>\r\n         </ng-container>\r\n       </td>\r\n     </ng-container>\r\n\r\n     <tr mat-header-row *matHeaderRowDef=\"displayedColumns | async; sticky: true\"></tr>\r\n     <tr mat-row *matRowDef=\"let item; columns: displayedColumns | async;\"></tr>\r\n   </table>\r\n </div>\r\n\r\n <mat-divider></mat-divider>\r\n\r\n <mat-paginator (page)=\"setPage($event)\" [pageSize]=\"(page | async).size\" [length]=\"itemCount | async\">\r\n </mat-paginator>\r\n\r\n\r\n <ng-template #loading>\r\n    <table mat-table [dataSource]=\"loadingSize\">\r\n      <ng-container *ngFor=\"let view of views\" [matColumnDef]=\"view.id\" [sticky]=\"view?.isSticky\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          {{view.label}}\r\n        </th>\r\n        <td mat-cell *matCellDef=\"let item\">\r\n          <span class=\"skeleton-item\"></span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns | async; sticky: true\"></tr>\r\n      <tr mat-row *matRowDef=\"let item; columns: displayedColumns | async;\"></tr>\r\n    </table>\r\n </ng-template>\r\n\r\n <!-- <ng-container *ngIf=\"vm$ | async as vm\">\r\n   {{vm.viewer | json}}\r\n   <div class=\"header theme-background-card\">\r\n     <h3>{{header}}</h3>\r\n\r\n     <div class=\"header-actions\">\r\n       <lib-display-options [sorter]=\"sorter\" [viewer]=\"vm.viewer\"></lib-display-options>\r\n       <button mat-button *ngIf=\"exporter\" (click)=\"export()\">Export</button>\r\n     </div>\r\n   </div>\r\n\r\n   <div class=\"table-container\">\r\n     <table mat-table [dataSource]=\"renderedData\">\r\n       <ng-container *ngFor=\"let view of views\" [matColumnDef]=\"view.id\">\r\n         <th mat-header-cell *matHeaderCellDef>\r\n           {{view.label}}\r\n         </th>\r\n         <td mat-cell *matCellDef=\"let item\">\r\n           <ng-container *ngIf=\"(renderedHtml | async).get(item).get(view.id) | async as view\">\r\n             <lib-rendered-view *ngIf=\"view\" [class]=\"view.classList || ''\" [ngStyle]=\"view.styles || {}\"\r\n               [text]=\"view['text'] || ''\" [childrenViews]=\"view['children'] || null\"\r\n               [component]=\"view['component'] || null\" [data]=\"view['data'] || null\">\r\n             </lib-rendered-view>\r\n           </ng-container>\r\n         </td>\r\n       </ng-container>\r\n\r\n       <tr mat-header-row *matHeaderRowDef=\"displayedColumns | async; sticky: true\"></tr>\r\n       <tr mat-row *matRowDef=\"let item; columns: displayedColumns | async;\"></tr>\r\n     </table>\r\n   </div>\r\n\r\n   <mat-divider></mat-divider>\r\n\r\n   <mat-paginator (page)=\"setPage($event)\" [pageSize]=\"(page | async).size\" [length]=\"itemCount | async\">\r\n   </mat-paginator>\r\n </ng-container> -->\r\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-b931e35465bd48cc78990dfe56387a4dd949a394c78233e4f5c0c710642e45a8a49cbaec11e46767b3c59f8f7a4780b076144fab4d8a7eefc2d5753568e7f6fe",
            "file": "projects/components/src/lib/shared/rendered-view/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-test",
            "styleUrls": [
                "./test.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "test",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-test',\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent implements OnInit {\r\n  @Input() test: string = 'default';\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>test works!</p>\r\n{{test}}\r\n"
        },
        {
            "name": "WrapperComponent",
            "id": "component-WrapperComponent-b18518e0d1509271ff15becb83815f4a446a86a2618423adf165aef018115592d233205abf6178c94a56ce27fa8564288fc41407e42c41c3453abd478d83c337",
            "file": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wrapper",
            "styleUrls": [
                "./wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "notifications$",
                    "defaultValue": "this.store.select(getAllNotifications)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showSandbox",
                    "defaultValue": "!this.appConfig.production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { getAllNotifications } from '@core/store/notifications';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { take } from 'rxjs';\r\nimport { ClanUpdaterService } from '../../services/updaters/clan-updater.service';\r\nimport { AppConfig } from '../../config/app-config';\r\n\r\n@Component({\r\n  selector: 'app-wrapper',\r\n  templateUrl: './wrapper.component.html',\r\n  styleUrls: ['./wrapper.component.scss']\r\n})\r\nexport class WrapperComponent implements OnInit {\r\n  constructor(private clanUpdaterService: ClanUpdaterService, private store: Store, private appConfig: AppConfig) {}\r\n  loading: boolean = false;\r\n  showSandbox = !this.appConfig.production;\r\n\r\n  notifications$ = this.store.select(getAllNotifications);\r\n\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.clanUpdaterService\r\n      .update()\r\n      .pipe(take(1))\r\n      .subscribe((x) => (this.loading = false));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: 0px;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n.clan-nav {\r\n  min-width: 150px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // height: 100%;\r\n  padding-top: 0;\r\n\r\n  .section-nav {\r\n    flex: 1;\r\n  }\r\n}\r\n.clan-name {\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n  font-size: 1.25rem;\r\n  @media (min-width: 48em) {\r\n    text-align: left;\r\n  }\r\n}\r\nlib-navbar {\r\n  position: fixed;\r\n  // top: 0;\r\n  // left: 0;\r\n  // right: 0;\r\n  z-index: 2;\r\n}\r\n\r\nmat-sidenav-container {\r\n  //min-height: calc(100vh - 64px);\r\n  flex: 1;\r\n}\r\n\r\nmat-sidenav-content {\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.active-link {\r\n  color: var(--app-primary-color-text) !important;\r\n  background: var(--app-primary-color) !important;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: var(--app-primary-color-darker) !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\">\r\n\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row>\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n      <div class=\"clan-name\">\r\n        Destiny Clan Dashboard\r\n      </div>\r\n      <app-notifications [notifications]=\"notifications$ | async\"></app-notifications>\r\n      <div>\r\n\r\n        <app-settings-menu></app-settings-menu>\r\n\r\n      </div>\r\n    </mat-toolbar-row>\r\n  </mat-toolbar>\r\n  <mat-sidenav-container hasBackdrop=\"false\">\r\n    <mat-sidenav [libResponsiveSidebar]=\"960\" #sidenav mode=\"side\" opened>\r\n      <mat-nav-list class=\"clan-nav\">\r\n        <div class=\"section-nav\">\r\n          <a mat-list-item routerLink=\"./\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\r\n            Dashboard </a>\r\n          <a mat-list-item routerLink=\"roster\" routerLinkActive=\"active-link\"> Roster </a>\r\n          <a mat-list-item routerLink=\"recent-activity\" routerLinkActive=\"active-link\"> Member Activity </a>\r\n          <a mat-list-item routerLink=\"seals\" routerLinkActive=\"active-link\"> Seals </a>\r\n          <a mat-list-item routerLink=\"clan-search\" routerLinkActive=\"active-link\"> Clan Search </a>\r\n          <ng-container *ngIf=\"showSandbox\">\r\n            <a mat-list-item routerLink=\"sandbox\" routerLinkActive=\"active-link\"> Sandbox </a>\r\n          </ng-container>\r\n\r\n\r\n\r\n          <!-- Left here so I can remember all the stuff I deleted -->\r\n          <!-- <a mat-list-item routerLink=\"crucible\" routerLinkActive=\"active-link\"> Crucible </a> -->\r\n          <!-- <a mat-list-item routerLink=\"gambit\" routerLinkActive=\"active-link\"> Gambit </a> -->\r\n          <!-- <a mat-list-item routerLink=\"raids\" routerLinkActive=\"active-link\"> Raids </a> -->\r\n          <!-- <a mat-list-item routerLink=\"dungeons\" routerLinkActive=\"active-link\"> Dungeons </a> -->\r\n          <!-- <a mat-list-item (click)=\"openPlayerSearch()\">Player Search</a> -->\r\n          <!-- <a mat-list-item (click)=\"goHome()\">Home</a> -->\r\n        </div>\r\n      </mat-nav-list>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n      <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container>\r\n\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ebdf575326338805f945235d9ac98f1168681fc8824ac197eec1b038c558100b4819c75e058af7855a792eddab42dc81040bc0a69a7d25d15770949751f7f98a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, AppRoutingModule, CoreModule, BrowserAnimationsModule, MatProgressSpinnerModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-d71f978c7b92fe878daff5fa0f4df90e775dabe3a3989dba26392781d888ce5ad1a26e16058573a72ed9519e976cead7e4cbf8f4a1d73e2f0a221869d9e9db7b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClanResolveGuard } from '@core/guards/clan.guard';\r\nimport { WrapperComponent } from '@core/layout/wrapper/wrapper.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    canActivate: [ClanResolveGuard],\r\n    component: WrapperComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () =>\r\n          \"import('./features/clans-details/clans-details-shell/clans-details.module').then(\\\n            (module) => module.ClansDetailsModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'roster',\r\n        //loadChildren: () => import('./views/roster/roster.module').then((module) => module.RosterModule)\r\n\r\n        loadChildren: () =>\r\n          \"import('./features/clans-roster/clans-roster-shell/clans-roster.module').then(\\\n            (module) => module.ClansRosterModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'recent-activity',\r\n        loadChildren: () =>\r\n          //import('./views/recent-activity/recent-activity.module').then((module) => module.RecentActivityModule)\r\n          \"import('./features/recent-activity/recent-activity-shell/recent-activity.module').then(\\\n            (module) => module.RecentActivityModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'seals',\r\n        loadChildren: () =>\r\n          \"import('./features/seals/seals-shell/seals-routing.module').then((module) => module.SealsRoutingModule)\"\r\n      },\r\n\r\n      {\r\n        path: 'config',\r\n        loadChildren: () => \"import('./views/config/config.module').then((module) => module.ConfigModule)\"\r\n      },\r\n      {\r\n        path: 'sandbox',\r\n        loadChildren: () =>\r\n          \"import('./features/sandbox/sandbox-shell/sandbox-shell.module').then((module) => module.SandboxShellModule)\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'clan-search',\r\n    // TODO: Clan Guard\r\n    //canActivate: [ClanResolveGuard],\r\n    // loadChildren: () => import('./views/clan-search/clan-search.module').then((module) => module.ClanSearchModule)\r\n    loadChildren: () => \"import('./features/clan-search/clan-search-shell/clan-search-shell.module').then((module) => module.ClanSearchModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanDbModule",
            "id": "module-ClanDbModule-a7659e7698215fdbc3cc007d80bdab805a3016762af2da6106cf677c3b19c613fe261e552b025375ebfcdb7f2e7fc076a669173db4cf97ec8630de05ddce88ee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/data/src/lib/clan/clan-db.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanDetailsService } from './clan-details/clan-details.service';\r\nimport { ClanDatabase } from './clan-database';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [ClanDetailsService, ClanDatabase]\r\n})\r\nexport class ClanDbModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClanDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanDetailsModule",
            "id": "module-ClanDetailsModule-cacb10b35eed0917cb4a3ab1cd76b50b54407e01b54d8c7502914dfb3255c5b917657ad3c1e7bd03f19b7bac3e3b3728d30d144c0177b6d75c57f84a85b168ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-details/clan-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanDetailCellComponent } from './components/clan-detail-cell/clan-detail-cell.component';\r\nimport { ClanDetailComponent } from './clan-detail/clan-detail.component';\r\n\r\n@NgModule({\r\n  declarations: [ClanDetailComponent],\r\n  exports: [ClanDetailComponent],\r\n  imports: [CommonModule, ClanDetailCellComponent]\r\n})\r\nexport class ClanDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailCellComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClanDetailComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsModule",
            "id": "module-ClansDetailsModule-af4d20de7944a25a427230b852588e836def693c2c204300fb88c6d8a97412eef71ef57c97bf6e43f17c5275e2bd8d410f88bf7cf0a7a54ed151de0c71802073",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansDetailsComponent } from './clans-details.component';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\nimport { IconsModule } from '@destiny/components/icons';\r\nimport { ClansDetailsRoutingModule } from './clans-details-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [ClansDetailsComponent],\r\n  providers: [ClansDetailsService],\r\n  exports: [ClansDetailsComponent],\r\n  imports: [CommonModule, IconsModule, ClansDetailsRoutingModule]\r\n})\r\nexport class ClansDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansDetailsRoutingModule"
                        },
                        {
                            "name": "IconsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsModule",
            "id": "module-ClansDetailsModule-d32f4784435521f5b23dcb3c6c6b879d77e592bdf2aa504f75709a1af2459135d4384220e140078ddaa7025776841cbc1c6b275c383ba029aeb6dc45dbdab853-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-shell/clans-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ClansDetailsRoutingModule } from './clans-details-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ClansDetailsRoutingModule]\r\n})\r\nexport class ClansDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansDetailsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsRoutingModule",
            "id": "module-ClansDetailsRoutingModule-36dee942b4917b990dd25c2aba628fc2054c42826db7c12f361b29f4e636d69c1621e8919a0b871c72a0d8aec45dd033e1d4739eb08bcac7ec80c1165e49006d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClansDetailsComponent } from './clans-details.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClansDetailsComponent\r\n    // component: null\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansDetailsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsRoutingModule",
            "id": "module-ClansDetailsRoutingModule-da694d280753e004e98b61c9152037027856ba2ac643add3a3da8d8cb10b27e19f0a3af632d56fe2d779982e6df259e116198016b9859ce76e1dffffef65cc13-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-shell/clans-details-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    // component: null\r\n    loadChildren: () =>\r\n      \"import('../clans-details-dashboard/clans-details.module').then((module) => module.ClansDetailsModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansDetailsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchCuratedViewModule",
            "id": "module-ClanSearchCuratedViewModule-ea20091f8da45e04e5c817be28ff533d093c265b2fd492dc03ed397eaf3f7a75618f64cde8c4ee23d502118abc7e70f591fef51cf99eb86acd2e0e84e9f12af0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchCuratedViewComponent } from './clan-search-curated-view.component';\r\nimport { ClanDetailsModule } from '@features/clan-details/clan-details.module';\r\nimport { ClanSearchRoutingModule } from './clan-search-curated-view-routing.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchCuratedViewComponent],\r\n  imports: [CommonModule, ClanDetailsModule, ClanSearchRoutingModule, MatButtonModule]\r\n})\r\nexport class ClanSearchCuratedViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchCuratedViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailsModule"
                        },
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchModule",
            "id": "module-ClanSearchModule-9186d01fa88e50d0267f776cb6cfa302a3df57ed4da77aa66802566b188005787d8b9f2534acaa031b36fdcbc287840fcec1702c48e74a7b2bb60fa449c60959",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\nimport { ClanSearchRoutingModule } from './clan-search-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchComponent],\r\n  imports: [CommonModule, ClanSearchRoutingModule]\r\n})\r\nexport class ClanSearchModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchModule",
            "id": "module-ClanSearchModule-8f71738902c63f9592710ecedfd55a5be44fff8bcc6cca2eefe3b095e7878b1877c595ecf82d18291fa5640a294a95e9adb1c506ba4de1a0a94d94da01536fc8-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-shell/clan-search-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ClanSearchRoutingModule } from './clan-search-shell-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ClanSearchRoutingModule]\r\n})\r\nexport class ClanSearchModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-7b32126c4ac10ad4d41495d3e6340eb73a2ca569a768db1452896998b467bd8486530a74a9ae94928c5b7b6c02b192896507fd51aa3c65ad0ade622cbeb6d820",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-d870dcd5a65049a349deec15f2a64b5bb79cb344d9b7104455feb32ea638f31a264712264024177e015e1ed351930a397aab8d5ed19d0c3aa7fb629afd77630c-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-shell/clan-search-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../clan-search-view/clan-search-view.module').then((module) => module.ClanSearchViewModule)\"\r\n  },\r\n  {\r\n    path: ':key',\r\n    loadChildren: () =>\r\n      \"import('../clan-search-curated-view/clan-search-curated-view.module').then(\\\n        (module) => module.ClanSearchCuratedViewModule\\\n      )\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-67d259252480c9078b4e2ca5d71e681d824d903b88c0110960d2ce7c22083fb4ff4c62c6460f464b3be5fda7ffc543c4534095842de5ab1e956b7b20fa9ad4f4-2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n//import { ClanSearchViewComponent } from './clan-search-view.component';\r\nimport { ClanSearchCuratedViewComponent } from './clan-search-curated-view.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchCuratedViewComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-e09b35ec65798fc1093149615aa545fae564ee58accbc55dfbf8c0227ab975ded33f450aef9771c5454ee2f8440029f39d8ff3a8390c866e353eb675a3067928-3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClanSearchViewComponent } from './clan-search-view.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchViewComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchViewModule",
            "id": "module-ClanSearchViewModule-a76b2b5015ce3594a7df0ae6fef132aa0068785386fd7938a13db01d49c797a1ae87bac32f8e000dc29a0864aa3a870eecf1979dfcf8f370487746bd91435a54",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchViewComponent } from './clan-search-view.component';\r\nimport { ClanSearchRoutingModule } from './clan-search-view-routing.module';\r\nimport { ClanSearchAutocompleteComponent } from '../components/clan-search-autocomplete/clan-search-autocomplete.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ClanDetailsModule } from '../../clan-details/clan-details.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchViewComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ClanSearchRoutingModule,\r\n    ClanSearchAutocompleteComponent,\r\n    MatTooltipModule,\r\n    MatCardModule,\r\n    ClanDetailsModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class ClanSearchViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailsModule"
                        },
                        {
                            "name": "ClanSearchAutocompleteComponent"
                        },
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-de6c5e03e0e585b2052b9fea4d6525c851f4f44ab3eff930cac8d90b82184d3042efecbf91937c3746313f9a4429a0eafdc6bb6426237848fb219b50db1b5569",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-shell/clans-roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ClansRosterRoutingModule } from './clans-roster-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ClansRosterRoutingModule]\r\n})\r\nexport class ClansRosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansRosterRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-90abba2b11135f5566b8704f5947b88fe3d19c1c4d7a86f9eb9ac9d2f4f3d24bb3ed413258c827301d111ab4c8c769357cd75a5c526393f274b312df5405e277-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansRosterComponent } from './clans-roster.component';\r\nimport { ClansRosterService } from '../data-access/clans-roster.service';\r\n// import {} from '@destiny/data\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { ClassCellComponent, ClassIconPipe } from '../components/class-cell/class-cell.component';\r\nimport { ClansRosterRoutingModule } from './clan-roster-routing.module.ts';\r\n\r\n@NgModule({\r\n  declarations: [ClansRosterComponent, ClassCellComponent, ClassIconPipe],\r\n  providers: [ClansRosterService],\r\n  exports: [ClansRosterComponent],\r\n  imports: [CommonModule, TableViewComponent, PipesModule, ClansRosterRoutingModule]\r\n})\r\nexport class ClansRosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansRosterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        },
                        {
                            "name": "ClassCellComponent"
                        },
                        {
                            "name": "ClassIconPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansRosterRoutingModule"
                        },
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterRoutingModule",
            "id": "module-ClansRosterRoutingModule-0a69d3b43601c1520fd1e87f631a4453bff929aed7228dedf2e03f481c8a93bcc6f6627cdce2ea197a725f9cf7bcc4f7d05e46029c5d2181f5225854dfd0a15c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-routing.module.ts.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClansRosterComponent } from './clans-roster.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClansRosterComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansRosterRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterRoutingModule",
            "id": "module-ClansRosterRoutingModule-e7a27db68a3c10585e43ae05cfe2a087fb9536610d1891cf7daebb6f623393a0064d19252c86193a196e98b3ea7f27030bb3f90dc32f2c378df66b9c85596e79-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-shell/clans-roster-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => \"import('../clans-roster-list/clans-roster.module').then((module) => module.ClansRosterModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ClansRosterRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigModule",
            "id": "module-ConfigModule-455cfc031bc4cb84fcc55e3def912fd74c27d27b3ba49f29f226e33fd4b251f157b36152fb19c101b3302f0f2cd46070736de52142eaf8ddbf7914b497414767",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/config/config.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ConfigComponent } from './config.component';\r\nimport { ClanConfigComponent } from './clan-config/clan-config.component';\r\n\r\n@NgModule({\r\n  declarations: [ConfigComponent, ClanConfigComponent],\r\n  exports: [ConfigComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class ConfigModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanConfigComponent"
                        },
                        {
                            "name": "ConfigComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfigComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigModule",
            "id": "module-ConfigModule-59a3aa6cc5dbd416340be8bf73c8e80e8109a0708433f8f2dfa86c85136d78ba457fc62295f580f73d2dc2a3993be66ca870c5b80a8b1c858f5d093c8c2c1ca5-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/config/config.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ConfigComponent } from './config.component';\r\nimport { ConfigRoutingModule } from './config-routing.module';\r\nimport { ConfigModule as ConfigFeatureModule } from '../../features/config/config.module';\r\n\r\n@NgModule({\r\n  declarations: [ConfigComponent],\r\n  imports: [CommonModule, ConfigRoutingModule, ConfigFeatureModule]\r\n})\r\nexport class ConfigModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfigComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ConfigRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigRoutingModule",
            "id": "module-ConfigRoutingModule-8d94eb353f1506dcf3d18b4a51b7d8c783e08b4f37a88135779d82e0de0eaa455c3c6f10afbf1b2d5606c02925cff1db74f4cb3962d42b7c6b2c5c1e0296c52c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/config/config-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ConfigComponent } from './config.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ConfigComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ConfigRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-940d0571050cf8da2959f23839de27602377f6deae1ef6a59ee423868636f8e08002d77f715d08d5a2e095703f126c6885c1de2cf95a4722343767cb0a480e97",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AppConfig } from './config/app-config';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ApiKeyInterceptor } from './interceptors/apikey.interceptor';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { coreReducers, coreEffects, metaReducers } from './core.state';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { Configuration } from 'bungie-api-angular';\r\nimport { ClanDbModule } from '@destiny/data/clan';\r\nimport { LayoutModule } from './layout/layout.module';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { locationProvider, LocationToken } from './injection-tokens/location-token';\r\nimport { windowProvider, WindowToken } from './injection-tokens/window-token';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    ClanDbModule,\r\n    LayoutModule,\r\n    MatDialogModule,\r\n    StoreModule.forRoot(coreReducers, { metaReducers }),\r\n    EffectsModule.forRoot(coreEffects),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\r\n  ],\r\n  providers: [\r\n    ClanMembersService,\r\n    { provide: LocationToken, useFactory: locationProvider },\r\n    { provide: WindowToken, useFactory: windowProvider },\r\n    {\r\n      provide: ProfileService,\r\n      useFactory: (canDB) => {\r\n        return new ProfileService(canDB, environment.apiKey);\r\n      },\r\n      deps: [ClanDatabase]\r\n    },\r\n    { provide: AppConfig, useValue: environment },\r\n    // {\r\n    //   provide: Configuration,\r\n    //   useFactory: () => new Configuration(\r\n    //     {\r\n\r\n    //       //basePath: environment.apiUrl,\r\n    //       //accessToken: authService.getAccessToken.bind(authService)\r\n    //     }\r\n    //   ),\r\n    //   multi: false\r\n    // },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ApiKeyInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CoreModule {\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: CoreModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CoreModule is already loaded. Import only in AppModule');\r\n    }\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiKeyInterceptor"
                        },
                        {
                            "name": "ClanMembersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDbModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-9a6a6a7ff0ee47e8544017b53d592abc6aed4c40f5a9d6936236af7ed7c402b18b30ec5ae45d28e3ba0bb8f9a9772ba73c4fee943f3266bebc910982ed8e9e78",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResponsiveSidebarDirective } from './responsive-sidebar.directive';\r\n\r\n@NgModule({\r\n  declarations: [ResponsiveSidebarDirective],\r\n  exports: [ResponsiveSidebarDirective],\r\n  imports: [CommonModule]\r\n})\r\nexport class DirectivesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResponsiveSidebarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResponsiveSidebarDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconsModule",
            "id": "module-IconsModule-6d047f7034bef873f0fdcfe67bc71f3b91a83acb6e70a4831722e926045ca17722ff1a52b4426bc79529901448a5a2018c806e4b599ec9b9f940ad2660ee156e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/icons/icons.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MemberTypeComponent } from './member-type.component';\r\nimport { PipesModule } from '../pipes/pipes.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [MemberTypeComponent],\r\n  exports: [MemberTypeComponent],\r\n  imports: [CommonModule, PipesModule, MatIconModule]\r\n})\r\nexport class IconsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MemberTypeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MemberTypeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconTestModule",
            "id": "module-IconTestModule-b83fc17e6688681d205facbd77e82b1e18db76ecfd511b35e01fe04e2e34fee75b677ecd09c1de49e875fa412a258df79f5a952fb50a5f1b9bad0541da4f6cea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/icons/member-type.stories.ts",
            "methods": [],
            "sourceCode": "import { moduleMetadata } from '@storybook/angular';\r\n/// import { ActivityGridComponent } from './activity-grid.component';\r\n// import { ActivityGridModule } from './activity-grid.module';\r\n// import {MOCK_GRID_ITEMS} from './_MOCK_GRID_ITEMS';\r\n// import { ClanWeeklyProgressComponent } from './clan-weekly-progress.component';\r\n// import { ClanWeeklyProgressModule } from './clan-weekly-progress.module';\r\n//import { MOCK_WEEKLY_PROGRESS } from './_MOCK_WEEKLY_PROGRESS';\r\nimport { StorybookModule } from '../storybook/storybook.module';\r\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from './register-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconsModule } from './icons.module';\r\n\r\n@Component({\r\n  selector: 'lib-icons',\r\n  template: `\r\n    <lib-member-type [type]=\"1\"></lib-member-type>\r\n    <lib-member-type [type]=\"2\"></lib-member-type>\r\n    <lib-member-type [type]=\"3\"></lib-member-type>\r\n    <lib-member-type [type]=\"4\"></lib-member-type>\r\n  `\r\n})\r\nclass IconComponent {\r\n  constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  exports: [IconComponent],\r\n  imports: [CommonModule, MatIconModule, HttpClientModule, IconsModule]\r\n})\r\nclass IconTestModule {}\r\n\r\nexport default {\r\n  title: 'Icons / Member Type',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [IconTestModule, StorybookModule]\r\n    })\r\n  ]\r\n};\r\n\r\nexport const base = () => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n});\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-b4277957e853989976b3d7e083b93924af71181126f2afa71f2068835c19211100dc90ea32d739bf90a5b12bddef17b8a28045cc605c5ca1d29d1b7692e925d2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WrapperComponent } from './wrapper/wrapper.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NotificationsComponent } from './notifications/notifications.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { DirectivesModule } from '@destiny/components/shared/directives';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { SettingsMenuComponent } from './settings-menu/settings-menu.component';\r\n@NgModule({\r\n  declarations: [WrapperComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    NotificationsComponent,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    DirectivesModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    SettingsMenuComponent\r\n  ]\r\n})\r\nexport class LayoutModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "SettingsMenuComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-7613acdc1ea859602e40e6a01493283e182a12801fb6edb69760ad2fe1f4c91fd9a6385df3d8c34b1830ecbc2fe769ccbc485853f4789b90d608d84c9c632e8c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n// import { DateAgoPipe } from './date-ago.pipe';\r\n// import { ClassTypeTextPipe } from './class-type/class-type-text.pipe';\r\n// import { RaceTypeTextPipe } from './race-type/race-type-text.pipe';\r\n// import { GenderTypeTextPipe } from './gender-type/gender-type-text.pipe';\r\n// import { RaidReportUrlPipe } from './raid-report-url/raid-report-url.pipe';\r\n// import { DestinyTrackerUrlPipe } from './destiny-tracker-url/destiny-tracker-url.pipe';\r\n// import { BungieProfileUrlPipe } from './bungie-profile-url/bungie-profile-url.pipe';\r\n// import { RaidReportProfileUrlPipe } from './raid-report-url/raid-report-profile-url.pipe';\r\n// import { PlaytimePipe, PlaytimeMillisecondsPipe } from './playtime/playtime.pipe';\r\n// import { DungeonReportUrlPipe } from './dungeon-report-url/dungeon-report-url.pipe';\r\n// import { DungeonReportProfileUrlPipe } from './dungeon-report-url/dungeon-report-profile-url.pipe';\r\nimport { BungieDatePipe } from './bungie-date/bungie-date.pipe';\r\nimport { BungieDateTimePipe } from './bungie-date/bungie-date-time.pipe';\r\nimport { MemberTypePipe } from './member-type/member-type.pipe';\r\n// import { SortByClassPipe } from './sortByClass/sort-by-class.pipe';\r\n// import { RaidCompletionTotalPipe } from './raid-completion-total/raid-completion-total.pipe';\r\n// import { MetricTotalPipe } from './metric-total/metric-total.pipe';\r\n// import { InCollectionsPipe } from './in-collections/in-collections.pipe';\r\n// import { InCollectionsTotalPipe } from './in-collections/in-collections-total.pipe';\r\n// import { D2ChecklistUrlPipe } from './d2-checklist-url/d2-checklist-url.pipe';\r\n// import { TriumphReportPipe } from './triumph-report/triumph-report.pipe';\r\nimport { PlaytimeMillisecondsPipe, PlaytimePipe } from './playtime/playtime.pipe';\r\n\r\nconst pipes = [\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  PlaytimePipe,\r\n  PlaytimeMillisecondsPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n];\r\n\r\n@NgModule({\r\n  providers: [...pipes],\r\n  declarations: [...pipes],\r\n  exports: [...pipes],\r\n  imports: [CommonModule]\r\n})\r\nexport class PipesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BungieDatePipe"
                        },
                        {
                            "name": "BungieDateTimePipe"
                        },
                        {
                            "name": "MemberTypePipe"
                        },
                        {
                            "name": "PlaytimeMillisecondsPipe"
                        },
                        {
                            "name": "PlaytimePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BungieDatePipe"
                        },
                        {
                            "name": "BungieDateTimePipe"
                        },
                        {
                            "name": "MemberTypePipe"
                        },
                        {
                            "name": "PlaytimeMillisecondsPipe"
                        },
                        {
                            "name": "PlaytimePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityModule",
            "id": "module-RecentActivityModule-85de2887800c4049af04118f290bdb58c912e2562dd273278e0260e1a37d1cdfd24b6763974064b6953279c2ab7eff230a97a74b9bb6aec1ea8975e23d1e69fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-shell/recent-activity.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RecentActivityRoutingModule } from './recent-activity-routing.module';\r\n\r\n@NgModule({\r\n  imports: [RecentActivityRoutingModule]\r\n})\r\nexport class RecentActivityModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecentActivityRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityModule",
            "id": "module-RecentActivityModule-cff434130beed1a018851793ca342c2dcb9c2556030a751a3225e3f623c40a9f1758359eac8296bbab12d6eeb78a7e0c820d7beb13be9b74d69055f4b6609dcf-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RecentActivityComponent } from './recent-activity.component';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { RecentActivityRoutingModule } from './clan-roster-routing.module.ts';\r\n\r\n@NgModule({\r\n  declarations: [RecentActivityComponent],\r\n  exports: [RecentActivityComponent],\r\n  imports: [CommonModule, TableViewComponent, PipesModule, RecentActivityRoutingModule]\r\n})\r\nexport class RecentActivityModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecentActivityComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecentActivityRoutingModule"
                        },
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RecentActivityComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityRoutingModule",
            "id": "module-RecentActivityRoutingModule-b3e375eeadf45fe77676b87e9ee9f15fe7e9d391071cd8f7e996770057c10c10a282a3e3ddeed674816d2c3209d7569eb36566874bf410a6f371e5f5c9e6ead2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-shell/recent-activity-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => \"import('../recent-activity-dashboard/recent-activity.module').then((module) => module.RecentActivityModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class RecentActivityRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityRoutingModule",
            "id": "module-RecentActivityRoutingModule-320a8fc4050cc00c23f08cd755b01016c093774df27364d75f26feae506dea8de323c3b7b465545b64eda3161f4ccea7e09e0cda8f4dc13c7dbf36e7769a1931-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/clan-roster-routing.module.ts.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RecentActivityComponent } from './recent-activity.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RecentActivityComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RecentActivityRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RenderedViewModule",
            "id": "module-RenderedViewModule-40973cac22f4c243eddeb3850b7f29855894d00c21c0663dec111c61d1efc866fa71dc22b7186a1092e3069100e88d54bbebc59c5b04dbba639ec0948b575e85",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RenderedViewComponent } from './rendered-view.component';\r\nimport { RenderedViewDynamicCompDirective } from './rendered-view-component.directive';\r\n\r\n@NgModule({\r\n  declarations: [RenderedViewComponent, RenderedViewDynamicCompDirective],\r\n  exports: [RenderedViewComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class RenderedViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        },
                        {
                            "name": "RenderedViewDynamicCompDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SandboxRoutingModule",
            "id": "module-SandboxRoutingModule-20098ce588809df090e8dc8ef3aeb801112e4d692bba7b5de28ba9d996b87d4b25a18a810a4610cb342b15b8e48bf25b850aea42374a4f30d95c4e9cb1fd6c31",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/sandbox/sandbox-shell/sandbox-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LookupComponent } from '../lookup/lookup.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LookupComponent\r\n    //loadChildren: () => import('../clans-roster-list/clans-roster.module').then((module) => module.ClansRosterModule)\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class SandboxRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SandboxShellModule",
            "id": "module-SandboxShellModule-4b72fb3634e6b71eebda630a8ba6bda0d53e9391f7758b8b8d4a51ca4761f81f841168dc8f4208aec0be68ece93a7a2c81e0440b98afac4b4b41c1c4e8294a0d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/sandbox/sandbox-shell/sandbox-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SandboxRoutingModule } from './sandbox-shell-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, SandboxRoutingModule]\r\n})\r\nexport class SandboxShellModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SandboxRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealDetailsModule",
            "id": "module-SealDetailsModule-53ebc392f17836e9564d53905d2daf4f19666ef6df56b7db9a68167c128d361251d27e0234d346fa8ff263a387799d534565647799ad1ad6cdc9581489b66d9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SealDetailsComponent } from './seal-details.component';\r\nimport { SealsDashboardRoutingModule } from './seal-detail-routing.module';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\n\r\n@NgModule({\r\n  declarations: [SealDetailsComponent],\r\n  imports: [CommonModule, SealsDashboardRoutingModule, TableViewComponent]\r\n})\r\nexport class SealDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SealDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SealsDashboardRoutingModule"
                        },
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsDashboardModule",
            "id": "module-SealsDashboardModule-fbd129a2691c0c705ec037183827cdb2845eae30c2f5735bdf0e09073e4095dceaf6aa765932f0c538bcdf71bbbc6169358355c43260519b1f5de2872ae0b9ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SealsDashboardComponent } from './seals-dashboard.component';\r\nimport { SealsDashboardRoutingModule } from './seals-dashboard-routing.module';\r\nimport { SealsListComponent } from '../components/seals-list/seals-list.component';\r\n\r\n@NgModule({\r\n  declarations: [SealsDashboardComponent],\r\n  imports: [CommonModule, SealsDashboardRoutingModule, SealsListComponent]\r\n})\r\nexport class SealsDashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SealsDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SealsDashboardRoutingModule"
                        },
                        {
                            "name": "SealsListComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsDashboardRoutingModule",
            "id": "module-SealsDashboardRoutingModule-f797166f24891cab1959b9773b9aee6fff1b81d3aba7a455037920bb8feb54e49201b1b0efb676f17a34961d16fabaea6ea67398afea44804bc7965e7b1f7650",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SealsDashboardComponent } from './seals-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SealsDashboardComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SealsDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsDashboardRoutingModule",
            "id": "module-SealsDashboardRoutingModule-b4346c4b8742c9c9fcf14793ee080ae7267031cf8b472401534db7fdc9d9ea1a0100f4b31873a9d0abd947c196c7662abf64970a301cb23bb9a80a09fdc72ee6-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-detail-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SealDetailsComponent } from './seal-details.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SealDetailsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SealsDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsModule",
            "id": "module-SealsModule-8377a1da1362694fb4b76e0882ba61458e21df0f3ea7d4dbd0220cd5352fbb20f6473c88a01001bf6812617e5f5b23ff42ceddb9d5c1ece127227ced179fc1d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-shell/seals.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SealsRoutingModule } from './seals-routing.module';\r\n\r\n@NgModule({\r\n  imports: [SealsRoutingModule]\r\n})\r\nexport class SealsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SealsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsRoutingModule",
            "id": "module-SealsRoutingModule-4756ca346e8f60b37379c15fdf25491183d9e493c4c005793248027c2b251e7e3eb6a4fca2dab711a7f146abca9e892dc34fff418f82fd5ef2dcb0fb215efdde",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-shell/seals-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../seals-dashboard/seals-dashboard.module').then((module) => module.SealsDashboardModule)\"\r\n  },\r\n  {\r\n    path: ':hash',\r\n    loadChildren: () => \"import('../seal-details/seal-details.module').then((module) => module.SealDetailsModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class SealsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-00d194df6aa500fd7094e03b67a5faab8d03b1d4428840c770acd5fd3591bb2de97964be02f4304ef77c76741f9649d0f44ad1d19c71fdc4ca69b518e03ff0f7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookModule",
            "id": "module-StorybookModule-a722b52f5c0ee0f0c71251a61a0a3d843fbfeee5b90202d74ddc7c980c544a8cafc5ded7dd566ff1f37c31a294afc16234f8ddb968c8d0fd4563f83938eccf73",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/storybook/storybook.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { StorybookService } from './storybook.service';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from '../icons/register-icons';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    providers: [],\r\n    imports: [CommonModule, BrowserAnimationsModule, HttpClientModule]\r\n})\r\nexport class StorybookModule {\r\n    constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n        registerIcons(iconRegistry, domSanitizer);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string; clanName: string; clanTag: string }>())"
            },
            {
                "name": "addNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(`${base} Add Notification`, props<{ notification: Notification }>())"
            },
            {
                "name": "ALL_CLANS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[DOD]"
            },
            {
                "name": "AND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' AND '"
            },
            {
                "name": "APP_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'D2DASH-'"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/member-type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n})"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Clans] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Manifest] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Notifications] - '"
            },
            {
                "name": "baseConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  D2DASHBOARD_ACKNOWLEDGE_OFFLINE: 'D2DASHBOARD_ACKNOWLEDGE_OFFLINE',\r\n  PROFILE_UPDATING_EXP_MINUTES: 180,\r\n  MEMBER_RECENT_ACTIVITY_EXP_MINUTES: 360,\r\n  CURRENT_SEALS_HASH: 616318467\r\n}"
            },
            {
                "name": "Children",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CLAN_LEVEL_HASH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/hashes/clan-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'584850370'"
            },
            {
                "name": "CLAN_ROSTER_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<ClanMemberProfile>>([\r\n  [\r\n    'destinyId',\r\n    { label: 'Membership Id', text: (item: ClanMemberProfile) => `${item.member.destinyUserInfo.membershipId}` }\r\n  ],\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      text: (item: ClanMemberProfile) => getMembershipType(item.member.destinyUserInfo.membershipType)\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    { label: 'Destiny Display Name', text: (item: ClanMemberProfile) => `${item.member.destinyUserInfo?.displayName}` }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    { label: 'Bungie Display Name', text: (item: ClanMemberProfile) => `${item.member.bungieNetUserInfo?.displayName}` }\r\n  ],\r\n  [\r\n    'characterOneType',\r\n    {\r\n      label: 'Character One Type',\r\n      text: (item: ClanMemberProfile) =>\r\n        getClassType(item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[0]]?.classType) || ''\r\n    }\r\n  ],\r\n  [\r\n    'characterOnePower',\r\n    {\r\n      label: 'Character One Power',\r\n      text: (item: ClanMemberProfile) =>\r\n        `${item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[0]]?.light || ''}`\r\n    }\r\n  ],\r\n  [\r\n    'characterTwoType',\r\n    {\r\n      label: 'Character Two Type',\r\n      text: (item: ClanMemberProfile) =>\r\n        getClassType(item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[1]]?.classType) || ''\r\n    }\r\n  ],\r\n  [\r\n    'characterTwoPower',\r\n    {\r\n      label: 'Character Two Power',\r\n      text: (item: ClanMemberProfile) =>\r\n        `${item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[1]]?.light || ''}`\r\n    }\r\n  ],\r\n  [\r\n    'characterThreeType',\r\n    {\r\n      label: 'Character Three Type',\r\n      text: (item: ClanMemberProfile) =>\r\n        getClassType(item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[2]]?.classType) || ''\r\n    }\r\n  ],\r\n  [\r\n    'characterThreePower',\r\n    {\r\n      label: 'Character Three Power',\r\n      text: (item: ClanMemberProfile) =>\r\n        `${item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[2]]?.light || ''}`\r\n    }\r\n  ],\r\n  [\r\n    'powerBonus',\r\n    {\r\n      label: 'Power Bonus',\r\n      text: (item: ClanMemberProfile) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    { label: 'Active Triumph', text: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.activeScore}` }\r\n  ],\r\n  [\r\n    'lifeTimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      text: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n    }\r\n  ],\r\n  ['clanJoinDate', { label: 'Clan Join Date', text: (item: ClanMemberProfile) => `${item.member?.joinDate}` }],\r\n  [\r\n    'lastPlayed',\r\n    { label: 'Last Played', text: (item: ClanMemberProfile) => `${item.profile?.profile.data.dateLastPlayed}` }\r\n  ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastWeek)}`\r\n    }\r\n  ],\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastMonth)}`\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90 Days (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastNinetyDays)}`\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      text: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile?.data?.dateLastPlayed as unknown as Date)}`\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ClanMemberProfile>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.destinyUserInfo?.displayName?.toLowerCase() < b.member?.destinyUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.bungieNetUserInfo?.displayName?.toLowerCase() <\r\n        b.member?.bungieNetUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      comparator: (a, b) => (a.member?.destinyUserInfo?.membershipType < b.member?.destinyUserInfo?.membershipType ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: 'Power Level',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus <\r\n        b.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.activeScore < b.profile?.profileRecords?.data?.activeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.lifetimeScore < b.profile?.profileRecords?.data?.lifetimeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName < b.clan.clanName ? -1 : 1)\r\n    }\r\n  ],\r\n\r\n  [\r\n    'joinDate',\r\n    {\r\n      label: 'Join Date',\r\n      comparator: (a, b) => (new Date(a.member?.joinDate) < new Date(b.member?.joinDate) ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Date Last Played',\r\n      comparator: (a, b) =>\r\n        new Date(a.profile?.profile.data.dateLastPlayed) < new Date(b.profile?.profile.data.dateLastPlayed) ? -1 : 1\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      plainText: (item: ClanMemberProfile) => `${getMembershipType(item.member.destinyUserInfo.membershipType)}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        //        styles: {},\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member?.destinyUserInfo?.membershipType || 0 }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ClanMemberProfile) => `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member?.destinyUserInfo?.displayName || ''}` })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      plainText: (item: ClanMemberProfile) => `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member?.bungieNetUserInfo?.displayName || ''}` })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      plainText: (item: ClanMemberProfile) => ``,\r\n      render: (item: ClanMemberProfile) => {\r\n        const characterIds = item.profile?.profile?.data?.characterIds;\r\n        return {\r\n          classList: 'characters-cell',\r\n          children: characterIds?.map((id) => {\r\n            return {\r\n              classList: 'character-cell',\r\n              component: ClassCellComponent,\r\n              data: {\r\n                characterHash: id,\r\n                profile: item.profile\r\n              }\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        classList: 'power-cell',\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.activeScore}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.lifetimeScore}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clan',\r\n    {\r\n      label: 'Clan',\r\n      plainText: (item: ClanMemberProfile) => `${item.clan.clanName}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      plainText: (item: ClanMemberProfile, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ClanMemberProfile, context: ViewContext) => `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
            },
            {
                "name": "ClanConfigAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ClanConfig>",
                "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
            },
            {
                "name": "CLANS_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'clans'"
            },
            {
                "name": "ClansReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId, clanName, clanTag }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      return ClanConfigAdapter.upsertOne({ clanId, clanName, clanTag, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
            },
            {
                "name": "Components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "convertToMinutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(totalSeconds) => String(Math.floor(totalSeconds / 60))"
            },
            {
                "name": "coreEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ManifestEffects, ClansEffects]"
            },
            {
                "name": "coreReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer,\r\n  notifications: NotificationReducer\r\n}"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DEFAULT_TOKENIZE_ITEM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  }",
                "rawdescription": "Default and naive tokenize function that combines the item's property values into a string.",
                "description": "<p>Default and naive tokenize function that combines the item&#39;s property values into a string.</p>\n"
            },
            {
                "name": "DefaultClanConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClanConfig",
                "defaultValue": "{\r\n  enabled: true\r\n} as ClanConfig"
            },
            {
                "name": "DOD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedClan",
                "defaultValue": "{\r\n  key: 'dod',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'All Platforms',\r\n      clans: m(dod_clans_all)\r\n    },\r\n    {\r\n      title: 'PC',\r\n      clans: m(dod_clans_pc)\r\n    },\r\n    {\r\n      title: 'Playstation',\r\n      clans: m(dod_clans_ps)\r\n    },\r\n    {\r\n      title: 'Play Station',\r\n      clans: m(dod_clans_xbox)\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "dod_clans_all",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  4803739, //DoD Still Vexier Than You\r\n  4523816, //DoD Lightforged\r\n  223562, //DoD Westside\r\n  523657, //DoD Battleborn\r\n  3872451, //DoD Battleborn Ascendant\r\n  1726332 //DoD California\r\n]"
            },
            {
                "name": "dod_clans_pc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  2073131, // Chums\r\n  4322250, // DoD Dad Guard\r\n  2866236, // GMT\r\n  4430645, //Family Pride\r\n  4473297, // Guiding light\r\n  4767446 // Lucid Loops\r\n]"
            },
            {
                "name": "dod_clans_ps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[2942177, 1288185, 2071608, 1771725, 1161209, 2180975, 3136336, 1186355, 1375802]"
            },
            {
                "name": "dod_clans_xbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  910604, //DOD Chattawhyte Krew\r\n  849654, //DoD Empire/Orbit/Rebellion/United\r\n  1179713, //DoD Iron Warlords\r\n  4271754, //DoD Shenanigans,\r\n  3219957, //DoD Storm ,\r\n  4748154, // DoD West Coast Blueberries\r\n  806412, // DoD X1 Foxtrot,\r\n  167225 //Dads of Destiny X1 Ghost\r\n]"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "EXAMPLE_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<MockListItem>>([\r\n  ['id', { label: 'Id', text: (item) => item.id.toString() }],\r\n  ['startDate', { label: 'Start Date', text: (item) => new Date(item.startDate).toDateString() }]\r\n])"
            },
            {
                "name": "EXAMPLE_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      type:'number',\r\n      matcher:(item, filter) => numberMatchesEquality(item.id, filter.value, filter.equality)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "EXAMPLE_GROUPER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, GrouperMetadata<MockListItem>>([\r\n  [\r\n    'all',\r\n    {\r\n      label: 'All',\r\n      groupingFunction: (items) => {\r\n        return [{ id: 'all', title: 'All', items }];\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'isPublic', {\r\n      label: 'IsPublic',\r\n      groupingFunction: items => getGroupByValue(items, 'isPublic'),\r\n    }\r\n  ],\r\n])"
            },
            {
                "name": "EXAMPLE_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Name',\r\n      comparator: (a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "EXAMPLE_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'id',\r\n      plainText: (item) => `${item.id}`,\r\n      render: (item) => ({ styles: { fontWeight: 'bold' }, text: `${item.id}` })\r\n    }\r\n  ],\r\n  [\r\n    'isPublic',\r\n    { label: 'Is Public', plainText: (item) => `${item.isPublic}`, render: (item) => ({ text: `${item.isPublic}` }) }\r\n  ],\r\n  ['name', { label: 'Name', plainText: (item) => `${item.name}`, render: (item) => ({ text: `${item.name}` }) }],\r\n  [\r\n    'startDate',\r\n    {\r\n      label: 'Start Date',\r\n      plainText: (item) => `${new Date(item.startDate).toDateString()}`,\r\n      render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` })\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "getRandomNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/utility/random-number.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}"
            },
            {
                "name": "getRandomSLI",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n  return { seal: MOCK_SEAL_DEFINITION, totalMembers: 100, completedCount: getRandomNumber(1, 100) } as SealListItem;\r\n}"
            },
            {
                "name": "initialClanState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClansState",
                "defaultValue": "ClanConfigAdapter.getInitialState({})"
            },
            {
                "name": "initialManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ManifestState",
                "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return {\r\n    id: '1',\r\n    name: 'Item 1',\r\n    iconName: 'people',\r\n    type: 'clan'\r\n  };\r\n})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SealListItem[]",
                "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return getRandomSLI();\r\n})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('load'))"
            },
            {
                "name": "loadManifestComplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('complete'))"
            },
            {
                "name": "loadManifestFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
            },
            {
                "name": "LocationToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Location')"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MANIFEST_PATH_EXP_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
            },
            {
                "name": "MANIFEST_PATH_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_KEY'"
            },
            {
                "name": "ManifestReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[initStateFromLocalStorage]"
            },
            {
                "name": "MOCK_CLAN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/__mocks__/clan-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  groupId: '2073131',\r\n  name: 'DoD Paternal Chums',\r\n  groupType: 1,\r\n  membershipIdCreated: '22807',\r\n  creationDate: '2017-08-24T21:26:26.668Z',\r\n  modificationDate: '2022-04-09T00:14:51.491Z',\r\n  about:\r\n    'REQUIRED: Follow the instructions in Discord to be considered for a invite to join.\\n\\nClan Discord: https://discord.gg/z3nsx47\\n\\n---------------------\\n\\nWe are a bunch of Guardians with families who are united around the love of Destiny. We have members who are casuals, full time raiders, triumph fanatics and everything between. \\n\\nOur clan:\\n-- PC is our **only** platform of operation.\\n-- We are based in North America.\\n-- Activities are oriented around play times from 7pm to 11pm in US Eastern timezone. \\n\\nWe are recruiting Dads who are:\\n-- Committed to playing with clan members and participating in Discord voice chat.\\n-- Have a Base Power 1520+\\n-- Aged 25 and older. The average age of our group is 41.\\n-- Can demonstrate consistent recent engagement in Destiny 2 (20+hrs across the last month).',\r\n  tags: [],\r\n  memberCount: 93,\r\n  isPublic: true,\r\n  isPublicTopicAdminOnly: false,\r\n  motto: 'Dads of Destiny PC',\r\n  allowChat: true,\r\n  isDefaultPostPublic: false,\r\n  chatSecurity: 0,\r\n  locale: 'en',\r\n  avatarImageIndex: 0,\r\n  homepage: 0,\r\n  membershipOption: 2,\r\n  defaultPublicity: 2,\r\n  theme: 'Group_Community1',\r\n  bannerPath: '/img/Themes/Group_Community1/struct_images/group_top_banner.jpg',\r\n  avatarPath: '/img/profile/avatars/group/defaultGroup.png',\r\n  conversationId: '27030166',\r\n  enableInvitationMessagingForAdmins: false,\r\n  banExpireDate: '2001-01-01T00:00:00Z',\r\n  features: {\r\n    maximumMembers: 100,\r\n    maximumMembershipsOfGroupType: 1,\r\n    capabilities: 31,\r\n    membershipTypes: [1, 2, 3, 5, 6],\r\n    invitePermissionOverride: true,\r\n    updateCulturePermissionOverride: false,\r\n    hostGuidedGamePermissionOverride: 1,\r\n    updateBannerPermissionOverride: false,\r\n    joinLevel: 1\r\n  },\r\n  clanInfo: {\r\n    d2ClanProgressions: {\r\n      '584850370': {\r\n        progressionHash: 584850370,\r\n        dailyProgress: 200000,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 100000,\r\n        weeklyLimit: 100000,\r\n        currentProgress: 200000,\r\n        level: 2,\r\n        levelCap: 6,\r\n        stepIndex: 2,\r\n        progressToNextLevel: 100000,\r\n        nextLevelAt: 125000\r\n      },\r\n      '1273404180': {\r\n        progressionHash: 1273404180,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3381682691': {\r\n        progressionHash: 3381682691,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3759191272': {\r\n        progressionHash: 3759191272,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      }\r\n    },\r\n    clanCallsign: 'DoD',\r\n    clanBannerData: {\r\n      decalId: 4142223387,\r\n      decalColorId: 3379387796,\r\n      decalBackgroundColorId: 3568748754,\r\n      gonfalonId: 1473910866,\r\n      gonfalonColorId: 2157636320,\r\n      gonfalonDetailId: 1664476155,\r\n      gonfalonDetailColorId: 4128900497\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "MOCK_LIST_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockListItem[]",
                "defaultValue": "names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n})"
            },
            {
                "name": "MOCK_SEAL_DEFINITION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SealDefinition",
                "defaultValue": "{\r\n  displayProperties: {\r\n    description: 'Complete Event Challenges during the Festival of the Lost. Progress resets at the end of the event.',\r\n    name: 'Ghost Writer',\r\n    icon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n    iconSequences: [\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n          '/common/destiny2_content/icons/6987d309d0bc4029f3a814d7e5325469.png',\r\n          '/common/destiny2_content/icons/12dcab8ca6809f3a875f24b4dc5a0437.png'\r\n        ]\r\n      },\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/42df53be3530e75cf88e54f6932827ec.png',\r\n          '/common/destiny2_content/icons/f2515008c74cf3b69242f91edd977176.png',\r\n          '/common/destiny2_content/icons/d31bc05850b70c5094bd23bfe77ba0af.png'\r\n        ]\r\n      }\r\n    ],\r\n    hasIcon: true\r\n  },\r\n  originalIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  rootViewIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  nodeType: 3,\r\n  scope: 1,\r\n  completionRecordHash: 1089543274,\r\n  children: {\r\n    presentationNodes: [],\r\n    collectibles: [],\r\n    records: [\r\n      { recordHash: 2402210136, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883618, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883619, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883616, nodeDisplayPriority: 0 },\r\n      { recordHash: 3907371284, nodeDisplayPriority: 0 },\r\n      { recordHash: 4240802932, nodeDisplayPriority: 0 },\r\n      { recordHash: 1276598420, nodeDisplayPriority: 0 },\r\n      { recordHash: 2260243645, nodeDisplayPriority: 0 },\r\n      { recordHash: 170025438, nodeDisplayPriority: 0 },\r\n      { recordHash: 3135128969, nodeDisplayPriority: 0 },\r\n      { recordHash: 3448638613, nodeDisplayPriority: 0 },\r\n      { recordHash: 2895286773, nodeDisplayPriority: 0 },\r\n      { recordHash: 1082927728, nodeDisplayPriority: 0 },\r\n      { recordHash: 4283733196, nodeDisplayPriority: 0 },\r\n      { recordHash: 1644352879, nodeDisplayPriority: 0 },\r\n      { recordHash: 3951338722, nodeDisplayPriority: 0 },\r\n      { recordHash: 3949332075, nodeDisplayPriority: 0 },\r\n      { recordHash: 552478397, nodeDisplayPriority: 0 },\r\n      { recordHash: 2358631133, nodeDisplayPriority: 0 },\r\n      { recordHash: 1321634422, nodeDisplayPriority: 0 }\r\n    ],\r\n    metrics: [],\r\n    craftables: []\r\n  },\r\n  displayStyle: 2,\r\n  screenStyle: 2,\r\n  requirements: { entitlementUnavailableMessage: '' },\r\n  disableChildSubscreenNavigation: false,\r\n  maxCategoryRecordScore: 0,\r\n  presentationNodeType: 1,\r\n  traitIds: [],\r\n  traitHashes: [],\r\n  parentNodeHashes: [616318467],\r\n  hash: 2592822840,\r\n  index: 1319,\r\n  redacted: false,\r\n}"
            },
            {
                "name": "MockConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppConfig",
                "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  production: false,\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "names",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
            },
            {
                "name": "NotificationAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Notification>",
                "defaultValue": "createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n})"
            },
            {
                "name": "NotificationInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NotificationState",
                "defaultValue": "NotificationAdapter.getInitialState()"
            },
            {
                "name": "NotificationReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  NotificationInitialState,\r\n  on(addNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(updateNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(removeNotification, (state, { notification }) => {\r\n    return NotificationAdapter.removeOne(notification.id, { ...state });\r\n  })\r\n)"
            },
            {
                "name": "OR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' OR '"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "pipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/pipes.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  PlaytimePipe,\r\n  PlaytimeMillisecondsPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RECENT_ACTIVITY_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ProfileRecentActivity>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "RECENT_ACTIVITY_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ProfileRecentActivity>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data.userInfo.displayName?.toLowerCase() <\r\n        b.profile?.profile?.data.userInfo.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week',\r\n      comparator: (a, b) => ((a.profileActivity.stats.lastWeek || 0) < (b.profileActivity.stats.lastWeek || 0) ? -1 : 1)\r\n    }\r\n  ],\r\n\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month',\r\n      comparator: (a, b) =>\r\n        (a.profileActivity.stats.lastMonth || 0) < (b.profileActivity.stats.lastMonth || 0) ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90',\r\n      comparator: (a, b) =>\r\n        (a.profileActivity.stats.lastNinetyDays || 0) < (b.profileActivity.stats.lastNinetyDays || 0) ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lastLogin',\r\n    {\r\n      label: 'Last Login',\r\n      comparator: (a, b) =>\r\n        (new Date(a.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900)) <\r\n        (new Date(b.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900))\r\n          ? -1\r\n          : 1\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "RECENT_ACTIVITY_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clanMember?.destinyUserInfo?.displayName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90 Days',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "registerIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/register-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(registry: MatIconRegistry, domSanitizer: DomSanitizer) => {\r\n    Object.keys(svgIcons).map(name => {\r\n        const path = svgIcons[name];\r\n        registry.addSvgIcon(name, domSanitizer.bypassSecurityTrustResourceUrl(path));\r\n    });\r\n}"
            },
            {
                "name": "removeClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
            },
            {
                "name": "removeNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(`${base} Remove Notification`, props<{ notification: Notification }>())"
            },
            {
                "name": "SEAL_DETAILS_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<SealClanMember>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      text: (item: SealClanMember) => `${getMemberName(item.clanMember)}`\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      text: (item: SealClanMember) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      text: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : '')\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed Count',\r\n      text: (item: SealClanMember) => `${item.sealProgression.completedTriumphCount}`\r\n    }\r\n  ],\r\n  [\r\n    'totalCount',\r\n    {\r\n      label: 'Total Count',\r\n      text: (item: SealClanMember) => `${item.sealProgression.totalTriumphCount}`\r\n    }\r\n  ],\r\n\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Complete',\r\n      text: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "SEAL_DETAILS_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<SealClanMember>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "SEAL_DETAILS_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<SealClanMember>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        getMemberName(a.clanMember).toLowerCase() < getMemberName(b.clanMember).toLowerCase() ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName < b.clan.clanName ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Progress',\r\n      comparator: (a, b) => (a.sealProgression.completionPercentage < b.sealProgression.completionPercentage ? -1 : 1)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "SEAL_DETAILS_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<SealClanMember, ViewContext>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      plainText: (item: SealClanMember) => `${getMemberName(item.clanMember)}`,\r\n      render: (item: SealClanMember) => ({ text: `${getMemberName(item.clanMember)}` })\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      plainText: (item: SealClanMember) => `${item.clan.clanName}`,\r\n      render: (item: SealClanMember) => ({ text: `${item.clan.clanName}` })\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        text: item.sealProgression.isCompleted ? 'X' : ''\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isGilded ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        text: item.sealProgression.isGilded ? 'X' : ''\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.gildedCount || ''}`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.gildedCount || ''}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed Count',\r\n      plainText: (item: SealClanMember) =>\r\n        `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Completed',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.completionPercentage}%`\r\n      })\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secretKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/secrets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
            },
            {
                "name": "selectClansState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ClansState>('clans')"
            },
            {
                "name": "selectEnabledClanIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
            },
            {
                "name": "selectEnabledClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
            },
            {
                "name": "selectLastProfileUpdate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
            },
            {
                "name": "selectLastRecentActivityUpdate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.memberRecentActivityUpdate) || '';\r\n  })"
            },
            {
                "name": "selectManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
            },
            {
                "name": "selectManifestError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
            },
            {
                "name": "selectManifestLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
            },
            {
                "name": "selectManifestLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
            },
            {
                "name": "selectManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
            },
            {
                "name": "selectNotificationsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<NotificationState>('notifications')"
            },
            {
                "name": "setClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "STATUS_DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'done'"
            },
            {
                "name": "STATUS_EXTRACTING_TABLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'extracting tables'"
            },
            {
                "name": "STATUS_UNZIPPING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'unzipping'"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "['allData']"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "[\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n]"
            },
            {
                "name": "svgIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/register-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    titan: '/assets/icons/titan.svg',\r\n    hunter: '/assets/icons/hunter.svg',\r\n    warlock: '/assets/icons/warlock.svg',\r\n    steam: '/assets/icons/steam.svg',\r\n    stadia: '/assets/icons/stadia.svg',\r\n    playstation: '/assets/icons/playstation.svg',\r\n    xbox: '/assets/icons/xbox.svg',\r\n    twitch: '/assets/icons/twitch-purp.svg',\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MatButton>",
                "defaultValue": "(args: MatButton) => ({\r\n  component: MatButton,\r\n  props: args,\r\n  styles: [\r\n    `\r\n  section {\r\n    display: table;\r\n  }\r\n  .example-label {\r\n    display: table-cell;\r\n    font-size: 14px;\r\n    margin-left: 8px;\r\n    min-width: 120px;\r\n  }\r\n  .example-button-row {\r\n    display: table-cell;\r\n    width: 800px;\r\n  }\r\n  .example-button-row .mat-button-base {\r\n    margin: 8px 8px 8px 0;\r\n  }\r\n  .example-flex-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n  }\r\n  .example-button-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 120px;\r\n  }`\r\n  ],\r\n  template: `\r\n  <section>\r\n  <div class=\"example-label\">Basic</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-button>Basic</button>\r\n    <button mat-button disabled>Disabled</button>\r\n    <button mat-button color=\"primary\">Primary</button>\r\n    <button mat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-button color=\"accent\">Accent</button>\r\n    <button mat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-button color=\"warn\">Warn</button>\r\n    <button mat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Raised</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-raised-button>Basic</button>\r\n    <button mat-raised-button disabled>Disabled</button>\r\n    <button mat-raised-button color=\"primary\">Primary</button>\r\n    <button mat-raised-button color=\"primary\"  disabled>Primary</button>\r\n    <button mat-raised-button color=\"accent\">Accent</button>\r\n    <button mat-raised-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-raised-button color=\"warn\">Warn</button>\r\n    <button mat-raised-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-raised-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Stroked</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-stroked-button>Basic</button>\r\n    <button mat-stroked-button disabled>Disabled</button>\r\n    <button mat-stroked-button color=\"primary\">Primary</button>\r\n    <button mat-stroked-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-stroked-button color=\"accent\">Accent</button>\r\n    <button mat-stroked-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-stroked-button color=\"warn\">Warn</button>\r\n    <button mat-stroked-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-stroked-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Flat</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-flat-button>Basic</button>\r\n    <button mat-flat-button disabled>Disabled</button>\r\n    <button mat-flat-button color=\"primary\">Primary</button>\r\n    <button mat-flat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-flat-button color=\"accent\">Accent</button>\r\n    <button mat-flat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-flat-button color=\"warn\">Warn</button>\r\n    <button mat-flat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-flat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Icon</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\">\r\n        <mat-icon>home</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"accent\" aria-label=\"Example icon button with a menu icon\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" aria-label=\"Example icon button with a heart icon\">\r\n        <mat-icon>favorite</mat-icon>\r\n      </button>\r\n      <button mat-icon-button disabled aria-label=\"Example icon button with a open in new tab icon\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"primary\" aria-label=\"Example icon button with a delete icon\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"accent\" aria-label=\"Example icon button with a bookmark icon\">\r\n          <mat-icon>bookmark</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"warn\" aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab disabled aria-label=\"Example icon button with a heart icon\">\r\n          <mat-icon>favorite</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Mini FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"primary\" aria-label=\"Example icon button with a menu icon\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"accent\" aria-label=\"Example icon button with a plus one icon\">\r\n          <mat-icon>plus_one</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"warn\" aria-label=\"Example icon button with a filter list icon\">\r\n          <mat-icon>filter_list</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab disabled aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MatCard>",
                "defaultValue": "(args: MatCard) => ({\r\n  component: MatCard,\r\n  props: args,\r\n  styles: [\r\n    `\r\n    .example-card {\r\n        max-width: 400px;\r\n      }\r\n\r\n      .example-header-image {\r\n        background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n        background-size: cover;\r\n      }\r\n   `\r\n  ],\r\n  template: `\r\n    <mat-card>\r\n    <mat-card-content>Simple card</mat-card-content>\r\n  </mat-card>\r\n  <hr>\r\n<a class=\"mat-card-link\">\r\n<mat-card>\r\n    <mat-card-content>Link Card</mat-card-content>\r\n  </mat-card>\r\n  </a>\r\n  <hr>\r\n\r\n  <mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>Actions Buttons</mat-card-title>\r\n    <mat-card-subtitle>Start</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n<hr>\r\n<mat-card class=\"example-card\">\r\n  <mat-card-header>\r\n    <div mat-card-avatar class=\"example-header-image\"></div>\r\n    <mat-card-title>Shiba Inu</mat-card-title>\r\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n  <mat-card-content>\r\n    <p>\r\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n      bred for hunting.\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n    `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DisplayOptionsComponent>",
                "defaultValue": "(args: DisplayOptionsComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RenderedViewComponent>",
                "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableViewComponent>",
                "defaultValue": "(args: TableViewComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanDetailCellComponent>",
                "defaultValue": "(args: ClanDetailCellComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanSearchAutocompleteComponent>",
                "defaultValue": "(args: ClanSearchAutocompleteComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanInfoComponent>",
                "defaultValue": "(args: ClanInfoComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SealsListComponent>",
                "defaultValue": "(args: SealsListComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "updateClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
            },
            {
                "name": "updateClanMemberActivitySync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan Activity Sync'), props<{ clanId: string }>())"
            },
            {
                "name": "updateClanProfileSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
            },
            {
                "name": "updateNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(`${base} Update Notification`, props<{ notification: Notification }>())"
            },
            {
                "name": "VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'v1'"
            },
            {
                "name": "WindowToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Window')"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NotificationAdapter.getSelectors(selectNotificationsState)"
            }
        ],
        "functions": [
            {
                "name": "addDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanDetailSerializer",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClanDetails",
                "jsdoctags": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanMemberActivitySerializer",
                "file": "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "activity",
                        "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                "jsdoctags": [
                    {
                        "name": "activity",
                        "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanMemberRecentActivitySerializer",
                "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "activity",
                        "type": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MemberActivityRecentStats",
                "jsdoctags": [
                    {
                        "name": "activity",
                        "type": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "compare",
                "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertArrayOfObjectsToCSV",
                "file": "projects/components/src/lib/data/exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertArrayOfObjectsToCSV",
                "file": "projects/components/src/lib/data/viewer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "DateEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "DateEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateToUnixTimeStamp",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "downloadCSV",
                "file": "projects/components/src/lib/data/exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "downloadCSV",
                "file": "projects/components/src/lib/data/viewer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterItems",
                "file": "projects/components/src/lib/data/filterer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function to filter the items. May be used to synchronously filter items.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "context",
                        "type": "M",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metadata",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "M",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metadata",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatDate",
                "file": "projects/data/src/lib/utility/format-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBungieStartDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBungieStartDate",
                "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterProgressions",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getClanMemberId",
                "file": "projects/data/src/lib/utility/get-ids.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getClassType",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "classType",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "classType",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDateArray",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDayOfWeek",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFirstDayOfMonth",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupByListValues",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that creates a group based on the list of values of the item&#39;s property.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupByValue",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that creates a group based on the value of the item&#39;s property.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupsFromMap",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that transforms a map of groups into a list.</p>\n",
                "args": [
                    {
                        "name": "groupsMap",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "groupsMap",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMemberName",
                "file": "projects/data/src/lib/utility/get-display-name.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMemberProfileId",
                "file": "projects/data/src/lib/utility/get-ids.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMembershipType",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMembershipType",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileItems",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileName",
                "file": "projects/data/src/lib/utility/get-display-name.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileRecords",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProgressionValues",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivities",
                "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "raw",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "raw",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByDate",
                "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByMonth",
                "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<MemberActivityRecentStatsActivity>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByWeek",
                "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<MemberActivityRecentStatsActivity>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByWeek",
                "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<MemberActivityRecentStatsActivity>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivityStatsByDate",
                "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivityStatsByMonth",
                "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivityStatsByWeek",
                "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initStateFromLocalStorage",
                "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<AppState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isValidDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "lastWord",
                "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "words",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "words",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "locationProvider",
                "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "m",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "c",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "c",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusMinutes",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusWeeks",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "numberMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "NumberEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "NumberEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "playtime",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileSerializer",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "searchItems",
                "file": "projects/components/src/lib/data/filterer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenizeItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenizeItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "serializeProgression",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortItems",
                "file": "projects/components/src/lib/data/sorter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "comparator",
                        "type": "SortComparator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reverse",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "C",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "comparator",
                        "type": "SortComparator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reverse",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "C",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stateMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputState",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "StateEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputState",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "StateEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textArrayMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tryJSONParse",
                "file": "projects/data/src/lib/utility/try-json-parse.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "json",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T | undefined",
                "jsdoctags": [
                    {
                        "name": "json",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unixTimeStampToDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "windowProvider",
                "file": "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "ClanSearchResultItemType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"player\" | \"clan\"",
                "file": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DateEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"before\" | \"after\" | \"on\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DeepPartial",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/models/DeepPartial.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "ExporterContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/exporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextFilter | NumberFilter | DateFilter | StateFilter",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FiltererContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<M>",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FiltererMetadata",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextFiltererMetadata<T | C> | NumberFiltererMetadata<T | C> | DateFiltererMetadata<T | C> | StateFiltererMetadata<T | C>",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FilterType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"number\" | \"date\" | \"state\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "NumberEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"greaterThan\" | \"lessThan\" | \"equalTo\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RenderedView",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent",
                "file": "projects/components/src/lib/data/viewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SortComparator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/data/sorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "SorterContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/sorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "StateEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"is\" | \"notIs\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "StoreId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "TextEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contains\" | \"is\" | \"notContains\" | \"notIs\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TextFilterAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ViewerContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/viewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "MembershipTypes",
                "childs": [
                    {
                        "name": "Xbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Psn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Steam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "Blizzard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "Stadia",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "Demon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/models/enums/MembershipTypes.ts"
            },
            {
                "name": "StoreId",
                "childs": [
                    {
                        "name": "CacheDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CacheDetails"
                    },
                    {
                        "name": "ClanDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanDetails"
                    },
                    {
                        "name": "ClanRewards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanRewards"
                    },
                    {
                        "name": "MemberProfiles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberProfiles"
                    },
                    {
                        "name": "MemberActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivities"
                    },
                    {
                        "name": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivityStats"
                    },
                    {
                        "name": "MemberRecentActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberRecentActivities"
                    },
                    {
                        "name": "ProfileMilestones",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ProfileMilestones"
                    },
                    {
                        "name": "ProfileMetrics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ProfileMetrics"
                    },
                    {
                        "name": "Raids",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Raids"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts"
            }
        ],
        "groupedVariables": {
            "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts": [
                {
                    "name": "addClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string; clanName: string; clanTag: string }>())"
                },
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Clans] - '"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                },
                {
                    "name": "removeClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
                },
                {
                    "name": "setClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
                },
                {
                    "name": "updateClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
                },
                {
                    "name": "updateClanMemberActivitySync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan Activity Sync'), props<{ clanId: string }>())"
                },
                {
                    "name": "updateClanProfileSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts": [
                {
                    "name": "addNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(`${base} Add Notification`, props<{ notification: Notification }>())"
                },
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Notifications] - '"
                },
                {
                    "name": "removeNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(`${base} Remove Notification`, props<{ notification: Notification }>())"
                },
                {
                    "name": "updateNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(`${base} Update Notification`, props<{ notification: Notification }>())"
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts": [
                {
                    "name": "ALL_CLANS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[DOD]"
                },
                {
                    "name": "DOD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedClan",
                    "defaultValue": "{\r\n  key: 'dod',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'All Platforms',\r\n      clans: m(dod_clans_all)\r\n    },\r\n    {\r\n      title: 'PC',\r\n      clans: m(dod_clans_pc)\r\n    },\r\n    {\r\n      title: 'Playstation',\r\n      clans: m(dod_clans_ps)\r\n    },\r\n    {\r\n      title: 'Play Station',\r\n      clans: m(dod_clans_xbox)\r\n    }\r\n  ]\r\n}"
                },
                {
                    "name": "dod_clans_all",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  4803739, //DoD Still Vexier Than You\r\n  4523816, //DoD Lightforged\r\n  223562, //DoD Westside\r\n  523657, //DoD Battleborn\r\n  3872451, //DoD Battleborn Ascendant\r\n  1726332 //DoD California\r\n]"
                },
                {
                    "name": "dod_clans_pc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  2073131, // Chums\r\n  4322250, // DoD Dad Guard\r\n  2866236, // GMT\r\n  4430645, //Family Pride\r\n  4473297, // Guiding light\r\n  4767446 // Lucid Loops\r\n]"
                },
                {
                    "name": "dod_clans_ps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[2942177, 1288185, 2071608, 1771725, 1161209, 2180975, 3136336, 1186355, 1375802]"
                },
                {
                    "name": "dod_clans_xbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  910604, //DOD Chattawhyte Krew\r\n  849654, //DoD Empire/Orbit/Rebellion/United\r\n  1179713, //DoD Iron Warlords\r\n  4271754, //DoD Shenanigans,\r\n  3219957, //DoD Storm ,\r\n  4748154, // DoD West Coast Blueberries\r\n  806412, // DoD X1 Foxtrot,\r\n  167225 //Dads of Destiny X1 Ghost\r\n]"
                }
            ],
            "projects/components/src/lib/data/utility/filter-matcher.ts": [
                {
                    "name": "AND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' AND '"
                },
                {
                    "name": "OR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' OR '"
                }
            ],
            "projects/clan-dashboard/src/app/core/services/local-storage.service.ts": [
                {
                    "name": "APP_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'D2DASH-'"
                }
            ],
            "projects/components/src/lib/icons/member-type.stories.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/member-type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Manifest] - '"
                },
                {
                    "name": "loadManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('load'))"
                },
                {
                    "name": "loadManifestComplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('complete'))"
                },
                {
                    "name": "loadManifestFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                }
            ],
            "projects/clan-dashboard/src/environments/constants.ts": [
                {
                    "name": "baseConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  D2DASHBOARD_ACKNOWLEDGE_OFFLINE: 'D2DASHBOARD_ACKNOWLEDGE_OFFLINE',\r\n  PROFILE_UPDATING_EXP_MINUTES: 180,\r\n  MEMBER_RECENT_ACTIVITY_EXP_MINUTES: 360,\r\n  CURRENT_SEALS_HASH: 616318467\r\n}"
                }
            ],
            "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts": [
                {
                    "name": "Children",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RenderedViewComponent>",
                    "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/data/src/lib/hashes/clan-details.ts": [
                {
                    "name": "CLAN_LEVEL_HASH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/hashes/clan-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'584850370'"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts": [
                {
                    "name": "CLAN_ROSTER_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<ClanMemberProfile>>([\r\n  [\r\n    'destinyId',\r\n    { label: 'Membership Id', text: (item: ClanMemberProfile) => `${item.member.destinyUserInfo.membershipId}` }\r\n  ],\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      text: (item: ClanMemberProfile) => getMembershipType(item.member.destinyUserInfo.membershipType)\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    { label: 'Destiny Display Name', text: (item: ClanMemberProfile) => `${item.member.destinyUserInfo?.displayName}` }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    { label: 'Bungie Display Name', text: (item: ClanMemberProfile) => `${item.member.bungieNetUserInfo?.displayName}` }\r\n  ],\r\n  [\r\n    'characterOneType',\r\n    {\r\n      label: 'Character One Type',\r\n      text: (item: ClanMemberProfile) =>\r\n        getClassType(item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[0]]?.classType) || ''\r\n    }\r\n  ],\r\n  [\r\n    'characterOnePower',\r\n    {\r\n      label: 'Character One Power',\r\n      text: (item: ClanMemberProfile) =>\r\n        `${item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[0]]?.light || ''}`\r\n    }\r\n  ],\r\n  [\r\n    'characterTwoType',\r\n    {\r\n      label: 'Character Two Type',\r\n      text: (item: ClanMemberProfile) =>\r\n        getClassType(item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[1]]?.classType) || ''\r\n    }\r\n  ],\r\n  [\r\n    'characterTwoPower',\r\n    {\r\n      label: 'Character Two Power',\r\n      text: (item: ClanMemberProfile) =>\r\n        `${item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[1]]?.light || ''}`\r\n    }\r\n  ],\r\n  [\r\n    'characterThreeType',\r\n    {\r\n      label: 'Character Three Type',\r\n      text: (item: ClanMemberProfile) =>\r\n        getClassType(item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[2]]?.classType) || ''\r\n    }\r\n  ],\r\n  [\r\n    'characterThreePower',\r\n    {\r\n      label: 'Character Three Power',\r\n      text: (item: ClanMemberProfile) =>\r\n        `${item?.profile?.characters?.data[item?.profile?.profile?.data?.characterIds[2]]?.light || ''}`\r\n    }\r\n  ],\r\n  [\r\n    'powerBonus',\r\n    {\r\n      label: 'Power Bonus',\r\n      text: (item: ClanMemberProfile) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    { label: 'Active Triumph', text: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.activeScore}` }\r\n  ],\r\n  [\r\n    'lifeTimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      text: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n    }\r\n  ],\r\n  ['clanJoinDate', { label: 'Clan Join Date', text: (item: ClanMemberProfile) => `${item.member?.joinDate}` }],\r\n  [\r\n    'lastPlayed',\r\n    { label: 'Last Played', text: (item: ClanMemberProfile) => `${item.profile?.profile.data.dateLastPlayed}` }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts": [
                {
                    "name": "CLAN_ROSTER_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastWeek)}`\r\n    }\r\n  ],\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastMonth)}`\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90 Days (Minutes)',\r\n      text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastNinetyDays)}`\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      text: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile?.data?.dateLastPlayed as unknown as Date)}`\r\n    }\r\n  ]\r\n])"
                },
                {
                    "name": "convertToMinutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(totalSeconds) => String(Math.floor(totalSeconds / 60))"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts": [
                {
                    "name": "CLAN_ROSTER_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts": [
                {
                    "name": "CLAN_ROSTER_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ClanMemberProfile>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.destinyUserInfo?.displayName?.toLowerCase() < b.member?.destinyUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.bungieNetUserInfo?.displayName?.toLowerCase() <\r\n        b.member?.bungieNetUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      comparator: (a, b) => (a.member?.destinyUserInfo?.membershipType < b.member?.destinyUserInfo?.membershipType ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: 'Power Level',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus <\r\n        b.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.activeScore < b.profile?.profileRecords?.data?.activeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.lifetimeScore < b.profile?.profileRecords?.data?.lifetimeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName < b.clan.clanName ? -1 : 1)\r\n    }\r\n  ],\r\n\r\n  [\r\n    'joinDate',\r\n    {\r\n      label: 'Join Date',\r\n      comparator: (a, b) => (new Date(a.member?.joinDate) < new Date(b.member?.joinDate) ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Date Last Played',\r\n      comparator: (a, b) =>\r\n        new Date(a.profile?.profile.data.dateLastPlayed) < new Date(b.profile?.profile.data.dateLastPlayed) ? -1 : 1\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts": [
                {
                    "name": "CLAN_ROSTER_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      plainText: (item: ClanMemberProfile) => `${getMembershipType(item.member.destinyUserInfo.membershipType)}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        //        styles: {},\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member?.destinyUserInfo?.membershipType || 0 }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ClanMemberProfile) => `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member?.destinyUserInfo?.displayName || ''}` })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      plainText: (item: ClanMemberProfile) => `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member?.bungieNetUserInfo?.displayName || ''}` })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      plainText: (item: ClanMemberProfile) => ``,\r\n      render: (item: ClanMemberProfile) => {\r\n        const characterIds = item.profile?.profile?.data?.characterIds;\r\n        return {\r\n          classList: 'characters-cell',\r\n          children: characterIds?.map((id) => {\r\n            return {\r\n              classList: 'character-cell',\r\n              component: ClassCellComponent,\r\n              data: {\r\n                characterHash: id,\r\n                profile: item.profile\r\n              }\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        classList: 'power-cell',\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.activeScore}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      plainText: (item: ClanMemberProfile) => `${item.profile?.profileRecords?.data?.lifetimeScore}`,\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clan',\r\n    {\r\n      label: 'Clan',\r\n      plainText: (item: ClanMemberProfile) => `${item.clan.clanName}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      plainText: (item: ClanMemberProfile, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ClanMemberProfile, context: ViewContext) => `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts": [
                {
                    "name": "ClanConfigAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ClanConfig>",
                    "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
                },
                {
                    "name": "DefaultClanConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "defaultValue": "{\r\n  enabled: true\r\n} as ClanConfig"
                },
                {
                    "name": "initialClanState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "defaultValue": "ClanConfigAdapter.getInitialState({})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts": [
                {
                    "name": "CLANS_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'clans'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts": [
                {
                    "name": "ClansReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId, clanName, clanTag }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      return ClanConfigAdapter.upsertOne({ clanId, clanName, clanTag, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
                }
            ],
            "projects/clan-dashboard/src/app/core/core.state.ts": [
                {
                    "name": "coreEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ManifestEffects, ClansEffects]"
                },
                {
                    "name": "coreReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer,\r\n  notifications: NotificationReducer\r\n}"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[initStateFromLocalStorage]"
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "['allData']"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "[\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n]"
                }
            ],
            "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MatButton>",
                    "defaultValue": "(args: MatButton) => ({\r\n  component: MatButton,\r\n  props: args,\r\n  styles: [\r\n    `\r\n  section {\r\n    display: table;\r\n  }\r\n  .example-label {\r\n    display: table-cell;\r\n    font-size: 14px;\r\n    margin-left: 8px;\r\n    min-width: 120px;\r\n  }\r\n  .example-button-row {\r\n    display: table-cell;\r\n    width: 800px;\r\n  }\r\n  .example-button-row .mat-button-base {\r\n    margin: 8px 8px 8px 0;\r\n  }\r\n  .example-flex-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n  }\r\n  .example-button-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 120px;\r\n  }`\r\n  ],\r\n  template: `\r\n  <section>\r\n  <div class=\"example-label\">Basic</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-button>Basic</button>\r\n    <button mat-button disabled>Disabled</button>\r\n    <button mat-button color=\"primary\">Primary</button>\r\n    <button mat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-button color=\"accent\">Accent</button>\r\n    <button mat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-button color=\"warn\">Warn</button>\r\n    <button mat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Raised</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-raised-button>Basic</button>\r\n    <button mat-raised-button disabled>Disabled</button>\r\n    <button mat-raised-button color=\"primary\">Primary</button>\r\n    <button mat-raised-button color=\"primary\"  disabled>Primary</button>\r\n    <button mat-raised-button color=\"accent\">Accent</button>\r\n    <button mat-raised-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-raised-button color=\"warn\">Warn</button>\r\n    <button mat-raised-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-raised-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Stroked</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-stroked-button>Basic</button>\r\n    <button mat-stroked-button disabled>Disabled</button>\r\n    <button mat-stroked-button color=\"primary\">Primary</button>\r\n    <button mat-stroked-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-stroked-button color=\"accent\">Accent</button>\r\n    <button mat-stroked-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-stroked-button color=\"warn\">Warn</button>\r\n    <button mat-stroked-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-stroked-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Flat</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-flat-button>Basic</button>\r\n    <button mat-flat-button disabled>Disabled</button>\r\n    <button mat-flat-button color=\"primary\">Primary</button>\r\n    <button mat-flat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-flat-button color=\"accent\">Accent</button>\r\n    <button mat-flat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-flat-button color=\"warn\">Warn</button>\r\n    <button mat-flat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-flat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Icon</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\">\r\n        <mat-icon>home</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"accent\" aria-label=\"Example icon button with a menu icon\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" aria-label=\"Example icon button with a heart icon\">\r\n        <mat-icon>favorite</mat-icon>\r\n      </button>\r\n      <button mat-icon-button disabled aria-label=\"Example icon button with a open in new tab icon\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"primary\" aria-label=\"Example icon button with a delete icon\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"accent\" aria-label=\"Example icon button with a bookmark icon\">\r\n          <mat-icon>bookmark</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"warn\" aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab disabled aria-label=\"Example icon button with a heart icon\">\r\n          <mat-icon>favorite</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Mini FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"primary\" aria-label=\"Example icon button with a menu icon\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"accent\" aria-label=\"Example icon button with a plus one icon\">\r\n          <mat-icon>plus_one</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"warn\" aria-label=\"Example icon button with a filter list icon\">\r\n          <mat-icon>filter_list</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab disabled aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n  `\r\n})"
                }
            ],
            "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MatCard>",
                    "defaultValue": "(args: MatCard) => ({\r\n  component: MatCard,\r\n  props: args,\r\n  styles: [\r\n    `\r\n    .example-card {\r\n        max-width: 400px;\r\n      }\r\n\r\n      .example-header-image {\r\n        background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n        background-size: cover;\r\n      }\r\n   `\r\n  ],\r\n  template: `\r\n    <mat-card>\r\n    <mat-card-content>Simple card</mat-card-content>\r\n  </mat-card>\r\n  <hr>\r\n<a class=\"mat-card-link\">\r\n<mat-card>\r\n    <mat-card-content>Link Card</mat-card-content>\r\n  </mat-card>\r\n  </a>\r\n  <hr>\r\n\r\n  <mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>Actions Buttons</mat-card-title>\r\n    <mat-card-subtitle>Start</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n<hr>\r\n<mat-card class=\"example-card\">\r\n  <mat-card-header>\r\n    <div mat-card-avatar class=\"example-header-image\"></div>\r\n    <mat-card-title>Shiba Inu</mat-card-title>\r\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n  <mat-card-content>\r\n    <p>\r\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n      bred for hunting.\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n    `\r\n})"
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "DEFAULT_TOKENIZE_ITEM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  }",
                    "rawdescription": "Default and naive tokenize function that combines the item's property values into a string.",
                    "description": "<p>Default and naive tokenize function that combines the item&#39;s property values into a string.</p>\n"
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return {\r\n    id: '1',\r\n    name: 'Item 1',\r\n    iconName: 'people',\r\n    type: 'clan'\r\n  };\r\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanSearchAutocompleteComponent>",
                    "defaultValue": "(args: ClanSearchAutocompleteComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealListItem[]",
                    "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return getRandomSLI();\r\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SealsListComponent>",
                    "defaultValue": "(args: SealsListComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/components/src/lib/__mocks__/ListViewExporter.ts": [
                {
                    "name": "EXAMPLE_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<MockListItem>>([\r\n  ['id', { label: 'Id', text: (item) => item.id.toString() }],\r\n  ['startDate', { label: 'Start Date', text: (item) => new Date(item.startDate).toDateString() }]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemFilterer.ts": [
                {
                    "name": "EXAMPLE_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      type:'number',\r\n      matcher:(item, filter) => numberMatchesEquality(item.id, filter.value, filter.equality)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemGrouper.ts": [
                {
                    "name": "EXAMPLE_GROUPER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, GrouperMetadata<MockListItem>>([\r\n  [\r\n    'all',\r\n    {\r\n      label: 'All',\r\n      groupingFunction: (items) => {\r\n        return [{ id: 'all', title: 'All', items }];\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'isPublic', {\r\n      label: 'IsPublic',\r\n      groupingFunction: items => getGroupByValue(items, 'isPublic'),\r\n    }\r\n  ],\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemSorter.ts": [
                {
                    "name": "EXAMPLE_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Name',\r\n      comparator: (a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemViewer.ts": [
                {
                    "name": "EXAMPLE_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'id',\r\n      plainText: (item) => `${item.id}`,\r\n      render: (item) => ({ styles: { fontWeight: 'bold' }, text: `${item.id}` })\r\n    }\r\n  ],\r\n  [\r\n    'isPublic',\r\n    { label: 'Is Public', plainText: (item) => `${item.isPublic}`, render: (item) => ({ text: `${item.isPublic}` }) }\r\n  ],\r\n  ['name', { label: 'Name', plainText: (item) => `${item.name}`, render: (item) => ({ text: `${item.name}` }) }],\r\n  [\r\n    'startDate',\r\n    {\r\n      label: 'Start Date',\r\n      plainText: (item) => `${new Date(item.startDate).toDateString()}`,\r\n      render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` })\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/data/src/lib/utility/random-number.ts": [
                {
                    "name": "getRandomNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/utility/random-number.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts": [
                {
                    "name": "getRandomSLI",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n  return { seal: MOCK_SEAL_DEFINITION, totalMembers: 100, completedCount: getRandomNumber(1, 100) } as SealListItem;\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts": [
                {
                    "name": "initialManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/components/src/lib/shared/table-view/table-view.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableViewComponent>",
                    "defaultValue": "(args: TableViewComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanDetailCellComponent>",
                    "defaultValue": "(args: ClanDetailCellComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanInfoComponent>",
                    "defaultValue": "(args: ClanInfoComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts": [
                {
                    "name": "LocationToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Location')"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/data/src/lib/manifest/manifest-loader.service.ts": [
                {
                    "name": "MANIFEST_PATH_EXP_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
                },
                {
                    "name": "MANIFEST_PATH_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_KEY'"
                },
                {
                    "name": "STATUS_DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'done'"
                },
                {
                    "name": "STATUS_EXTRACTING_TABLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'extracting tables'"
                },
                {
                    "name": "STATUS_UNZIPPING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'unzipping'"
                },
                {
                    "name": "VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'v1'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts": [
                {
                    "name": "ManifestReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
                }
            ],
            "projects/data/src/lib/models/__mocks__/clan-details.ts": [
                {
                    "name": "MOCK_CLAN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/__mocks__/clan-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  groupId: '2073131',\r\n  name: 'DoD Paternal Chums',\r\n  groupType: 1,\r\n  membershipIdCreated: '22807',\r\n  creationDate: '2017-08-24T21:26:26.668Z',\r\n  modificationDate: '2022-04-09T00:14:51.491Z',\r\n  about:\r\n    'REQUIRED: Follow the instructions in Discord to be considered for a invite to join.\\n\\nClan Discord: https://discord.gg/z3nsx47\\n\\n---------------------\\n\\nWe are a bunch of Guardians with families who are united around the love of Destiny. We have members who are casuals, full time raiders, triumph fanatics and everything between. \\n\\nOur clan:\\n-- PC is our **only** platform of operation.\\n-- We are based in North America.\\n-- Activities are oriented around play times from 7pm to 11pm in US Eastern timezone. \\n\\nWe are recruiting Dads who are:\\n-- Committed to playing with clan members and participating in Discord voice chat.\\n-- Have a Base Power 1520+\\n-- Aged 25 and older. The average age of our group is 41.\\n-- Can demonstrate consistent recent engagement in Destiny 2 (20+hrs across the last month).',\r\n  tags: [],\r\n  memberCount: 93,\r\n  isPublic: true,\r\n  isPublicTopicAdminOnly: false,\r\n  motto: 'Dads of Destiny PC',\r\n  allowChat: true,\r\n  isDefaultPostPublic: false,\r\n  chatSecurity: 0,\r\n  locale: 'en',\r\n  avatarImageIndex: 0,\r\n  homepage: 0,\r\n  membershipOption: 2,\r\n  defaultPublicity: 2,\r\n  theme: 'Group_Community1',\r\n  bannerPath: '/img/Themes/Group_Community1/struct_images/group_top_banner.jpg',\r\n  avatarPath: '/img/profile/avatars/group/defaultGroup.png',\r\n  conversationId: '27030166',\r\n  enableInvitationMessagingForAdmins: false,\r\n  banExpireDate: '2001-01-01T00:00:00Z',\r\n  features: {\r\n    maximumMembers: 100,\r\n    maximumMembershipsOfGroupType: 1,\r\n    capabilities: 31,\r\n    membershipTypes: [1, 2, 3, 5, 6],\r\n    invitePermissionOverride: true,\r\n    updateCulturePermissionOverride: false,\r\n    hostGuidedGamePermissionOverride: 1,\r\n    updateBannerPermissionOverride: false,\r\n    joinLevel: 1\r\n  },\r\n  clanInfo: {\r\n    d2ClanProgressions: {\r\n      '584850370': {\r\n        progressionHash: 584850370,\r\n        dailyProgress: 200000,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 100000,\r\n        weeklyLimit: 100000,\r\n        currentProgress: 200000,\r\n        level: 2,\r\n        levelCap: 6,\r\n        stepIndex: 2,\r\n        progressToNextLevel: 100000,\r\n        nextLevelAt: 125000\r\n      },\r\n      '1273404180': {\r\n        progressionHash: 1273404180,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3381682691': {\r\n        progressionHash: 3381682691,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3759191272': {\r\n        progressionHash: 3759191272,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      }\r\n    },\r\n    clanCallsign: 'DoD',\r\n    clanBannerData: {\r\n      decalId: 4142223387,\r\n      decalColorId: 3379387796,\r\n      decalBackgroundColorId: 3568748754,\r\n      gonfalonId: 1473910866,\r\n      gonfalonColorId: 2157636320,\r\n      gonfalonDetailId: 1664476155,\r\n      gonfalonDetailColorId: 4128900497\r\n    }\r\n  }\r\n}"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItems.ts": [
                {
                    "name": "MOCK_LIST_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockListItem[]",
                    "defaultValue": "names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n})"
                },
                {
                    "name": "names",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
                }
            ],
            "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts": [
                {
                    "name": "MOCK_SEAL_DEFINITION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealDefinition",
                    "defaultValue": "{\r\n  displayProperties: {\r\n    description: 'Complete Event Challenges during the Festival of the Lost. Progress resets at the end of the event.',\r\n    name: 'Ghost Writer',\r\n    icon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n    iconSequences: [\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n          '/common/destiny2_content/icons/6987d309d0bc4029f3a814d7e5325469.png',\r\n          '/common/destiny2_content/icons/12dcab8ca6809f3a875f24b4dc5a0437.png'\r\n        ]\r\n      },\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/42df53be3530e75cf88e54f6932827ec.png',\r\n          '/common/destiny2_content/icons/f2515008c74cf3b69242f91edd977176.png',\r\n          '/common/destiny2_content/icons/d31bc05850b70c5094bd23bfe77ba0af.png'\r\n        ]\r\n      }\r\n    ],\r\n    hasIcon: true\r\n  },\r\n  originalIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  rootViewIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  nodeType: 3,\r\n  scope: 1,\r\n  completionRecordHash: 1089543274,\r\n  children: {\r\n    presentationNodes: [],\r\n    collectibles: [],\r\n    records: [\r\n      { recordHash: 2402210136, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883618, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883619, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883616, nodeDisplayPriority: 0 },\r\n      { recordHash: 3907371284, nodeDisplayPriority: 0 },\r\n      { recordHash: 4240802932, nodeDisplayPriority: 0 },\r\n      { recordHash: 1276598420, nodeDisplayPriority: 0 },\r\n      { recordHash: 2260243645, nodeDisplayPriority: 0 },\r\n      { recordHash: 170025438, nodeDisplayPriority: 0 },\r\n      { recordHash: 3135128969, nodeDisplayPriority: 0 },\r\n      { recordHash: 3448638613, nodeDisplayPriority: 0 },\r\n      { recordHash: 2895286773, nodeDisplayPriority: 0 },\r\n      { recordHash: 1082927728, nodeDisplayPriority: 0 },\r\n      { recordHash: 4283733196, nodeDisplayPriority: 0 },\r\n      { recordHash: 1644352879, nodeDisplayPriority: 0 },\r\n      { recordHash: 3951338722, nodeDisplayPriority: 0 },\r\n      { recordHash: 3949332075, nodeDisplayPriority: 0 },\r\n      { recordHash: 552478397, nodeDisplayPriority: 0 },\r\n      { recordHash: 2358631133, nodeDisplayPriority: 0 },\r\n      { recordHash: 1321634422, nodeDisplayPriority: 0 }\r\n    ],\r\n    metrics: [],\r\n    craftables: []\r\n  },\r\n  displayStyle: 2,\r\n  screenStyle: 2,\r\n  requirements: { entitlementUnavailableMessage: '' },\r\n  disableChildSubscreenNavigation: false,\r\n  maxCategoryRecordScore: 0,\r\n  presentationNodeType: 1,\r\n  traitIds: [],\r\n  traitHashes: [],\r\n  parentNodeHashes: [616318467],\r\n  hash: 2592822840,\r\n  index: 1319,\r\n  redacted: false,\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/config/app-config.mock.ts": [
                {
                    "name": "MockConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppConfig",
                    "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  production: false,\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts": [
                {
                    "name": "NotificationAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Notification>",
                    "defaultValue": "createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n})"
                },
                {
                    "name": "NotificationInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationState",
                    "defaultValue": "NotificationAdapter.getInitialState()"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts": [
                {
                    "name": "NotificationReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  NotificationInitialState,\r\n  on(addNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(updateNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(removeNotification, (state, { notification }) => {\r\n    return NotificationAdapter.removeOne(notification.id, { ...state });\r\n  })\r\n)"
                }
            ],
            "projects/components/src/lib/pipes/pipes.module.ts": [
                {
                    "name": "pipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/pipes.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  PlaytimePipe,\r\n  PlaytimeMillisecondsPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n]"
                }
            ],
            "projects/components/src/lib/shared/display-options/display-options.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DisplayOptionsComponent>",
                    "defaultValue": "(args: DisplayOptionsComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts": [
                {
                    "name": "RECENT_ACTIVITY_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ProfileRecentActivity>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts": [
                {
                    "name": "RECENT_ACTIVITY_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ProfileRecentActivity>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data.userInfo.displayName?.toLowerCase() <\r\n        b.profile?.profile?.data.userInfo.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week',\r\n      comparator: (a, b) => ((a.profileActivity.stats.lastWeek || 0) < (b.profileActivity.stats.lastWeek || 0) ? -1 : 1)\r\n    }\r\n  ],\r\n\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month',\r\n      comparator: (a, b) =>\r\n        (a.profileActivity.stats.lastMonth || 0) < (b.profileActivity.stats.lastMonth || 0) ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90',\r\n      comparator: (a, b) =>\r\n        (a.profileActivity.stats.lastNinetyDays || 0) < (b.profileActivity.stats.lastNinetyDays || 0) ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lastLogin',\r\n    {\r\n      label: 'Last Login',\r\n      comparator: (a, b) =>\r\n        (new Date(a.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900)) <\r\n        (new Date(b.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900))\r\n          ? -1\r\n          : 1\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts": [
                {
                    "name": "RECENT_ACTIVITY_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clanMember?.destinyUserInfo?.displayName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastWeek',\r\n    {\r\n      label: 'Last Week',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastMonth',\r\n    {\r\n      label: 'Last Month',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'lastNinety',\r\n    {\r\n      label: 'Last 90 Days',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/icons/register-icons.ts": [
                {
                    "name": "registerIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/register-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(registry: MatIconRegistry, domSanitizer: DomSanitizer) => {\r\n    Object.keys(svgIcons).map(name => {\r\n        const path = svgIcons[name];\r\n        registry.addSvgIcon(name, domSanitizer.bypassSecurityTrustResourceUrl(path));\r\n    });\r\n}"
                },
                {
                    "name": "svgIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/register-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    titan: '/assets/icons/titan.svg',\r\n    hunter: '/assets/icons/hunter.svg',\r\n    warlock: '/assets/icons/warlock.svg',\r\n    steam: '/assets/icons/steam.svg',\r\n    stadia: '/assets/icons/stadia.svg',\r\n    playstation: '/assets/icons/playstation.svg',\r\n    xbox: '/assets/icons/xbox.svg',\r\n    twitch: '/assets/icons/twitch-purp.svg',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsExporter.ts": [
                {
                    "name": "SEAL_DETAILS_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<SealClanMember>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      text: (item: SealClanMember) => `${getMemberName(item.clanMember)}`\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      text: (item: SealClanMember) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      text: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : '')\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed Count',\r\n      text: (item: SealClanMember) => `${item.sealProgression.completedTriumphCount}`\r\n    }\r\n  ],\r\n  [\r\n    'totalCount',\r\n    {\r\n      label: 'Total Count',\r\n      text: (item: SealClanMember) => `${item.sealProgression.totalTriumphCount}`\r\n    }\r\n  ],\r\n\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Complete',\r\n      text: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts": [
                {
                    "name": "SEAL_DETAILS_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<SealClanMember>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts": [
                {
                    "name": "SEAL_DETAILS_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<SealClanMember>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        getMemberName(a.clanMember).toLowerCase() < getMemberName(b.clanMember).toLowerCase() ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName < b.clan.clanName ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Progress',\r\n      comparator: (a, b) => (a.sealProgression.completionPercentage < b.sealProgression.completionPercentage ? -1 : 1)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts": [
                {
                    "name": "SEAL_DETAILS_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<SealClanMember, ViewContext>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      plainText: (item: SealClanMember) => `${getMemberName(item.clanMember)}`,\r\n      render: (item: SealClanMember) => ({ text: `${getMemberName(item.clanMember)}` })\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      plainText: (item: SealClanMember) => `${item.clan.clanName}`,\r\n      render: (item: SealClanMember) => ({ text: `${item.clan.clanName}` })\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        text: item.sealProgression.isCompleted ? 'X' : ''\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isGilded ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        text: item.sealProgression.isGilded ? 'X' : ''\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.gildedCount || ''}`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.gildedCount || ''}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed Count',\r\n      plainText: (item: SealClanMember) =>\r\n        `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Completed',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`,\r\n      render: (item: SealClanMember) => ({\r\n        text: `${item.sealProgression.completionPercentage}%`\r\n      })\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/environments/secrets.ts": [
                {
                    "name": "secretKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/secrets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts": [
                {
                    "name": "selectClansState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ClansState>('clans')"
                },
                {
                    "name": "selectEnabledClanIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
                },
                {
                    "name": "selectEnabledClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
                },
                {
                    "name": "selectLastProfileUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
                },
                {
                    "name": "selectLastRecentActivityUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.memberRecentActivityUpdate) || '';\r\n  })"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts": [
                {
                    "name": "selectManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
                },
                {
                    "name": "selectManifestError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
                },
                {
                    "name": "selectManifestLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
                },
                {
                    "name": "selectManifestLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
                },
                {
                    "name": "selectManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts": [
                {
                    "name": "selectNotificationsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<NotificationState>('notifications')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NotificationAdapter.getSelectors(selectNotificationsState)"
                }
            ],
            "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts": [
                {
                    "name": "WindowToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Window')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/data/src/lib/utility/date-utils.ts": [
                {
                    "name": "addDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateToUnixTimeStamp",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieStartDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateArray",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayOfWeek",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstDayOfMonth",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusMinutes",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusWeeks",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "playtime",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unixTimeStampToDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts": [
                {
                    "name": "clanDetailSerializer",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClanDetails",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeProgression",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts": [
                {
                    "name": "clanMemberActivitySerializer",
                    "file": "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "activity",
                            "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts": [
                {
                    "name": "clanMemberRecentActivitySerializer",
                    "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "activity",
                            "type": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MemberActivityRecentStats",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieStartDate",
                    "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesByWeek",
                    "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<MemberActivityRecentStatsActivity>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-season.ts": [
                {
                    "name": "compare",
                    "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lastWord",
                    "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "words",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "words",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/exporter.ts": [
                {
                    "name": "convertArrayOfObjectsToCSV",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadCSV",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/viewer.ts": [
                {
                    "name": "convertArrayOfObjectsToCSV",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadCSV",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/utility/filter-matcher.ts": [
                {
                    "name": "dateMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "DateEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "DateEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numberMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "NumberEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "NumberEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stateMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "StateEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "StateEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textArrayMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "filterItems",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function to filter the items. May be used to synchronously filter items.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "context",
                            "type": "M",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metadata",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "M",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metadata",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchItems",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tokenizeItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokenizeItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/format-date.ts": [
                {
                    "name": "formatDate",
                    "file": "projects/data/src/lib/utility/format-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/profiles/profile.serializer.ts": [
                {
                    "name": "getCharacterProgressions",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileItems",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileRecords",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressionValues",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileSerializer",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/get-ids.ts": [
                {
                    "name": "getClanMemberId",
                    "file": "projects/data/src/lib/utility/get-ids.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberProfileId",
                    "file": "projects/data/src/lib/utility/get-ids.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts": [
                {
                    "name": "getClassType",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "classType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "classType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMembershipType",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/grouper.ts": [
                {
                    "name": "getGroupByListValues",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that creates a group based on the list of values of the item&#39;s property.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupByValue",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that creates a group based on the value of the item&#39;s property.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupsFromMap",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that transforms a map of groups into a list.</p>\n",
                    "args": [
                        {
                            "name": "groupsMap",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "groupsMap",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/get-display-name.ts": [
                {
                    "name": "getMemberName",
                    "file": "projects/data/src/lib/utility/get-display-name.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileName",
                    "file": "projects/data/src/lib/utility/get-display-name.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts": [
                {
                    "name": "getMembershipType",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-date.ts": [
                {
                    "name": "groupActivities",
                    "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "raw",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "raw",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesByDate",
                    "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivityStatsByDate",
                    "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-month.ts": [
                {
                    "name": "groupActivitiesByMonth",
                    "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<MemberActivityRecentStatsActivity>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivityStatsByMonth",
                    "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-week.ts": [
                {
                    "name": "groupActivitiesByWeek",
                    "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<MemberActivityRecentStatsActivity>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivityStatsByWeek",
                    "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts": [
                {
                    "name": "initStateFromLocalStorage",
                    "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<AppState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts": [
                {
                    "name": "locationProvider",
                    "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts": [
                {
                    "name": "m",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "c",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/sorter.ts": [
                {
                    "name": "sortItems",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparator",
                            "type": "SortComparator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "C",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparator",
                            "type": "SortComparator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "C",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/try-json-parse.ts": [
                {
                    "name": "tryJSONParse",
                    "file": "projects/data/src/lib/utility/try-json-parse.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T | undefined",
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts": [
                {
                    "name": "windowProvider",
                    "file": "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "projects/data/src/lib/models/enums/MembershipTypes.ts": [
                {
                    "name": "MembershipTypes",
                    "childs": [
                        {
                            "name": "Xbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Psn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Steam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "Blizzard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "Stadia",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "Demon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/models/enums/MembershipTypes.ts"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "childs": [
                        {
                            "name": "CacheDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CacheDetails"
                        },
                        {
                            "name": "ClanDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanDetails"
                        },
                        {
                            "name": "ClanRewards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanRewards"
                        },
                        {
                            "name": "MemberProfiles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberProfiles"
                        },
                        {
                            "name": "MemberActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivities"
                        },
                        {
                            "name": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivityStats"
                        },
                        {
                            "name": "MemberRecentActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberRecentActivities"
                        },
                        {
                            "name": "ProfileMilestones",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ProfileMilestones"
                        },
                        {
                            "name": "ProfileMetrics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ProfileMetrics"
                        },
                        {
                            "name": "Raids",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Raids"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts": [
                {
                    "name": "ClanSearchResultItemType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"player\" | \"clan\"",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/components/src/lib/data/filterer-types.ts": [
                {
                    "name": "DateEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"before\" | \"after\" | \"on\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextFilter | NumberFilter | DateFilter | StateFilter",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "FilterType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"number\" | \"date\" | \"state\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "NumberEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"greaterThan\" | \"lessThan\" | \"equalTo\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "StateEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"is\" | \"notIs\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TextEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contains\" | \"is\" | \"notContains\" | \"notIs\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/data/src/lib/models/DeepPartial.ts": [
                {
                    "name": "DeepPartial",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/models/DeepPartial.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "projects/components/src/lib/data/exporter.ts": [
                {
                    "name": "ExporterContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "FiltererContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<M>",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FiltererMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextFiltererMetadata<T | C> | NumberFiltererMetadata<T | C> | DateFiltererMetadata<T | C> | StateFiltererMetadata<T | C>",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TextFilterAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "projects/components/src/lib/data/viewer.ts": [
                {
                    "name": "RenderedView",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ViewerContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/components/src/lib/data/sorter.ts": [
                {
                    "name": "SortComparator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "SorterContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/clan-dashboard/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivate": [
                            "ClanResolveGuard"
                        ],
                        "component": "WrapperComponent",
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./features/clans-details/clans-details-shell/clans-details.module#ClansDetailsModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-routing.module.ts",
                                                "module": "ClansDetailsRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ClansDetailsComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ClansDetailsModule"
                                    }
                                ]
                            },
                            {
                                "path": "roster",
                                "loadChildren": "./features/clans-roster/clans-roster-shell/clans-roster.module#ClansRosterModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-routing.module.ts.ts",
                                                "module": "ClansRosterRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ClansRosterComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ClansRosterModule"
                                    }
                                ]
                            },
                            {
                                "path": "recent-activity",
                                "loadChildren": "./features/recent-activity/recent-activity-shell/recent-activity.module#RecentActivityModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-shell/recent-activity-routing.module.ts",
                                                "module": "RecentActivityRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "loadChildren": "../recent-activity-dashboard/recent-activity.module#RecentActivityModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [],
                                                                "module": "RecentActivityModule"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "RecentActivityModule"
                                    }
                                ]
                            },
                            {
                                "path": "seals",
                                "loadChildren": "./features/seals/seals-shell/seals-routing.module#SealsRoutingModule"
                            },
                            {
                                "path": "config",
                                "loadChildren": "./views/config/config.module#ConfigModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/views/config/config-routing.module.ts",
                                                "module": "ConfigRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ConfigComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ConfigModule"
                                    }
                                ]
                            },
                            {
                                "path": "sandbox",
                                "loadChildren": "./features/sandbox/sandbox-shell/sandbox-shell.module#SandboxShellModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/sandbox/sandbox-shell/sandbox-shell-routing.module.ts",
                                                "module": "SandboxRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "LookupComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "SandboxShellModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "clan-search",
                        "loadChildren": "./features/clan-search/clan-search-shell/clan-search-shell.module#ClanSearchModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ClanSearchModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/clan-dashboard/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/activity-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/activity-mode-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityModeDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/milestone-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MilestoneDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/presentation-node-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PresentationNodeDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/record-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecordDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ClanResolveGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "locationProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LocationToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "windowProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/injection-tokens/window-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WindowToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiKeyInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/app-offline-dialog/app-offline-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppOfflineDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/settings-menu/settings-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansMembersService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfigMembers",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfigMembers",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/member-activity-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemberActivityUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/profile-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClanMemberActivitySync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClanProfileSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLANS_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClansReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClanIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastProfileUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastRecentActivityUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClanConfigAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialClanState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestComplete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ManifestReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initStateFromLocalStorage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNotificationsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/clan-detail/clan-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanDetailCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/data-access/clan-detail.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanDetailService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchCuratedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CuratedClan",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "m",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_CLANS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_all",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_pc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_ps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_xbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/search-error-dialog/search-error-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchErrorDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/data-access/clan-search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanSearchService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanSearchResultItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getClassType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMembershipType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMembershipType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansRosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RosterResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ClassIconPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/data-access/clans-roster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansRosterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/data-access/clans-roster.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/config/clan-config/clan-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/config/config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/data-access/recent-activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecentActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/models/profile-recent-activity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileRecentActivity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "convertToMinutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECENT_ACTIVITY_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECENT_ACTIVITY_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECENT_ACTIVITY_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecentActivityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RosterActivityResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/sandbox/lookup/lookup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LookupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seal-member-progress-table/seal-member-progress-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealMemberProgressTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/data-access/seals.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SealsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomSLI",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/models/seal-clan-member.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealClanMember",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/models/seal-list-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealListItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealDetailsResources",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealsDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/config/config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-recent-activity/profile-recent-activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileRecentActivityWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileWorkerServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/secrets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secretKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_GROUPER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockListItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_LIST_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "names",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DataSource",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Exporter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExporterMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExporterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertArrayOfObjectsToCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "downloadCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Filterer",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltererOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltererState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterItems",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "searchItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TOKENIZE_ITEM",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Grouper",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupByListValues",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupByValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupsFromMap",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sorter",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "numberMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stateMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "textArrayMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "textMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Viewer",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedViewWithChildren",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedViewWithText",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedWithComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewLabel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertArrayOfObjectsToCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "downloadCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/register-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/register-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "svgIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-date/bungie-date-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDateTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-date/bungie-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/member-type/member-type.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MemberTypePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/pipes.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PlaytimeMillisecondsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PlaytimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/directives/responsive-sidebar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ResponsiveSidebarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisplayOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view-component.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RenderedViewDynamicCompDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Children",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TablePage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/storybook/storybook.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorybookService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-clan.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseClanService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-member-activity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseMemberActivityService",
                "coveragePercent": 12,
                "coverageCount": "3/25",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-member-activity.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityCollection",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-member-activity.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-database.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanDatabase",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanDetailSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "serializeProgression",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanMemberActivitySerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanMemberRecentActivitySerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanMemberRecentActivityService",
                "coveragePercent": 11,
                "coverageCount": "3/27",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMembersServiceInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanMembersServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanMembersService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterProgressions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProgressionValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/base-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DBObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/hashes/clan-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_LEVEL_HASH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-database.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestDatabaseService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestLoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CachedManifest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_EXP_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_EXTRACTING_TABLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_UNZIPPING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityStats",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStats",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStatsActivity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanDetails",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanProgression",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMember",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupsV2GroupUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStats",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStatsActivity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityStat",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityStats",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityTime.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityTime",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityTime.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityTimeActivities",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/SealDefinition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/__mocks__/clan-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_CLAN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_SEAL_DEFINITION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-activity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/base-clan-aggregate-time.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseClanAggregateTimeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DailyClanAggregateTimeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateToUnixTimeStamp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDateArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDayOfWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFirstDayOfMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValidDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusMinutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusWeeks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "playtime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unixTimeStampToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/format-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-display-name.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMemberName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-display-name.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-ids.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getClanMemberId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-ids.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMemberProfileId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivityStatsByDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivityStatsByMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "lastWord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivityStatsByWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/random-number.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/try-json-parse.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "tryJSONParse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}