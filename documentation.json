{
    "pipes": [
        {
            "name": "BungieDatePipe",
            "id": "pipe-BungieDatePipe-5b3b3d64c9c7046c4c1b76ea8e93c5bf56d4347361b87336f102a6cb1793df2c7838770067f5fdbc9ad96070ebea63138f52d6affbe43c03de3e11a20cb9734e",
            "file": "projects/components/src/lib/pipes/bungie-date/bungie-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'bungieDate'\r\n})\r\nexport class BungieDatePipe extends DatePipe implements PipeTransform {\r\n\r\n  constructor(@Inject(LOCALE_ID) locale: string) {\r\n    super(locale);\r\n  }\r\n  isValidDate(d:any) {\r\n    return d instanceof Date && !isNaN(d.getTime());\r\n  }\r\n\r\n  override transform(date: Date | string): any {\r\n    if (date === null || date === undefined){\r\n      return '';\r\n    }\r\n    const d2 = new Date(date)\r\n\r\n    return super.transform(d2, 'yyyy-MM-dd');\r\n  }\r\n}\r\n"
        },
        {
            "name": "BungieDateTimePipe",
            "id": "pipe-BungieDateTimePipe-5e0e0ebd393be8fb509346d91ede0ec63610f0f9f0f54af18f0e5c66fcdcd77c3d1fd4214c3c68cc012e5bb79279051456030d4a207ef27b9ba601cfb6c0efc2",
            "file": "projects/components/src/lib/pipes/bungie-date/bungie-date-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDateTime",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'bungieDateTime'\r\n})\r\nexport class BungieDateTimePipe extends DatePipe implements PipeTransform {\r\n  constructor(@Inject(LOCALE_ID) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override transform(date: Date): any {\r\n    return super.transform(date, 'yyyy-MM-dd h:mm a') || '';\r\n  }\r\n}\r\n"
        },
        {
            "name": "BungieDisplayNamePipe",
            "id": "pipe-BungieDisplayNamePipe-7d353eaf3938b94e9725777e5ae26c59c063105c1fad576863147233044c646174c2f9275d1dd0ec0ee1dd663ab66065e85e255ad63b218aa6040749080e50b5",
            "file": "projects/components/src/lib/pipes/bungie-display-name/bungie-display-name.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDisplayName",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { getBungieDisplayName } from '@destiny/data/utility';\r\n\r\n@Pipe({\r\n  name: 'bungieDisplayName'\r\n})\r\nexport class BungieDisplayNamePipe implements PipeTransform {\r\n\r\n  transform(member: MemberProfile): unknown {\r\n    return getBungieDisplayName(member);\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "BungieProfileUrlPipe",
            "id": "pipe-BungieProfileUrlPipe-8fd9091e8ffd2333da25ca6afdcab24c8b420f61147ba079215ad3baf64457c9b94d16ceafbe4c74df7bb4ff00e71ab205f1a57c5aa1fb89764852d87156782e",
            "file": "projects/components/src/lib/pipes/bungie-profile-url/bungie-profile-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://bungie.net/en/profile/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieProfileUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'bungieProfileUrl',\r\n  standalone: true\r\n})\r\nexport class BungieProfileUrlPipe implements PipeTransform {\r\n  readonly baseUrl = 'https://bungie.net/en/profile/';\r\n\r\n  transform(value: MemberProfile): unknown {\r\n    return `${this.baseUrl}${value.profile.data?.userInfo?.membershipType}/${value.profile.data?.userInfo?.membershipId}`;\r\n  }\r\n}\r\n"
        },
        {
            "name": "ClassIconPipe",
            "id": "pipe-ClassIconPipe-fad269847b9bf6519fdaf0ac52ee7240d85d169fe99faff9fa5d10b21260ff65ed89c9a0dbc9a846c85076b2182f052b2e537ceba4fd55f414b88be9d084eb35",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "classType",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classType",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "classicon",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input,  Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Component({\r\n  selector: 'app-class-cell',\r\n  template: `\r\n    <div [ngClass]=\"(profile?.characters.data)[characterHash].classType | classicon\">\r\n      {{ (profile?.characters.data)[characterHash].light }}\r\n    </div>\r\n  `,\r\n  styles: [\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClassCellComponent {\r\n  @Input() characterHash: string;\r\n\r\n  @Input() profile: MemberProfile;\r\n\r\n  constructor() {}\r\n\r\n  getIcon(): string {\r\n    const classType = (this.profile?.characters.data)[this.characterHash].classType;\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan';\r\n      case 1:\r\n        return 'hunter';\r\n      case 2:\r\n        return 'warlock';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'classicon',\r\n  pure: true\r\n})\r\nexport class ClassIconPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(classType: number): any {\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan-cell';\r\n      case 1:\r\n        return 'hunter-cell';\r\n      case 2:\r\n        return 'warlock-cell';\r\n    }\r\n  }\r\n}\r\n"
        },
        {
            "name": "D2ChecklistUrlPipe",
            "id": "pipe-D2ChecklistUrlPipe-02ca2ad0a3f6e48f99cb5bf13d2c3d5e6cce62caaee552eb24726538d6a521b1e0f0f833e18187cb88785e1c4554b80c8ec623f70143c481f428d59242949baa",
            "file": "projects/components/src/lib/pipes/d2-checklist-url/d2-checklist-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://www.d2checklist.com/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "d2ChecklistUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'd2ChecklistUrl',\r\n  standalone: true\r\n})\r\nexport class D2ChecklistUrlPipe implements PipeTransform {\r\n  readonly baseUrl = 'https://www.d2checklist.com/';\r\n\r\n  transform(value: MemberProfile): unknown {\r\n    return `${this.baseUrl}${value.profile.data?.userInfo?.membershipType}/${value.profile.data?.userInfo?.membershipId}`;\r\n  }\r\n}\r\n"
        },
        {
            "name": "DestinyTrackerUrlPipe",
            "id": "pipe-DestinyTrackerUrlPipe-311c4e94fc9b0d4da022aac644a94212ea5437e285b03f02bfda45ef44e6badb3841afb33767c827145556215f7371c59da9ff1bffdb23f38e50dd1f60873cd8",
            "file": "projects/components/src/lib/pipes/destiny-tracker-url/destiny-tracker-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://destinytracker.com/destiny-2/profile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPCUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPSUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStadiaUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getXBOXUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "destinyTrackerUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { MembershipTypes } from '@destiny/data/models/enums';\r\n\r\n@Pipe({\r\n  name: 'destinyTrackerUrl',\r\n  standalone: true\r\n})\r\nexport class DestinyTrackerUrlPipe implements PipeTransform {\r\n  readonly baseUrl = 'https://destinytracker.com/destiny-2/profile';\r\n  transform(value: MemberProfile): string {\r\n    switch (value.profile.data.userInfo.membershipType) {\r\n      case MembershipTypes.Xbox:\r\n        return this.getXBOXUrl(value);\r\n      case MembershipTypes.Psn:\r\n        return this.getPSUrl(value);\r\n      case MembershipTypes.Steam:\r\n        return this.getPCUrl(value);\r\n      case MembershipTypes.Stadia:\r\n        return this.getStadiaUrl(value);\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n  getPSUrl(value: MemberProfile) {\r\n    return `${this.baseUrl}/psn/${escape(value.profile.data.userInfo.displayName)}`;\r\n  }\r\n\r\n  getXBOXUrl(value: MemberProfile) {\r\n    return `${this.baseUrl}/xbl/${escape(value.profile.data.userInfo.displayName)}`;\r\n  }\r\n\r\n  getPCUrl(value: MemberProfile) {\r\n    return `${this.baseUrl}/steam/${value.profile.data.userInfo.membershipId}`;\r\n  }\r\n  getStadiaUrl(value: MemberProfile) {\r\n    return `${this.baseUrl}/stadia/${value.profile.data.userInfo.membershipId}`;\r\n  }\r\n}\r\n"
        },
        {
            "name": "DungeonReportProfileUrlPipe",
            "id": "pipe-DungeonReportProfileUrlPipe-95ea180c859881970cc8cd685497b9ef511cd13e9ec0068e70f3f00775a1c24415bf1f60fea338fd3f9c63da578205ef48f0da69f447b5d595e1783e33840e50",
            "file": "projects/components/src/lib/pipes/dungeon-report-url/dungeon-report-profile-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dungeonReportProfileUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { getDungeonReportUrl } from './base-dungeon-report';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'dungeonReportProfileUrl',\r\n  standalone: true\r\n})\r\nexport class DungeonReportProfileUrlPipe implements PipeTransform {\r\n  transform(value: MemberProfile): string {\r\n    return getDungeonReportUrl(\r\n      value.profile.data.userInfo.membershipType,\r\n      value.profile.data.userInfo.displayName,\r\n      value.profile.data.userInfo.membershipId\r\n    );\r\n  }\r\n}\r\n"
        },
        {
            "name": "DungeonReportUrlPipe",
            "id": "pipe-DungeonReportUrlPipe-c8f60f028ece10e75c7d3d320711813489fcdc090f97d9ff34cd47d6e55bc24b4e02f38f43506128f1b94d01b37f7aa7282c4176035bcbb5fdaaf4a168025529",
            "file": "projects/components/src/lib/pipes/dungeon-report-url/dungeon-report-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dungeonReportUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { getDungeonReportUrl } from './base-dungeon-report';\r\nimport { ClanMember } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'dungeonReportUrl',\r\n  standalone: true\r\n})\r\nexport class DungeonReportUrlPipe implements PipeTransform {\r\n  transform(value: ClanMember): unknown {\r\n    return getDungeonReportUrl(\r\n      value.destinyUserInfo.membershipType,\r\n      value.destinyUserInfo.displayName,\r\n      value.destinyUserInfo.membershipId\r\n    );\r\n  }\r\n}\r\n"
        },
        {
            "name": "MemberTypePipe",
            "id": "pipe-MemberTypePipe-cac8cba040a879a01a0a9a7084b035dcb7703190a669046163ec9484ddab90c8975463e284aee7d29381b66704a667769cda89139f098547f2d38f350fa5dcb8",
            "file": "projects/components/src/lib/pipes/member-type/member-type.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "memberType",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MembershipTypes } from '@destiny/data/models/enums';\r\n\r\n@Pipe({\r\n  name: 'memberType'\r\n})\r\nexport class MemberTypePipe implements PipeTransform {\r\n  transform(value: number): string {\r\n    switch (value) {\r\n      case MembershipTypes.Xbox:\r\n        return 'xbox';\r\n      case MembershipTypes.Psn:\r\n        return 'playstation';\r\n      case MembershipTypes.Steam:\r\n        return 'steam';\r\n      case MembershipTypes.Stadia:\r\n        return 'stadia';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n"
        },
        {
            "name": "PlaytimeMillisecondsPipe",
            "id": "pipe-PlaytimeMillisecondsPipe-05bb18d846d7a6ec1a21471ec8270558cc58b5c8c39983392f1f8a0081c23f34a313fde87e46edc0b03ec44d054f9c2f6dcbb6743e00dafb251e790bf200048b",
            "file": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "playtimems",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'playtime'\r\n})\r\nexport class PlaytimePipe implements PipeTransform {\r\n  transform(input: number, showSeconds: boolean = true): string {\r\n    let totalSeconds = input;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = showSeconds ? ':' + String(Math.floor(totalSeconds % 60)).padStart(2, '0') : '';\r\n\r\n    return hours + ':' + minutes + seconds;\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'playtimems'\r\n})\r\nexport class PlaytimeMillisecondsPipe implements PipeTransform {\r\n  transform(input: number): string {\r\n    if (input === 0) {\r\n      return '';\r\n    }\r\n    let totalSeconds = input / 1000;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, '0');\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n  }\r\n}\r\n"
        },
        {
            "name": "PlaytimePipe",
            "id": "pipe-PlaytimePipe-05bb18d846d7a6ec1a21471ec8270558cc58b5c8c39983392f1f8a0081c23f34a313fde87e46edc0b03ec44d054f9c2f6dcbb6743e00dafb251e790bf200048b",
            "file": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "playtime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'playtime'\r\n})\r\nexport class PlaytimePipe implements PipeTransform {\r\n  transform(input: number, showSeconds: boolean = true): string {\r\n    let totalSeconds = input;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = showSeconds ? ':' + String(Math.floor(totalSeconds % 60)).padStart(2, '0') : '';\r\n\r\n    return hours + ':' + minutes + seconds;\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'playtimems'\r\n})\r\nexport class PlaytimeMillisecondsPipe implements PipeTransform {\r\n  transform(input: number): string {\r\n    if (input === 0) {\r\n      return '';\r\n    }\r\n    let totalSeconds = input / 1000;\r\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');\r\n    totalSeconds %= 3600;\r\n    const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');\r\n    const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, '0');\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n  }\r\n}\r\n"
        },
        {
            "name": "RaidReportProfileUrlPipe",
            "id": "pipe-RaidReportProfileUrlPipe-926d7cb34669079b6177ccf62ca199187e61ff3a2fc56fe0ded257f1109e8247da2ae1d4614ee6f1c9878f1f51cb4b74b9630c8879b76ef9f0dcc8fcdb31aa7c",
            "file": "projects/components/src/lib/pipes/raid-report-url/raid-report-profile-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "raidReportProfileUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { getRaidReportUrl } from './base-raid-report-url';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'raidReportProfileUrl',\r\n  standalone: true\r\n})\r\nexport class RaidReportProfileUrlPipe implements PipeTransform {\r\n  transform(value: MemberProfile): string {\r\n    return getRaidReportUrl(\r\n      value.profile.data.userInfo.membershipType,\r\n      value.profile.data.userInfo.displayName,\r\n      value.profile.data.userInfo.membershipId\r\n    );\r\n  }\r\n}\r\n"
        },
        {
            "name": "RaidReportUrlPipe",
            "id": "pipe-RaidReportUrlPipe-beef83435afbfed1c9081d95a4b9c84d45c13d969be80cd1e24bf7dba4b1ae80158e9df760bc374c62ed849c47cb216747cb57c2538da936767f19776233e965",
            "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://raid.report'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPCUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPSUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStadiaUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getXBOXUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "raidReportUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ClanMember, MembershipTypes } from '@destiny/data/models';\r\n// import { ClanMember } from 'bungie-models';\r\n// import { MembershipTypes } from '@destiny/models/enums';\r\n\r\n@Pipe({\r\n  name: 'raidReportUrl',\r\n  standalone: true\r\n})\r\nexport class RaidReportUrlPipe implements PipeTransform {\r\n  readonly baseUrl = 'https://raid.report';\r\n  transform(value: ClanMember): string {\r\n    switch (value.destinyUserInfo.membershipType) {\r\n      case MembershipTypes.Xbox:\r\n        return this.getXBOXUrl(value);\r\n      case MembershipTypes.Psn:\r\n        return this.getPSUrl(value);\r\n      case MembershipTypes.Steam:\r\n        return this.getPCUrl(value);\r\n      case MembershipTypes.Stadia:\r\n        return this.getStadiaUrl(value);\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  getPSUrl(value: ClanMember) {\r\n    return `${this.baseUrl}/ps/${escape(value.destinyUserInfo.displayName)}`;\r\n  }\r\n\r\n  getXBOXUrl(value: ClanMember) {\r\n    return `${this.baseUrl}/xb/${escape(value.destinyUserInfo.displayName)}`;\r\n  }\r\n\r\n  getPCUrl(value: ClanMember) {\r\n    return `${this.baseUrl}/pc/${value.destinyUserInfo.membershipId}`;\r\n  }\r\n  getStadiaUrl(value: ClanMember) {\r\n    return `${this.baseUrl}/stadia/${value.destinyUserInfo.membershipId}`;\r\n  }\r\n}\r\n"
        },
        {
            "name": "RaidReportUrlPipe",
            "id": "pipe-RaidReportUrlPipe-4d34bcaddb708fb1bd4687f77b016daa43b3b19164d6840088d2b9ed4795ba95f8ca9a5b92f961fa8ea9407b5da291af5fcfdb54f748ee15bc085eaefebe9678-1",
            "file": "projects/components/src/lib/pipes/raid-report-url/raid-report-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "raidReportUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { getRaidReportUrl } from './base-raid-report-url';\r\nimport { ClanMember } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'raidReportUrl',\r\n  standalone: true\r\n})\r\nexport class RaidReportUrlPipe implements PipeTransform {\r\n  transform(value: ClanMember): string {\r\n    return getRaidReportUrl(\r\n      value.destinyUserInfo.membershipType,\r\n      value.destinyUserInfo.displayName,\r\n      value.destinyUserInfo.membershipId\r\n    );\r\n  }\r\n}\r\n",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RaidReportUrlPipe-1"
        },
        {
            "name": "TriumphReportPipe",
            "id": "pipe-TriumphReportPipe-a90c3c365e9ec68d5663ce9433602078d0001d79d187f39e63e88d1693532816ff4444185868480a721686eda0d64f1dc72e85ab5f0c54c66c2b35b95fda3a09",
            "file": "projects/components/src/lib/pipes/triumph-report/triumph-report.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://triumph.report/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "triumphReport",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Pipe({\r\n  name: 'triumphReport',\r\n  standalone: true\r\n})\r\nexport class TriumphReportPipe implements PipeTransform {\r\n  readonly baseUrl = 'https://triumph.report/';\r\n\r\n  transform(value: MemberProfile): unknown {\r\n    return `${this.baseUrl}${value.profile.data?.userInfo?.membershipType}/${value.profile.data?.userInfo?.membershipId}`;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Activity",
            "id": "interface-Activity-e01b9d2b2b7e319946b93a26018c90e95d45b2b80a6a8a9cd3dc9b5572243b1029c5d920a3421a52d5673f0047ec170914097ada976cba8eaa741f31a21daf17",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  trackedDates: { [key: string]: number };\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "abbreviatedName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hashes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isGuidedGames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isVaulted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActivityCollection",
            "id": "interface-ActivityCollection-7e386cb4777bcc8733a427fcd25d61169fd5ed114ad11f67b1db87ed8c6d6b51bfc6442714c66fe49dcc2273336b788a004294ed8625dd89b1eb952986c2cb2b",
            "file": "projects/data/src/lib/clan/base-member-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseClanService } from './base-clan.service';\r\n//import { ClanDatabase } from './ClanDatabase';\r\n//import { StoreId, DBObject } from './app-indexed-db';\r\nimport { groupActivitiesByDate } from '../utility/group-activity-by-date';\r\n\r\n//import { Destiny2Service, DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup } from 'bungie-api-angular';\r\n\r\n// import { MemberProfile } from 'bungie-models';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of, from, defer, concat, EMPTY, forkJoin } from 'rxjs';\r\nimport { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { MemberActivityStats } from '../models/MemberActivityStat';\r\nimport { MemberActivityTime } from '../models/MemberActivityTime';\r\nimport { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from '../models';\r\n//import { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityTime } from 'projects/bungie-models/src/lib/models/MemberActivityTime';\r\n//import { MemberActivityStats } from 'projects/bungie-models/src/lib/models/MemberActivityStat';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\ninterface ActivityCollection {\r\n  activities: any[];\r\n}\r\nexport class BaseMemberActivityService extends BaseClanService {\r\n  private ACTIVITY_GET_COUNT = 250;\r\n  constructor(\r\n    private clanDbPBase: ClanDatabase,\r\n    private tableNamePBase: StoreId,\r\n    private apiKey: string,\r\n    // private d2ServiceBase: Destiny2Service,\r\n    public startValue: Date,\r\n    public maxRequestCount: Number,\r\n    public activityTypeId = 0\r\n  ) {\r\n    super(clanDbPBase, tableNamePBase);\r\n  }\r\n\r\n  public getMemberCharacterActivityFromAPI(member: MemberProfile, characterId: number, pageNumber = 0) {\r\n    // https://www.bungie.net/Platform/Destiny2/3/Account/4611686018483900283/Character/2305843009471454818/Stats/Activities/?count=250&mode=0&page=10\r\n\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.profile.data.userInfo.membershipType}/Account/${member.profile.data.userInfo.membershipId}/Character/${characterId}/Stats/Activities/?count=${this.ACTIVITY_GET_COUNT}&mode=${this.activityTypeId}&page=${pageNumber}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n\r\n    // return this.d2ServiceBase.destiny2GetActivityHistory(\r\n    //   characterId,\r\n    //   member.profile.data.userInfo.membershipId,\r\n    //   member.profile.data.userInfo.membershipType,\r\n    //   this.ACTIVITY_GET_COUNT,\r\n    //   this.activityTypeId,\r\n    //   pageNumber\r\n    // );\r\n  }\r\n\r\n  private activitiesContainExpiredYear(activities, expiration) {\r\n    if (!activities) {\r\n      return true;\r\n    }\r\n\r\n    return !!activities.find((x) => {\r\n      const activityYear = new Date(x.period);\r\n      return activityYear <= expiration;\r\n    });\r\n  }\r\n\r\n  private getAllRecentActivity(member: MemberProfile, characterId: number): Observable<ActivityCollection> {\r\n    const maxConcurrentCount = 4;\r\n    const fetchPage = (page = 0) => {\r\n      return this.getMemberCharacterActivityFromAPI(member, characterId, page).pipe(\r\n        map((x: any) => {\r\n          const nextPage =\r\n            this.activitiesContainExpiredYear(x?.Response?.activities, this.startValue) || page >= this.maxRequestCount\r\n              ? null\r\n              : page + maxConcurrentCount;\r\n\r\n          const activities = x?.Response?.activities || [];\r\n          return { activities, nextPage };\r\n        })\r\n      );\r\n    };\r\n\r\n    const getItems = (page) =>\r\n      defer(() => fetchPage(page)).pipe(\r\n        mergeMap(({ activities, nextPage }) => {\r\n          const items$ = from(activities);\r\n          const next$ = nextPage ? getItems(nextPage) : EMPTY;\r\n          return concat(items$, next$);\r\n        })\r\n      );\r\n\r\n    const batchedRequest = [];\r\n    for (let i = 0; i < maxConcurrentCount; i++) {\r\n      batchedRequest.push(getItems(i).pipe(toArray()));\r\n    }\r\n\r\n    return forkJoin(batchedRequest).pipe(\r\n      map((x: any) => {\r\n        return {\r\n          activities: x.flat()\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getMemberActivityId(member: MemberProfile, characterId: number) {\r\n    return `${this.getMemberProfileId(member)}-${characterId}`;\r\n  }\r\n  getMemberProfileId(member: MemberProfile) {\r\n    return `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`;\r\n  }\r\n\r\n  /**\r\n   *  Pulls character activity from cache and will return fresh data if cache is exipred\r\n   */\r\n  getMemberCharacterActivity(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean\r\n\r\n    // ): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    const characterActivityId = this.getMemberActivityId(member, characterId);\r\n\r\n    return from(this.getDataFromCache(clanId.toString(), characterActivityId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        // if (this.isCacheValid(cachedData, 720, new Date(member.profile.data.dateLastPlayed))) {\r\n        //   return of(cachedData.data);\r\n        // }\r\n\r\n        // return this.getFreshMemberCharacterActivity(clanId, member, characterId, characterActivityId, cachedData);\r\n\r\n        if (useCache) {\r\n          return this.verifyCacheIntegrity(clanId, member, characterId, cachedData);\r\n        }\r\n        return of(cachedData.data);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if Cached data is fresh enough to use. Triggers new call if too old.\r\n   *\r\n   */\r\n  verifyCacheIntegrity(clanId, memberProfile: MemberProfile, characterId, cachedData: DBObject) {\r\n    const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n    if (this.isCacheValid(cachedData, 720, new Date(memberProfile.profile.data.dateLastPlayed))) {\r\n      return of(cachedData.data);\r\n    }\r\n\r\n    return this.getFreshMemberCharacterActivity(clanId, memberProfile, characterId, characterActivityId, cachedData);\r\n  }\r\n\r\n  /**\r\n   * Calls for fresh character activity. Updates cache. Falls back on cache on failure.\r\n   */\r\n  getFreshMemberCharacterActivity(\r\n    clanId: string,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    characterActivityId: string,\r\n    cachedData: DBObject\r\n    //): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    return this.getAllRecentActivity(member, characterId).pipe(\r\n      map((activityResponse) => {\r\n        if (activityResponse.activities) {\r\n          // serialize:\r\n          const slimmedActivities = activityResponse.activities.map((x) => {\r\n            return clanMemberActivitySerializer(x);\r\n          });\r\n\r\n          this.updateDB(clanId, characterActivityId, slimmedActivities);\r\n          return slimmedActivities;\r\n        }\r\n        return of([]);\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error?.ErrorStatus === 'DestinyPrivacyRestriction') {\r\n          this.updateDB(clanId, characterActivityId, []);\r\n          return of([]);\r\n        }\r\n        if (cachedData && cachedData.data) {\r\n          return of(cachedData.data);\r\n        }\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  groupActivitiesToMember(memberProfile: MemberProfile, allActivities: DBObject[], activityMode: number = 0) {\r\n    if (!memberProfile) {\r\n      return undefined;\r\n    }\r\n    const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n\r\n    const memberActivitiesDB = allActivities.filter((x) => x.id.startsWith(memberProfileId));\r\n\r\n    const memberActivitiesSerialized = memberActivitiesDB.map((activityDB) =>\r\n      activityDB.data.map((activity) => clanMemberActivitySerializer(activity))\r\n    );\r\n\r\n    const allFilteredActivities =\r\n      activityMode > 0\r\n        ? memberActivitiesSerialized.map((items) =>\r\n            items.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1)\r\n          )\r\n        : memberActivitiesSerialized;\r\n\r\n    const timed = groupActivitiesByDate([].concat(...allFilteredActivities));\r\n\r\n    return {\r\n      id: memberProfileId,\r\n      activities: timed\r\n    };\r\n  }\r\n\r\n  groupActivitiesToMembers(\r\n    memberProfiles: MemberProfile[],\r\n    allActivities: DBObject[],\r\n    activityMode: number = 0\r\n  ): any[] {\r\n    return memberProfiles\r\n      .filter((m) => !!m)\r\n      .map((memberProfile) => {\r\n        return this.groupActivitiesToMember(memberProfile, allActivities, activityMode);\r\n      });\r\n  }\r\n\r\n  getAllActivitiesFromCache(\r\n    clanId: number,\r\n    memberProfiles: MemberProfile[],\r\n    activityMode = 0\r\n  ): Observable<MemberActivityTime[]> {\r\n    return from(this.getAllDataFromCache(clanId.toString())).pipe(\r\n      map((x) => {\r\n        const y = this.groupActivitiesToMembers(memberProfiles, x, activityMode);\r\n        return y;\r\n      })\r\n    );\r\n  }\r\n  // TODO: Turn this up to 11\r\n  updateAllActivityCache(clanId: number, memberProfiles: MemberProfile[], progress?: (done) => any) {\r\n    const memberProfilesObs = from(memberProfiles);\r\n    const cacheDataObs = from(this.getAllDataFromCache(clanId.toString()));\r\n\r\n    return cacheDataObs.pipe(\r\n      switchMap((cachedData) => {\r\n        let complete = 0;\r\n        return memberProfilesObs.pipe(\r\n          mergeMap((memberProfile) => {\r\n            if (!memberProfile?.profile?.data?.characterIds) {\r\n              return of();\r\n            }\r\n            return from(memberProfile.profile.data.characterIds).pipe(\r\n              mergeMap((characterId: number) => {\r\n                const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n                const characterActivityCache = cachedData.find((x) => x.id === characterActivityId);\r\n\r\n                return this.verifyCacheIntegrity(clanId, memberProfile, characterId, characterActivityCache);\r\n              }),\r\n              toArray(),\r\n              map((x) => {\r\n                const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n                return {\r\n                  id: memberProfileId\r\n                };\r\n              })\r\n            );\r\n          }, 3),\r\n          tap((x) => {\r\n            complete++;\r\n            if (progress) {\r\n              progress(complete);\r\n            }\r\n          }),\r\n          toArray()\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getMemberActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityStats> {\r\n    if (!member?.profile) {\r\n      return of(null);\r\n    }\r\n    return from(member.profile.data.characterIds).pipe(\r\n      mergeMap((characterId: number) => {\r\n        return this.getMemberCharacterActivitySerialized(clanId, member, characterId, useCache, activityMode);\r\n      }),\r\n      map((x) => {\r\n        return x.activities;\r\n      }),\r\n      toArray(),\r\n      map((x) => {\r\n        return {\r\n          id: `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`,\r\n          activities: [].concat(...x)\r\n        };\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n  getMemberCharacterActivitySerialized(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ) {\r\n    return this.getMemberCharacterActivity(clanId, member, characterId, useCache).pipe(\r\n      map((activity) => {\r\n        if (activityMode > 0) {\r\n          activity = activity.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1);\r\n        }\r\n        return {\r\n          activities: activity.map((a) => clanMemberActivitySerializer(a))\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActivityModeViewContext",
            "id": "interface-ActivityModeViewContext-1f30eefac553bde8bfb7108ab6c3a92e1a2220dde3703b5b1949a391698e3b57d8f24781151913c252d3fc2376ba7277581c591164224aecb0952e0d5c302f24",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe } from '@destiny/components/pipes';\r\nimport { PlaytimePipe } from '@destiny/components/pipes/playtime';\r\nimport { getBungieDisplayName } from '@destiny/data/utility';\r\n//import { ProfileRecentActivity } from '../../models/profile-recent-activity';\r\nimport { ProfileRecentActivity } from '../../models/ProfileActivityMode';\r\nexport interface ActivityModeViewContext {\r\n  item: ProfileRecentActivity;\r\n  playTimePipe: PlaytimePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\nexport const ACTIVITY_MODE_VIEWER_METADATA = new Map<\r\n  string,\r\n  ViewerMetadata<ProfileRecentActivity, ActivityModeViewContext>\r\n>([\r\n  // [\r\n  //   'playerName',\r\n  //   {\r\n  //     label: 'Display Name',\r\n  //     isSticky: true,\r\n  //     plainText: (item: ProfileRecentActivity) => `${item.member?.destinyUserInfo?.displayName}`,\r\n  //     render: (item: ProfileRecentActivity) => {\r\n  //       return {\r\n  //         text: `${item.member?.destinyUserInfo?.displayName}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: ProfileRecentActivity) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ProfileRecentActivity) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // TODO: Add back\r\n  // [\r\n  //   'dateLastPlayed',\r\n  //   {\r\n  //     label: 'Last Played',\r\n  //     plainText: (item: ProfileRecentActivity, context: ActivityModeViewContext) =>\r\n  //       `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ActivityModeViewContext) => {\r\n  //       return {\r\n  //         text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ]\r\n]);\r\n",
            "properties": [
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileRecentActivity",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "playTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlaytimePipe",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActivityStats",
            "id": "interface-ActivityStats-e01b9d2b2b7e319946b93a26018c90e95d45b2b80a6a8a9cd3dc9b5572243b1029c5d920a3421a52d5673f0047ec170914097ada976cba8eaa741f31a21daf17",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  trackedDates: { [key: string]: number };\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "memberProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStats",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-8587bbb696d0093c4a5d96a40e8fa7de403da1aaa887515943d61aab364dfe70ec1cc8e7338db9c57dbb412bbd052efd2920d75031f8cf356e3a2afa258e480f",
            "file": "projects/clan-dashboard/src/app/core/core.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { ManifestReducer, ManifestState, ManifestEffects } from './store/manifest';\r\nimport { ClansEffects, ClansState, ClansReducer } from './store/clans';\r\nimport { initStateFromLocalStorage } from './store/meta-reducers/init-state-from-local-storage.reducer';\r\nimport { NotificationState, NotificationReducer } from './store/notifications';\r\nimport { ClansMembersProfilesState } from './store/clans-members-profiles/clan-members-profiles.state';\r\nimport { ClansMembersProfilesReducer } from './store/clans-members-profiles/clan-members-profiles.reducers';\r\nimport { ClansMembersProfilesEffects } from './store/clans-members-profiles/clan-members-profiles.effects';\r\n\r\nexport const coreEffects = [ManifestEffects, ClansEffects, ClansMembersProfilesEffects];\r\n\r\nexport const coreReducers: ActionReducerMap<AppState> = {\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer,\r\n  notifications: NotificationReducer,\r\n  clansMembersProfiles: ClansMembersProfilesReducer\r\n};\r\n\r\nexport const metaReducers: MetaReducer<AppState>[] = [initStateFromLocalStorage];\r\n\r\nexport interface AppState {\r\n  manifest: ManifestState;\r\n  clans: ClansState;\r\n  notifications: NotificationState;\r\n  clansMembersProfiles: ClansMembersProfilesState;\r\n}\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "clansMembersProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansMembersProfilesState",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationState",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BungieInfo",
            "id": "interface-BungieInfo-07b6307f575f60b072e4df04b05cc496eeea614d4cd2b6cf38a3be2920e9cb25264ce8238fe96fd1a9fb9f3dbd67a0173addaf9ea9850412f285384bf03920c3",
            "file": "projects/data/src/lib/models/BungieInfo.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BungieInfo {\r\n  membershipId: string;\r\n  uniqueName: string;\r\n  displayName: string;\r\n  profilePicture: number;\r\n  profileTheme: number;\r\n  userTitle: number;\r\n  successMessageFlags: string;\r\n  isDeleted: boolean;\r\n  about: string;\r\n  firstAccess: string;\r\n  lastUpdate: string;\r\n  psnDisplayName: string;\r\n  showActivity: boolean;\r\n  locale: string;\r\n  localeInheritDefault: boolean;\r\n  showGroupMessaging: boolean;\r\n  profilePicturePath: string;\r\n  profileThemeName: string;\r\n  userTitleDisplay: string;\r\n  statusText: string;\r\n  statusDate: string;\r\n  cachedBungieGlobalDisplayName: string;\r\n  cachedBungieGlobalDisplayNameCode: number;\r\n  xboxDisplayName:string;\r\n  steamDisplayName:string;\r\n  twitchDisplayName:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "about",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "cachedBungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "cachedBungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstAccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "localeInheritDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "profilePicture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "profilePicturePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "profileTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "profileThemeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "psnDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showGroupMessaging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "statusDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "statusText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "steamDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "successMessageFlags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "twitchDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "uniqueName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "userTitleDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "xboxDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CachedManifest",
            "id": "interface-CachedManifest-f01df9020d02647f54caf52c1fba84cf2d276494e57bf69dd5952c63e3b645b98ad92b9807005c5a4ac6730b2fb9cf58f2cb44380bad27e6794d6928f6b64829",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { WindowToken } from '../injection-tokens/window-token';\r\nimport { IdbKeyValService } from '../storage/idb-key-val.service';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v2';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(\r\n    private d2service: Destiny2Service,\r\n    private db: IdbKeyValService,\r\n    @Inject(WindowToken) private window: Window\r\n  ) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate > nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    // return this.db.getValues('manifest').then((cachedValue) => {\r\n    return this.db.get<any>('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return this.window.fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.set('manifest', [dbObject]);\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfig",
            "id": "interface-ClanConfig-3a74a5793e01455472a181d357946643f2730f7548874346535d4265b90f2870410d507fcc6a15eeebf50b7bb087100bae188311dfc0db3415db87900d0f5afb",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  clanName: string;\r\n  clanTag: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n  memberRecentActivityUpdate: string;\r\n  bungieInfoUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true,\r\n  memberUpdate: '1/1/1900',\r\n  profileUpdate: '1/1/1900',\r\n  memberRecentActivityUpdate: '1/1/1900',\r\n  bungieInfoUpdate: '1/1/1900'\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "bungieInfoUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "clanId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "clanName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "memberRecentActivityUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "memberUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "profileUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfigMembers",
            "id": "interface-ClanConfigMembers-9206600c3566c1f9c2a1972edbb0ed60d1593ed592f2b5c1b7d39620afe82b08c98b114a1b60501ec4b6f0571724ce7b30dc26a4469b58fd51a11f3d71c2279e",
            "file": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { Store } from '@ngrx/store';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { catchError, filter, from, map, mergeMap, Observable, of, switchMap, tap, toArray } from 'rxjs';\r\nimport { selectEnabledClans } from '../store/clans/clans.selectors';\r\nimport { SeasonService } from './season.service';\r\n\r\nexport interface ClanConfigMembers {\r\n  clan: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClansMembersService {\r\n  activeClans$ = this.store.select(selectEnabledClans);\r\n\r\n  clanMembers$ = this.activeClans$.pipe(\r\n    switchMap((activeClans) => {\r\n      return from(activeClans).pipe(\r\n        mergeMap((clan) => {\r\n          return this.memberService.getClanMembersSerialized(clan.clanId).pipe(\r\n            map((result) => {\r\n              return { clan, members: result };\r\n            }),\r\n            catchError(() => {\r\n              console.error(`Error pulling ${clan.clanId}`);\r\n              return of(null);\r\n            })\r\n          );\r\n        }),\r\n        filter((x) => !!x),\r\n        toArray()\r\n      ) as Observable<ClanConfigMembers[]>;\r\n    })\r\n  );\r\n\r\n  clanMembersProfiles$ = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              map((x) => {\r\n                return {\r\n                  ...clanAndMembers,\r\n                  profiles: x\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((resultProfiles: MemberProfile[]) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    },\r\n                    member,\r\n                    profile: resultProfiles.find((profile) => {\r\n                      return getClanMemberId(member) === getMemberProfileId(profile);\r\n                    })\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileService: ClanProfileService,\r\n    private seasonService: SeasonService\r\n  ) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfigMembers",
            "id": "interface-ClanConfigMembers-29160970f171e4f858808d223eb1b54d7496b1db24af36c4327af870bb771b5c842b68ce6069bdb908cbcbf74a0cdbad1b63183519890a523b4f977b4aa90ec5-1",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  mergeMap,\r\n  map,\r\n  catchError,\r\n  toArray,\r\n  switchMap,\r\n  tap,\r\n  take,\r\n  filter,\r\n  distinctUntilChanged,\r\n  concatMap\r\n} from 'rxjs/operators';\r\nimport { ClanConfig, removeClan, selectEnabledClans, updateClan, updateClanProfileSync } from '../../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ProfileUpdaterService } from './profile-updater.service';\r\nimport { MemberActivityUpdaterService } from './member-activity-updater.service';\r\nimport { ClanDetailsService } from '@destiny/data/clan/clan-details';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AppOfflineDialogComponent } from '../../layout/app-offline-dialog/app-offline-dialog.component';\r\nimport { BungieInfoUpdaterService } from './bungie-info-updater.service';\r\nimport { isMobile } from '../../utilities/is-mobile';\r\n\r\nexport interface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n  profiles?: any[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n  showLog = true;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig,\r\n    private clanDetailsService: ClanDetailsService,\r\n    private profileUpdaterService: ProfileUpdaterService,\r\n    private memberActivityUpdaterService: MemberActivityUpdaterService,\r\n    private bungieInfoUpdaterService: BungieInfoUpdaterService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      take(1),\r\n      tap((x) => this.showLog && console.log('Starting Updater', x)),\r\n      switchMap((activeClans) => this.clanUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Starting Member Updater', x)),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profileUpdaterService.profilesUpdate(clans)),\r\n      tap((x) => this.showLog && console.log('Member Profile Update Complete', x)),\r\n      switchMap((clans) => (isMobile() ? of(clans) : this.memberActivityUpdaterService.membersActivityUpdate(clans))),\r\n      tap((x) => this.showLog && console.log('Member Recent Activity Update Complete', x)),\r\n      switchMap((clans) => (isMobile() ? of(clans) : this.bungieInfoUpdaterService.updateAllClansBungieInfo(clans))),\r\n      tap((x) => this.showLog && console.log('Bungie Info Update Complete', x))\r\n    );\r\n  }\r\n  clanUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      // TODO: Double check concat map\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        return this.clanDetailsService.getClanDetailsSerialized(clanConfig.clanId, false).pipe(\r\n          map((result) => {\r\n            const newConfig = {\r\n              ...clanConfig,\r\n              clanName: result.name,\r\n              clanTag: result.clanInfo.clanCallsign\r\n            };\r\n            this.store.dispatch(updateClan({ clan: newConfig }));\r\n\r\n            return newConfig;\r\n          }),\r\n          catchError((error) => {\r\n            if (error.error.ErrorStatus === 'ClanNotFound') {\r\n              this.store.dispatch(removeClan({ clanId: clanConfig.clanId }));\r\n            }\r\n            //throw Error(error);\r\n            return of(undefined);\r\n          })\r\n        );\r\n      }, 1),\r\n      filter((x) => !!x),\r\n      toArray(),\r\n      catchError((err) => {\r\n        if (err.message === 'System Offline') {\r\n          const acknowledgeOffline = window.sessionStorage.getItem(\r\n            this.appConfig.constants.D2DASHBOARD_ACKNOWLEDGE_OFFLINE\r\n          );\r\n          if (!acknowledgeOffline) {\r\n            this.dialog.open(AppOfflineDialogComponent);\r\n          }\r\n        }\r\n        throw err;\r\n      })\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ClanConfigMembers-1"
        },
        {
            "name": "ClanDetails",
            "id": "interface-ClanDetails-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "about",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "memberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMember",
            "id": "interface-ClanMember-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "bungieNetUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "destinyUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isOnline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lastOnlineStatusChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "memberType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMemberProfile",
            "id": "interface-ClanMemberProfile-bfc233d499ae33444c08d2d358f6e58d8e8c620d6618e5f50a37f0946c9b32fa9d8024fce85e72dff2179982aeb6b66ed0bd79a2b17aae418858e0559a4d4cd8",
            "file": "projects/clan-dashboard/src/app/shared/models/ClanMemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MemberProfile } from \"@destiny/data/models\";\r\nimport { GroupsV2GroupMember } from \"bungie-api-angular\";\r\n\r\nexport interface ClanMemberProfile {\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  member: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "member",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMemberProfileWID",
            "id": "interface-ClanMemberProfileWID-c793a54a6b2f8aaae8c0aa604d1b8e171812e2227f9ac5059fb9af3c87d15070dfd1dea266de135624dd7225422aac27f6fbd100d43f50c1fc76d676df1ef5eb",
            "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '../../core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\nexport interface ClanMemberProfileWID extends ClanMemberProfile {\r\n  id: string;\r\n}\r\n\r\nexport interface ClansMembersProfilesState extends EntityState<ClanMemberProfileWID> {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const ClansMembersProfilesAdapter: EntityAdapter<ClanMemberProfileWID> =\r\n  createEntityAdapter<ClanMemberProfileWID>({\r\n    selectId: (cc: ClanMemberProfileWID) => cc.id,\r\n    sortComparer: false\r\n  });\r\n\r\nexport const initialClanMemberProfileState: ClansMembersProfilesState = ClansMembersProfilesAdapter.getInitialState({\r\n  isLoading: true\r\n});\r\n\r\nexport interface State extends AppState {\r\n  clansMembersProfiles: ClansMembersProfilesState;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ClanMemberProfile"
        },
        {
            "name": "ClanMembersServiceInterface",
            "id": "interface-ClanMembersServiceInterface-d62de745f09221ef0a8063c3462fc92537d9fd527ac47185e06898e946566a5a619307bbdd734e097c30023e628096a5f605491e39c4b6355bc4cbf40d04eb0a",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ClanMembersServiceInterface {\r\n  getClanMembersSerialized: (clanId: string) => Observable<GroupsV2GroupMember[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "getClanMembersSerialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanProgression",
            "id": "interface-ClanProgression-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dailyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dailyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "levelCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nextLevelAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "progressionHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "progressToNextLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stepIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "weeklyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "weeklyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanRosterItem",
            "id": "interface-ClanRosterItem-3e544d22404f9bdd337c30ce59d4856590c95770499e01fb913e380a70aa2c17191fe2b719e9ef287e2480677dbee48bed5d054fdd99b44dd07d6b83585e6405",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/models/ClanRosterItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BungieInfo } from '@destiny/data/models';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\nexport interface ClanRosterItem extends ClanMemberProfile{\r\n  bungieInfo?: BungieInfo;\r\n}\r\n",
            "properties": [
                {
                    "name": "bungieInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieInfo",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ClanMemberProfile"
        },
        {
            "name": "ClanSearchResultItem",
            "id": "interface-ClanSearchResultItem-37c4dfe0747b3be660aab7dfc0254a0158d00f55a9eef9e729bf8a3648fe41bfe5b6cc398b93207a05e6ca688ae0bab3c63a9af785d4b68dd579f538ea644b05",
            "file": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ClanSearchResultItemType = 'player' | 'clan';\r\n\r\nexport interface ClanSearchResultItem {\r\n  iconName: string;\r\n  name: string;\r\n  clanInfo: any;\r\n  type: ClanSearchResultItemType;\r\n  memberInfo?: any;\r\n  id?: string;\r\n}\r\n\r\n// iconName: this.getIcon(membership.membershipType),\r\n// name: displayName,\r\n// membershipType: membership.membershipType,\r\n// membershipId: membership.membershipId,\r\n// type: 'player'\r\n",
            "properties": [
                {
                    "name": "clanInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "memberInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanSearchResultItemType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClansMembersProfilesState",
            "id": "interface-ClansMembersProfilesState-c793a54a6b2f8aaae8c0aa604d1b8e171812e2227f9ac5059fb9af3c87d15070dfd1dea266de135624dd7225422aac27f6fbd100d43f50c1fc76d676df1ef5eb",
            "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '../../core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\nexport interface ClanMemberProfileWID extends ClanMemberProfile {\r\n  id: string;\r\n}\r\n\r\nexport interface ClansMembersProfilesState extends EntityState<ClanMemberProfileWID> {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const ClansMembersProfilesAdapter: EntityAdapter<ClanMemberProfileWID> =\r\n  createEntityAdapter<ClanMemberProfileWID>({\r\n    selectId: (cc: ClanMemberProfileWID) => cc.id,\r\n    sortComparer: false\r\n  });\r\n\r\nexport const initialClanMemberProfileState: ClansMembersProfilesState = ClansMembersProfilesAdapter.getInitialState({\r\n  isLoading: true\r\n});\r\n\r\nexport interface State extends AppState {\r\n  clansMembersProfiles: ClansMembersProfilesState;\r\n}\r\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ClansState",
            "id": "interface-ClansState-3a74a5793e01455472a181d357946643f2730f7548874346535d4265b90f2870410d507fcc6a15eeebf50b7bb087100bae188311dfc0db3415db87900d0f5afb",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  clanName: string;\r\n  clanTag: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n  memberRecentActivityUpdate: string;\r\n  bungieInfoUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true,\r\n  memberUpdate: '1/1/1900',\r\n  profileUpdate: '1/1/1900',\r\n  memberRecentActivityUpdate: '1/1/1900',\r\n  bungieInfoUpdate: '1/1/1900'\r\n} as ClanConfig;\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "CollectionDefinition",
            "id": "interface-CollectionDefinition-340292b46267c162c7f36b7ebe52406ff57ee440cf13202e25f7cb3affc1763c6eeeb9867a0a669e3ffef69f8cdb1c1b200b3cc1f2d433cba783b763774dafe7",
            "file": "projects/data/src/lib/models/CollectionDefinition.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsCollectiblesDestinyCollectibleDefinition } from 'bungie-api-angular';\r\n\r\nexport interface CollectionDefinition extends DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DestinyDefinitionsCollectiblesDestinyCollectibleDefinition"
        },
        {
            "name": "CuratedActivity",
            "id": "interface-CuratedActivity-db25aabe8f2d18d76d0baab34c1dde7b575c3ad61f8e4abe0d5252c0dd7cd029f66630deaf0855bd27d8dcd49bebf0c2332767408c116ff3ccf41c8d6d2e17c0",
            "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { CURATED_ACTIVITIES_DUNGEONS } from './CuratedActivities.dungeons';\r\nimport { CURATED_ACTIVITIES_EXOTIC_MISSIONS } from './CuratedActivities.exotic';\r\nimport { CURATED_ACTIVITIES_PINNACLE } from './CuratedActivities.pinnacle';\r\nimport { CURATED_ACTIVITIES_RAIDS } from './CuratedActivities.raids';\r\n\r\nexport interface CuratedActivityGroupDefinitions {\r\n  title: string;\r\n  activities: DestinyDefinitionsDestinyActivityDefinition[];\r\n}\r\nexport interface CuratedActivityGroup {\r\n  title: string;\r\n  activities: CuratedActivity[];\r\n}\r\nexport interface CuratedActivity {\r\n  hash: number;\r\n  metrics: number[];\r\n  collections?: number[];\r\n  records?: number[];\r\n}\r\n\r\nexport const CURATED_ACTIVITY_GROUPS: CuratedActivityGroup[] = [\r\n  CURATED_ACTIVITIES_EXOTIC_MISSIONS,\r\n  CURATED_ACTIVITIES_DUNGEONS,\r\n  CURATED_ACTIVITIES_RAIDS,\r\n  CURATED_ACTIVITIES_PINNACLE\r\n];\r\n\r\nexport const CURATED_ACTIVITIES_ALL: CuratedActivity[] = [\r\n  ...CURATED_ACTIVITIES_EXOTIC_MISSIONS.activities,\r\n  ...CURATED_ACTIVITIES_DUNGEONS.activities,\r\n  ...CURATED_ACTIVITIES_RAIDS.activities,\r\n  ...CURATED_ACTIVITIES_PINNACLE.activities\r\n];\r\n",
            "properties": [
                {
                    "name": "collections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CuratedActivityGroup",
            "id": "interface-CuratedActivityGroup-db25aabe8f2d18d76d0baab34c1dde7b575c3ad61f8e4abe0d5252c0dd7cd029f66630deaf0855bd27d8dcd49bebf0c2332767408c116ff3ccf41c8d6d2e17c0",
            "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { CURATED_ACTIVITIES_DUNGEONS } from './CuratedActivities.dungeons';\r\nimport { CURATED_ACTIVITIES_EXOTIC_MISSIONS } from './CuratedActivities.exotic';\r\nimport { CURATED_ACTIVITIES_PINNACLE } from './CuratedActivities.pinnacle';\r\nimport { CURATED_ACTIVITIES_RAIDS } from './CuratedActivities.raids';\r\n\r\nexport interface CuratedActivityGroupDefinitions {\r\n  title: string;\r\n  activities: DestinyDefinitionsDestinyActivityDefinition[];\r\n}\r\nexport interface CuratedActivityGroup {\r\n  title: string;\r\n  activities: CuratedActivity[];\r\n}\r\nexport interface CuratedActivity {\r\n  hash: number;\r\n  metrics: number[];\r\n  collections?: number[];\r\n  records?: number[];\r\n}\r\n\r\nexport const CURATED_ACTIVITY_GROUPS: CuratedActivityGroup[] = [\r\n  CURATED_ACTIVITIES_EXOTIC_MISSIONS,\r\n  CURATED_ACTIVITIES_DUNGEONS,\r\n  CURATED_ACTIVITIES_RAIDS,\r\n  CURATED_ACTIVITIES_PINNACLE\r\n];\r\n\r\nexport const CURATED_ACTIVITIES_ALL: CuratedActivity[] = [\r\n  ...CURATED_ACTIVITIES_EXOTIC_MISSIONS.activities,\r\n  ...CURATED_ACTIVITIES_DUNGEONS.activities,\r\n  ...CURATED_ACTIVITIES_RAIDS.activities,\r\n  ...CURATED_ACTIVITIES_PINNACLE.activities\r\n];\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivity[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CuratedActivityGroupDefinitions",
            "id": "interface-CuratedActivityGroupDefinitions-db25aabe8f2d18d76d0baab34c1dde7b575c3ad61f8e4abe0d5252c0dd7cd029f66630deaf0855bd27d8dcd49bebf0c2332767408c116ff3ccf41c8d6d2e17c0",
            "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { CURATED_ACTIVITIES_DUNGEONS } from './CuratedActivities.dungeons';\r\nimport { CURATED_ACTIVITIES_EXOTIC_MISSIONS } from './CuratedActivities.exotic';\r\nimport { CURATED_ACTIVITIES_PINNACLE } from './CuratedActivities.pinnacle';\r\nimport { CURATED_ACTIVITIES_RAIDS } from './CuratedActivities.raids';\r\n\r\nexport interface CuratedActivityGroupDefinitions {\r\n  title: string;\r\n  activities: DestinyDefinitionsDestinyActivityDefinition[];\r\n}\r\nexport interface CuratedActivityGroup {\r\n  title: string;\r\n  activities: CuratedActivity[];\r\n}\r\nexport interface CuratedActivity {\r\n  hash: number;\r\n  metrics: number[];\r\n  collections?: number[];\r\n  records?: number[];\r\n}\r\n\r\nexport const CURATED_ACTIVITY_GROUPS: CuratedActivityGroup[] = [\r\n  CURATED_ACTIVITIES_EXOTIC_MISSIONS,\r\n  CURATED_ACTIVITIES_DUNGEONS,\r\n  CURATED_ACTIVITIES_RAIDS,\r\n  CURATED_ACTIVITIES_PINNACLE\r\n];\r\n\r\nexport const CURATED_ACTIVITIES_ALL: CuratedActivity[] = [\r\n  ...CURATED_ACTIVITIES_EXOTIC_MISSIONS.activities,\r\n  ...CURATED_ACTIVITIES_DUNGEONS.activities,\r\n  ...CURATED_ACTIVITIES_RAIDS.activities,\r\n  ...CURATED_ACTIVITIES_PINNACLE.activities\r\n];\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsDestinyActivityDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CuratedClan",
            "id": "interface-CuratedClan-8190524f1ab608edf334b59b9b85107a4d0a54be65b6e50e4d11a3d35028b063bd7b702c6c9add5dcc99680a0d534b63665418b146fb1577b818c6f2a210551b",
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ClanConfig } from '@core/store/clans';\r\nconst dod_clans_pc = [\r\n  2073131, // Chums\r\n  5018079, //compadres\r\n  4322250, // DoD Dad Guard\r\n  2866236, // GMT\r\n  4430645, //Family Pride\r\n  4473297, // Guiding light\r\n  4767446 // Lucid Loops\r\n];\r\nconst dod_clans_all = [\r\n  4803739, //DoD Still Vexier Than You\r\n  4523816, //DoD Lightforged\r\n  223562, //DoD Westside\r\n  523657, //DoD Battleborn\r\n  3872451, //DoD Battleborn Ascendant\r\n  1726332 //DoD California\r\n];\r\nconst dod_clans_ps = [2942177, 1288185, 2071608, 1771725, 1161209, 2180975, 3136336, 1186355, 1375802];\r\n\r\nconst dod_clans_xbox = [\r\n  910604, //DOD Chattawhyte Krew\r\n  849654, //DoD Empire/Orbit/Rebellion/United\r\n  1179713, //DoD Iron Warlords\r\n  4271754, //DoD Shenanigans,\r\n  3219957, //DoD Storm ,\r\n  4748154, // DoD West Coast Blueberries\r\n  806412, // DoD X1 Foxtrot,\r\n  167225 //Dads of Destiny X1 Ghost\r\n];\r\ninterface CuratedClan {\r\n  key: string;\r\n  title: string;\r\n  clans?: ClanConfig[];\r\n  subGroups?: {\r\n    title: string;\r\n    clans: ClanConfig[];\r\n  }[];\r\n}\r\n\r\nfunction m(c) {\r\n  return c.map((x) => {\r\n    return {\r\n      clanId: x.toString(),\r\n      clanName: '',\r\n      clanTag: '',\r\n      enabled: false,\r\n      memberUpdate: '',\r\n      profileUpdate: '',\r\n      memberRecentActivityUpdate: ''\r\n    };\r\n  });\r\n}\r\n\r\nexport const DOD: CuratedClan = {\r\n  key: 'dod',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'All Platforms',\r\n      clans: m(dod_clans_all)\r\n    },\r\n    {\r\n      title: 'PC',\r\n      clans: m(dod_clans_pc)\r\n    },\r\n    {\r\n      title: 'Playstation',\r\n      clans: m(dod_clans_ps)\r\n    },\r\n    {\r\n      title: 'Play Station',\r\n      clans: m(dod_clans_xbox)\r\n    }\r\n  ]\r\n};\r\nexport const DOD_PC: CuratedClan = {\r\n  key: 'dod-pc',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'PC',\r\n      clans: m([\r\n        2073131, // Chums\r\n        5018079,\r\n        3816773\r\n      ]) //compadres])\r\n    }\r\n  ]\r\n};\r\n\r\nexport const ALL_CLANS = [DOD, DOD_PC];\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "subGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataLabel",
            "id": "interface-DataLabel-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceMetadata",
            "id": "interface-DataSourceMetadata-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "accessor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceOptions",
            "id": "interface-DataSourceOptions-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]> | T[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DataSourceMetadata<T>>",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataStore",
            "id": "interface-DataStore-efc2b7a292f92f9dbfed7bf5cb4bbd468127d6b3fe614639b7640ceaced344b597d3dc155cf63a9a6a1c6d7ceba84cffeac063b9b5fbebcbac1ae34da8eb284a",
            "file": "projects/data/src/lib/storage/datastore.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DataStore {\r\n  get<T = any>(key: string, customStore: any): Promise<T | undefined>;\r\n  set(key: string, value: any, customStore: any): Promise<void>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T | undefined>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customStore",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customStore",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "DateFilter",
            "id": "interface-DateFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateEquality",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DateFiltererMetadata",
            "id": "interface-DateFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DBObject",
            "id": "interface-DBObject-05a4207ec3ed693c9d635095f4ee92221da52a98e2f5c63c1c5205238783a0ea5636eb0a66c4dc84a1661d96e767f1f564ff07752448c7b9902d6d75e6dea438",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 6;\r\n\r\nexport enum StoreId {\r\n  ClanDetails = 'ClanDetails',\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\nBungieInfo = 'BungieInfo'\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n // StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  //StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.BungieInfo\r\n  //StoreId.ProfileMilestones,\r\n  //StoreId.MemberActivityStats,\r\n  //StoreId.ProfileMetrics,\r\n // StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(`D2DB-${name}`, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "createDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyActivityModeCategory",
            "id": "interface-DestinyActivityModeCategory-d768e2553c28600f98f1b639a4d98edfee2b4cd6d88552d4efd31954b8257f57729e5defbc5e4873210e2566bd6cffa3d237bc195c9872b336d050ef6df57a62",
            "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyActivityModeCategory {\r\n  id: number;\r\n  title: string;\r\n  desc: string;\r\n}\r\n\r\nconst NONE: DestinyActivityModeCategory = {\r\n  id: 0,\r\n  title: 'All',\r\n  desc: 'Activities that are neither PVP nor PVE, such as social activities.'\r\n};\r\n\r\nconst PvE: DestinyActivityModeCategory = {\r\n  id: 1,\r\n  title: 'PvE',\r\n  desc: 'PvE activities, where you shoot aliens in the face.'\r\n};\r\n\r\nconst PvP: DestinyActivityModeCategory = {\r\n  id: 2,\r\n  title: 'PvP',\r\n  desc: 'PvP activities, where you shoot your \"friends\".'\r\n};\r\n\r\nconst PvECompetitive: DestinyActivityModeCategory = {\r\n  id: 3,\r\n  title: 'PvECompetitive',\r\n  desc: 'PVE competitive activities, where you shoot whoever you want whenever you want. Or run around collecting small glowing triangles.'\r\n};\r\n\r\nexport const DESTINY_ACTIVITY_MODES: DestinyActivityModeCategory[] = [NONE, PvE, PvP, PvECompetitive];\r\n",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Enum from web site\n<a href=\"https://bungie-net.github.io/multi/schema_Destiny-DestinyActivityModeCategory.html#schema_Destiny-DestinyActivityModeCategory\">https://bungie-net.github.io/multi/schema_Destiny-DestinyActivityModeCategory.html#schema_Destiny-DestinyActivityModeCategory</a></p>\n",
            "rawdescription": "\n\nEnum from web site\nhttps://bungie-net.github.io/multi/schema_Destiny-DestinyActivityModeCategory.html#schema_Destiny-DestinyActivityModeCategory\n",
            "methods": []
        },
        {
            "name": "DestinyEntitiesProfilesDestinyProfileComponent",
            "id": "interface-DestinyEntitiesProfilesDestinyProfileComponent-40e5523f28a49c45a58e004be786ed46de072b2da35c0596ec18779ee4d311be6e6f0f314c491e1ecb67299b4811090f0e24f7f385e48d84657d81164f72eede",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberProfile {\r\n  id?: number;\r\n\r\n  profile?: DestinyResponsesDestinyProfileResponseProfile;\r\n  profileProgression?: any;\r\n  profileRecords?: any;\r\n  profileCollectibles?: any;\r\n  metrics?: any;\r\n  profileCommendations?: any;\r\n  characters?: any;\r\n\r\n  characterProgressions?: any;\r\n  characterRecords?: any;\r\n  characterCollectibles?: any;\r\n\r\n}\r\nexport interface DestinyResponsesDestinyProfileResponseProfile {\r\n  data?: DestinyEntitiesProfilesDestinyProfileComponent;\r\n  privacy?: number;\r\n  /**\r\n   * If true, this component is disabled.\r\n   */\r\n  disabled?: boolean;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponent {\r\n  userInfo?: DestinyEntitiesProfilesDestinyProfileComponentUserInfo;\r\n  dateLastPlayed?: string;\r\n  versionsOwned?: number;\r\n  characterIds?: Array<number>;\r\n  seasonHashes?: Array<number>;\r\n  eventCardHashesOwned?: Array<number>;\r\n  currentSeasonHash?: number;\r\n  currentSeasonRewardPowerCap?: number;\r\n  activeEventCardHash?: number;\r\n  currentGuardianRank?: number;\r\n  lifetimeHighestGuardianRank?: number;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponentUserInfo {\r\n  supplementalDisplayName?: string;\r\n  iconPath?: string;\r\n  crossSaveOverride?: number;\r\n  applicableMembershipTypes?: Array<number>;\r\n  isPublic?: boolean;\r\n  membershipType?: number;\r\n  membershipId?: number;\r\n  displayName?: string;\r\n  bungieGlobalDisplayName?: string;\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activeEventCardHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "characterIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "currentGuardianRank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "currentSeasonHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentSeasonRewardPowerCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "dateLastPlayed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "eventCardHashesOwned",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "lifetimeHighestGuardianRank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "seasonHashes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyEntitiesProfilesDestinyProfileComponentUserInfo",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "versionsOwned",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyEntitiesProfilesDestinyProfileComponentUserInfo",
            "id": "interface-DestinyEntitiesProfilesDestinyProfileComponentUserInfo-40e5523f28a49c45a58e004be786ed46de072b2da35c0596ec18779ee4d311be6e6f0f314c491e1ecb67299b4811090f0e24f7f385e48d84657d81164f72eede",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberProfile {\r\n  id?: number;\r\n\r\n  profile?: DestinyResponsesDestinyProfileResponseProfile;\r\n  profileProgression?: any;\r\n  profileRecords?: any;\r\n  profileCollectibles?: any;\r\n  metrics?: any;\r\n  profileCommendations?: any;\r\n  characters?: any;\r\n\r\n  characterProgressions?: any;\r\n  characterRecords?: any;\r\n  characterCollectibles?: any;\r\n\r\n}\r\nexport interface DestinyResponsesDestinyProfileResponseProfile {\r\n  data?: DestinyEntitiesProfilesDestinyProfileComponent;\r\n  privacy?: number;\r\n  /**\r\n   * If true, this component is disabled.\r\n   */\r\n  disabled?: boolean;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponent {\r\n  userInfo?: DestinyEntitiesProfilesDestinyProfileComponentUserInfo;\r\n  dateLastPlayed?: string;\r\n  versionsOwned?: number;\r\n  characterIds?: Array<number>;\r\n  seasonHashes?: Array<number>;\r\n  eventCardHashesOwned?: Array<number>;\r\n  currentSeasonHash?: number;\r\n  currentSeasonRewardPowerCap?: number;\r\n  activeEventCardHash?: number;\r\n  currentGuardianRank?: number;\r\n  lifetimeHighestGuardianRank?: number;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponentUserInfo {\r\n  supplementalDisplayName?: string;\r\n  iconPath?: string;\r\n  crossSaveOverride?: number;\r\n  applicableMembershipTypes?: Array<number>;\r\n  isPublic?: boolean;\r\n  membershipType?: number;\r\n  membershipId?: number;\r\n  displayName?: string;\r\n  bungieGlobalDisplayName?: string;\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsActivity-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "directorActivityHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The unique hash identifier of the DestinyActivityDefinition that was played.</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nThe unique hash identifier of the DestinyActivityDefinition that was played.\n"
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The unique identifier for this <em>specific</em> match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nThe unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\n"
                },
                {
                    "name": "isPrivate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether or not the match was a private match.</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nWhether or not the match was a private match.\n"
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The Membership Type indicating the platform on which this match was played.</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nThe Membership Type indicating the platform on which this match was played.\n"
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Indicates the most specific game mode of the activity that we could find.</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nIndicates the most specific game mode of the activity that we could find.\n"
                },
                {
                    "name": "modes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "<p>The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nThe list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\n"
                },
                {
                    "name": "referenceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it&#39;d be named activityHash. Too late now.</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nThe unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsActivity-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9-1",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "directorActivityHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isPrivate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "modes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "referenceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DestinyHistoricalStatsDestinyHistoricalStatsActivity-1"
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                    "optional": true,
                    "description": "<p>If the period group is for a specific activity, this property will be set.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nIf the period group is for a specific activity, this property will be set.\n"
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is &#39;all time&#39;.</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nPeriod for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\n"
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Collection of stats for the period.</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nCollection of stats for the period.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValue-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nWhen a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\n"
                },
                {
                    "name": "basic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "<p>Basic stat value.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nBasic stat value.\n"
                },
                {
                    "name": "pga",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "<p>Per game average for the statistic, if applicable</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nPer game average for the statistic, if applicable\n"
                },
                {
                    "name": "statId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Unique ID for this stat</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nUnique ID for this stat\n"
                },
                {
                    "name": "weighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "<p>Weighted value of the stat if a weight greater than 1 has been assigned.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nWeighted value of the stat if a weight greater than 1 has been assigned.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValue-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9-1",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "basic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pga",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "statId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "weighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DestinyHistoricalStatsDestinyHistoricalStatsValue-1"
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValuePair-62f6d1c5cfaa8efe5595bd020f4e0930c6f35bc2d7e3694d09465f3b03cfbe230dd2d67c1671180fac3e9c7e280c06769079e5b1c246ffee9a704039c25cc64b",
            "file": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup {\r\n  /**\r\n   * Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is \\'all time\\'.\r\n   */\r\n  period?: string;\r\n  /**\r\n   * If the period group is for a specific activity, this property will be set.\r\n   */\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  /**\r\n   * Collection of stats for the period.\r\n   */\r\n  values?: { [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue };\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  /**\r\n   * Unique ID for this stat\r\n   */\r\n  statId?: string;\r\n  /**\r\n   * Basic stat value.\r\n   */\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Per game average for the statistic, if applicable\r\n   */\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * Weighted value of the stat if a weight greater than 1 has been assigned.\r\n   */\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  /**\r\n   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.\r\n   */\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  /**\r\n   * Raw value of the statistic\r\n   */\r\n  value?: number;\r\n  /**\r\n   * Localized formated version of the value.\r\n   */\r\n  displayValue?: string;\r\n}\r\n\r\n\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it\\'d be named activityHash. Too late now.\r\n   */\r\n  referenceId?: number;\r\n  /**\r\n   * The unique hash identifier of the DestinyActivityDefinition that was played.\r\n   */\r\n  directorActivityHash?: number;\r\n  /**\r\n   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.\r\n   */\r\n  instanceId?: number;\r\n  /**\r\n   * Indicates the most specific game mode of the activity that we could find.\r\n   */\r\n  mode?: number;\r\n  /**\r\n   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.\r\n   */\r\n  modes?: Array<number>;\r\n  /**\r\n   * Whether or not the match was a private match.\r\n   */\r\n  isPrivate?: boolean;\r\n  /**\r\n   * The Membership Type indicating the platform on which this match was played.\r\n   */\r\n  membershipType?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Localized formated version of the value.</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nLocalized formated version of the value.\n"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Raw value of the statistic</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nRaw value of the statistic\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
            "id": "interface-DestinyHistoricalStatsDestinyHistoricalStatsValuePair-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9-1",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair-1"
        },
        {
            "name": "DestinyResponsesDestinyProfileResponseProfile",
            "id": "interface-DestinyResponsesDestinyProfileResponseProfile-40e5523f28a49c45a58e004be786ed46de072b2da35c0596ec18779ee4d311be6e6f0f314c491e1ecb67299b4811090f0e24f7f385e48d84657d81164f72eede",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberProfile {\r\n  id?: number;\r\n\r\n  profile?: DestinyResponsesDestinyProfileResponseProfile;\r\n  profileProgression?: any;\r\n  profileRecords?: any;\r\n  profileCollectibles?: any;\r\n  metrics?: any;\r\n  profileCommendations?: any;\r\n  characters?: any;\r\n\r\n  characterProgressions?: any;\r\n  characterRecords?: any;\r\n  characterCollectibles?: any;\r\n\r\n}\r\nexport interface DestinyResponsesDestinyProfileResponseProfile {\r\n  data?: DestinyEntitiesProfilesDestinyProfileComponent;\r\n  privacy?: number;\r\n  /**\r\n   * If true, this component is disabled.\r\n   */\r\n  disabled?: boolean;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponent {\r\n  userInfo?: DestinyEntitiesProfilesDestinyProfileComponentUserInfo;\r\n  dateLastPlayed?: string;\r\n  versionsOwned?: number;\r\n  characterIds?: Array<number>;\r\n  seasonHashes?: Array<number>;\r\n  eventCardHashesOwned?: Array<number>;\r\n  currentSeasonHash?: number;\r\n  currentSeasonRewardPowerCap?: number;\r\n  activeEventCardHash?: number;\r\n  currentGuardianRank?: number;\r\n  lifetimeHighestGuardianRank?: number;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponentUserInfo {\r\n  supplementalDisplayName?: string;\r\n  iconPath?: string;\r\n  crossSaveOverride?: number;\r\n  applicableMembershipTypes?: Array<number>;\r\n  isPublic?: boolean;\r\n  membershipType?: number;\r\n  membershipId?: number;\r\n  displayName?: string;\r\n  bungieGlobalDisplayName?: string;\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyEntitiesProfilesDestinyProfileComponent",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If true, this component is disabled.</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nIf true, this component is disabled.\n"
                },
                {
                    "name": "privacy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExporterMetadata",
            "id": "interface-ExporterMetadata-6fd70bab3e8f04e07bd5d3c76ecc283bc3bc10327a526bf4500abf22d6d6f39ad285556b487ddbc6d9ab0d18f2347de66b00e705e8faedb5e5f6e3003440fae7",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, startWith, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport type ExporterContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  contextProvider?: ExporterContextProvider<T, C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n  private contextProvider: ExporterContextProvider<T, C>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, context]) => {\r\n        const keys = [];\r\n        this.metadata.forEach((value, key) => keys.push(key));\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.text(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExporterOptions",
            "id": "interface-ExporterOptions-6fd70bab3e8f04e07bd5d3c76ecc283bc3bc10327a526bf4500abf22d6d6f39ad285556b487ddbc6d9ab0d18f2347de66b00e705e8faedb5e5f6e3003440fae7",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, startWith, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport type ExporterContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  contextProvider?: ExporterContextProvider<T, C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n  private contextProvider: ExporterContextProvider<T, C>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, context]) => {\r\n        const keys = [];\r\n        this.metadata.forEach((value, key) => keys.push(key));\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.text(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExporterContextProvider<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ExporterMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FiltererOptions",
            "id": "interface-FiltererOptions-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltererContextProvider<C>",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltererState",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | FiltererMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "tokenizeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FiltererState",
            "id": "interface-FiltererState-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterOption",
            "id": "interface-FilterOption-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperMetadata",
            "id": "interface-GrouperMetadata-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "groupingFunction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "titleTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperOptions",
            "id": "interface-GrouperOptions-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GrouperState",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | GrouperMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperState",
            "id": "interface-GrouperState-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupLabel",
            "id": "interface-GroupLabel-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupsV2GroupUserInfoCard",
            "id": "interface-GroupsV2GroupUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "LastSeenDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "LastSeenDisplayNameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Item",
            "id": "interface-Item-ef49304f8e7a4ccb72ab18fd31d89b53f20b31c1baf176513d7c5bb260405d82930a9e92af311f67453d9391124f8f61d0cb7f086580fdcec77b7725efa71bf2",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnChanges {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() header: string;\r\n  @Input() isLoading: boolean = undefined;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  itemCount: Observable<number>;\r\n  loadingSize = new Array(25).fill('_').map((x) => x);\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 25, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dataSource'] || changes['filterer'] || changes['sorter'] || changes['viewer'] || changes['loading']) {\r\n      if (this.filterer && this.sorter && this.viewer) {\r\n        if (this.isLoading === true ) {\r\n          this.showLoading();\r\n        } else {\r\n          this.loadData();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    if (this.dataSource && this.filterer && this.sorter && this.viewer) {\r\n      const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n      this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n        map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n      );\r\n      this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n      this.views = this.viewer.getViews();\r\n      this.displayedColumns = this.viewer.state.pipe(\r\n        map((state) => {\r\n          return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n        })\r\n      );\r\n\r\n      this.renderedHtml = this.renderedData.pipe(\r\n        map((items) => {\r\n          const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n          items.forEach((item) => {\r\n            const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n            this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n            renderedHtml.set(item, itemRenderedViews);\r\n          });\r\n          return renderedHtml;\r\n        }),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  private showLoading() {\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.viewer.exportData(this.header?.toLowerCase()?.replace(' ', '_'), curatedData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "assignees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "dbAdded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dbModified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "pr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "reporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ManifestState",
            "id": "interface-ManifestState-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isApiDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityRecentStats",
            "id": "interface-MemberActivityRecentStats-e01b9d2b2b7e319946b93a26018c90e95d45b2b80a6a8a9cd3dc9b5572243b1029c5d920a3421a52d5673f0047ec170914097ada976cba8eaa741f31a21daf17",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  trackedDates: { [key: string]: number };\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStatsActivity[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "trackedDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityRecentStats",
            "id": "interface-MemberActivityRecentStats-3abaaa9f1ff258ef7f7fbdc06ea5b28462f83c548703064253f6a5eb0cd351474e8a095da5b16121e01496fe37334d503a919b33803e00f1e6f8b2081d85e0a9-1",
            "file": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  trackedDates: { [key: string]: number };\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStatsActivity[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "trackedDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberActivityRecentStats-1"
        },
        {
            "name": "MemberActivityRecentStatsActivity",
            "id": "interface-MemberActivityRecentStatsActivity-e01b9d2b2b7e319946b93a26018c90e95d45b2b80a6a8a9cd3dc9b5572243b1029c5d920a3421a52d5673f0047ec170914097ada976cba8eaa741f31a21daf17",
            "file": "projects/data/src/lib/models/ActivityStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  displayName: string;\r\n  abbreviatedName: string;\r\n  key: string;\r\n  hashes: number[];\r\n  sortOrder: number;\r\n  isGuidedGames: boolean;\r\n  isVaulted?: boolean;\r\n}\r\nexport interface ActivityStats {\r\n  memberProfile: any; // TODO: Map out\r\n  stats: MemberActivityRecentStats;\r\n}\r\nexport interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  trackedDates: { [key: string]: number };\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityRecentStatsActivity",
            "id": "interface-MemberActivityRecentStatsActivity-3abaaa9f1ff258ef7f7fbdc06ea5b28462f83c548703064253f6a5eb0cd351474e8a095da5b16121e01496fe37334d503a919b33803e00f1e6f8b2081d85e0a9-1",
            "file": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityRecentStats {\r\n  id: string;\r\n  activities: MemberActivityRecentStatsActivity[];\r\n  trackedDates: { [key: string]: number };\r\n}\r\nexport interface MemberActivityRecentStatsActivity {\r\n  date: string | Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberActivityRecentStatsActivity-1"
        },
        {
            "name": "MemberActivityStat",
            "id": "interface-MemberActivityStat-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activityDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityStats",
            "id": "interface-MemberActivityStats-a9fdd1cfcf23d5d27068b373af50d26f9afb52e1b31d2f2ab1d3c75f5886cd96d0919488b92bd6b655a5f058335b67fa30cce63626c68960f3073b38c00c33d9",
            "file": "projects/data/src/lib/models/MemberActivityStat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityStat {\r\n  period?: string;\r\n\r\n  activityDetails?: DestinyHistoricalStatsDestinyHistoricalStatsActivity;\r\n  values?: {\r\n    [key: string]: DestinyHistoricalStatsDestinyHistoricalStatsValue;\r\n  };\r\n}\r\n\r\nexport interface MemberActivityStats {\r\n  id: string;\r\n  activities: MemberActivityStat[];\r\n}\r\n\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsActivity {\r\n  referenceId?: number;\r\n  directorActivityHash?: number;\r\n  instanceId?: number;\r\n  mode?: number;\r\n  modes?: Array<number>;\r\n  isPrivate?: boolean;\r\n  membershipType?: number;\r\n}\r\ninterface DestinyHistoricalStatsDestinyHistoricalStatsValue {\r\n  statId?: string;\r\n  basic?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  pga?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  weighted?: DestinyHistoricalStatsDestinyHistoricalStatsValuePair;\r\n  activityId?: number;\r\n}\r\nexport interface DestinyHistoricalStatsDestinyHistoricalStatsValuePair {\r\n  value?: number;\r\n  displayValue?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityStat[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityTime",
            "id": "interface-MemberActivityTime-0e229c407cb7e3944ddbdf8182f6494a84cf8c09a0c2a3da4f351d905a53de789a5d16917e2495a334781747f6c36ea30eb6acb7a089f50cc12b652bda6fe498",
            "file": "projects/data/src/lib/models/MemberActivityTime.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityTime {\r\n  id: string;\r\n  activities: MemberActivityTimeActivities[];\r\n}\r\n\r\ninterface MemberActivityTimeActivities {\r\n  date: Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityTimeActivities[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberActivityTimeActivities",
            "id": "interface-MemberActivityTimeActivities-0e229c407cb7e3944ddbdf8182f6494a84cf8c09a0c2a3da4f351d905a53de789a5d16917e2495a334781747f6c36ea30eb6acb7a089f50cc12b652bda6fe498",
            "file": "projects/data/src/lib/models/MemberActivityTime.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberActivityTime {\r\n  id: string;\r\n  activities: MemberActivityTimeActivities[];\r\n}\r\n\r\ninterface MemberActivityTimeActivities {\r\n  date: Date;\r\n  seconds: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberInfo",
            "id": "interface-MemberInfo-de8cda2c4b25045f578610503b266223aa23750db99006a0cc361f4a2396c1523c7915a15a06539a5d51db686a946f03259fecd65600a7aa4ed2e56bcef9495e",
            "file": "projects/clan-dashboard/src/app/features/player/player-detail/player-detail.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map, Observable, switchMap } from 'rxjs';\r\nimport { PlayerService } from '../data-access/player.service';\r\n\r\ninterface MemberInfo {\r\n  memberType: string;\r\n  memberId: string;\r\n}\r\n@Component({\r\n  selector: 'app-player-detail',\r\n  templateUrl: './player-detail.component.html',\r\n  styleUrls: ['./player-detail.component.scss']\r\n})\r\nexport class PlayerDetailComponent {\r\n  constructor(private route: ActivatedRoute, private playerService: PlayerService) {}\r\n  memberInfo$: Observable<MemberInfo> = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      const playerInfo = params.get('player-id');\r\n      return { memberType: playerInfo.split('-')[0], memberId: playerInfo.split('-')[1] };\r\n    })\r\n  );\r\n\r\n  profile$ = this.memberInfo$.pipe(\r\n    switchMap((memberInfo) => this.playerService.getProfile(memberInfo.memberType, memberInfo.memberId))\r\n  );\r\n}\r\n",
            "properties": [
                {
                    "name": "memberId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "memberType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberInfo",
            "id": "interface-MemberInfo-d2330bbcf4c4d716b6039f5ca99c9db2dabbadf3d3192d01b4cec959214b273718caebe6356be86ea0d0a472cf666ca2fb57aaa32575782a783eea4c15e35eca-1",
            "file": "projects/clan-dashboard/src/app/features/player/player-overview/player-overview.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map, Observable, switchMap } from 'rxjs';\r\nimport { PlayerService } from '../data-access/player.service';\r\ninterface MemberInfo {\r\n  memberType: string;\r\n  memberId: string;\r\n}\r\n@Component({\r\n  selector: 'app-player-overview',\r\n  templateUrl: './player-overview.component.html',\r\n  styleUrls: ['./player-overview.component.scss']\r\n})\r\nexport class PlayerOverviewComponent {\r\n  constructor(private route: ActivatedRoute, private playerService: PlayerService) {}\r\n  memberInfo$: Observable<MemberInfo> = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      const playerInfo = params.get('player-id');\r\n      return { memberType: playerInfo.split('-')[0], memberId: playerInfo.split('-')[1] };\r\n    })\r\n  );\r\n\r\n  profile$ = this.memberInfo$.pipe(\r\n    switchMap((memberInfo) => this.playerService.getProfile(memberInfo.memberType, memberInfo.memberId))\r\n  );\r\n}\r\n",
            "properties": [
                {
                    "name": "memberId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "memberType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberInfo-1"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-7e386cb4777bcc8733a427fcd25d61169fd5ed114ad11f67b1db87ed8c6d6b51bfc6442714c66fe49dcc2273336b788a004294ed8625dd89b1eb952986c2cb2b",
            "file": "projects/data/src/lib/clan/base-member-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseClanService } from './base-clan.service';\r\n//import { ClanDatabase } from './ClanDatabase';\r\n//import { StoreId, DBObject } from './app-indexed-db';\r\nimport { groupActivitiesByDate } from '../utility/group-activity-by-date';\r\n\r\n//import { Destiny2Service, DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup } from 'bungie-api-angular';\r\n\r\n// import { MemberProfile } from 'bungie-models';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of, from, defer, concat, EMPTY, forkJoin } from 'rxjs';\r\nimport { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { MemberActivityStats } from '../models/MemberActivityStat';\r\nimport { MemberActivityTime } from '../models/MemberActivityTime';\r\nimport { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from '../models';\r\n//import { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityTime } from 'projects/bungie-models/src/lib/models/MemberActivityTime';\r\n//import { MemberActivityStats } from 'projects/bungie-models/src/lib/models/MemberActivityStat';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\ninterface ActivityCollection {\r\n  activities: any[];\r\n}\r\nexport class BaseMemberActivityService extends BaseClanService {\r\n  private ACTIVITY_GET_COUNT = 250;\r\n  constructor(\r\n    private clanDbPBase: ClanDatabase,\r\n    private tableNamePBase: StoreId,\r\n    private apiKey: string,\r\n    // private d2ServiceBase: Destiny2Service,\r\n    public startValue: Date,\r\n    public maxRequestCount: Number,\r\n    public activityTypeId = 0\r\n  ) {\r\n    super(clanDbPBase, tableNamePBase);\r\n  }\r\n\r\n  public getMemberCharacterActivityFromAPI(member: MemberProfile, characterId: number, pageNumber = 0) {\r\n    // https://www.bungie.net/Platform/Destiny2/3/Account/4611686018483900283/Character/2305843009471454818/Stats/Activities/?count=250&mode=0&page=10\r\n\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.profile.data.userInfo.membershipType}/Account/${member.profile.data.userInfo.membershipId}/Character/${characterId}/Stats/Activities/?count=${this.ACTIVITY_GET_COUNT}&mode=${this.activityTypeId}&page=${pageNumber}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n\r\n    // return this.d2ServiceBase.destiny2GetActivityHistory(\r\n    //   characterId,\r\n    //   member.profile.data.userInfo.membershipId,\r\n    //   member.profile.data.userInfo.membershipType,\r\n    //   this.ACTIVITY_GET_COUNT,\r\n    //   this.activityTypeId,\r\n    //   pageNumber\r\n    // );\r\n  }\r\n\r\n  private activitiesContainExpiredYear(activities, expiration) {\r\n    if (!activities) {\r\n      return true;\r\n    }\r\n\r\n    return !!activities.find((x) => {\r\n      const activityYear = new Date(x.period);\r\n      return activityYear <= expiration;\r\n    });\r\n  }\r\n\r\n  private getAllRecentActivity(member: MemberProfile, characterId: number): Observable<ActivityCollection> {\r\n    const maxConcurrentCount = 4;\r\n    const fetchPage = (page = 0) => {\r\n      return this.getMemberCharacterActivityFromAPI(member, characterId, page).pipe(\r\n        map((x: any) => {\r\n          const nextPage =\r\n            this.activitiesContainExpiredYear(x?.Response?.activities, this.startValue) || page >= this.maxRequestCount\r\n              ? null\r\n              : page + maxConcurrentCount;\r\n\r\n          const activities = x?.Response?.activities || [];\r\n          return { activities, nextPage };\r\n        })\r\n      );\r\n    };\r\n\r\n    const getItems = (page) =>\r\n      defer(() => fetchPage(page)).pipe(\r\n        mergeMap(({ activities, nextPage }) => {\r\n          const items$ = from(activities);\r\n          const next$ = nextPage ? getItems(nextPage) : EMPTY;\r\n          return concat(items$, next$);\r\n        })\r\n      );\r\n\r\n    const batchedRequest = [];\r\n    for (let i = 0; i < maxConcurrentCount; i++) {\r\n      batchedRequest.push(getItems(i).pipe(toArray()));\r\n    }\r\n\r\n    return forkJoin(batchedRequest).pipe(\r\n      map((x: any) => {\r\n        return {\r\n          activities: x.flat()\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getMemberActivityId(member: MemberProfile, characterId: number) {\r\n    return `${this.getMemberProfileId(member)}-${characterId}`;\r\n  }\r\n  getMemberProfileId(member: MemberProfile) {\r\n    return `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`;\r\n  }\r\n\r\n  /**\r\n   *  Pulls character activity from cache and will return fresh data if cache is exipred\r\n   */\r\n  getMemberCharacterActivity(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean\r\n\r\n    // ): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    const characterActivityId = this.getMemberActivityId(member, characterId);\r\n\r\n    return from(this.getDataFromCache(clanId.toString(), characterActivityId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        // if (this.isCacheValid(cachedData, 720, new Date(member.profile.data.dateLastPlayed))) {\r\n        //   return of(cachedData.data);\r\n        // }\r\n\r\n        // return this.getFreshMemberCharacterActivity(clanId, member, characterId, characterActivityId, cachedData);\r\n\r\n        if (useCache) {\r\n          return this.verifyCacheIntegrity(clanId, member, characterId, cachedData);\r\n        }\r\n        return of(cachedData.data);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if Cached data is fresh enough to use. Triggers new call if too old.\r\n   *\r\n   */\r\n  verifyCacheIntegrity(clanId, memberProfile: MemberProfile, characterId, cachedData: DBObject) {\r\n    const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n    if (this.isCacheValid(cachedData, 720, new Date(memberProfile.profile.data.dateLastPlayed))) {\r\n      return of(cachedData.data);\r\n    }\r\n\r\n    return this.getFreshMemberCharacterActivity(clanId, memberProfile, characterId, characterActivityId, cachedData);\r\n  }\r\n\r\n  /**\r\n   * Calls for fresh character activity. Updates cache. Falls back on cache on failure.\r\n   */\r\n  getFreshMemberCharacterActivity(\r\n    clanId: string,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    characterActivityId: string,\r\n    cachedData: DBObject\r\n    //): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    return this.getAllRecentActivity(member, characterId).pipe(\r\n      map((activityResponse) => {\r\n        if (activityResponse.activities) {\r\n          // serialize:\r\n          const slimmedActivities = activityResponse.activities.map((x) => {\r\n            return clanMemberActivitySerializer(x);\r\n          });\r\n\r\n          this.updateDB(clanId, characterActivityId, slimmedActivities);\r\n          return slimmedActivities;\r\n        }\r\n        return of([]);\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error?.ErrorStatus === 'DestinyPrivacyRestriction') {\r\n          this.updateDB(clanId, characterActivityId, []);\r\n          return of([]);\r\n        }\r\n        if (cachedData && cachedData.data) {\r\n          return of(cachedData.data);\r\n        }\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  groupActivitiesToMember(memberProfile: MemberProfile, allActivities: DBObject[], activityMode: number = 0) {\r\n    if (!memberProfile) {\r\n      return undefined;\r\n    }\r\n    const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n\r\n    const memberActivitiesDB = allActivities.filter((x) => x.id.startsWith(memberProfileId));\r\n\r\n    const memberActivitiesSerialized = memberActivitiesDB.map((activityDB) =>\r\n      activityDB.data.map((activity) => clanMemberActivitySerializer(activity))\r\n    );\r\n\r\n    const allFilteredActivities =\r\n      activityMode > 0\r\n        ? memberActivitiesSerialized.map((items) =>\r\n            items.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1)\r\n          )\r\n        : memberActivitiesSerialized;\r\n\r\n    const timed = groupActivitiesByDate([].concat(...allFilteredActivities));\r\n\r\n    return {\r\n      id: memberProfileId,\r\n      activities: timed\r\n    };\r\n  }\r\n\r\n  groupActivitiesToMembers(\r\n    memberProfiles: MemberProfile[],\r\n    allActivities: DBObject[],\r\n    activityMode: number = 0\r\n  ): any[] {\r\n    return memberProfiles\r\n      .filter((m) => !!m)\r\n      .map((memberProfile) => {\r\n        return this.groupActivitiesToMember(memberProfile, allActivities, activityMode);\r\n      });\r\n  }\r\n\r\n  getAllActivitiesFromCache(\r\n    clanId: number,\r\n    memberProfiles: MemberProfile[],\r\n    activityMode = 0\r\n  ): Observable<MemberActivityTime[]> {\r\n    return from(this.getAllDataFromCache(clanId.toString())).pipe(\r\n      map((x) => {\r\n        const y = this.groupActivitiesToMembers(memberProfiles, x, activityMode);\r\n        return y;\r\n      })\r\n    );\r\n  }\r\n  // TODO: Turn this up to 11\r\n  updateAllActivityCache(clanId: number, memberProfiles: MemberProfile[], progress?: (done) => any) {\r\n    const memberProfilesObs = from(memberProfiles);\r\n    const cacheDataObs = from(this.getAllDataFromCache(clanId.toString()));\r\n\r\n    return cacheDataObs.pipe(\r\n      switchMap((cachedData) => {\r\n        let complete = 0;\r\n        return memberProfilesObs.pipe(\r\n          mergeMap((memberProfile) => {\r\n            if (!memberProfile?.profile?.data?.characterIds) {\r\n              return of();\r\n            }\r\n            return from(memberProfile.profile.data.characterIds).pipe(\r\n              mergeMap((characterId: number) => {\r\n                const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n                const characterActivityCache = cachedData.find((x) => x.id === characterActivityId);\r\n\r\n                return this.verifyCacheIntegrity(clanId, memberProfile, characterId, characterActivityCache);\r\n              }),\r\n              toArray(),\r\n              map((x) => {\r\n                const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n                return {\r\n                  id: memberProfileId\r\n                };\r\n              })\r\n            );\r\n          }, 3),\r\n          tap((x) => {\r\n            complete++;\r\n            if (progress) {\r\n              progress(complete);\r\n            }\r\n          }),\r\n          toArray()\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getMemberActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityStats> {\r\n    if (!member?.profile) {\r\n      return of(null);\r\n    }\r\n    return from(member.profile.data.characterIds).pipe(\r\n      mergeMap((characterId: number) => {\r\n        return this.getMemberCharacterActivitySerialized(clanId, member, characterId, useCache, activityMode);\r\n      }),\r\n      map((x) => {\r\n        return x.activities;\r\n      }),\r\n      toArray(),\r\n      map((x) => {\r\n        return {\r\n          id: `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`,\r\n          activities: [].concat(...x)\r\n        };\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n  getMemberCharacterActivitySerialized(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ) {\r\n    return this.getMemberCharacterActivity(clanId, member, characterId, useCache).pipe(\r\n      map((activity) => {\r\n        if (activityMode > 0) {\r\n          activity = activity.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1);\r\n        }\r\n        return {\r\n          activities: activity.map((a) => clanMemberActivitySerializer(a))\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-40e5523f28a49c45a58e004be786ed46de072b2da35c0596ec18779ee4d311be6e6f0f314c491e1ecb67299b4811090f0e24f7f385e48d84657d81164f72eede-1",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MemberProfile {\r\n  id?: number;\r\n\r\n  profile?: DestinyResponsesDestinyProfileResponseProfile;\r\n  profileProgression?: any;\r\n  profileRecords?: any;\r\n  profileCollectibles?: any;\r\n  metrics?: any;\r\n  profileCommendations?: any;\r\n  characters?: any;\r\n\r\n  characterProgressions?: any;\r\n  characterRecords?: any;\r\n  characterCollectibles?: any;\r\n\r\n}\r\nexport interface DestinyResponsesDestinyProfileResponseProfile {\r\n  data?: DestinyEntitiesProfilesDestinyProfileComponent;\r\n  privacy?: number;\r\n  /**\r\n   * If true, this component is disabled.\r\n   */\r\n  disabled?: boolean;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponent {\r\n  userInfo?: DestinyEntitiesProfilesDestinyProfileComponentUserInfo;\r\n  dateLastPlayed?: string;\r\n  versionsOwned?: number;\r\n  characterIds?: Array<number>;\r\n  seasonHashes?: Array<number>;\r\n  eventCardHashesOwned?: Array<number>;\r\n  currentSeasonHash?: number;\r\n  currentSeasonRewardPowerCap?: number;\r\n  activeEventCardHash?: number;\r\n  currentGuardianRank?: number;\r\n  lifetimeHighestGuardianRank?: number;\r\n}\r\nexport interface DestinyEntitiesProfilesDestinyProfileComponentUserInfo {\r\n  supplementalDisplayName?: string;\r\n  iconPath?: string;\r\n  crossSaveOverride?: number;\r\n  applicableMembershipTypes?: Array<number>;\r\n  isPublic?: boolean;\r\n  membershipType?: number;\r\n  membershipId?: number;\r\n  displayName?: string;\r\n  bungieGlobalDisplayName?: string;\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "characterCollectibles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "characterProgressions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "characterRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "characters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyResponsesDestinyProfileResponseProfile",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "profileCollectibles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "profileCommendations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profileProgression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "profileRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberProfile-1"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-9d214f3ca61cc2abbf2530e109d2eb7aac1ae3f2690c1b8caad387ba13a6615554372161c9f3b1ae109e6bec8e9bf2f475c2aa445a328e5b472fd0a37c712e3b-2",
            "file": "projects/data/src/lib/clan/bungie-info/bungie-info.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of, throwError } from 'rxjs';\r\n// import { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\nimport { BungieInfo } from '../../models/BungieInfo';\r\ninterface MemberProfile {}\r\n\r\nexport class BungieInfoService {\r\n  private tableName: StoreId = StoreId.BungieInfo;\r\n  private concurrentRequests = 20;\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n  private getBungieNetMembershipId(member: ClanMember) {\r\n    return member.bungieNetUserInfo.membershipId;\r\n  }\r\n\r\n  private getBungieInfoFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getBungieInfoFromAPI(member: ClanMember) {\r\n    if (member?.bungieNetUserInfo?.membershipId) {\r\n      const url = `https://www.bungie.net/Platform/User/GetBungieNetUserById/${this.getBungieNetMembershipId(member)}/`;\r\n      // https://www.bungie.net/Platform/User/GetBungieNetUserById/612698/\r\n\r\n      return new Observable((observer) => {\r\n        fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (!data.Response) {\r\n              throw data;\r\n            }\r\n            observer.next(data);\r\n            observer.complete();\r\n          })\r\n          .catch((err) => {\r\n            console.log('error', err);\r\n            observer.error(err);\r\n          });\r\n      });\r\n    }\r\n    return of(null);\r\n  }\r\n\r\n  getBungieInfo(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getBungieInfoFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getBungieInfoFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse?.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, member);\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, member);\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedBungieInfos<T>(clanId: string, members: ClanMember[]): Observable<T> {\r\n    return from(members).pipe(mergeMap((member) => this.getSerializedBungieInfo(clanId, member), 100)) as Observable<T>;\r\n  }\r\n\r\n  getSerializedBungieInfosFromCache(clanId: string, members: ClanMember[]): Observable<BungieInfo[]> {\r\n    return from(members).pipe(\r\n      mergeMap((member) => this.getSerializedBungieInfoFromCache(clanId, member), 100),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  getSerializedBungieInfosWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<BungieInfo[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedBungieInfo(clanId, member), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedBungieInfo(clanId: string, member: ClanMember): Observable<BungieInfo> {\r\n    return this.getBungieInfo(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profile;\r\n        // return profileSerializer(\r\n        //   profile,\r\n        //   this.TRACKED_HASHES,\r\n        //   collectionHashes,\r\n        //   profileRecords,\r\n        //   profileMetrics\r\n        // ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n  getSerializedBungieInfoFromCache(clanId: string, member: ClanMember): Observable<BungieInfo> {\r\n    return from(this.getBungieInfoFromCache(clanId, member)).pipe(\r\n      map((profile) => {\r\n        return profile?.data || [];\r\n        // return profileSerializer(\r\n        //   profile?.data || [],\r\n        //   this.TRACKED_HASHES,\r\n        //   collectionHashes,\r\n        //   profileRecords,\r\n        //   profileMetrics\r\n        // ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "MemberProfile-2"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-09aec81fb29bc6ac53842bdf95abc9ac6a4ee396e522b8c99cb091cab87e997378c4086a498444a410bbc5b79282885e7ab207bdee2ee365bbd07e77178c3236-3",
            "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseMemberActivityService } from '../base-member-activity.service';\r\n// import { ClanDatabase } from '../ClanDatabase';\r\n// import { StoreId } from '../app-indexed-db';\r\nimport { from, Observable } from 'rxjs';\r\nimport { mergeMap, map, toArray } from 'rxjs/operators';\r\n// import { MemberActivityStats, MemberProfile, MemberActivityRecentStats } from 'bungie-models';\r\n\r\n//import { clanMemberRecentActivitySerializer } from './clan-member-recent-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityRecentStats } from 'projects/bungie-models/src/lib/models/MemberActivityRecentStats';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\n// import { MemberProfile } from '../../models';\r\nimport { MemberActivityRecentStats } from '../../models/MemberActivityRecentStats';\r\nimport { clanMemberRecentActivitySerializer, TrackedDuration } from './clan-member-recent-activity.serializer';\r\n\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\nexport class ClanMemberRecentActivityService extends BaseMemberActivityService {\r\n  private concurrentRequests = 5;\r\n  constructor(private clanDB: ClanDatabase, private baseApiKey: string) {\r\n    super(\r\n      clanDB,\r\n      StoreId.MemberRecentActivities,\r\n      baseApiKey,\r\n      new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 90)),\r\n      8,\r\n      0\r\n    );\r\n  }\r\n  getSerializedProfileActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    trackedDates: TrackedDuration[],\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityRecentStats> {\r\n    return this.getMemberActivity(clanId, member, useCache, activityMode).pipe(\r\n      map((profileActivity) => {\r\n        return clanMemberRecentActivitySerializer(profileActivity, trackedDates);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "MemberProfile-3"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-11bcf9f19882076cdc83a6f8752d09a77c02a2bd7eb4e53ea116984dfc3c3d14911b7958be58a50950c9e9f4268ad4c899a32c3883c1fd569bca957c56ae8aeb-4",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\nimport { ProfileService } from '../../profile/profile.service';\r\nimport { profileSerializer } from '../../profile/profile.serializer';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ClanProfileService extends ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n\r\n  //  private profileComponents = [100, 104, 200, 202, 800, 900, 1100];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {\r\n    super(apiKey);\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member.destinyUserInfo.membershipType, member.destinyUserInfo.membershipId).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, member);\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, member);\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(\r\n          profile,\r\n          progressionHashes,\r\n          collectionHashes,\r\n          profileRecords,\r\n          profileMetrics\r\n        ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) =>\r\n          this.getSerializedProfile(\r\n            clanId,\r\n            member,\r\n            progressionHashes,\r\n            collectionHashes,\r\n            profileRecords,\r\n            profileMetrics\r\n          ),\r\n        100\r\n      )\r\n    ) as Observable<T>;\r\n  }\r\n  getSerializedProfilesFromCache(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<MemberProfile[]> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) =>\r\n          this.getSerializedProfileFromCache(\r\n            clanId,\r\n            member,\r\n            progressionHashes,\r\n            collectionHashes,\r\n            profileRecords,\r\n            profileMetrics\r\n          ),\r\n        100\r\n      ),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progressionHashes: any[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(\r\n        mergeMap(\r\n          (member) => this.getSerializedProfile(clanId, member, progressionHashes, [], [], []),\r\n          this.concurrentRequests\r\n        )\r\n      )\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfileFromCache(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<MemberProfile> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(\r\n          profile?.data || [],\r\n          progressionHashes,\r\n          collectionHashes,\r\n          profileRecords,\r\n          profileMetrics\r\n        ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "MemberProfile-4"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-a28bfe1924748ff83b14213945f6eb8cf947c50e0b8f643fce4db385402dfdbf8f573dbd2f9f190462a9be323229b0a50b97e14fff54fa99b452a3848fb0b005-5",
            "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/base-clan-aggregate-time.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { from, Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../../clan/clan-database';\r\nimport { ClanMemberRecentActivityService } from '../../clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\n// import {  MemberProfile } from '../../models/MemberProfile';\r\nimport { MemberActivityTime } from '../../models/MemberActivityTime';\r\n// import { AppConfig } from 'src/app/app.config';\r\n// import { ClanMemberRecentActivityService } from '../../clan-db/clan-member-recent-activity/clan-member-recent-activity.service';\r\n// import { ClanDatabase } from '../../clan-db/ClanDatabase';\r\n// import { ClanMemberRecentActivityService, ClanDatabase } from '../../clan-db';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\nexport abstract class BaseClanAggregateTimeService {\r\n  readonly CONCURRENT_COUNT = 10;\r\n  private memberActivityService: ClanMemberRecentActivityService;\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {\r\n    this.memberActivityService = new ClanMemberRecentActivityService(clanDb, apiKey);\r\n  }\r\n\r\n  abstract getClanActivityStatsForDuration(memberActivities: MemberActivityTime[], activityMode, count);\r\n\r\n  filterDates(memberActivities: MemberActivityTime[], startDate: Date): MemberActivityTime[] {\r\n    return memberActivities.map((ma) => {\r\n      return {\r\n        id: ma.id,\r\n        activities: ma.activities.filter((x) => x.date > startDate)\r\n      };\r\n    });\r\n  }\r\n\r\n  /** @deprecated use gender field instead */\r\n  getClanActivityStats(clanId: number, clanMemberProfiles: MemberProfile[], startDate: Date, activityMode: number = 0) {\r\n    return from(clanMemberProfiles).pipe(\r\n      mergeMap((member) => {\r\n        return this.getMemberActivityStats(clanId, member, startDate, activityMode);\r\n      }, this.CONCURRENT_COUNT)\r\n    );\r\n  }\r\n\r\n  /** @deprecated use gender field instead */\r\n  private getMemberActivityStats(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    startDate: Date,\r\n    activityMode: number = 0\r\n    // TODO: Update\r\n  ): Observable<any> {\r\n    return this.memberActivityService.getMemberActivity(clanId, member, false, activityMode).pipe(\r\n      map((memberActivityResponse) => {\r\n        return {\r\n          memberProfile: { profile: member.profile },\r\n          stats: {\r\n            id: memberActivityResponse.id,\r\n            activities: memberActivityResponse.activities.filter((x) => new Date(x.period) > startDate)\r\n          }\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "MemberProfile-5"
        },
        {
            "name": "MetricDefinition",
            "id": "interface-MetricDefinition-3acb67075bdbb64ff6f9bdf271c2d572ff07338032169eb1686583401d32c75a51ba7036e941391f3efbfe2371232fefb1d189177bd2fbe254823ebe69398792",
            "file": "projects/data/src/lib/models/MetricDefinition.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsMetricsDestinyMetricDefinition } from 'bungie-api-angular/lib/model/destinyDefinitionsMetricsDestinyMetricDefinition';\r\n\r\nexport interface MetricDefinition extends DestinyDefinitionsMetricsDestinyMetricDefinition {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DestinyDefinitionsMetricsDestinyMetricDefinition"
        },
        {
            "name": "MockListItem",
            "id": "interface-MockListItem-2d0f4d57b8580d738e53b9671eccd9d51750034e3ac75e1b4c75264c5c67b47b8664cce69bd0238a060f0f0fe865010b0c899febdcdd892f43623f5183860662",
            "file": "projects/components/src/lib/__mocks__/ListItems.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MockListItem {\r\n  id: number;\r\n  name: string;\r\n  startDate: string;\r\n  isPublic;\r\n}\r\nconst names = [\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n];\r\n\r\nexport const MOCK_LIST_ITEMS: MockListItem[] = names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n});\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MSGData",
            "id": "interface-MSGData-f0ccd40ba79aa167e1c34d2e8ee5daf1b3e707df5c235b277df81056ec1b3572513633f1fb0ec78dd64375fd3101ad680300dbcff0bb48b831a6dc00967af008",
            "file": "projects/clan-dashboard/src/app/workers/profile-recent-activity/clan-activity-recent-activity-getter.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { TrackedDuration } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer';\r\n// import { ClanMemberRecentActivityService } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\nimport { ClanActivityService } from 'projects/data/src/lib/stat-aggregators/clan-activity.service';\r\nimport { getClanMemberId, getMemberProfileId } from 'projects/data/src/lib/utility/get-ids';\r\nimport { filter, from, map, mergeMap, toArray } from 'rxjs';\r\n\r\n// import { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\n// import { ClanMemberRecentActivityService } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\n// import { DailyClanAggregateTimeService } from 'projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service';\r\n// // import { ClanDatabase } from 'projects/data/src/lib/clan-db/ClanDatabase';\r\n// // tslint:disable-next-line:max-line-length\r\n// // import { DailyClanAggregateTimeService } from 'projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service';\r\n// // import { WeeklyClanAggregateTimeService } from 'projects/data/src/lib/stat-aggregators/clan-aggregate-time/weekly-clan-aggregate-time.service';\r\n\r\n// import { playtime } from 'projects/data/src/lib/utility/date-utils';\r\n// import { map, take } from 'rxjs/operators';\r\ninterface MSGData {\r\n  apiKey: string;\r\n  activityModeId: number;\r\n  trackedDates: TrackedDuration[];\r\n  clansAndMembers: {\r\n    clan: { clanId: number; clanName: string; clanTag: string };\r\n    members: any[];\r\n    profiles: any[];\r\n  }[];\r\n}\r\naddEventListener('message', ({ data }: { data: MSGData }) => {\r\n  const { clansAndMembers, apiKey, trackedDates, activityModeId } = data;\r\n  const clanDatabase = new ClanDatabase();\r\n  // const profileService = new ClanMemberRecentActivityService(clanDatabase, apiKey);\r\n  const profileService = new ClanActivityService(clanDatabase, data.apiKey);\r\n  from(clansAndMembers)\r\n    .pipe(\r\n      mergeMap((clanAndMembers) => {\r\n        return profileService\r\n          .getClanActivityStats(clanAndMembers.clan.clanId, clanAndMembers.profiles, trackedDates, activityModeId)\r\n          .pipe(\r\n            map((memberStats) => {\r\n              return clanAndMembers.members.map((member) => {\r\n                const memberId = getClanMemberId(member);\r\n                return {\r\n                  member,\r\n                  profile: clanAndMembers.profiles.find((m) => getMemberProfileId(m) === memberId),\r\n                  stats: memberStats.find((x) => getMemberProfileId(x.memberProfile) === memberId)?.stats,\r\n                  clan: {\r\n                    clanId: clanAndMembers.clan.clanId,\r\n                    clanName: clanAndMembers.clan.clanName,\r\n                    clanTag: clanAndMembers.clan.clanTag\r\n                  }\r\n                };\r\n              });\r\n            })\r\n          );\r\n      }),\r\n      filter((x) => !!x),\r\n      toArray(),\r\n      map((x) => x.flatMap((y) => y))\r\n    )\r\n\r\n    .subscribe((x) => {\r\n      postMessage({ type: 'complete', data: x });\r\n    });\r\n\r\n  //   const clanDatabase = new ClanDatabase();\r\n  //   const profileService = new ClanMemberRecentActivityService(clanDatabase, data.apiKey);\r\n  //   const weekAggregator = new DailyClanAggregateTimeService(clanDatabase, data.apiKey);\r\n  //   //  console.log(data.memberProfiles);\r\n  //   profileService\r\n  //     .getAllActivitiesFromCache2(data.clanId, data.memberProfiles, data.activityId)\r\n  //     .pipe(\r\n  //       take(1),\r\n  //       // map((x) => {\r\n  //       //   return x.map((y) => {\r\n  //       //     return {\r\n  //       //       ...y,\r\n  //       //       profileName: data.memberProfiles.find(\r\n  //       //         (p) => `${p.profile.data.userInfo.membershipType}-${p.profile.data.userInfo.membershipId}` === y.id\r\n  //       //       )?.profile.data.userInfo.displayName\r\n  //       //     };\r\n  //       //   });\r\n  //       // }),\r\n  //       map((x) => {\r\n  //         return {\r\n  //           events: weekAggregator.getClanActivityStatsForDuration(x, 0, 14),\r\n  //           players: weekAggregator\r\n  //             .getClanActivityByPlayer(x, 0, 14)\r\n  //             .sort((a, b) => {\r\n  //               return b.seconds - a.seconds;\r\n  //             })\r\n  //             .map((y) => {\r\n  //               return {\r\n  //                 name: data.memberProfiles.find(\r\n  //                   (p) => `${p.profile.data.userInfo.membershipType}-${p.profile.data.userInfo.membershipId}` === y.id\r\n  //                 )?.profile.data.userInfo.displayName,\r\n  //                 value: playtime(y.seconds, false)\r\n  //               };\r\n  //             })\r\n  //         };\r\n  //       })\r\n  //     )\r\n  //     .subscribe((x) => {\r\n  //       postMessage({ type: 'complete', data: x });\r\n  //     });\r\n});\r\n",
            "properties": [
                {
                    "name": "activityModeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "clansAndMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "trackedDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackedDuration[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MSGData",
            "id": "interface-MSGData-43394c25d37f8ad6774554e928edab70a322bb37d4d66ae2ca6adea72b5b6f27bd150577de74602df3b9c449452ee644eb142f19adacd6ac8c9c564de2842d62-1",
            "file": "projects/clan-dashboard/src/app/workers/profile-recent-activity/profile-activity-getter.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { ClanMemberRecentActivityService } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\nimport { DailyClanAggregateTimeService } from 'projects/data/src/lib/stat-aggregators/clan-aggregate-time';\r\nimport { from, of } from 'rxjs';\r\nimport { filter, map, mergeMap, switchMap, take, toArray } from 'rxjs/operators';\r\nimport { AggregateType } from '../../../../../data/src/lib/stat-aggregators/clan-aggregate-time';\r\ninterface MSGData {\r\n  apiKey: string;\r\n  statAggregatorType: AggregateType;\r\n  clansAndMembers: {\r\n    clan: { clanId: number };\r\n    members: any[];\r\n    profiles: any[];\r\n  }[];\r\n}\r\n\r\naddEventListener('message', ({ data }: { data: MSGData }) => {\r\n  const { clansAndMembers, apiKey, statAggregatorType } = data;\r\n  const clanDatabase = new ClanDatabase();\r\n  const profileService = new ClanMemberRecentActivityService(clanDatabase, apiKey);\r\n\r\n  from(clansAndMembers)\r\n    .pipe(\r\n      mergeMap((clanAndMembers) => {\r\n        return profileService.getAllActivitiesFromCache(clanAndMembers.clan.clanId, clanAndMembers.profiles);\r\n      }),\r\n      filter((x) => !!x),\r\n      toArray(),\r\n      map((x) => x.flatMap((y) => y)),\r\n      map((x) => {\r\n        let statAggregator;\r\n        if (statAggregatorType === 'daily') {\r\n          statAggregator = new DailyClanAggregateTimeService(clanDatabase, apiKey);\r\n        }\r\n        //const aggregator = getAggregator(statAggregatorType);\r\n        return statAggregator.getClanActivityStatsForDuration(x, 0);\r\n      })\r\n    )\r\n    .subscribe((x) => {\r\n      postMessage({ type: 'complete', data: x });\r\n    });\r\n});\r\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "clansAndMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "statAggregatorType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AggregateType",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MSGData-1"
        },
        {
            "name": "Notification",
            "id": "interface-Notification-1999d3c6f11797f7b7904e6964ab26310e6f4d43020ce569e56b306c9385c709354055450de57f45c71608030cf16149fe230de642cb5839155737ea5ec29ea5",
            "file": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatCardModule } from '@angular/material/card';\r\ninterface Notification {\r\n  title: string;\r\n  data: {\r\n    total?: number;\r\n    progress: number;\r\n    complete?: number;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule, MatCardModule, OverlayModule, MatButtonModule, MatProgressBarModule],\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss']\r\n})\r\nexport class NotificationsComponent implements OnChanges {\r\n  isOpen = false;\r\n  manualDismiss = false;\r\n\r\n  @Input() notifications: Notification[];\r\n  constructor() {}\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['notifications']) {\r\n      if (this.notifications && this.notifications.length > 0 && !this.manualDismiss) {\r\n        this.isOpen = true;\r\n      }\r\n    }\r\n  }\r\n  sync() {\r\n    //this.isOpen = !this.isOpen;\r\n    if (this.isOpen == false && this.notifications.length > 0) {\r\n      this.isOpen = true;\r\n    } else {\r\n      this.isOpen = false;\r\n      this.manualDismiss = true;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-9a5801be65d3deae2b85c8787d74068553c7e401ff9cf12a5b3119acfb1da8a89bbebd01fd0bdf21f58478dd39bb245e965f9e23dd7dc93096446fe98c04fe53-1",
            "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  data: {\r\n    total: number;\r\n    progress: number;\r\n    complete: number;\r\n  };\r\n}\r\n\r\nexport interface NotificationState extends EntityState<Notification> {}\r\n\r\nexport const NotificationAdapter: EntityAdapter<Notification> = createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n});\r\n\r\nexport const NotificationInitialState: NotificationState = NotificationAdapter.getInitialState();\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Notification-1"
        },
        {
            "name": "NotificationState",
            "id": "interface-NotificationState-9a5801be65d3deae2b85c8787d74068553c7e401ff9cf12a5b3119acfb1da8a89bbebd01fd0bdf21f58478dd39bb245e965f9e23dd7dc93096446fe98c04fe53",
            "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  data: {\r\n    total: number;\r\n    progress: number;\r\n    complete: number;\r\n  };\r\n}\r\n\r\nexport interface NotificationState extends EntityState<Notification> {}\r\n\r\nexport const NotificationAdapter: EntityAdapter<Notification> = createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n});\r\n\r\nexport const NotificationInitialState: NotificationState = NotificationAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "NumberFilter",
            "id": "interface-NumberFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberEquality",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NumberFiltererMetadata",
            "id": "interface-NumberFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ProfileRecentActivity",
            "id": "interface-ProfileRecentActivity-af16f60aa3133a02cd33176e4d795fe0801c8683d8be63cc7b21b66ae5adf2298eb301b747654a5cf45c10c76853791db5c79a15cbe81a41219780cd1caadeb4",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/models/ProfileActivityMode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActivityStats, MemberActivityRecentStats, MemberProfile } from '@destiny/data/models';\r\nimport { MemberActivityTime } from 'projects/data/src/lib/models/MemberActivityTime';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface ProfileRecentActivity {\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  member: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n  stats: MemberActivityRecentStats;\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "member",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberActivityRecentStats",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ProfileRecentActivity",
            "id": "interface-ProfileRecentActivity-065d7821cbd01d674044482ef8f9d3d06a233b8f9edc6ed4831a875ed88965dccbe14300d22e6f77b61168c53d19e1c15abd648d73dcb424166ba5f1f4ae9f18-1",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/models/profile-recent-activity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActivityStats, MemberProfile } from '@destiny/data/models';\r\nimport { MemberActivityTime } from 'projects/data/src/lib/models/MemberActivityTime';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface ProfileRecentActivity {\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  clanMember: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n  profileActivity: ActivityStats;\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "profileActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivityStats",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ProfileRecentActivity-1"
        },
        {
            "name": "RecordDefinition",
            "id": "interface-RecordDefinition-a15b8077571c8c737bda97daa6e2a3e97b842e4a5f0b7ea910c682af60870abdaa4321f8fd30b609eb3c756d0dc99adee628b3e0bd4f056e6fada400b90255f6",
            "file": "projects/data/src/lib/models/RecordDefinition.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsRecordsDestinyRecordDefinition } from 'bungie-api-angular';\r\n\r\nexport interface RecordDefinition extends DestinyDefinitionsRecordsDestinyRecordDefinition {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DestinyDefinitionsRecordsDestinyRecordDefinition"
        },
        {
            "name": "RenderedViewWithChildren",
            "id": "interface-RenderedViewWithChildren-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RenderedView[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedViewWithText",
            "id": "interface-RenderedViewWithText-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedWithComponent",
            "id": "interface-RenderedWithComponent-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RosterActivityResources",
            "id": "interface-RosterActivityResources-98811d33d98ed2bb4ec467c697d35ca1859d31fd719ed80b99baef84331e8da2557325ee7544beaf208e7cf96f9d2c832cd69eacb641d3b762603716d9aaaa31",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { combineLatest, map, Observable, of, tap } from 'rxjs';\r\nimport { RecentActivityService } from '../data-access/recent-activity.service';\r\nimport { ProfileRecentActivity } from '../models/profile-recent-activity';\r\nimport {\r\n  CLAN_ROSTER_EXPORTER_METADATA,\r\n  RECENT_ACTIVITY_FILTERER_METADATA,\r\n  RECENT_ACTIVITY_SORTER_METADATA,\r\n  RECENT_ACTIVITY_VIEWER_METADATA\r\n} from './recent-activity-metadata';\r\n\r\ninterface RosterActivityResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-recent-activity-viewer',\r\n  templateUrl: './recent-activity.component.html',\r\n  styleUrls: ['./recent-activity.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RecentActivityComponent {\r\n  constructor(\r\n    private recentActivityService: RecentActivityService,\r\n    private playtimePipe: PlaytimePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n\r\n  clanProfileActivity$ = this.recentActivityService.activeClanActivity$;\r\n  activityViewer = new Viewer(\r\n    {\r\n      metadata: RECENT_ACTIVITY_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Activity_Table_Viewer'\r\n  );\r\n  activityFilterer = new Filterer({ metadata: RECENT_ACTIVITY_FILTERER_METADATA });\r\n  activitySorter = new Sorter({ metadata: RECENT_ACTIVITY_SORTER_METADATA });\r\n  activityExporter = new Exporter({\r\n    metadata: CLAN_ROSTER_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  });\r\n  isLoading = true;\r\n\r\n  rosterRecentActivityInfo$: Observable<RosterActivityResources> = combineLatest([this.clanProfileActivity$]).pipe(\r\n    map(([clanProfiles]) => {\r\n      return {\r\n        dataSource: new DataSource<ProfileRecentActivity>({ data: clanProfiles }),\r\n        viewer: this.activityViewer,\r\n        filterer: this.activityFilterer,\r\n        exporter: this.activityExporter,\r\n        sorter: this.activitySorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n  createViewContextProvider() {\r\n    return of((item: ProfileRecentActivity) => ({\r\n      item,\r\n      playTimePipe: this.playtimePipe,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Exporter",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RosterResources",
            "id": "interface-RosterResources-7227547c0ef0d3fa8deb739d3f7759c624c2afc4b45b6e5545bb6002d46fef8bc94f1ee399374e8fa5811b4e241e4937eec7ba1c3b6129033754e4e7ebab98a9",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { map, Observable, of, tap } from 'rxjs';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { ClansRosterService } from '../data-access/clans-roster.service';\r\nimport { CLAN_ROSTER_VIEWER_METADATA } from './clan-roster-metadata';\r\nimport { CLAN_ROSTER_FILTERER_METADATA } from './clan-roster-metadata/ClanRosterFilterer';\r\nimport { CLAN_ROSTER_SORTER_METADATA } from './clan-roster-metadata/ClanRosterSorter';\r\n// import { CLAN_ROSTER_EXPORTER_METADATA } from './clan-roster-metadata/ClanRosterExporter';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\ninterface RosterResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  // exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-clans-roster',\r\n  templateUrl: './clans-roster.component.html',\r\n  styleUrls: ['./clans-roster.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansRosterComponent {\r\n  constructor(\r\n    private clansRosterService: ClansRosterService,\r\n    private bungieDatePage: BungieDatePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n  rosterViewer = new Viewer(\r\n    {\r\n      metadata: CLAN_ROSTER_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Table_ViewerV3'\r\n  );\r\n  rosterFilter = new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA });\r\n  rosterSorter = new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA });\r\n  // rosterExporter = new Exporter({ metadata: CLAN_ROSTER_EXPORTER_METADATA });\r\n  isLoading = true;\r\n\r\n  rosterInfo$: Observable<RosterResources> = this.clansRosterService.clanRosterItems$.pipe(\r\n    map((clanProfiles) => {\r\n      return {\r\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\r\n        viewer: this.rosterViewer,\r\n        filterer: this.rosterFilter,\r\n      //  exporter: this.rosterExporter,\r\n        sorter: this.rosterSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n\r\n  createViewContextProvider() {\r\n    return of((item: ClanMemberProfile) => ({\r\n      item,\r\n      datePipe: this.bungieDatePage,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SealClanMember",
            "id": "interface-SealClanMember-3e242353690b4108dce1f69feece0288ab2fc31787da6c45984b26f858e929f798ab35ceec751fdf8fa409837552c2a75779386416c785b47b1614bf75471531",
            "file": "projects/clan-dashboard/src/app/features/seals/models/seal-clan-member.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MemberProfile } from '@destiny/data/models';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface SealClanMember {\r\n  clanMember: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n  clan: {\r\n    clanId: string;\r\n    clanName: string;\r\n    clanTag: string;\r\n  };\r\n  sealProgression: {\r\n    completedTriumphCount: number;\r\n    totalTriumphCount:number;\r\n    completionPercentage: number;\r\n    isCompleted: boolean;\r\n    isGilded: boolean;\r\n    gildedCount: number;\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "clan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clanMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sealProgression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SealDefinition",
            "id": "interface-SealDefinition-0eb2eccbfd2e191fbdc32313950fdac7210bf4d82d5f1438009f15fd59a27a8b4d8a0fa3250fe93fa4cef771f89a145d04d29533756d8278879935f4809d464a",
            "file": "projects/data/src/lib/models/SealDefinition.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyDefinitionsPresentationDestinyPresentationNodeDefinition } from \"bungie-api-angular\";\r\n\r\nexport interface SealDefinition extends  DestinyDefinitionsPresentationDestinyPresentationNodeDefinition {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DestinyDefinitionsPresentationDestinyPresentationNodeDefinition"
        },
        {
            "name": "SealDetailsResources",
            "id": "interface-SealDetailsResources-9df3a4d08429d172780066ea7e625457b79f8ff1fb415e8afbb3f939e3575f87b91738db119e8427b5f01ab7bd0f0321ef0a2f2fece782192d0499dee15ce123",
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { combineLatest, filter, map, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { SealsService } from '../data-access/seals.service';\r\nimport { SealClanMember } from '../models/seal-clan-member';\r\nimport {\r\n  //SEAL_DETAILS_EXPORTER_METADATA,\r\n  SEAL_DETAILS_FILTERER_METADATA,\r\n  SEAL_DETAILS_SORTER_METADATA,\r\n  SEAL_DETAILS_VIEWER_METADATA\r\n} from './seal-details-metadata';\r\n\r\ninterface SealDetailsResources {\r\n  loading: Observable<boolean>;\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n // exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-seal-details',\r\n  templateUrl: './seal-details.component.html',\r\n  styleUrls: ['./seal-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SealDetailsComponent {\r\n  constructor(private route: ActivatedRoute, private sealsService: SealsService) {}\r\n\r\n  sealHash$ = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return this.sealsService.sealNodes.find((x) => x.hash === +params.get('hash'));\r\n    })\r\n  );\r\n\r\n  sealDetails$ = this.route.paramMap.pipe(\r\n    switchMap((params) => {\r\n      return this.sealsService.getSealDetails$(params.get('hash'));\r\n    })\r\n  );\r\n\r\n  isLoading = true;\r\n  sealDetailsViewer = new Viewer(\r\n    {\r\n      metadata: SEAL_DETAILS_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Seals_Details_ViewerV2'\r\n  );\r\n  sealDetailsFilterer = new Filterer({ metadata: SEAL_DETAILS_FILTERER_METADATA });\r\n  sealDetailsSorter = new Sorter({ metadata: SEAL_DETAILS_SORTER_METADATA });\r\n  // sealDetailsExporter = new Exporter({\r\n  //   metadata: SEAL_DETAILS_EXPORTER_METADATA,\r\n  //   contextProvider: this.createViewContextProvider()\r\n  // });\r\n  createViewContextProvider() {\r\n    return of((item: SealClanMember) => ({\r\n      item\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n\r\n  sealDetailsInfo$: Observable<SealDetailsResources> = combineLatest([this.sealDetails$]).pipe(\r\n    map(([sealDetails]) => {\r\n      return {\r\n        loading: of(false),\r\n        dataSource: new DataSource<SealClanMember>({ data: sealDetails }),\r\n        viewer: this.sealDetailsViewer,\r\n        filterer: this.sealDetailsFilterer,\r\n     //   exporter: this.sealDetailsExporter,\r\n        sorter: this.sealDetailsSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n    //filter((ds) => !!ds)\r\n  );\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SealListItem",
            "id": "interface-SealListItem-328cdec5a78e52f1f82efa1cba0b11bd818fe20b1c16ef879beece0856db8296d15d4f37d6e9b7a4f126e7b49f701d3d558fe04132b47668be6f2bcebba5add2",
            "file": "projects/clan-dashboard/src/app/features/seals/models/seal-list-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SealDefinition } from '@destiny/data/models';\r\n\r\nexport interface SealListItem {\r\n  seal: SealDefinition;\r\n  totalMembers: number;\r\n  completedCount: number;\r\n  gildedCount: number;\r\n  isGilded: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "completedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "gildedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isGilded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "seal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealDefinition",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterMetadata",
            "id": "interface-SorterMetadata-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "comparator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortComparator<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterOptions",
            "id": "interface-SorterOptions-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterContextProvider<C>",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterState",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SorterMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterState",
            "id": "interface-SorterState-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "reverse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SortLabel",
            "id": "interface-SortLabel-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StatAggregator",
            "id": "interface-StatAggregator-9479d919b5cf1d8cad733c76185481030010457653389cf494f13626c2c84c8d411ace97f771678db27c84721932eb96c4d88505649e8cc1b4715af24dd638cc",
            "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/stat-aggregator-interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StatAggregator {\r\n  getClanActivityStatsForDuration: (memberActivities, activityMode: any, days?: number) => any;\r\n}\r\n",
            "properties": [
                {
                    "name": "getClanActivityStatsForDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState"
        },
        {
            "name": "State",
            "id": "interface-State-3a74a5793e01455472a181d357946643f2730f7548874346535d4265b90f2870410d507fcc6a15eeebf50b7bb087100bae188311dfc0db3415db87900d0f5afb-1",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  clanName: string;\r\n  clanTag: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n  memberRecentActivityUpdate: string;\r\n  bungieInfoUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true,\r\n  memberUpdate: '1/1/1900',\r\n  profileUpdate: '1/1/1900',\r\n  memberRecentActivityUpdate: '1/1/1900',\r\n  bungieInfoUpdate: '1/1/1900'\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-c793a54a6b2f8aaae8c0aa604d1b8e171812e2227f9ac5059fb9af3c87d15070dfd1dea266de135624dd7225422aac27f6fbd100d43f50c1fc76d676df1ef5eb-2",
            "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '../../core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\nexport interface ClanMemberProfileWID extends ClanMemberProfile {\r\n  id: string;\r\n}\r\n\r\nexport interface ClansMembersProfilesState extends EntityState<ClanMemberProfileWID> {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const ClansMembersProfilesAdapter: EntityAdapter<ClanMemberProfileWID> =\r\n  createEntityAdapter<ClanMemberProfileWID>({\r\n    selectId: (cc: ClanMemberProfileWID) => cc.id,\r\n    sortComparer: false\r\n  });\r\n\r\nexport const initialClanMemberProfileState: ClansMembersProfilesState = ClansMembersProfilesAdapter.getInitialState({\r\n  isLoading: true\r\n});\r\n\r\nexport interface State extends AppState {\r\n  clansMembersProfiles: ClansMembersProfilesState;\r\n}\r\n",
            "properties": [
                {
                    "name": "clansMembersProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansMembersProfilesState",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "StateFilter",
            "id": "interface-StateFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateEquality",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateFiltererMetadata",
            "id": "interface-StateFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TablePage",
            "id": "interface-TablePage-ef49304f8e7a4ccb72ab18fd31d89b53f20b31c1baf176513d7c5bb260405d82930a9e92af311f67453d9391124f8f61d0cb7f086580fdcec77b7725efa71bf2",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnChanges {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() header: string;\r\n  @Input() isLoading: boolean = undefined;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  itemCount: Observable<number>;\r\n  loadingSize = new Array(25).fill('_').map((x) => x);\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 25, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dataSource'] || changes['filterer'] || changes['sorter'] || changes['viewer'] || changes['loading']) {\r\n      if (this.filterer && this.sorter && this.viewer) {\r\n        if (this.isLoading === true ) {\r\n          this.showLoading();\r\n        } else {\r\n          this.loadData();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    if (this.dataSource && this.filterer && this.sorter && this.viewer) {\r\n      const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n      this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n        map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n      );\r\n      this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n      this.views = this.viewer.getViews();\r\n      this.displayedColumns = this.viewer.state.pipe(\r\n        map((state) => {\r\n          return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n        })\r\n      );\r\n\r\n      this.renderedHtml = this.renderedData.pipe(\r\n        map((items) => {\r\n          const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n          items.forEach((item) => {\r\n            const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n            this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n            renderedHtml.set(item, itemRenderedViews);\r\n          });\r\n          return renderedHtml;\r\n        }),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  private showLoading() {\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.viewer.exportData(this.header?.toLowerCase()?.replace(' ', '_'), curatedData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextFilter",
            "id": "interface-TextFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextEquality",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextFiltererMetadata",
            "id": "interface-TextFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFilterAutocomplete<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TrackedDuration",
            "id": "interface-TrackedDuration-bf5585fbba05c0628f30c3be3ac7d56641dfc062fcefc71aa027be6d4d92689e2b8464c210d48639315fdb995f9a628098bdd821267e2d8a000b1744dab046fc",
            "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MemberActivityRecentStats, MemberActivityRecentStatsActivity } from '../../models/MemberActivityRecentStats';\r\nimport { MemberActivityStats } from '../../models/MemberActivityStat';\r\n// import { MemberActivityRecentStats } from 'projects/components/src/lib/clan-roster-activity-table/clan-roster-activity-table.component';\r\nimport { groupActivities } from '../../utility/group-activity-by-date';\r\n//import { getBungieStartDate } from '../../utility/date-utils';\r\n//import { groupActivitiesByWeek } from '../../utility/group-activity-by-week';\r\nexport interface TrackedDuration {\r\n  id: string;\r\n  description: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n\r\nexport function clanMemberRecentActivitySerializer(\r\n  activity: MemberActivityStats,\r\n  trackedDates: TrackedDuration[]\r\n): MemberActivityRecentStats {\r\n  // let lastWeek = 0;\r\n  // let lastMonth = 0;\r\n  // let lastNinety = 0;\r\n  // let lastSeason = 0;\r\n  // let thisSeason = 0;\r\n  const today = new Date();\r\n  // const lwDate = new Date(today.setDate(today.getDate() - 7));\r\n  // const lmDate = new Date(today.setDate(today.getDate() - 30));\r\n  // const l90Date = new Date(today.setDate(today.getDate() - 90));\r\n\r\n  const runningTrackedNumbers = {};\r\n  trackedDates.forEach((trackedDate) => {\r\n    runningTrackedNumbers[trackedDate.id] = 0;\r\n  });\r\n\r\n  if (!activity || trackedDates.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  activity.activities.forEach((x) => {\r\n    const actDate = new Date(x.period);\r\n    const actSeconds = x.values['activityDurationSeconds'].basic.value;\r\n\r\n    trackedDates.forEach((trackedDate) => {\r\n      if (new Date(trackedDate.startDate) < actDate && new Date(trackedDate.endDate) > actDate) {\r\n        runningTrackedNumbers[trackedDate.id] += actSeconds;\r\n      }\r\n    });\r\n\r\n    // if (lwDate < actDate) {\r\n    //   lastWeek += actSeconds;\r\n    // }\r\n    // if (lmDate < actDate) {\r\n    //   lastMonth += actSeconds;\r\n    // }\r\n    // if (l90Date < actDate) {\r\n    //   lastNinety += actSeconds;\r\n    // }\r\n  });\r\n\r\n  return {\r\n    activities: groupActivitiesByWeek(activity.activities),\r\n    id: activity.id,\r\n    // lastMonth: lastMonth,\r\n    // lastNinetyDays: lastNinety,\r\n    // lastWeek: lastWeek,\r\n    // lastSeason: lastSeason,\r\n    // thisSeason: thisSeason\r\n    trackedDates: { ...runningTrackedNumbers }\r\n  } as MemberActivityRecentStats;\r\n}\r\n\r\nfunction groupActivitiesByWeek(data): Array<MemberActivityRecentStatsActivity> {\r\n  const raw = data.map((x) => {\r\n    return {\r\n      date: getBungieStartDate(new Date(x.period)),\r\n      seconds: x.values.activityDurationSeconds.basic.value\r\n    };\r\n  });\r\n  // const obj2 = raw.reduce((prev, cur) => {\r\n  //   const index = prev.findIndex((x) => x.date === cur.date);\r\n  //   if (index > -1) {\r\n  //     prev[index].seconds += cur.seconds;\r\n  //   } else {\r\n  //     prev.push({ date: cur.date, seconds: cur.seconds });\r\n  //   }\r\n\r\n  //   // if (prev.hasOwnProperty(cur.date)) {\r\n  //   //   prev[cur.date] = prev[cur.date] + cur.seconds;\r\n  //   // } else {\r\n  //   //   prev[cur.date] = cur.seconds;\r\n  //   // }\r\n  //   return prev;\r\n  // }, []);\r\n\r\n  return groupActivities(raw);\r\n}\r\nexport function getBungieStartDate(date): Date {\r\n  const offset = date.getDay() >= 2 ? 2 : -5;\r\n  // Clone date to prevent mutation\r\n  const cDate = new Date(date.toDateString());\r\n  const newDate = new Date(cDate.setDate(date.getDate() - date.getDay() + offset));\r\n\r\n  return newDate;\r\n}\r\n\r\n// function getBungieStartDate(date) {\r\n//   const offset = date.getDay() >= 2 ? 2 : -5;\r\n//   return formatDate(new Date(date.setDate(date.getDate() - date.getDay() + offset)));\r\n// }\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserUserInfoCard",
            "id": "interface-UserUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-07c26420428126b445e4ebe2ecb7b033c295492a3edf44fdb1f7a257ec0042afe8f137c600f060b5cc560d14fe9c82a0852ba7b2b47dec39390904147e19af9d",
            "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataSource, Filterer, Sorter, SorterMetadata, Viewer, ViewerMetadata } from '@destiny/components';\r\nimport { CollectionDefinition, MetricDefinition, RecordDefinition } from '@destiny/data/models';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { map, Observable, of, tap } from 'rxjs';\r\nimport { ActivitiesService } from '../data-access/activities.service';\r\nimport { ACTIVITY_FILTERER_METADATA } from './activity-table-metadata/ActivityTableFilterer';\r\nimport { ACTIVITY_SORTER_METADATA } from './activity-table-metadata/ActivityTableSorter';\r\nimport { ACTIVITY_VIEWER_METADATA } from './activity-table-metadata/ActivityTableViewer';\r\ninterface ViewContext {\r\n  item: ClanMemberProfile;\r\n}\r\n@Component({\r\n  selector: 'app-activity-table',\r\n  templateUrl: './activity-table.component.html',\r\n  styleUrls: ['./activity-table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityTableComponent implements OnChanges {\r\n  @Input() title: string;\r\n  @Input() metricDefinitions: MetricDefinition[];\r\n  @Input() collectionDefinitions: CollectionDefinition[];\r\n  @Input() recordDefinitions: RecordDefinition[];\r\n\r\n  isLoading = true;\r\n  activityViewer: Viewer;\r\n  activityFilterer = new Filterer({ metadata: ACTIVITY_FILTERER_METADATA });\r\n  activitySorter;\r\n  activityInfo$: Observable<DataSource>;\r\n\r\n  constructor(private activitiesService: ActivitiesService, private route: ActivatedRoute) {}\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['metricDefinitions'] || simpleChanges['collectionDefinitions']) {\r\n      // Set Viewer\r\n      const initialViewerData = new Map(ACTIVITY_VIEWER_METADATA);\r\n      const initialSorterData = new Map(ACTIVITY_SORTER_METADATA);\r\n      this.metricDefinitions.forEach((md) => {\r\n        initialViewerData.set(md.hash.toString(), this.createViewerMetric(md));\r\n        initialSorterData.set(md.hash.toString(), this.createSorterMetric(md));\r\n      });\r\n\r\n      this.collectionDefinitions.forEach((md) => {\r\n        initialViewerData.set(md.hash.toString(), this.createViewerCollection(md));\r\n        initialSorterData.set(md.hash.toString(), this.createSorterCollection(md));\r\n      });\r\n\r\n      this.recordDefinitions.forEach((md) => {\r\n        initialViewerData.set(md.hash.toString(), this.createViewerRecord(md));\r\n      });\r\n\r\n      this.activityViewer = new Viewer({\r\n        metadata: initialViewerData,\r\n        contextProvider: this.createViewContextProvider()\r\n      });\r\n\r\n      this.activitySorter = new Sorter({ metadata: initialSorterData });\r\n\r\n      this.activityInfo$ = this.activitiesService\r\n        .getProfiles(\r\n          this.metricDefinitions.map((md) => md.hash),\r\n          this.collectionDefinitions.map((md) => md.hash),\r\n          this.recordDefinitions.map((md) => md.hash)\r\n        )\r\n        .pipe(\r\n          map((ds) => {\r\n            return new DataSource<ClanMemberProfile>({ data: ds });\r\n          }),\r\n          tap((x) => {\r\n            this.isLoading = false;\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  // TODO: Eventually add formatting. Metric definitions have the formatting\r\n  createViewerMetric(definition: MetricDefinition): ViewerMetadata<ClanMemberProfile, ViewContext> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      tooltip: definition.displayProperties.description,\r\n      plainText: (item: ClanMemberProfile) =>\r\n        `${item.profile.metrics.data.metrics[definition.hash]?.objectiveProgress?.progress.toString()}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          classList: 'text-center',\r\n          text: item.profile.metrics.data.metrics[definition.hash].objectiveProgress.progress.toString()\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  hasItem(value): boolean {\r\n    if (value === undefined || value.state === undefined) {\r\n      return false;\r\n    }\r\n    return (value?.state & 1) === 0;\r\n  }\r\n\r\n  hasCompleted(value): boolean {\r\n    if (value === undefined || value.state === undefined) {\r\n      console.log('fail', value);\r\n      return false;\r\n    }\r\n    // return value.objectives[value.objectives.length -1]?.complete;\r\n    if (value.objectives) {\r\n      return value.objectives.every((x) => x.complete);\r\n    }\r\n    if (value.intervalObjectives) {\r\n      return value.intervalObjectives.every((x) => x.complete);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  createViewerCollection(definition: CollectionDefinition): ViewerMetadata<ClanMemberProfile, ViewContext> {\r\n    return {\r\n      // label: definition.displayProperties.name,\r\n      label: definition.displayProperties.hasIcon\r\n        ? `<img class=\"table-icon\" src=\"https://www.bungie.net/${definition.displayProperties.icon}\" alt=\"${definition.displayProperties.name}\"/>`\r\n        : definition.displayProperties.name,\r\n      plainText: (item: ClanMemberProfile) =>\r\n        `${this.hasItem(item.profile.profileCollectibles?.data?.collectibles[definition.hash]) ? 'X' : ''}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          classList: 'text-center',\r\n          text: this.hasItem(item.profile.profileCollectibles?.data?.collectibles[definition.hash]) ? 'X' : ''\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  createViewerRecord(definition: MetricDefinition): ViewerMetadata<ClanMemberProfile, ViewContext> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      tooltip: definition.displayProperties.description,\r\n      plainText: (item: ClanMemberProfile) =>\r\n        `${this.hasCompleted(this.getRecord(definition, item.profile)) ? 'X' : ''}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          classList: 'text-center',\r\n          text: `${this.hasCompleted(this.getRecord(definition, item.profile)) ? 'X' : ''}`\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  createSorterMetric(definition: MetricDefinition): SorterMetadata<ClanMemberProfile> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      comparator: (a, b) =>\r\n        a.profile.metrics?.data?.metrics[definition.hash]?.objectiveProgress.progress <\r\n        b.profile.metrics?.data?.metrics[definition.hash]?.objectiveProgress.progress\r\n          ? -1\r\n          : 1\r\n    };\r\n  }\r\n  createSorterCollection(definition: MetricDefinition): SorterMetadata<ClanMemberProfile> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      comparator: (a, b) =>\r\n        this.hasItem(a.profile.profileCollectibles.data.collectibles[definition.hash]) <\r\n        this.hasItem(a.profile.profileCollectibles.data.collectibles[definition.hash])\r\n          ? -1\r\n          : 1\r\n    };\r\n  }\r\n\r\n  createViewContextProvider() {\r\n    return of((item: ClanMemberProfile) => ({\r\n      item\r\n    }));\r\n  }\r\n\r\n  getRecord(definition: RecordDefinition, profile) {\r\n    return definition.scope === 1\r\n      ? profile.characterRecords?.data\r\n        ? (Object.values(profile.characterRecords.data)[0] as unknown as any)?.records[definition.hash]\r\n        : undefined\r\n      : profile.profileRecords?.data?.records[definition.hash];\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-8eeb9f4b338de54c60c2c5e78b84f2ff62b59370b30860306f9ab85b5c13681118e99303af8b5bcf45fc3fa17dda732d584f63fc20122d4f2eb2e1a9033b1e4b-1",
            "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe } from '@destiny/components/pipes';\r\nimport { PlaytimePipe } from '@destiny/components/pipes/playtime';\r\nimport { getBungieDisplayName } from '@destiny/data/utility';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\ninterface ViewContext {\r\n  item: ClanMemberProfile;\r\n}\r\nexport const ACTIVITY_VIEWER_METADATA = new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  // [\r\n  //   'playerName',\r\n  //   {\r\n  //     label: 'Display Name',\r\n  //     isSticky: true,\r\n  //     plainText: (item: ClanMemberProfile) => `${item.member?.destinyUserInfo?.displayName}`,\r\n  //     render: (item: ClanMemberProfile) => {\r\n  //       return {\r\n  //         text: `${item.member?.destinyUserInfo?.displayName}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      isSticky: true,\r\n      plainText: (item: ClanMemberProfile) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanMemberProfile) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ClanMemberProfile) => `${item.clan.clanName}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n]);\r\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ViewContext-1"
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-b96adc631439ac4a750901019c60c1c55f919f472685d53efcc0acc65db85060ea00f76b3fa5d9288ee06ba509b016749da34c94f0231c51c94b17a28c4a99a2-2",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { MemberTypeComponent } from '@destiny/components/icons';\r\nimport { ClassCellComponent } from '../../components/class-cell/class-cell.component';\r\nimport { MembershipTypes } from '@destiny/data/models';\r\nimport { ClanRosterItem } from '@features/clans-roster/models/ClanRosterItem';\r\n\r\ninterface ViewContext {\r\n  item: ClanRosterItem;\r\n  datePipe: BungieDatePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\n\r\nexport const CLAN_ROSTER_VIEWER_METADATA = new Map<string, ViewerMetadata<ClanRosterItem, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      //  labelClass: 'text-header-center',\r\n      plainText: (item: ClanRosterItem) => `${getMembershipType(item.member.destinyUserInfo.membershipType)}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        //        styles: {},\r\n        classList: ['text-center'],\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member?.destinyUserInfo?.membershipType || 0 }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      labelClass: '',\r\n      isSticky: true,\r\n      plainText: (item: ClanRosterItem) => `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Unique Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.uniqueName || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.uniqueName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'psnName',\r\n    {\r\n      label: 'PSN Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.psnDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.psnDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'xboxName',\r\n    {\r\n      label: 'XBox Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.xboxDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.xboxDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'steamName',\r\n    {\r\n      label: 'Steam Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.steamDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.steamDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'twitchName',\r\n    {\r\n      label: 'Twitch Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.twitchDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.bungieInfo?.twitchDisplayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanRosterItem) => {\r\n        const characterIds = item.profile?.profile?.data?.characterIds;\r\n        return {\r\n          classList: 'characters-cell',\r\n          children: characterIds?.map((id) => {\r\n            return {\r\n              classList: 'character-cell',\r\n              component: ClassCellComponent,\r\n              data: {\r\n                characterHash: id,\r\n                profile: item.profile\r\n              }\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: 'power-cell',\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'rank',\r\n    {\r\n      label: 'Guardian Rank',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profile?.data?.currentGuardianRank}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profile?.data?.currentGuardianRank}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeRank',\r\n    {\r\n      label: 'Lifetime Guardian Rank',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profile?.data?.lifetimeHighestGuardianRank}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profile?.data?.lifetimeHighestGuardianRank}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileRecords?.data?.activeScore}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileRecords?.data?.lifetimeScore}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clan',\r\n    {\r\n      label: 'Clan',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.clan.clanName}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${item.clan.clanName}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'bungieProfileCreation',\r\n    {\r\n      label: 'Bungie Join Date',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.bungieInfo?.firstAccess || (new Date() as unknown as Date))}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.bungieInfo?.firstAccess || (new Date() as unknown as Date))}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n]);\r\n\r\nfunction getMembershipType(value) {\r\n  switch (value) {\r\n    case MembershipTypes.Xbox:\r\n      return 'xbox';\r\n    case MembershipTypes.Psn:\r\n      return 'playstation';\r\n    case MembershipTypes.Steam:\r\n      return 'steam';\r\n    case MembershipTypes.Stadia:\r\n      return 'stadia';\r\n    default:\r\n      return ``;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "datePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDatePipe",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanRosterItem",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ViewContext-2"
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-5b268247e546779a92bb9214b6719a1c7a3477e72696a1c4646fb5705861f2048d91beafa0e07bc18cf158f2986107d1bb28aeef95a5be338cc82b1255b077ba-3",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExporterMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { MembershipTypes } from '@destiny/data/models/enums';\r\nimport { ProfileRecentActivity } from '../../models/profile-recent-activity';\r\ninterface ViewContext {\r\n  item: ProfileRecentActivity;\r\n  playTimePipe: PlaytimePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\n// import { MockListItem } from './ListItems';\r\nexport const CLAN_ROSTER_EXPORTER_METADATA = new Map<string, ExporterMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastWeek)}`\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastMonth)}`\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastNinetyDays)}`\r\n  //   }\r\n  // ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      text: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile?.data?.dateLastPlayed as unknown as Date)}`\r\n    }\r\n  ]\r\n]);\r\n\r\nconst convertToMinutes = (totalSeconds) => String(Math.floor(totalSeconds / 60));\r\n",
            "properties": [
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileRecentActivity",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "playTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlaytimePipe",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "ViewContext-3"
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-374608ee094776ba9f0c9f18461670f61f13bc2e653132126b6a35de6bf3e6b33cf091609200eb69ea2a95d36d8039bf95303860e10cf2fbf08739da2515727e-4",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe } from '@destiny/components/pipes';\r\nimport { PlaytimePipe } from '@destiny/components/pipes/playtime';\r\nimport { ProfileRecentActivity } from '../../models/profile-recent-activity';\r\n\r\ninterface ViewContext {\r\n  item: ProfileRecentActivity;\r\n  playTimePipe: PlaytimePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\nexport const RECENT_ACTIVITY_VIEWER_METADATA = new Map<string, ViewerMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clanMember?.destinyUserInfo?.displayName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats..lastNinetyDays)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n]);\r\n",
            "properties": [
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileRecentActivity",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "playTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlaytimePipe",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "ViewContext-4"
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-d405b95d0cac5af8f7a7149809f4ce774f76ee99050b2ad90c8c51ac1a53d672f4aa0f684957b97c8afe792deeda52b4aa191153223a0edf058d5680ae8341a7-5",
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TABLE_DONE, TABLE_NOT_DONE } from '@core/constants';\r\nimport { ViewerMetadata } from '@destiny/components';\r\n\r\nimport { getBungieDisplayName, getMemberName } from '@destiny/data/utility';\r\nimport { SealClanMember } from '../../models/seal-clan-member';\r\n\r\ninterface ViewContext {\r\n  item: SealClanMember;\r\n}\r\n\r\nexport const SEAL_DETAILS_VIEWER_METADATA = new Map<string, ViewerMetadata<SealClanMember, ViewContext>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     labelClass: '',\r\n  //     plainText: (item: SealClanMember) => `${getMemberName(item.clanMember)}`,\r\n  //     render: (item: SealClanMember) => ({ text: `${getMemberName(item.clanMember)}` })\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: SealClanMember) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: SealClanMember) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      labelClass: '',\r\n      plainText: (item: SealClanMember) => `${item.clan.clanName}`,\r\n      render: (item: SealClanMember) => ({ text: `${item.clan.clanName}` })\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: item.sealProgression.isCompleted ? TABLE_DONE : TABLE_NOT_DONE\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isGilded ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: item.sealProgression.isGilded ? TABLE_DONE : TABLE_NOT_DONE\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.gildedCount || ''}`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.gildedCount || ''}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed / Total',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) =>\r\n        `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Completed',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.completionPercentage}%`\r\n      })\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n]);\r\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealClanMember",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "ViewContext-5"
        },
        {
            "name": "ViewerMetadata",
            "id": "interface-ViewerMetadata-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "isSticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "labelClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "plainText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "render",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerOptions",
            "id": "interface-ViewerOptions-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerContextProvider<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerState",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewerMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerState",
            "id": "interface-ViewerState-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewLabel",
            "id": "interface-ViewLabel-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isSticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "labelClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ActivitiesService",
            "id": "injectable-ActivitiesService-57767651b51cbb137862bdf98ff3fea7d0c9788d30d5c227304d0c5cc788f07d43c6060872ff0712091b5a90737eb73c723139e7429ff56e0d995ddbb2c55902",
            "file": "projects/clan-dashboard/src/app/features/activities/data-access/activities.service.ts",
            "properties": [
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.store.select(selectAllClansMembersProfiles)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "clanProfilesLoading$",
                    "defaultValue": "this.store.select(selectClanMemberProfileStateLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methods": [
                {
                    "name": "getActivityById",
                    "args": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCuratedActivities",
                    "args": [],
                    "optional": false,
                    "returnType": "CuratedActivityGroupDefinitions[]",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCuratedCollections",
                    "args": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCuratedMetrics",
                    "args": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCuratedRecords",
                    "args": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfiles",
                    "args": [
                        {
                            "name": "metricHashes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "recordHashes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanMemberProfile[]>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metricHashes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recordHashes",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n// import { ActivityDefinitionService } from '@core/definition-services/activity-definition.service';\r\nimport { DefinitionService } from '@core/definition-services/definition.service';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { SeasonService } from '@core/services/season.service';\r\nimport {\r\n  selectAllClansMembersProfiles,\r\n  selectClanMemberProfileStateLoading\r\n} from '@core/store/clans-members-profiles/clan-members-profiles.selectors';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { Store } from '@ngrx/store';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { from, map, mergeMap, Observable, switchMap, take, toArray } from 'rxjs';\r\nimport { ActivitiesShellModule } from '../activities-shell/activities-shell.module';\r\nimport {\r\n  CuratedActivityGroupDefinitions,\r\n  CURATED_ACTIVITIES_ALL,\r\n  CURATED_ACTIVITY_GROUPS\r\n} from '../models/CuratedActivities';\r\n\r\n@Injectable({\r\n  providedIn: ActivitiesShellModule\r\n})\r\nexport class ActivitiesService {\r\n  constructor(\r\n    //private activityDefinitionService: ActivityDefinitionService,\r\n    private definitionService: DefinitionService,\r\n    private store: Store,\r\n    private memberService: ClansMembersService,\r\n    private profileService: ClanProfileService,\r\n    private seasonService: SeasonService\r\n  ) {}\r\n\r\n  getCuratedActivities(): CuratedActivityGroupDefinitions[] {\r\n    const groups = CURATED_ACTIVITY_GROUPS;\r\n\r\n    return groups.map((group) => {\r\n      return {\r\n        title: group.title,\r\n        activities: group.activities.map((ca) => this.definitionService.activityDefinition[ca.hash])\r\n      };\r\n    });\r\n  }\r\n\r\n  getActivityById(hash: number) {\r\n    return this.definitionService.activityDefinition[hash];\r\n  }\r\n\r\n  getCuratedMetrics(hash: number): any[] {\r\n    const curatedMetrics = CURATED_ACTIVITIES_ALL.find((ca) => ca.hash === hash).metrics || [];\r\n\r\n    return curatedMetrics.map((cm) => this.definitionService.metricDefinitions[cm]);\r\n  }\r\n\r\n  getCuratedCollections(hash: number): any[] {\r\n    const curatedCollections = CURATED_ACTIVITIES_ALL.find((ca) => ca.hash === hash).collections || [];\r\n    return curatedCollections.map((cm) => this.definitionService.collectibleDefinition[cm]);\r\n  }\r\n  getCuratedRecords(hash: number): any[] {\r\n    const curatedRecords = CURATED_ACTIVITIES_ALL.find((ca) => ca.hash === hash).records || [];\r\n    return curatedRecords.map((cm) => this.definitionService.recordDefinition[cm]);\r\n  }\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.store.select(selectAllClansMembersProfiles); //.pipe(\r\n  clanProfilesLoading$: Observable<boolean> = this.store.select(selectClanMemberProfileStateLoading); //\r\n\r\n  getProfiles(\r\n    metricHashes: number[],\r\n    collectionHashes: number[],\r\n    recordHashes: number[]\r\n  ): Observable<ClanMemberProfile[]> {\r\n    return this.memberService.clanMembers$.pipe(\r\n      switchMap((clansAndMembers) => {\r\n        return from(clansAndMembers).pipe(\r\n          mergeMap((clanAndMembers) => {\r\n            return this.profileService\r\n              .getSerializedProfilesFromCache(\r\n                clanAndMembers.clan.clanId,\r\n                clanAndMembers.members,\r\n                this.seasonService.getSeasonProgressionHashes(),\r\n                collectionHashes,\r\n                recordHashes,\r\n                metricHashes\r\n              )\r\n              .pipe(\r\n                switchMap((memberProfiles) => {\r\n                  return clanAndMembers.members.map((member) => {\r\n                    return {\r\n                      member,\r\n                      profile: memberProfiles.find((m) => getMemberProfileId(m) === getClanMemberId(member)),\r\n                      clan: {\r\n                        clanId: clanAndMembers.clan.clanId,\r\n                        clanName: clanAndMembers.clan.clanName,\r\n                        clanTag: clanAndMembers.clan.clanTag\r\n                      }\r\n                    };\r\n                  });\r\n                })\r\n              );\r\n          }),\r\n          toArray(),\r\n          map((x) => x.flatMap((y) => y))\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ActivityModeService",
            "id": "injectable-ActivityModeService-5f9402a94025e416760ee681ef750ec21741d231bda1f3a91289d1f7d97062f1c4ba37577e24c362c74ad01e6273424ca68c73a3e7f0b5ef402b45243aa5404a",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/data-access/activity-mode.service.ts",
            "properties": [
                {
                    "name": "ignoredModes",
                    "defaultValue": "[\r\n    16, // NFStrikes - no stats\r\n    66, // Forges\r\n    17, // Prestiege NF\r\n    58, // Heroic adv\r\n    47, // Scored Pres NF\r\n    77, // Menagerie\r\n    78, // Vex offensive\r\n    83, // SUndial\r\n    76, // Reckoning\r\n    72, // Clash comp\r\n    74, // Control comp,\r\n    67, // Salvage\r\n    42, // Trials 9 survival\r\n    15, // crimson doubles\r\n    39, // Trials of nine\r\n    38, // Countdown\r\n    49, // Doubles\r\n    41, // Trials 9 count\r\n    50, // Doubles\r\n    31, // Supremecy.\r\n    68, // IB Salvage\r\n    43, // IB Control\r\n    44, // IB control\r\n    45, // IB Supremacy\r\n    90, // IB Rift\r\n    61, // Scorched\r\n    60, // Lockdown\r\n    65, // Break through\r\n    80, // Elimination\r\n    89, // Zone control\r\n    75, // GB Prime\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActivityModeDefinition",
                    "args": [
                        {
                            "name": "modeType",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modeType",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllActivitiesByMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupedActivityModes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ActivityModeShellModule } from '../activity-mode-shell/activity-mode-shell.module';\r\nimport { DESTINY_ACTIVITY_MODES } from '@destiny/data/models';\r\nimport { DefinitionService } from '@core/definition-services/definition.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { of, switchMap } from 'rxjs';\r\nimport { ProfileRecentActivityWorkerService } from '../../../workers/profile-recent-activity/profile-recent-activity.service';\r\nimport { DestinyDefinitionsDestinyActivityModeDefinition } from 'bungie-api-angular';\r\nimport { TrackedDuration } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer';\r\n@Injectable({\r\n  providedIn: ActivityModeShellModule\r\n})\r\nexport class ActivityModeService {\r\n  constructor(\r\n    private definitionService: DefinitionService,\r\n    private clansDetailsService: ClansMembersService,\r\n    private profileRecentActivityWorkerService: ProfileRecentActivityWorkerService\r\n  ) {}\r\n  readonly ignoredModes = [\r\n    16, // NFStrikes - no stats\r\n    66, // Forges\r\n    17, // Prestiege NF\r\n    58, // Heroic adv\r\n    47, // Scored Pres NF\r\n    77, // Menagerie\r\n    78, // Vex offensive\r\n    83, // SUndial\r\n    76, // Reckoning\r\n    72, // Clash comp\r\n    74, // Control comp,\r\n    67, // Salvage\r\n    42, // Trials 9 survival\r\n    15, // crimson doubles\r\n    39, // Trials of nine\r\n    38, // Countdown\r\n    49, // Doubles\r\n    41, // Trials 9 count\r\n    50, // Doubles\r\n    31, // Supremecy.\r\n    68, // IB Salvage\r\n    43, // IB Control\r\n    44, // IB control\r\n    45, // IB Supremacy\r\n    90, // IB Rift\r\n    61, // Scorched\r\n    60, // Lockdown\r\n    65, // Break through\r\n    80, // Elimination\r\n    89, // Zone control\r\n    75, // GB Prime\r\n  ];\r\n\r\n  getActivityModeDefinition(modeType: number) {\r\n    const x = Object.keys(this.definitionService.activityModeDefinition).map(\r\n      (x) => this.definitionService.activityModeDefinition[x]\r\n    ) as DestinyDefinitionsDestinyActivityModeDefinition[];\r\n    return x.find((y) => y.modeType === modeType);\r\n  }\r\n\r\n  getGroupedActivityModes() {\r\n    const groups = DESTINY_ACTIVITY_MODES;\r\n    const definitions = Object.keys(this.definitionService.activityModeDefinition).map(\r\n      (x) => this.definitionService.activityModeDefinition[x]\r\n    );\r\n    return groups.map((x) => {\r\n      return {\r\n        group: x,\r\n        activities: definitions\r\n          .filter(\r\n            (mode) =>\r\n              mode.activityModeCategory === x.id &&\r\n              mode.redacted === false &&\r\n              mode.blacklisted === false &&\r\n              mode.display === true &&\r\n              this.ignoredModes.indexOf(mode.modeType) === -1\r\n          )\r\n          .sort((a, b) => a.order - b.order)\r\n      };\r\n    });\r\n  }\r\n\r\n  getAllActivitiesByMode(mode: number, trackedDates: TrackedDuration[]) {\r\n    return this.clansDetailsService.clanMembersProfiles$.pipe(\r\n      switchMap((clanMembersProfiles) => {\r\n        return this.profileRecentActivityWorkerService.getAllRecentClanActivitiesByActivityModeId(\r\n          clanMembersProfiles,\r\n          trackedDates,\r\n          mode\r\n        );\r\n        return of(clanMembersProfiles);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clansDetailsService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clansDetailsService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BungieInfoUpdaterService",
            "id": "injectable-BungieInfoUpdaterService-0f127b21806f0f7bbac740057d3bc6da56211f406550fd7722e0182e47234aa3169d9b1e5fa593b3248a3c42fb80612f1632fd23f3a159f5b923a7e124b86f60",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/bungie-info-updater.service.ts",
            "properties": [
                {
                    "name": "infoService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieInfoWorkerService",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "updateAllClansBungieInfo",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBungieInfo",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { updateBungieInfoSync, updateClanProfileSync } from '@core/store/clans';\r\nimport { addNotification, removeNotification, updateNotification } from '@core/store/notifications';\r\nimport { Store } from '@ngrx/store';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { filter, from, map, mergeMap, Observable, of, take, toArray } from 'rxjs';\r\n\r\nimport { BungieInfoWorkerService } from '../../../workers/bungie-info/bungie-info.service';\r\nimport { ClanConfigMembers } from './clan-updater.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BungieInfoUpdaterService {\r\n  infoService: BungieInfoWorkerService;\r\n  constructor(private store: Store, private bungieInfoWorker: BungieInfoWorkerService, private appConfig: AppConfig) {\r\n    // const clanDB = new ClanDatabase();\r\n    // this.infoService = new BungieInfoWorkerService(clanDB, appConfig.apiKey);\r\n  }\r\n\r\n  updateAllClansBungieInfo(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      // TODO Verify Merge Map is appropriate for this.\r\n      mergeMap((x) => {\r\n        return this.updateBungieInfo(x).pipe(map((cm) => cm));\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  updateBungieInfo(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.bungieInfoUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      this.store.dispatch(\r\n        addNotification({\r\n          notification: {\r\n            id: 'bungieInfo',\r\n            title: `Updating ${clan.clanConfig.clanName} Bungie Info`,\r\n            data: { progress: 0, complete: 0, total: clan.members.length }\r\n          }\r\n        })\r\n      );\r\n      const progress = (progressCount) => {\r\n        this.store.dispatch(\r\n          updateNotification({\r\n            notification: {\r\n              id: 'bungieInfo',\r\n              title: `Updating ${clan.clanConfig.clanName} Bungie Info`,\r\n              data: {\r\n                progress: progressCount / clan.members.length,\r\n                complete: progressCount,\r\n                total: clan.members.length\r\n              }\r\n            }\r\n          })\r\n        );\r\n      };\r\n      return this.bungieInfoWorker.updateAllBungieInfoCache(clan.clanConfig.clanId, clan.members, progress).pipe(\r\n        take(1),\r\n        map((x) => {\r\n          // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n          this.store.dispatch(\r\n            removeNotification({\r\n              notification: {\r\n                id: 'bungieInfo',\r\n                title: `Updating ${clan.clanConfig.clanName} Bungie Info`,\r\n                data: { progress: clan.members.length, complete: clan.members.length, total: clan.members.length }\r\n              }\r\n            })\r\n          );\r\n\r\n          // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n          this.store.dispatch(updateBungieInfoSync({ clanId: clan.clanConfig.clanId }));\r\n\r\n          //\r\n          // console.log('------------- dispatch update ------------------');\r\n          // this.clanMemberService.forceReload();\r\n          return {\r\n            ...clan,\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    return of(clan);\r\n    // return this.profileService.getSerializedProfilesFromCache(clan.clanConfig.clanId, clan.members, [], [], []).pipe(\r\n    //   map((x) => {\r\n    //     return { ...clan, profiles: x };\r\n    //   })\r\n    // );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieInfoWorker",
                        "type": "BungieInfoWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieInfoWorker",
                        "type": "BungieInfoWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BungieInfoWorkerService",
            "id": "injectable-BungieInfoWorkerService-83b1753e120e4424cd45201308acfedf13120913f299ee3d11ca9c885c391e5da1d5ad727d8f4c344f8a133a4a0973767da6703ce90c41cb7e83a04555cf5d15",
            "file": "projects/clan-dashboard/src/app/workers/bungie-info/bungie-info.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllBungieInfoCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {  Observable, of, Subject } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BungieInfoWorkerService {\r\n  constructor() {}\r\n  updateAllBungieInfoCache(clanId: string, clanMembers: any[], progress?: (done) => any): Observable<boolean> {\r\n    const infoCacheComplete: Subject<boolean> = new Subject();\r\n    const worker = new Worker(new URL('./bungie-info-updater.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        infoCacheComplete.next(true);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return infoCacheComplete;\r\n  }\r\n\r\n  getAllActivitiesFromCache(clanId: string, memberProfiles: any[]): Observable<any> {\r\n    const info = new Subject();\r\n    const worker = new Worker(new URL('./bungie-info-getter.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      info.next(data.data);\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      memberProfiles,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return info;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ClanDetailService",
            "id": "injectable-ClanDetailService-5b5351e6e9cadcdf1c9121fda323e137d19afe09453e164724b498fcbe60a4b5972cce708f39a93551a30280d0e9c3fdf822c307b78ac2c9b61b2811ce05c306",
            "file": "projects/clan-dashboard/src/app/features/clan-details/data-access/clan-detail.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupV2Card, GroupV2Service } from 'bungie-api-angular';\r\nimport { catchError, map, of } from 'rxjs';\r\n\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { addClan, removeClan, resetClan } from '@core/store/clans/clans.actions';\r\n\r\n@Injectable({\r\n  //Note can't figure out how to provide in the module I want.\r\n  providedIn: 'root'\r\n})\r\nexport class ClanDetailService {\r\n  constructor(\r\n    private groupService: GroupV2Service,\r\n    private httpClient: HttpClient,\r\n    private store: Store,\r\n    private db: ClanDatabase\r\n  ) {}\r\n\r\n  getClan(clanId) {\r\n    return this.groupService.groupV2GetGroup(clanId).pipe(\r\n      map((clanResult) => {\r\n        return clanResult.Response.detail;\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error.ErrorStatus === 'ClanNotFound') {\r\n          return of({\r\n            groupId: clanId,\r\n            name: `Clan Not Found - ${clanId}`,\r\n            clanInfo: { clanCallsign: '' }\r\n          });\r\n        }\r\n\r\n        throw Error(`Clan with id ${clanId} returned error`);\r\n      })\r\n    );\r\n  }\r\n\r\n  removeClan(clanId: string) {\r\n    this.store.dispatch(removeClan({ clanId }));\r\n    this.db.purgeDatabase(clanId);\r\n  }\r\n\r\n  resetClan(clan: GroupsV2GroupV2Card) {\r\n    this.db.purgeDatabase(clan.groupId.toString());\r\n    this.store.dispatch(\r\n      resetClan({ clanId: clan.groupId.toString(), clanName: clan.name, clanTag: clan.clanInfo.clanCallsign || '' })\r\n    );\r\n  }\r\n\r\n  addClan(clan: GroupsV2GroupV2Card) {\r\n    this.store.dispatch(\r\n      addClan({ clanId: clan.groupId.toString(), clanName: clan.name, clanTag: clan.clanInfo.clanCallsign || '' })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanDetailsService",
            "id": "injectable-ClanDetailsService-ff3a13ef282613dbca6b2a38fa8fddf875cc2c0c8fc6741448a6c28ce9a2826d3972ec3a3058f40910bbb75507e7c27ab7f3768bbde926c76075c065398f473b",
            "file": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanDetails'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanDetails",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreOffline",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupV2Service } from 'bungie-api-angular';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { clanDetailSerializer } from './clan-detail-serializer';\r\nimport { CLAN_LEVEL_HASH } from '../../hashes/clan-details';\r\n\r\n@Injectable()\r\nexport class ClanDetailsService extends BaseClanService {\r\n  // private tableName: StoreId = 'ClanDetails';\r\n  private rowId = 'ClanDetails';\r\n\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n  private getClanDetailsFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetGroup(clanId as unknown as number);\r\n  }\r\n\r\n  private getClanDetails(clanId: string, ignoreOffline: boolean) {\r\n    //console.log(`thinkg ${clanId} ${this.rowId} `);\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        //console.log(cachedData);\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanDetailsFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              const clanDetails = clanDetailSerializer(clanDetail.Response.detail, [CLAN_LEVEL_HASH]);\r\n              this.updateDB(clanId, this.rowId, clanDetails);\r\n\r\n              return clanDetails;\r\n            }\r\n            throw Error('Clan Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (error?.error?.ErrorStatus === 'SystemDisabled' && !ignoreOffline) {\r\n              throw Error('System Offline');\r\n            }\r\n\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getClanDetailsSerialized(clanId: string, ignoreOffline: boolean) {\r\n    return this.getClanDetails(clanId, ignoreOffline);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClanMembersService",
            "id": "injectable-ClanMembersService-621927e444c1fa804e9188f8d03c2618407ebb00476b7357ad29523ed927c081b383792067b983df2827461a794642d1f160ca07a94b78cc723c4449199424da",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanMembers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanMembers",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from, Observable } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n\r\n@Injectable()\r\nexport class ClanMembersService extends BaseClanService implements ClanMembersServiceInterface {\r\n  private rowId = 'ClanMembers';\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n\r\n  private getClanMembersFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetMembersOfGroup(1, clanId as unknown as number);\r\n  }\r\n\r\n  private getClanMembers(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanMembersFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              this.updateDB(clanId, this.rowId, clanDetail.Response.results);\r\n\r\n              return clanDetail.Response.results;\r\n            }\r\n            throw Error('Clan Members Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO do a lightweight cache\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return this.getClanMembers(clanId).pipe(\r\n      map((x) => {\r\n        // TODO; Serialize\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClansDetailsActivitiesService",
            "id": "injectable-ClansDetailsActivitiesService-6fa6ece1d0c3c60c78ed69f6d2ac503572c9e5b223604de475205c148ad25b7df36fc1b01708e290244812d483ca811b56c7502dce3ab1e466c0dfd10f33b13b",
            "file": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details-activities.service.ts",
            "properties": [
                {
                    "name": "activityUpdates$",
                    "defaultValue": "this.store.select(selectAllRecentActivityUpdates)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "areActivitiesUpdating$",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "events$",
                    "defaultValue": "this.activityUpdates$.pipe(\r\n    distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\r\n    tap(() => this.playerActivitiesLoadingSource.next(true)),\r\n    switchMap((y) => {\r\n      return this.clansDetailsService.clanMembersProfiles$.pipe(\r\n        take(1),\r\n        switchMap((x) => {\r\n          return this.profileRecentActivityWorkerService.getAllActivities(x, 'daily');\r\n        })\r\n      );\r\n    }),\r\n    tap(() => this.playerActivitiesLoadingSource.next(false))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "playerActivitiesLoading$",
                    "defaultValue": "this.playerActivitiesLoadingSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "playerActivitiesLoadingSource",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { BehaviorSubject, distinctUntilChanged, Observable, of, switchMap, take, tap } from 'rxjs';\r\nimport { ProfileRecentActivityWorkerService } from '../../../workers/profile-recent-activity/profile-recent-activity.service';\r\nimport { ClansDetailsModule } from '../clans-details/clans-details.module';\r\nimport { ClansDetailsService } from './clans-details.service';\r\nimport { DailyClanAggregateTimeService } from 'projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectAllRecentActivityUpdates } from '@core/store/clans';\r\n\r\n@Injectable({\r\n  providedIn: ClansDetailsModule\r\n})\r\nexport class ClansDetailsActivitiesService {\r\n  constructor(\r\n    private store: Store,\r\n    private clansDetailsService: ClansMembersService,\r\n    private profileRecentActivityWorkerService: ProfileRecentActivityWorkerService\r\n  ) {}\r\n  activityUpdates$ = this.store.select(selectAllRecentActivityUpdates);\r\n  areActivitiesUpdating$ = false;\r\n  playerActivitiesLoadingSource: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  playerActivitiesLoading$: Observable<boolean> = this.playerActivitiesLoadingSource.asObservable();\r\n\r\n  events$ = this.activityUpdates$.pipe(\r\n    distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)),\r\n    tap(() => this.playerActivitiesLoadingSource.next(true)),\r\n    switchMap((y) => {\r\n      return this.clansDetailsService.clanMembersProfiles$.pipe(\r\n        take(1),\r\n        switchMap((x) => {\r\n          return this.profileRecentActivityWorkerService.getAllActivities(x, 'daily');\r\n        })\r\n      );\r\n    }),\r\n    tap(() => this.playerActivitiesLoadingSource.next(false))\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clansDetailsService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clansDetailsService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansDetailsService",
            "id": "injectable-ClansDetailsService-bc60e2f1dcae78aa83ffe54373f1ee6f8d3144186902b9b776fe2bca34bc3a23e700e6c5ab5c5e629a6f1b983569b5f9018dc0c6cb20ab455ed0700d2532ef84",
            "file": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details.service.ts",
            "properties": [
                {
                    "name": "activeClans$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "clanInfo$",
                    "defaultValue": "this.activeClans$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId, true);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.store.select(selectAllClansMembersProfiles)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "clanProfilesLoading$",
                    "defaultValue": "this.store.select(selectClanMemberProfileStateLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "highestPowerBonusMembers$",
                    "defaultValue": "this.clanProfiles$.pipe(\r\n    map((members) => {\r\n      if (members.length > 0) {\r\n        const sortedMembers = members.sort((a, b) => {\r\n          return (a.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus ?? 0) >\r\n            (b.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus ?? 0)\r\n            ? -1\r\n            : 1;\r\n        });\r\n        return sortedMembers.slice(0, 20);\r\n      }\r\n      return [];\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inactiveMemberList$",
                    "defaultValue": "this.clanProfiles$.pipe(\r\n    map((members) => {\r\n      if (members.length > 0) {\r\n        const sortedMembers = members.sort((a, b) => {\r\n          return a.profile?.profile.data.dateLastPlayed > b.profile?.profile.data.dateLastPlayed ? 1 : -1;\r\n        });\r\n        return sortedMembers.slice(0, 20);\r\n      }\r\n      return [];\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "lastLoginMembers$",
                    "defaultValue": "this.clanProfiles$.pipe(\r\n    map((members) => {\r\n      if (members.length > 0) {\r\n        const sortedMembers = members.sort((a, b) => {\r\n          return a.profile?.profile.data.dateLastPlayed > b.profile?.profile.data.dateLastPlayed ? -1 : 1;\r\n        });\r\n        return sortedMembers.slice(0, 20);\r\n      }\r\n      return [];\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methods": [
                {
                    "name": "getClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClans } from '@core/store/clans';\r\nimport {\r\n  selectAllClansMembersProfiles,\r\n  selectClanMemberProfileStateLoading\r\n} from '@core/store/clans-members-profiles/clan-members-profiles.selectors';\r\nimport { from, Observable } from 'rxjs';\r\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\r\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\r\nimport { ClansDetailsModule } from '../clans-details-shell/clans-details.module';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\n@Injectable({\r\n  providedIn: ClansDetailsModule\r\n})\r\nexport class ClansDetailsService {\r\n  activeClans$ = this.store.select(selectEnabledClans);\r\n\r\n  clanProfilesLoading$ = this.store.select(selectClanMemberProfileStateLoading);\r\n  clanProfiles$ = this.store.select(selectAllClansMembersProfiles);\r\n\r\n  clanInfo$ = this.activeClans$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId, true);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  highestPowerBonusMembers$: Observable<ClanMemberProfile[]> = this.clanProfiles$.pipe(\r\n    map((members) => {\r\n      if (members.length > 0) {\r\n        const sortedMembers = members.sort((a, b) => {\r\n          return (a.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus ?? 0) >\r\n            (b.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus ?? 0)\r\n            ? -1\r\n            : 1;\r\n        });\r\n        return sortedMembers.slice(0, 20);\r\n      }\r\n      return [];\r\n    })\r\n  );\r\n\r\n  lastLoginMembers$: Observable<ClanMemberProfile[]> = this.clanProfiles$.pipe(\r\n    map((members) => {\r\n      if (members.length > 0) {\r\n        const sortedMembers = members.sort((a, b) => {\r\n          return a.profile?.profile.data.dateLastPlayed > b.profile?.profile.data.dateLastPlayed ? -1 : 1;\r\n        });\r\n        return sortedMembers.slice(0, 20);\r\n      }\r\n      return [];\r\n    })\r\n  );\r\n  inactiveMemberList$ = this.clanProfiles$.pipe(\r\n    map((members) => {\r\n      if (members.length > 0) {\r\n        const sortedMembers = members.sort((a, b) => {\r\n          return a.profile?.profile.data.dateLastPlayed > b.profile?.profile.data.dateLastPlayed ? 1 : -1;\r\n        });\r\n        return sortedMembers.slice(0, 20);\r\n      }\r\n      return [];\r\n    })\r\n  );\r\n\r\n  getClan(clanId: string) {\r\n    return this.dataService.getClanDetailsSerialized(clanId, true);\r\n  }\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private dataService: DataService,\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanSearchService",
            "id": "injectable-ClanSearchService-1fe5e08a32207792d5edcd9d0ec0160d61f57f2c130ca71dc760af9f211a2db0c3bbf03df2882d5b345221dc648d7e4c942adb670a9c0ff36bddc67997533834",
            "file": "projects/clan-dashboard/src/app/features/clan-search/data-access/clan-search.service.ts",
            "properties": [
                {
                    "name": "clans$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combinedSearch",
                    "args": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findPlayerClan",
                    "args": [
                        {
                            "name": "selectedItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"people\" | \"xbox\" | \"playstation\" | \"steam\" | \"sports_esports\"",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numericClanSearch",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textClanSearch",
                    "args": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanSearchResultItem[]>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textPlayerSearch",
                    "args": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanSearchResultItem[]>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentQuery",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { addClan } from '@core/store/clans';\r\nimport { selectAllClans } from '@core/store/clans/clans.selectors';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupV2Card, GroupV2Service } from 'bungie-api-angular';\r\nimport { forkJoin, map, Observable, take } from 'rxjs';\r\nimport { ClanSearchModule } from '../clan-search-shell/clan-search-shell.module';\r\nimport { SearchErrorDialogComponent } from '../components/search-error-dialog/search-error-dialog.component';\r\nimport { ClanSearchResultItem } from '../models/ClanSearchResultItem';\r\n\r\n@Injectable({\r\n  providedIn: ClanSearchModule\r\n})\r\nexport class ClanSearchService {\r\n  constructor(\r\n    private groupService: GroupV2Service,\r\n    private httpClient: HttpClient,\r\n    private store: Store,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  clans$ = this.store.select(selectAllClans);\r\n\r\n  numericClanSearch(clanId) {\r\n    return this.groupService.groupV2GetGroup(clanId).pipe(\r\n      map((clanResult) => {\r\n        const c = clanResult.Response.detail;\r\n        return [\r\n          {\r\n            iconName: this.getIcon(-1),\r\n            type: 'clan',\r\n            name: c.name,\r\n            id: c.groupId.toString(),\r\n            clanInfo: c\r\n          }\r\n        ];\r\n      })\r\n    );\r\n  }\r\n  textClanSearch(currentQuery): Observable<ClanSearchResultItem[]> {\r\n    return this.groupService\r\n      .groupV2GroupSearch({\r\n        name: currentQuery,\r\n        groupType: 1,\r\n        groupMemberCountFilter: null,\r\n        tagText: null,\r\n        localeFilter: null\r\n      })\r\n      .pipe(\r\n        map((clanListResults) => {\r\n          const clanList = clanListResults.Response.results;\r\n\r\n          return clanList.slice(0, 10).map((c) => {\r\n            return {\r\n              iconName: this.getIcon(-1),\r\n              type: 'clan',\r\n              name: c.name,\r\n              id: c.groupId.toString(),\r\n              clanInfo: c\r\n            };\r\n          });\r\n        })\r\n      );\r\n  }\r\n  combinedSearch(currentQuery) {\r\n    const clanSearch = this.textClanSearch(currentQuery);\r\n    const playerSearch = this.textPlayerSearch(currentQuery);\r\n\r\n    return forkJoin([clanSearch, playerSearch]).pipe(\r\n      map(([clanSearchResults, playerSearchResults]) => {\r\n        return [...clanSearchResults, ...playerSearchResults];\r\n      })\r\n    );\r\n  }\r\n  textPlayerSearch(currentQuery): Observable<ClanSearchResultItem[]> {\r\n    const url = `https://www.bungie.net/Platform/User/Search/Prefix/${currentQuery}/0`;\r\n    return this.httpClient.get(url).pipe(\r\n      map((searchResults: any) => {\r\n        return searchResults.Response.searchResults.slice(0, 10).map((profile) => {\r\n          const displayName = `${profile.bungieGlobalDisplayName}#${profile.bungieGlobalDisplayNameCode}`;\r\n          const memberships = profile.destinyMemberships;\r\n          const crossSaveOverride = memberships.find((x) => x.crossSaveOverride !== 0);\r\n          let membership;\r\n          if (crossSaveOverride) {\r\n            membership = memberships.find((x) => x.membershipType === crossSaveOverride.crossSaveOverride);\r\n          } else {\r\n            membership = memberships[0];\r\n          }\r\n\r\n          return {\r\n            iconName: this.getIcon(membership.membershipType),\r\n            name: displayName,\r\n            memberInfo: membership,\r\n            type: 'player'\r\n          };\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  findPlayerClan(selectedItem) {\r\n    return this.groupService\r\n      .groupV2GetGroupsForMember(0, 1, selectedItem.membershipId, selectedItem.membershipType)\r\n      .pipe(take(1))\r\n      .subscribe(({ Response }) => {\r\n        if (Response.totalResults > 0) {\r\n          //this.persistSelection(Response.results[0]?.group);\r\n          //this.open(Response.results[0]?.group);\r\n          this.addClan(Response.results[0]?.group);\r\n        } else {\r\n          this.dialog.open(SearchErrorDialogComponent, { data: 'No clan found for the user.' });\r\n        }\r\n      });\r\n  }\r\n\r\n  addClan(clan: GroupsV2GroupV2Card) {\r\n    this.store.dispatch(\r\n      addClan({ clanId: clan.groupId.toString(), clanName: clan.name, clanTag: clan.clanInfo.clanCallsign || '' })\r\n    );\r\n  }\r\n\r\n  getIcon(type: number) {\r\n    switch (type) {\r\n      case -1:\r\n        return 'people';\r\n      case 1:\r\n        return 'xbox';\r\n      case 2:\r\n        return 'playstation';\r\n      case 3:\r\n        return 'steam';\r\n      default:\r\n        return 'sports_esports';\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansEffects",
            "id": "injectable-ClansEffects-3cfed79a7121bbad8e91247a66608e9f1d4508c65ef0650f1aeb7ee64944a7f16701c7ab2b7224f71dab69ed2b0a22f58957fe7c0e8ba8b80bb471b464c1da2c",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
            "properties": [
                {
                    "name": "persistSettings$",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(\r\n          clanActions.addClan,\r\n          clanActions.removeClan,\r\n          clanActions.setClans,\r\n          clanActions.updateClan,\r\n          clanActions.resetClan\r\n        ),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updateBungieInfoSync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateBungieInfoSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, bungieInfoUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "updateLastMemberActivitySync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanMemberActivitySync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, memberRecentActivityUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "updateLastProfileSync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { LocalStorageService } from '@core/services/local-storage.service';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType, concatLatestFrom } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of, combineLatest, merge } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport * as clanActions from './clans.actions';\r\nimport { selectClansState } from './clans.selectors';\r\nimport { tap, withLatestFrom, distinctUntilChanged, filter } from 'rxjs/operators';\r\n\r\nconst CLANS_KEY = 'clans';\r\n@Injectable()\r\nexport class ClansEffects {\r\n  constructor(private actions$: Actions, private store: Store, private localStorageService: LocalStorageService) {}\r\n\r\n  persistSettings$ = createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(\r\n          clanActions.addClan,\r\n          clanActions.removeClan,\r\n          clanActions.setClans,\r\n          clanActions.updateClan,\r\n          clanActions.resetClan\r\n        ),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  updateLastProfileSync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n\r\n  updateLastMemberActivitySync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanMemberActivitySync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, memberRecentActivityUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n  updateBungieInfoSync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateBungieInfoSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, bungieInfoUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansMembersProfilesEffects",
            "id": "injectable-ClansMembersProfilesEffects-841b83fc2614ef4857bab6ea3ef75ddaea890228bd733a5561cdfdd27a15172a0a9d3e99433162e4a7434e39cc47e5b7113441d13a746c982504893c04f7b8eb",
            "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.effects.ts",
            "properties": [
                {
                    "name": "setClanMemberProfiles$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(initializeClanMemberProfiles, clanActions.updateClanProfileSync),\r\n      switchMap((action) => {\r\n        return this.memberService.clanProfiles$.pipe(\r\n          map((activeClanMembersProfiles) => {\r\n            return setClanMemberProfiles({\r\n              clanMemberProfiles: activeClanMembersProfiles.map((x) => ({\r\n                id: getClanMemberId(x.member),\r\n                ...x\r\n              }))\r\n            });\r\n          })\r\n        );\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport * as clanActions from '../clans/clans.actions';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { setClanMemberProfiles, initializeClanMemberProfiles } from './clan-members-profiles.actions';\r\nimport { getClanMemberId } from '@destiny/data/utility';\r\n\r\n@Injectable()\r\nexport class ClansMembersProfilesEffects {\r\n  constructor(private actions$: Actions, private store: Store, private memberService: ClansMembersService) {}\r\n\r\n  setClanMemberProfiles$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(initializeClanMemberProfiles, clanActions.updateClanProfileSync),\r\n      switchMap((action) => {\r\n        return this.memberService.clanProfiles$.pipe(\r\n          map((activeClanMembersProfiles) => {\r\n            return setClanMemberProfiles({\r\n              clanMemberProfiles: activeClanMembersProfiles.map((x) => ({\r\n                id: getClanMemberId(x.member),\r\n                ...x\r\n              }))\r\n            });\r\n          })\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansMembersService",
            "id": "injectable-ClansMembersService-9206600c3566c1f9c2a1972edbb0ed60d1593ed592f2b5c1b7d39620afe82b08c98b114a1b60501ec4b6f0571724ce7b30dc26a4469b58fd51a11f3d71c2279e",
            "file": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
            "properties": [
                {
                    "name": "activeClans$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "clanMembers$",
                    "defaultValue": "this.activeClans$.pipe(\r\n    switchMap((activeClans) => {\r\n      return from(activeClans).pipe(\r\n        mergeMap((clan) => {\r\n          return this.memberService.getClanMembersSerialized(clan.clanId).pipe(\r\n            map((result) => {\r\n              return { clan, members: result };\r\n            }),\r\n            catchError(() => {\r\n              console.error(`Error pulling ${clan.clanId}`);\r\n              return of(null);\r\n            })\r\n          );\r\n        }),\r\n        filter((x) => !!x),\r\n        toArray()\r\n      ) as Observable<ClanConfigMembers[]>;\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "clanMembersProfiles$",
                    "defaultValue": "this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              map((x) => {\r\n                return {\r\n                  ...clanAndMembers,\r\n                  profiles: x\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((resultProfiles: MemberProfile[]) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    },\r\n                    member,\r\n                    profile: resultProfiles.find((profile) => {\r\n                      return getClanMemberId(member) === getMemberProfileId(profile);\r\n                    })\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { Store } from '@ngrx/store';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { catchError, filter, from, map, mergeMap, Observable, of, switchMap, tap, toArray } from 'rxjs';\r\nimport { selectEnabledClans } from '../store/clans/clans.selectors';\r\nimport { SeasonService } from './season.service';\r\n\r\nexport interface ClanConfigMembers {\r\n  clan: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClansMembersService {\r\n  activeClans$ = this.store.select(selectEnabledClans);\r\n\r\n  clanMembers$ = this.activeClans$.pipe(\r\n    switchMap((activeClans) => {\r\n      return from(activeClans).pipe(\r\n        mergeMap((clan) => {\r\n          return this.memberService.getClanMembersSerialized(clan.clanId).pipe(\r\n            map((result) => {\r\n              return { clan, members: result };\r\n            }),\r\n            catchError(() => {\r\n              console.error(`Error pulling ${clan.clanId}`);\r\n              return of(null);\r\n            })\r\n          );\r\n        }),\r\n        filter((x) => !!x),\r\n        toArray()\r\n      ) as Observable<ClanConfigMembers[]>;\r\n    })\r\n  );\r\n\r\n  clanMembersProfiles$ = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              map((x) => {\r\n                return {\r\n                  ...clanAndMembers,\r\n                  profiles: x\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((resultProfiles: MemberProfile[]) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    },\r\n                    member,\r\n                    profile: resultProfiles.find((profile) => {\r\n                      return getClanMemberId(member) === getMemberProfileId(profile);\r\n                    })\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileService: ClanProfileService,\r\n    private seasonService: SeasonService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 106,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansRosterService",
            "id": "injectable-ClansRosterService-6dfb641cb9df6e9719114193cc30acf3f474a3f452660c0b464a15b406858c372830917550b4c14b3d295067587d68dcc23f4afe9bbf4ebaeb3d827b7f9e4da2",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/data-access/clans-roster.service.ts",
            "properties": [
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.store.select(selectAllClansMembersProfiles)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "clanProfilesLoading$",
                    "defaultValue": "this.store.select(selectClanMemberProfileStateLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "clanRosterItems$",
                    "defaultValue": "this.clanProfiles$.pipe(\r\n    switchMap((clanProfiles) => {\r\n      //const members = clanProfiles.map((x) => x.member);\r\n      const clanIds = [...new Set(clanProfiles.map((cp) => cp.clan.clanId))];\r\n      const clanGroups = clanIds.map((clanId) => {\r\n        return { clanId: clanId, members: clanProfiles.filter((x) => x.clan.clanId === clanId) };\r\n      });\r\n\r\n      return from(clanGroups).pipe(\r\n        mergeMap((clanGroups) => {\r\n          return this.bungieInfoService\r\n            .getSerializedBungieInfosFromCache(\r\n              clanGroups.clanId,\r\n              clanGroups.members.map((m) => m.member)\r\n            )\r\n            .pipe(\r\n              switchMap((result) => {\r\n                return result;\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((bungieInfo: BungieInfo[]) => {\r\n          return clanProfiles.map((cp) => {\r\n            return {\r\n              ...cp,\r\n              bungieInfo: bungieInfo.find(\r\n                (bi) => bi?.membershipId === cp.member?.bungieNetUserInfo?.membershipId?.toString()\r\n              )\r\n            };\r\n          });\r\n        })\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanRosterItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { from, map, mergeMap, Observable, switchMap, toArray } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  selectAllClansMembersProfiles,\r\n  selectClanMemberProfileStateLoading\r\n} from '@core/store/clans-members-profiles/clan-members-profiles.selectors';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { BungieInfoService } from 'projects/data/src/lib/clan/bungie-info/bungie-info.service';\r\nimport { ClanRosterItem } from '../models/ClanRosterItem';\r\nimport { BungieInfo } from '@destiny/data/models';\r\n\r\n@Injectable()\r\nexport class ClansRosterService {\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.store.select(selectAllClansMembersProfiles);\r\n  clanProfilesLoading$: Observable<boolean> = this.store.select(selectClanMemberProfileStateLoading); //.pipe(\r\n\r\n  clanRosterItems$: Observable<ClanRosterItem[]> = this.clanProfiles$.pipe(\r\n    switchMap((clanProfiles) => {\r\n      //const members = clanProfiles.map((x) => x.member);\r\n      const clanIds = [...new Set(clanProfiles.map((cp) => cp.clan.clanId))];\r\n      const clanGroups = clanIds.map((clanId) => {\r\n        return { clanId: clanId, members: clanProfiles.filter((x) => x.clan.clanId === clanId) };\r\n      });\r\n\r\n      return from(clanGroups).pipe(\r\n        mergeMap((clanGroups) => {\r\n          return this.bungieInfoService\r\n            .getSerializedBungieInfosFromCache(\r\n              clanGroups.clanId,\r\n              clanGroups.members.map((m) => m.member)\r\n            )\r\n            .pipe(\r\n              switchMap((result) => {\r\n                return result;\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((bungieInfo: BungieInfo[]) => {\r\n          return clanProfiles.map((cp) => {\r\n            return {\r\n              ...cp,\r\n              bungieInfo: bungieInfo.find(\r\n                (bi) => bi?.membershipId === cp.member?.bungieNetUserInfo?.membershipId?.toString()\r\n              )\r\n            };\r\n          });\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(private store: Store, private bungieInfoService: BungieInfoService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieInfoService",
                        "type": "BungieInfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieInfoService",
                        "type": "BungieInfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanUpdaterService",
            "id": "injectable-ClanUpdaterService-29160970f171e4f858808d223eb1b54d7496b1db24af36c4327af870bb771b5c842b68ce6069bdb908cbcbf74a0cdbad1b63183519890a523b4f977b4aa90ec5",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLog",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methods": [
                {
                    "name": "clanUpdate",
                    "args": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "memberUpdate",
                    "args": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  mergeMap,\r\n  map,\r\n  catchError,\r\n  toArray,\r\n  switchMap,\r\n  tap,\r\n  take,\r\n  filter,\r\n  distinctUntilChanged,\r\n  concatMap\r\n} from 'rxjs/operators';\r\nimport { ClanConfig, removeClan, selectEnabledClans, updateClan, updateClanProfileSync } from '../../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ProfileUpdaterService } from './profile-updater.service';\r\nimport { MemberActivityUpdaterService } from './member-activity-updater.service';\r\nimport { ClanDetailsService } from '@destiny/data/clan/clan-details';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AppOfflineDialogComponent } from '../../layout/app-offline-dialog/app-offline-dialog.component';\r\nimport { BungieInfoUpdaterService } from './bungie-info-updater.service';\r\nimport { isMobile } from '../../utilities/is-mobile';\r\n\r\nexport interface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n  profiles?: any[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n  showLog = true;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig,\r\n    private clanDetailsService: ClanDetailsService,\r\n    private profileUpdaterService: ProfileUpdaterService,\r\n    private memberActivityUpdaterService: MemberActivityUpdaterService,\r\n    private bungieInfoUpdaterService: BungieInfoUpdaterService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      take(1),\r\n      tap((x) => this.showLog && console.log('Starting Updater', x)),\r\n      switchMap((activeClans) => this.clanUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Starting Member Updater', x)),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      tap((x) => this.showLog && console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profileUpdaterService.profilesUpdate(clans)),\r\n      tap((x) => this.showLog && console.log('Member Profile Update Complete', x)),\r\n      switchMap((clans) => (isMobile() ? of(clans) : this.memberActivityUpdaterService.membersActivityUpdate(clans))),\r\n      tap((x) => this.showLog && console.log('Member Recent Activity Update Complete', x)),\r\n      switchMap((clans) => (isMobile() ? of(clans) : this.bungieInfoUpdaterService.updateAllClansBungieInfo(clans))),\r\n      tap((x) => this.showLog && console.log('Bungie Info Update Complete', x))\r\n    );\r\n  }\r\n  clanUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      // TODO: Double check concat map\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        return this.clanDetailsService.getClanDetailsSerialized(clanConfig.clanId, false).pipe(\r\n          map((result) => {\r\n            const newConfig = {\r\n              ...clanConfig,\r\n              clanName: result.name,\r\n              clanTag: result.clanInfo.clanCallsign\r\n            };\r\n            this.store.dispatch(updateClan({ clan: newConfig }));\r\n\r\n            return newConfig;\r\n          }),\r\n          catchError((error) => {\r\n            if (error.error.ErrorStatus === 'ClanNotFound') {\r\n              this.store.dispatch(removeClan({ clanId: clanConfig.clanId }));\r\n            }\r\n            //throw Error(error);\r\n            return of(undefined);\r\n          })\r\n        );\r\n      }, 1),\r\n      filter((x) => !!x),\r\n      toArray(),\r\n      catchError((err) => {\r\n        if (err.message === 'System Offline') {\r\n          const acknowledgeOffline = window.sessionStorage.getItem(\r\n            this.appConfig.constants.D2DASHBOARD_ACKNOWLEDGE_OFFLINE\r\n          );\r\n          if (!acknowledgeOffline) {\r\n            this.dialog.open(AppOfflineDialogComponent);\r\n          }\r\n        }\r\n        throw err;\r\n      })\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDetailsService",
                        "type": "ClanDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileUpdaterService",
                        "type": "ProfileUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberActivityUpdaterService",
                        "type": "MemberActivityUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieInfoUpdaterService",
                        "type": "BungieInfoUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDetailsService",
                        "type": "ClanDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileUpdaterService",
                        "type": "ProfileUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberActivityUpdaterService",
                        "type": "MemberActivityUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieInfoUpdaterService",
                        "type": "BungieInfoUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DefinitionService",
            "id": "injectable-DefinitionService-b1c1858983b94fa36f19d558f7f87139abbb3e8406262b07c1a9d0a7260052942f2689352dc3fb3ac177ef66c864f205dfa1a480dfaaa885745c8bfa2cb32027",
            "file": "projects/clan-dashboard/src/app/core/definition-services/definition.service.ts",
            "properties": [
                {
                    "name": "activityDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsDestinyActivityDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "activityModeDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsDestinyActivityModeDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "collectibleDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsCollectiblesDestinyCollectibleDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "metricDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsMetricsDestinyMetricDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "milestoneDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsMilestonesDestinyMilestoneDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "presentationDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsPresentationDestinyPresentationNodeDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "recordDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsRecordsDestinyRecordDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SeasonService } from '../services/season.service';\r\nimport {\r\n  DestinyDefinitionsCollectiblesDestinyCollectibleDefinition,\r\n  DestinyDefinitionsDestinyActivityDefinition,\r\n  DestinyDefinitionsDestinyActivityModeDefinition,\r\n  DestinyDefinitionsMetricsDestinyMetricDefinition,\r\n  DestinyDefinitionsMilestonesDestinyMilestoneDefinition,\r\n  DestinyDefinitionsPresentationDestinyPresentationNodeDefinition,\r\n  DestinyDefinitionsRecordsDestinyRecordDefinition\r\n} from 'bungie-api-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DefinitionService {\r\n  metricDefinitions: DestinyDefinitionsMetricsDestinyMetricDefinition[];\r\n  collectibleDefinition: DestinyDefinitionsCollectiblesDestinyCollectibleDefinition[];\r\n  presentationDefinition: DestinyDefinitionsPresentationDestinyPresentationNodeDefinition[];\r\n  recordDefinition: DestinyDefinitionsRecordsDestinyRecordDefinition[];\r\n  milestoneDefinition: DestinyDefinitionsMilestonesDestinyMilestoneDefinition[];\r\n  activityDefinition: DestinyDefinitionsDestinyActivityDefinition[];\r\n  activityModeDefinition: DestinyDefinitionsDestinyActivityModeDefinition[];\r\n  constructor(private seasonService: SeasonService) {}\r\n\r\n  initializeCache(data: any) {\r\n    if (data.DestinyMetricDefinition) {\r\n      this.metricDefinitions = data.DestinyMetricDefinition;\r\n    }\r\n    if (data.DestinyCollectibleDefinition) {\r\n      this.collectibleDefinition = data.DestinyCollectibleDefinition;\r\n    }\r\n    if (data.DestinyPresentationNodeDefinition) {\r\n      this.presentationDefinition = data.DestinyPresentationNodeDefinition;\r\n    }\r\n    if (data.DestinyRecordDefinition) {\r\n      this.recordDefinition = data.DestinyRecordDefinition;\r\n    }\r\n    if (data.DestinyMilestoneDefinition) {\r\n      this.milestoneDefinition = data.DestinyMilestoneDefinition;\r\n    }\r\n    if (data.DestinyActivityDefinition) {\r\n      this.activityDefinition = data.DestinyActivityDefinition;\r\n    }\r\n\r\n    if (data.DestinyActivityModeDefinition) {\r\n      this.activityModeDefinition = data.DestinyActivityModeDefinition;\r\n    }\r\n\r\n    if (data.DestinySeasonDefinition && data.DestinySeasonPassDefinition) {\r\n      this.seasonService.init(data.DestinySeasonDefinition, data.DestinySeasonPassDefinition);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IdbKeyValService",
            "id": "injectable-IdbKeyValService-7561a583c5c3b3d85df5f67bfbfbd7aba0e5c6ae65418e8bf078313b0004d3cdf7827e3bf63a1b39b5e57d0ee900d15f281ca1a6a90e93c2b9206002b41dc9ac",
            "file": "projects/data/src/lib/storage/idb-key-val.service.ts",
            "properties": [
                {
                    "name": "defaultStore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UseStore",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T | undefined>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { get, set, createStore, UseStore } from 'idb-keyval';\r\nimport { DataStore } from './datastore.interface';\r\n\r\n@Injectable()\r\nexport class IdbKeyValService implements DataStore {\r\n  defaultStore: UseStore;\r\n  constructor() {\r\n    this.defaultStore = createStore('D2Dashboard', 'data');\r\n  }\r\n\r\n  get<T = any>(key: string, customStore = undefined): Promise<T | undefined> {\r\n    return get(key, customStore || this.defaultStore);\r\n  }\r\n  set(key: string, value: any, customStore = undefined): Promise<void> {\r\n    return set(key, value, customStore || this.defaultStore);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-1fd950225616389ad061c2ce2196a782a122d77a4f9b0a35a4b75f693dcf3aa9b65825e056afadc6ef346eb25746e7f0c46d44292518da5a3010ada33431dccb",
            "file": "projects/data/src/lib/storage/local-storage.service.ts",
            "properties": [
                {
                    "name": "AppPrefix",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T | undefined>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DataStore } from './datastore.interface';\r\n\r\n@Injectable()\r\nexport class LocalStorageService implements DataStore {\r\n  AppPrefix = '';\r\n  constructor() {}\r\n  get<T = any>(key: string, customStore = undefined): Promise<T | undefined> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve(JSON.parse(localStorage.getItem(`${this.AppPrefix}${key}`)));\r\n    });\r\n  }\r\n  set(key: string, value: any, customStore = undefined): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      localStorage.setItem(`${this.AppPrefix}${key}`, JSON.stringify(value));\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-deaa322a3b7e2c1a0c821dc259fbcafd8abac7ad5b1cfcb6db3a6b90e49769a71382b4566241aa68194864bf1b44155a93c1f82ba8b84d51115c69c5914f4ce1-1",
            "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTests that localStorage exists, can be written to, and read from.",
                    "description": "<p>Tests that localStorage exists, can be written to, and read from.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nconst APP_PREFIX = 'D2DASH-';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() {}\r\n\r\n  static loadInitialState() {\r\n    return Object.keys(localStorage).reduce((state: any, storageKey) => {\r\n      if (storageKey.includes(APP_PREFIX)) {\r\n        const stateKeys = storageKey\r\n          .replace(APP_PREFIX, '')\r\n          //.toLowerCase()\r\n          .split('.')\r\n          .map((key) =>\r\n            key\r\n              .split('-')\r\n              .map((token, index) => (index === 0 ? token : token.charAt(0).toUpperCase() + token.slice(1)))\r\n              .join('')\r\n          );\r\n        let currentStateRef = state;\r\n        stateKeys.forEach((key, index) => {\r\n          if (index === stateKeys.length - 1) {\r\n            currentStateRef[key] = JSON.parse(localStorage.getItem(storageKey));\r\n            return;\r\n          }\r\n          currentStateRef[key] = currentStateRef[key] || {};\r\n          currentStateRef = currentStateRef[key];\r\n        });\r\n      }\r\n      return state;\r\n    }, {});\r\n  }\r\n\r\n  setItem(key: string, value: any) {\r\n    localStorage.setItem(`${APP_PREFIX}${key}`, JSON.stringify(value));\r\n  }\r\n\r\n  getItem(key: string) {\r\n    return JSON.parse(localStorage.getItem(`${APP_PREFIX}${key}`));\r\n  }\r\n\r\n  removeItem(key: string) {\r\n    localStorage.removeItem(`${APP_PREFIX}${key}`);\r\n  }\r\n\r\n  /** Tests that localStorage exists, can be written to, and read from. */\r\n  testLocalStorage() {\r\n    const testValue = 'testValue';\r\n    const testKey = 'testKey';\r\n    let retrievedValue: string;\r\n    const errorMessage = 'localStorage did not return expected value';\r\n\r\n    this.setItem(testKey, testValue);\r\n    retrievedValue = this.getItem(testKey);\r\n    this.removeItem(testKey);\r\n\r\n    if (retrievedValue !== testValue) {\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LocalStorageService-1"
        },
        {
            "name": "ManifestEffects",
            "id": "injectable-ManifestEffects-365e4c14b9d9983fc71afee97b3b3a3080268ca76b81b9493e833c34cccebae3a9781fc6a66d1ac6ba3315d77320f826302b85d101dea8fdd0f254c3a0646d40",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
            "properties": [
                {
                    "name": "loadManifest$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { loadManifest, loadManifestComplete, loadManifestFailure } from './manifest.actions';\r\n\r\n@Injectable()\r\nexport class ManifestEffects {\r\n  constructor(private actions$: Actions, private manifestService: ManifestService, private store: Store) {}\r\n\r\n  loadManifest$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestLoaderService",
            "id": "injectable-ManifestLoaderService-f01df9020d02647f54caf52c1fba84cf2d276494e57bf69dd5952c63e3b645b98ad92b9807005c5a4ac6730b2fb9cf58f2cb44380bad27e6794d6928f6b64829",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getManifest",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getManifestFromCache",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadManifestData",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'"
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CachedManifest>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pruneTables",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestDefinitionsArchive",
                    "args": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { WindowToken } from '../injection-tokens/window-token';\r\nimport { IdbKeyValService } from '../storage/idb-key-val.service';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v2';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(\r\n    private d2service: Destiny2Service,\r\n    private db: IdbKeyValService,\r\n    @Inject(WindowToken) private window: Window\r\n  ) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate > nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    // return this.db.getValues('manifest').then((cachedValue) => {\r\n    return this.db.get<any>('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return this.window.fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.set('manifest', [dbObject]);\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "IdbKeyValService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "IdbKeyValService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestService",
            "id": "injectable-ManifestService-a6d14d362234100baebefbe1679c0bcdb706ce0e6f4847c8af56df0eb4cfed5cd5eae6b815b72a296e06e129b8330cc3a522e87f2f95594e46f3cfd47062760f",
            "file": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
            "properties": [
                {
                    "name": "timerName",
                    "defaultValue": "'loadManifest'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "loadManifest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n//import { ActivityDefinitionService } from '@core/definition-services/activity-definition.service';\r\n//import { ActivityModeDefinitionService } from '@core/definition-services/activity-mode-definition.service';\r\nimport { DefinitionService } from '@core/definition-services/definition.service';\r\n//import { MilestoneDefinitionService } from '@core/definition-services/milestone-definition.service';\r\n// import { RecordDefinitionService } from '@core/definition-services/record-definition.service';\r\nimport { ManifestLoaderService } from '@destiny/data/manifest';\r\nimport { catchError, map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestService {\r\n  constructor(private loader: ManifestLoaderService, private definitionService: DefinitionService) {}\r\n  timerName = 'loadManifest';\r\n\r\n  loadManifest() {\r\n    console.time(this.timerName);\r\n    const tables = [\r\n      //'DestinyChecklistDefinition',\r\n      //'DestinyObjectiveDefinition',\r\n      //'DestinyStatDefinition',\r\n      //'DestinyVendorDefinition',\r\n      //'DestinyInventoryItemDefinition',\r\n      //'DestinyClassDefinition',\r\n      //'DestinySandboxPerkDefinition',\r\n      //'DestinyEnergyTypeDefinition',\r\n      'DestinyCollectibleDefinition',\r\n      'DestinyMetricDefinition',\r\n      'DestinyPresentationNodeDefinition',\r\n      'DestinyRecordDefinition',\r\n      'DestinySeasonDefinition',\r\n      'DestinySeasonPassDefinition',\r\n      'DestinyMilestoneDefinition',\r\n      'DestinyActivityDefinition',\r\n      'DestinyActivityModeDefinition'\r\n      //'DestinyPlaceDefinition',\r\n      //'DestinyFactionDefinition'\r\n    ];\r\n    return this.loader.loadManifestData('en', tables).pipe(\r\n      map((x) => {\r\n        if (x && x.data) {\r\n          this.definitionService.initializeCache(x.data);\r\n        }\r\n        console.timeEnd(this.timerName);\r\n        return true;\r\n      }),\r\n      catchError((error) => {\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemberActivityUpdaterService",
            "id": "injectable-MemberActivityUpdaterService-34c5f937bc4ae436c4cdec50078d095c12529c7d4d024fabcdddef058450fcc36c3e49d3161cca8ee34719e98d918917ed6d1a92eba67a10798b94dfab7e9c0f",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/member-activity-updater.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "memberActivityUpdate",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "membersActivityUpdate",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { ProfileRecentActivityWorkerService } from '../../../workers/profile-recent-activity/profile-recent-activity.service';\r\nimport { ClanConfigMembers } from './clan-updater.service';\r\nimport { filter, from, map, mergeMap, Observable, of, take, toArray } from 'rxjs';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { updateClanMemberActivitySync } from '@core/store/clans';\r\nimport { addNotification, removeNotification, updateNotification } from '../../store/notifications';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MemberActivityUpdaterService {\r\n  constructor(\r\n    private store: Store,\r\n    private profileRecentActivityWorkerService: ProfileRecentActivityWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n\r\n  membersActivityUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      mergeMap((x) => {\r\n        return this.memberActivityUpdate(x);\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  memberActivityUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.memberRecentActivityUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      this.store.dispatch(\r\n        addNotification({\r\n          notification: {\r\n            id: 'memberProfile',\r\n            title: `Updating ${clan.clanConfig.clanName} Recent Activity`,\r\n            data: { progress: 0, complete: 0, total: clan.members.length }\r\n          }\r\n        })\r\n      );\r\n\r\n      const progress = (progressCount) => {\r\n        this.store.dispatch(\r\n          updateNotification({\r\n            notification: {\r\n              id: 'memberProfile',\r\n              title: `Updating ${clan.clanConfig.clanName} Recent Activity`,\r\n              data: {\r\n                progress: progressCount / clan.members.length,\r\n                complete: progressCount,\r\n                total: clan.members.length\r\n              }\r\n            }\r\n          })\r\n        );\r\n      };\r\n\r\n      return this.profileRecentActivityWorkerService\r\n        .updateAllRecentActivityCache(clan.clanConfig.clanId, clan.profiles, progress)\r\n        .pipe(\r\n          take(1),\r\n          map((x) => {\r\n            // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n            this.store.dispatch(\r\n              removeNotification({\r\n                notification: {\r\n                  id: 'memberProfile',\r\n                  title: `Updating ${clan.clanConfig.clanName} Recent Activity`,\r\n                  data: { progress: clan.members.length, complete: clan.members.length, total: clan.members.length }\r\n                }\r\n              })\r\n            );\r\n\r\n            // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n            this.store.dispatch(updateClanMemberActivitySync({ clanId: clan.clanConfig.clanId }));\r\n\r\n            return clan;\r\n          })\r\n        );\r\n    }\r\n    return of(clan);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecentActivityWorkerService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PlayerService",
            "id": "injectable-PlayerService-097b12854db64819ab22e0aa399f1ab8946a01d4a189b4f4c9fb5851b08fc323a9b3822f701c59921949644953b93f4e754793694a7c29d14c7e1a33224da674",
            "file": "projects/clan-dashboard/src/app/features/player/data-access/player.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { PlayerShellModule } from '../player-shell/player-shell.module';\r\nimport { CachedProfileService } from '@destiny/data/profile';\r\n\r\n@Injectable()\r\n//   {\r\n//   providedIn: PlayerShellModule\r\n//   //   providedIn: 'root'\r\n// }\r\nexport class PlayerService {\r\n  constructor(\r\n    private cachedProfileService: CachedProfileService // private cachedProfileService: CachedProfileService\r\n  ) {}\r\n\r\n  getProfile(membershipType: string, membershipId: string) {\r\n    return this.cachedProfileService.getProfile(membershipType, membershipId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cachedProfileService",
                        "type": "CachedProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "cachedProfileService",
                        "type": "CachedProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileRecentActivityWorkerService",
            "id": "injectable-ProfileRecentActivityWorkerService-d5e1bf39853e8e81fb940b16234f9dee01e7ceb56f602d81714c322330663f48e132b83b0ecb6075d4087acbe3c6ea17ae3b8b87f82044084ae3cc306e70c3d7",
            "file": "projects/clan-dashboard/src/app/workers/profile-recent-activity/profile-recent-activity.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllActivities",
                    "args": [
                        {
                            "name": "clansAndMembers",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "statAggregatorType",
                            "type": "AggregateType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clansAndMembers",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "statAggregatorType",
                            "type": "AggregateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRecentActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRecentClanActivitiesByActivityModeId",
                    "args": [
                        {
                            "name": "clansAndMembers",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityModeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clansAndMembers",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityModeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllRecentActivityCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ClanConfigMembers } from '@core/services/clans-members.service';\r\nimport { TrackedDuration } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer';\r\nimport { MemberProfile } from 'projects/data/src/lib/models';\r\nimport { AggregateType } from 'projects/data/src/lib/stat-aggregators/clan-aggregate-time';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileRecentActivityWorkerService {\r\n  constructor() {}\r\n  updateAllRecentActivityCache(clanId: string, clanMembers: any[], progress?: (done) => any): Observable<boolean> {\r\n    const activityCacheComplete: Subject<boolean> = new Subject();\r\n    const worker = new Worker(new URL('./profile-recent-activity-updater.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        activityCacheComplete.next(true);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return activityCacheComplete;\r\n  }\r\n\r\n  //getAllRecentActivitiesFromCache(clanId: string, memberProfiles: MemberProfile[]): Observable<any> {\r\n  getAllRecentActivitiesFromCache(clanId: string, memberProfiles: any[]): Observable<any> {\r\n    const memberActivities = new Subject();\r\n    const worker = new Worker(new URL('./profile-recent-activity-getter.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      memberActivities.next(data.data);\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      memberProfiles,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return memberActivities;\r\n  }\r\n  getAllActivities(clansAndMembers: ClanConfigMembers[], statAggregatorType: AggregateType): Observable<any> {\r\n    const memberActivities = new Subject();\r\n    const worker = new Worker(new URL('./profile-activity-getter.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      memberActivities.next(data.data);\r\n    };\r\n    //console.log('stat agg', statAggregator.getClanActivityStatsForDuration);\r\n\r\n    worker.postMessage({\r\n      clansAndMembers,\r\n      statAggregatorType,\r\n      apiKey: environment.apiKey\r\n    });\r\n    return memberActivities;\r\n  }\r\n  getAllRecentClanActivitiesByActivityModeId(\r\n    clansAndMembers: ClanConfigMembers[],\r\n    trackedDates: TrackedDuration[],\r\n    activityModeId: number\r\n  ): Observable<any> {\r\n    const memberActivities = new Subject();\r\n    const worker = new Worker(new URL('./clan-activity-recent-activity-getter.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      memberActivities.next(data.data);\r\n    };\r\n\r\n    worker.postMessage({\r\n      clansAndMembers,\r\n      apiKey: environment.apiKey,\r\n      trackedDates,\r\n      activityModeId\r\n    });\r\n    return memberActivities;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        },
        {
            "name": "ProfileUpdaterService",
            "id": "injectable-ProfileUpdaterService-2a057c7d6980e29ec024b873594ff587e5b82a1bb2dadc5907cc092908caa1fce50e6b03712f5aa1ada9282cd0060658c2592ad4578d2b86ba6a087b2f67f14f",
            "file": "projects/clan-dashboard/src/app/core/services/updaters/profile-updater.service.ts",
            "properties": [
                {
                    "name": "profileService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanProfileService",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "profilesUpdate",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileUpdate",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap, take, filter } from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClanProfileSync } from '../../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../../workers/profile-worker/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { ClanConfigMembers } from './clan-updater.service';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { ClansMembersService } from '../clans-members.service';\r\nimport { addNotification, removeNotification, updateNotification } from '../../store/notifications';\r\nimport { SeasonService } from '../season.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileUpdaterService {\r\n  profileService: ClanProfileService;\r\n  constructor(\r\n    private store: Store,\r\n    private clanMemberService: ClansMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private seasonService: SeasonService,\r\n    private appConfig: AppConfig\r\n  ) {\r\n    const clanDB = new ClanDatabase();\r\n    this.profileService = new ClanProfileService(clanDB, appConfig.apiKey);\r\n  }\r\n\r\n  profilesUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      // TODO Verify Merge Map is appropriate for this.\r\n      mergeMap((x) => {\r\n        return this.profileUpdate(x).pipe(map((cm) => cm));\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  profileUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.profileUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      this.store.dispatch(\r\n        addNotification({\r\n          notification: {\r\n            id: 'memberProfile',\r\n            title: `Updating ${clan.clanConfig.clanName} Profiles`,\r\n            data: { progress: 0, complete: 0, total: clan.members.length }\r\n          }\r\n        })\r\n      );\r\n      const progress = (progressCount) => {\r\n        this.store.dispatch(\r\n          updateNotification({\r\n            notification: {\r\n              id: 'memberProfile',\r\n              title: `Updating ${clan.clanConfig.clanName} Profiles`,\r\n              data: {\r\n                progress: progressCount / clan.members.length,\r\n                complete: progressCount,\r\n                total: clan.members.length\r\n              }\r\n            }\r\n          })\r\n        );\r\n      };\r\n      return this.profileWorkerService.loadProfiles(clan.clanConfig.clanId, clan.members, progress).pipe(\r\n        filter((x) => x.length > 0),\r\n        take(1),\r\n        map((x) => {\r\n          // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n          this.store.dispatch(\r\n            removeNotification({\r\n              notification: {\r\n                id: 'memberProfile',\r\n                title: `Updating ${clan.clanConfig.clanName} Profiles`,\r\n                data: { progress: clan.members.length, complete: clan.members.length, total: clan.members.length }\r\n              }\r\n            })\r\n          );\r\n\r\n          // eslint-disable-next-line @ngrx/avoid-dispatching-multiple-actions-sequentially\r\n          this.store.dispatch(updateClanProfileSync({ clanId: clan.clanConfig.clanId }));\r\n\r\n          //\r\n          // console.log('------------- dispatch update ------------------');\r\n          // this.clanMemberService.forceReload();\r\n          return {\r\n            ...clan,\r\n            profiles: x\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    return this.profileService\r\n      .getSerializedProfilesFromCache(\r\n        clan.clanConfig.clanId,\r\n        clan.members,\r\n        this.seasonService.getSeasonProgressionHashes(),\r\n        [],\r\n        [],\r\n        []\r\n      )\r\n      .pipe(\r\n        map((x) => {\r\n          return { ...clan, profiles: x };\r\n        })\r\n      );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanMemberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanMemberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileWorkerService",
            "id": "injectable-ProfileWorkerService-86f4a0ec4b9eaa047fed98b58313a51f2feb265dd0a2d9fc6574446295ee1c6d327e9733a60a5ae85f2afa78824aedd938ec74081ea3e5bd8db216b6b2f612a2",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n//import { MemberProfile, ClanMember } from 'bungie-models';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { SeasonService } from '@core/services/season.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileWorkerService {\r\n  constructor(private seasonService:SeasonService) {}\r\n  //  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n  //members: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n\r\n  // loadProfiles(clanId: string, clanMembers: ClanMember[], progress?: (done) => any): void {\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): Observable<MemberProfile[]> {\r\n    // const activityCacheComplete: Subject<boolean> = new Subject();\r\n    const members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n\r\n    const worker = new Worker(new URL('./profile.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        members.next(data.data);\r\n        //activityCacheComplete.next(true);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      progressionHashes: this.seasonService.getSeasonProgressionHashes(),\r\n      apiKey: environment.apiKey\r\n    });\r\n    return members;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecentActivityService",
            "id": "injectable-RecentActivityService-e1a5fe4eef22080ac97094635a6bbce7a4b33768c7a4a9638aec7db08544a3ff11f74f73b86ee804403754ad9f3d431d10ca6c10889a046e6467ed1b58e5f40f",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/data-access/recent-activity.service.ts",
            "properties": [
                {
                    "name": "activeClanActivity$",
                    "defaultValue": "this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n                return this.profileActivityService\r\n                  .getAllRecentActivitiesFromCache(clanAndMembers.clan.clanId, memberProfiles)\r\n                  .pipe(\r\n                    take(1),\r\n                    map((clanActivities) => {\r\n                      return clanAndMembers.members.map((member) => {\r\n                        return {\r\n                          clanMember: member,\r\n                          profileActivity: clanActivities.find(\r\n                            (ca) => getMemberProfileId(ca.memberProfile) === getClanMemberId(member)\r\n                          ),\r\n                          profile: memberProfiles.find((m) => getMemberProfileId(m) === getClanMemberId(member)),\r\n                          clan: {\r\n                            clanId: clanAndMembers.clan.clanId,\r\n                            clanName: clanAndMembers.clan.clanName,\r\n                            clanTag: clanAndMembers.clan.clanTag\r\n                          }\r\n                        };\r\n                      });\r\n                    })\r\n                  );\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProfileRecentActivity[]>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { from, map, mergeMap, Observable, switchMap, take, toArray } from 'rxjs';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { ProfileRecentActivityWorkerService } from '../../../workers/profile-recent-activity/profile-recent-activity.service';\r\nimport { ProfileRecentActivity } from '../models/profile-recent-activity';\r\nimport { RecentActivityModule } from '../recent-activity-shell/recent-activity.module';\r\n\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { SeasonService } from '@core/services/season.service';\r\n\r\n@Injectable({\r\n  providedIn: RecentActivityModule\r\n})\r\nexport class RecentActivityService {\r\n  // TODO: Optimize this to work with store better.\r\n  activeClanActivity$: Observable<ProfileRecentActivity[]> = this.memberService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n                return this.profileActivityService\r\n                  .getAllRecentActivitiesFromCache(clanAndMembers.clan.clanId, memberProfiles)\r\n                  .pipe(\r\n                    take(1),\r\n                    map((clanActivities) => {\r\n                      return clanAndMembers.members.map((member) => {\r\n                        return {\r\n                          clanMember: member,\r\n                          profileActivity: clanActivities.find(\r\n                            (ca) => getMemberProfileId(ca.memberProfile) === getClanMemberId(member)\r\n                          ),\r\n                          profile: memberProfiles.find((m) => getMemberProfileId(m) === getClanMemberId(member)),\r\n                          clan: {\r\n                            clanId: clanAndMembers.clan.clanId,\r\n                            clanName: clanAndMembers.clan.clanName,\r\n                            clanTag: clanAndMembers.clan.clanTag\r\n                          }\r\n                        };\r\n                      });\r\n                    })\r\n                  );\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private memberService: ClansMembersService,\r\n    private profileService: ClanProfileService,\r\n    private profileActivityService: ProfileRecentActivityWorkerService,\r\n    private seasonService: SeasonService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileActivityService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "memberService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileActivityService",
                        "type": "ProfileRecentActivityWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SealsService",
            "id": "injectable-SealsService-36aa7897c91b458b9804f1f6cdfa312ee39982a1355b87329f50e34df703b87304da4153925b07f3250d75eaf297d79afa19e9669088aef8b4485e042f0bf569",
            "file": "projects/clan-dashboard/src/app/features/seals/data-access/seals.service.ts",
            "properties": [
                {
                    "name": "allNodes",
                    "defaultValue": "this.getNodes(this.currentSealNodes)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.clansMembersService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          const hashes = this.sealNodes.filter((x) => x.completionRecordHash).map((x) => x.completionRecordHash);\r\n          const gildedHashes = [];\r\n          hashes.forEach((hash) => {\r\n            const record = this.definitionService.recordDefinition[hash as number];\r\n            if (record.titleInfo && record.titleInfo.gildingTrackingRecordHash) {\r\n              gildedHashes.push(record.titleInfo.gildingTrackingRecordHash);\r\n            }\r\n          });\r\n\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [...hashes, ...gildedHashes],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clanMember: member,\r\n                    profile: memberProfiles.find(\r\n                      (m) => getMemberProfileId(m) === getClanMemberId(member)\r\n                    ) as MemberProfile,\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    }\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "currentSealNodes",
                    "defaultValue": "this.definitionService.presentationDefinition[this.appConfig.constants.CURRENT_SEALS_HASH]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "milestonesWithProfiles$",
                    "defaultValue": "this.clanProfiles$.pipe(\r\n    map((cp) => {\r\n      return this.sealNodes\r\n        .filter((x) => x.redacted === false)\r\n        .map((seal) => {\r\n          const sealRecord = this.definitionService.recordDefinition[seal.completionRecordHash as number];\r\n          const sealGildingRecord =\r\n            sealRecord && sealRecord.titleInfo && sealRecord.titleInfo.gildingTrackingRecordHash\r\n              ? sealRecord.titleInfo.gildingTrackingRecordHash\r\n              : 0;\r\n\r\n          return {\r\n            seal: seal,\r\n            totalMembers: cp.length,\r\n            completedCount: this.getCompletionCount(cp, seal.completionRecordHash),\r\n            gildedCount: this.getCompletionCount(cp, sealGildingRecord),\r\n            isGilded: sealGildingRecord > 0\r\n          };\r\n        });\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SealListItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "sealNodes",
                    "defaultValue": "this.getDefinitionsByHash(\r\n    this.allNodes\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsPresentationDestinyPresentationNodeDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [
                {
                    "name": "getCompletionCount",
                    "args": [
                        {
                            "name": "memberProfiles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "completionHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "memberProfiles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "completionHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefinitionsByHash",
                    "args": [
                        {
                            "name": "allNodes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "allNodes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodes",
                    "args": [
                        {
                            "name": "node",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSealDetails$",
                    "args": [
                        {
                            "name": "sealHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SealClanMember[]>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sealHash",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { DefinitionService } from '@core/definition-services/definition.service';\r\n// import { RecordDefinitionService } from '@core/definition-services/record-definition.service';\r\nimport { ClansMembersService } from '@core/services/clans-members.service';\r\nimport { SeasonService } from '@core/services/season.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { getClanMemberId, getMemberProfileId } from '@destiny/data/utility';\r\nimport { DestinyDefinitionsPresentationDestinyPresentationNodeDefinition } from 'bungie-api-angular';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { profileSerializer } from 'projects/data/src/lib/profile/profile.serializer';\r\nimport { from, map, mergeMap, Observable, of, switchMap, toArray } from 'rxjs';\r\nimport { SealClanMember } from '../models/seal-clan-member';\r\nimport { SealListItem } from '../models/seal-list-item';\r\nimport { SealsModule } from '../seals-shell/seals.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SealsService {\r\n  constructor(\r\n    private definitionService: DefinitionService,\r\n    // private recordNodeService: RecordDefinitionService,\r\n    private seasonService:SeasonService,\r\n    private clansMembersService: ClansMembersService,\r\n    private profileService: ClanProfileService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n  //legacySealNode = this.presentationNodeService.definitions[1881970629]; //.getDefinitionsByHash(1881970629);\r\n  currentSealNodes = this.definitionService.presentationDefinition[this.appConfig.constants.CURRENT_SEALS_HASH];\r\n  //allNodes = this.getNodes(this.currentSealNodes).concat(this.getNodes(this.legacySealNode));\r\n  allNodes = this.getNodes(this.currentSealNodes);\r\n\r\n  sealNodes: DestinyDefinitionsPresentationDestinyPresentationNodeDefinition[] = this.getDefinitionsByHash(\r\n    this.allNodes\r\n  );\r\n\r\n  private getNodes(node) {\r\n    return node.children.presentationNodes.map((x) => x.presentationNodeHash);\r\n  }\r\n\r\n  private getDefinitionsByHash(allNodes: any[]) {\r\n    return allNodes.map((h) => {\r\n      return this.definitionService.presentationDefinition[h];\r\n    });\r\n  }\r\n\r\n  clanProfiles$ = this.clansMembersService.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          const hashes = this.sealNodes.filter((x) => x.completionRecordHash).map((x) => x.completionRecordHash);\r\n          const gildedHashes = [];\r\n          hashes.forEach((hash) => {\r\n            const record = this.definitionService.recordDefinition[hash as number];\r\n            if (record.titleInfo && record.titleInfo.gildingTrackingRecordHash) {\r\n              gildedHashes.push(record.titleInfo.gildingTrackingRecordHash);\r\n            }\r\n          });\r\n\r\n          return this.profileService\r\n            .getSerializedProfilesFromCache(\r\n              clanAndMembers.clan.clanId,\r\n              clanAndMembers.members,\r\n              this.seasonService.getSeasonProgressionHashes(),\r\n              [],\r\n              [...hashes, ...gildedHashes],\r\n              []\r\n            )\r\n            .pipe(\r\n              switchMap((memberProfiles) => {\r\n                return clanAndMembers.members.map((member) => {\r\n                  return {\r\n                    clanMember: member,\r\n                    profile: memberProfiles.find(\r\n                      (m) => getMemberProfileId(m) === getClanMemberId(member)\r\n                    ) as MemberProfile,\r\n                    clan: {\r\n                      clanId: clanAndMembers.clan.clanId,\r\n                      clanName: clanAndMembers.clan.clanName,\r\n                      clanTag: clanAndMembers.clan.clanTag\r\n                    }\r\n                  };\r\n                });\r\n              })\r\n            );\r\n        }),\r\n        toArray(),\r\n        map((x) => x.flatMap((y) => y))\r\n      );\r\n    })\r\n  );\r\n\r\n  milestonesWithProfiles$: Observable<SealListItem[]> = this.clanProfiles$.pipe(\r\n    map((cp) => {\r\n      return this.sealNodes\r\n        .filter((x) => x.redacted === false)\r\n        .map((seal) => {\r\n          const sealRecord = this.definitionService.recordDefinition[seal.completionRecordHash as number];\r\n          const sealGildingRecord =\r\n            sealRecord && sealRecord.titleInfo && sealRecord.titleInfo.gildingTrackingRecordHash\r\n              ? sealRecord.titleInfo.gildingTrackingRecordHash\r\n              : 0;\r\n\r\n          return {\r\n            seal: seal,\r\n            totalMembers: cp.length,\r\n            completedCount: this.getCompletionCount(cp, seal.completionRecordHash),\r\n            gildedCount: this.getCompletionCount(cp, sealGildingRecord),\r\n            isGilded: sealGildingRecord > 0\r\n          };\r\n        });\r\n    })\r\n  );\r\n\r\n  getSealDetails$(sealHash): Observable<SealClanMember[]> {\r\n    const sealCompletionHash = this.sealNodes.find((h) => h.hash == sealHash)?.completionRecordHash;\r\n    const sealRecord = this.definitionService.recordDefinition[sealCompletionHash as number];\r\n    const sealGildingRecord =\r\n      sealRecord && sealRecord.titleInfo && sealRecord.titleInfo.gildingTrackingRecordHash\r\n        ? sealRecord.titleInfo.gildingTrackingRecordHash\r\n        : 0;\r\n\r\n    return this.clanProfiles$.pipe(\r\n      map((clanProfiles) => {\r\n        return clanProfiles.map((clanProfile) => {\r\n          const profileProgression = clanProfile.profile.profileRecords.data.records[sealCompletionHash]?.objectives[0];\r\n          const gildedProgression =\r\n            sealGildingRecord > 0 ? clanProfile.profile.profileRecords.data.records[sealGildingRecord] : undefined;\r\n\r\n          return {\r\n            clanMember: clanProfile.clanMember,\r\n            profile: profileSerializer(clanProfile.profile, [], [], [], []), // Strip records to minimize size of object\r\n            clan: clanProfile.clan,\r\n            sealProgression: {\r\n              isGilded: gildedProgression ? gildedProgression.objectives[0].complete : undefined,\r\n              gildedCount: gildedProgression ? gildedProgression.completedCount : undefined,\r\n              isCompleted: profileProgression?.complete,\r\n              completedTriumphCount: profileProgression?.progress || 0,\r\n              totalTriumphCount: profileProgression?.completionValue || 0,\r\n              completionPercentage:\r\n                profileProgression?.progress > 0\r\n                  ? Math.floor((profileProgression?.progress / profileProgression?.completionValue) * 100)\r\n                  : 0\r\n            }\r\n          };\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  private getCompletionCount(memberProfiles, completionHash) {\r\n    return memberProfiles.filter((m) => {\r\n      const records = m.profile?.profileRecords?.data?.records[completionHash]?.objectives[0];\r\n\r\n      if (records) {\r\n        return records.complete;\r\n      }\r\n      return false;\r\n    }).length;\r\n  }\r\n  //   private getGildedCount(memberProfiles, gildedHash){\r\n  // return memberProfiles.filter((m) => {\r\n  //       const records = m.profile?.profileRecords?.data?.records[gildedHash]?.objectives[0];\r\n\r\n  //       if (records) {\r\n  //         return records.complete;\r\n  //       }\r\n  //       return false;\r\n  //     }).length;\r\n\r\n  //   }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clansMembersService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clansMembersService",
                        "type": "ClansMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ClanProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SeasonService",
            "id": "injectable-SeasonService-cdb76e7a6de7a25c2639189f6858bcfb48e8247fa9166e38c3f7e5f68e147fe2463a90e9f851661caadb83be2e4310eff3be24c4a130826f1f9e352d11eefa8c",
            "file": "projects/clan-dashboard/src/app/core/services/season.service.ts",
            "properties": [
                {
                    "name": "allSeasons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsSeasonsDestinySeasonDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "currentSeason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsSeasonsDestinySeasonDefinition",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "currentSeasonProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyDefinitionsSeasonsDestinySeasonPassDefinition",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "getPreviousSeason",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSeasonProgressionHashes",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "seasons",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seasonPasses",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seasons",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seasonPasses",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  DestinyDefinitionsSeasonsDestinySeasonDefinition,\r\n  DestinyDefinitionsSeasonsDestinySeasonPassDefinition\r\n} from 'bungie-api-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SeasonService {\r\n  currentSeason: DestinyDefinitionsSeasonsDestinySeasonDefinition;\r\n  currentSeasonProgress: DestinyDefinitionsSeasonsDestinySeasonPassDefinition;\r\n  allSeasons: DestinyDefinitionsSeasonsDestinySeasonDefinition[];\r\n  constructor() {}\r\n\r\n  init(\r\n    seasons: { [key: string]: DestinyDefinitionsSeasonsDestinySeasonDefinition },\r\n    seasonPasses: { [key: string]: DestinyDefinitionsSeasonsDestinySeasonPassDefinition }\r\n  ) {\r\n    const now = new Date();\r\n    const currentSeasonKey = Object.keys(seasons).find((seasonKey) => {\r\n      const season = seasons[seasonKey];\r\n      const hasEndAndNotPassed = !season.endDate || now < new Date(season.endDate);\r\n      return season.startDate && new Date(season.startDate) < now && hasEndAndNotPassed;\r\n    });\r\n\r\n    this.allSeasons = Object.keys(seasons).map((seasonKey) => {\r\n      return seasons[seasonKey];\r\n    });\r\n    this.currentSeason = seasons[currentSeasonKey];\r\n    this.currentSeasonProgress = seasonPasses[this.currentSeason.seasonPassHash];\r\n  }\r\n\r\n  getSeasonProgressionHashes(): number[] {\r\n    return [this.currentSeasonProgress.prestigeProgressionHash, this.currentSeasonProgress.rewardProgressionHash];\r\n  }\r\n\r\n  getPreviousSeason() {\r\n    const currentSeasonNumber = this.currentSeason.seasonNumber;\r\n    return this.allSeasons.find((season) => {\r\n      return season.seasonNumber && season.seasonNumber === currentSeasonNumber - 1;\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "StorybookService",
            "id": "injectable-StorybookService-ee71627bfa4c7884f3ba6720a3b94ca2b896ad045923dea37bd9154e189bf288d1384ee7fa0bd293385daaadbf69c9bff571f58c5c949a6da401b0a305dd773c",
            "file": "projects/components/src/lib/storybook/storybook.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from '../icons/register-icons';\r\n\r\n@Injectable()\r\nexport class StorybookService {\r\n\r\n    constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n        registerIcons(iconRegistry, domSanitizer);\r\n }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "ActivityModeResolveGuard",
            "id": "injectable-ActivityModeResolveGuard-976fa1123130af47c2558b972b2dbd5a0f8c6ab58e1bd6bf167cf5a361809b66e9f667f68bd7f94c7dab8ca69c87660f0c85d66d9c6438087888bfc92c8c4e7c",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/guards/activity-mode.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { ActivityModeShellModule } from '../activity-mode-shell/activity-mode-shell.module';\r\nimport { ActivityModeService } from '../data-access/activity-mode.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityModeResolveGuard implements CanActivate {\r\n  constructor(private activitiesService: ActivityModeService, private router: Router) {}\r\n\r\n  //TODO: There is a bug with trying to leverage this. Leaving this for now.\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    // const modeType = +route.paramMap.get('modeType');\r\n    // const mode = this.activitiesService.getActivityModeDefinition(modeType);\r\n    // if (!mode) {\r\n    //   return this.router.parseUrl('/activity-modes');\r\n    // }\r\n    return true;\r\n\r\n    // this.store.select(selectTotalClans).pipe(\r\n    //   map((clans) => {\r\n    //     if (!clans || clans === 0) {\r\n    //       return this.router.parseUrl('/clan-search');\r\n    //     }\r\n    //     return true;\r\n    //   })\r\n    // );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activitiesService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "activitiesService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ClanResolveGuard",
            "id": "injectable-ClanResolveGuard-a204d1b6b526ee2118da271e3b66a96faf0f340c26ecfb8ab847a35d6b82935ceb5144e7ca0434ad2b98f4ef80bc05b0c2e9cc281952519b711c5755bdd15207",
            "file": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { map, Observable, of } from 'rxjs';\r\nimport { selectTotalClans } from '@core/store/clans/clans.selectors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanResolveGuard implements CanActivate {\r\n  constructor(private store: Store, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.store.select(selectTotalClans).pipe(\r\n      map((clans) => {\r\n        if (!clans || clans === 0) {\r\n          return this.router.parseUrl('/home');\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ApiKeyInterceptor",
            "id": "injectable-ApiKeyInterceptor-4793ba3d596c9301d951ef639da9925af9cd9d50355437590e973583799c64856dafc927815e578d58deadbab7aa24486d98923a4fb232f487887b71dc7d3e25",
            "file": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\n@Injectable()\r\nexport class ApiKeyInterceptor implements HttpInterceptor {\r\n  constructor(private appConfig: AppConfig) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add the header to the cloned request\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('x-api-key', this.appConfig.apiKey)\r\n    });\r\n\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppConfig",
            "id": "class-AppConfig-1b6d8fabed406fa3751b36d267eadbb1e900f4326cd493963fdad7d99df3d9f0aa011b009ef368effd9855138e13059543b74946b1895dc452946a5fc08f29a3",
            "file": "projects/clan-dashboard/src/app/core/config/app-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DeepPartial } from '@destiny/data/models';\r\nimport { baseConstants } from '../../../environments/constants';\r\n\r\nexport class AppConfig {\r\n  readonly constants: DeepPartial<typeof baseConstants>\r\n  readonly apiKey: string;\r\n  readonly appVersion: string;\r\n  readonly production: boolean\r\n}\r\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "constants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeepPartial<>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-6d580bd28cedc748c5beca3ce1092e9b9ead3d26da9ec543171d7fb8703433d851bfb8cc2dfa5a6ef78b3782c8bdeac8e62ae11122207cfe4ba9b68466ce17ea",
            "file": "projects/data/src/lib/db/app-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 2;\r\n\r\nexport type StoreId = 'allData';\r\n\r\nexport const STORE_IDS: StoreId[] = ['allData'];\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string) {\r\n    super(name, DB_VERSION, STORE_IDS);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-05a4207ec3ed693c9d635095f4ee92221da52a98e2f5c63c1c5205238783a0ea5636eb0a66c4dc84a1661d96e767f1f564ff07752448c7b9902d6d75e6dea438-1",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 6;\r\n\r\nexport enum StoreId {\r\n  ClanDetails = 'ClanDetails',\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\nBungieInfo = 'BungieInfo'\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n // StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  //StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.BungieInfo\r\n  //StoreId.ProfileMilestones,\r\n  //StoreId.MemberActivityStats,\r\n  //StoreId.ProfileMetrics,\r\n // StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(`D2DB-${name}`, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppIndexedDb-1"
        },
        {
            "name": "BaseAppIndexedDb",
            "id": "class-BaseAppIndexedDb-97ec7e402d125f8a550e28bc7178da10feebc70bc471451851d94ea7b52f88855818e0b24a8b6ff99ec0b5aed5afbe5d01990c764375577c17704077273207b9",
            "file": "projects/data/src/lib/db/base-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { openDB, deleteDB, IDBPDatabase } from 'idb';\r\n\r\nexport class BaseAppIndexedDb {\r\n  name: string;\r\n  dbVersion: number;\r\n  storeIds: string[];\r\n\r\n  private db: Promise<IDBPDatabase>;\r\n\r\n  constructor(name: string, dbVersion: number, storeIds: string[], initializeValues: boolean = true) {\r\n    this.dbVersion = dbVersion;\r\n    this.storeIds = storeIds;\r\n\r\n    if (initializeValues) {\r\n      this.resetInitialValues();\r\n    }\r\n    this.name = name;\r\n    this.openDb();\r\n  }\r\n\r\n  close() {\r\n    return this.db.then((db) => db.close());\r\n  }\r\n\r\n  private resetInitialValues() {}\r\n\r\n  getAllData(store: string) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).getAll();\r\n    });\r\n  }\r\n\r\n  getById(store: string, id) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).get(id);\r\n    });\r\n  }\r\n\r\n  removeData() {\r\n   return this.db\r\n      .then((db) => {\r\n        this.resetInitialValues();\r\n        db.close();\r\n        return deleteDB(this.name);\r\n      })\r\n      .then(() => this.openDb());\r\n  }\r\n\r\n  purgeDatabase() {\r\n    return this.close().then((db) => {\r\n\r\n      return deleteDB(this.name).catch((x) => {\r\n      });\r\n    });\r\n  }\r\n\r\n  updateValues(values: any[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      values.forEach((v) => store.put(v));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeValues(ids: string[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      ids.forEach((id) => store.delete(id));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeAllValues(collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      return store.clear();\r\n    });\r\n  }\r\n\r\n  private openDb() {\r\n    const base = this;\r\n    this.db = openDB(this.name, this.dbVersion, {\r\n      upgrade(db, oldVersion, newVersion, transaction) {\r\n        base.storeIds.forEach((collectionId) => {\r\n          if (!db.objectStoreNames.contains(collectionId)) {\r\n            const objectStore = db.createObjectStore(collectionId, {\r\n              keyPath: 'id'\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseClanAggregateTimeService",
            "id": "class-BaseClanAggregateTimeService-a28bfe1924748ff83b14213945f6eb8cf947c50e0b8f643fce4db385402dfdbf8f573dbd2f9f190462a9be323229b0a50b97e14fff54fa99b452a3848fb0b005",
            "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/base-clan-aggregate-time.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { from, Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../../clan/clan-database';\r\nimport { ClanMemberRecentActivityService } from '../../clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\n// import {  MemberProfile } from '../../models/MemberProfile';\r\nimport { MemberActivityTime } from '../../models/MemberActivityTime';\r\n// import { AppConfig } from 'src/app/app.config';\r\n// import { ClanMemberRecentActivityService } from '../../clan-db/clan-member-recent-activity/clan-member-recent-activity.service';\r\n// import { ClanDatabase } from '../../clan-db/ClanDatabase';\r\n// import { ClanMemberRecentActivityService, ClanDatabase } from '../../clan-db';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\nexport abstract class BaseClanAggregateTimeService {\r\n  readonly CONCURRENT_COUNT = 10;\r\n  private memberActivityService: ClanMemberRecentActivityService;\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {\r\n    this.memberActivityService = new ClanMemberRecentActivityService(clanDb, apiKey);\r\n  }\r\n\r\n  abstract getClanActivityStatsForDuration(memberActivities: MemberActivityTime[], activityMode, count);\r\n\r\n  filterDates(memberActivities: MemberActivityTime[], startDate: Date): MemberActivityTime[] {\r\n    return memberActivities.map((ma) => {\r\n      return {\r\n        id: ma.id,\r\n        activities: ma.activities.filter((x) => x.date > startDate)\r\n      };\r\n    });\r\n  }\r\n\r\n  /** @deprecated use gender field instead */\r\n  getClanActivityStats(clanId: number, clanMemberProfiles: MemberProfile[], startDate: Date, activityMode: number = 0) {\r\n    return from(clanMemberProfiles).pipe(\r\n      mergeMap((member) => {\r\n        return this.getMemberActivityStats(clanId, member, startDate, activityMode);\r\n      }, this.CONCURRENT_COUNT)\r\n    );\r\n  }\r\n\r\n  /** @deprecated use gender field instead */\r\n  private getMemberActivityStats(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    startDate: Date,\r\n    activityMode: number = 0\r\n    // TODO: Update\r\n  ): Observable<any> {\r\n    return this.memberActivityService.getMemberActivity(clanId, member, false, activityMode).pipe(\r\n      map((memberActivityResponse) => {\r\n        return {\r\n          memberProfile: { profile: member.profile },\r\n          stats: {\r\n            id: memberActivityResponse.id,\r\n            activities: memberActivityResponse.activities.filter((x) => new Date(x.period) > startDate)\r\n          }\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "CONCURRENT_COUNT",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "memberActivityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberRecentActivityService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "filterDates",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MemberActivityTime[]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanActivityStatsForDuration",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "count",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseClanService",
            "id": "class-BaseClanService-90d92405f1a8d87d72776f077a0069b1779211a0acb8aac1176886061d068381f2947a77145820dc5e02ed0ec5c89597e4bfda437238aa39f499ab6b36bc2475",
            "file": "projects/data/src/lib/clan/base-clan.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { isValidDate, nowPlusMinutes } from '../utility/date-utils';\r\n\r\nexport class BaseClanService {\r\n  tableName;\r\n  constructor(private clanDbBase: ClanDatabase, private tableNameBase: StoreId) {\r\n    this.tableName = tableNameBase;\r\n  }\r\n\r\n  getDataFromCache(clanId: string, rowId: string): Promise<DBObject> {\r\n    return this.clanDbBase.getById(clanId, this.tableNameBase, rowId);\r\n  }\r\n\r\n  getAllDataFromCache(clanId: string): Promise<DBObject[]> {\r\n    return this.clanDbBase.getAll(clanId, this.tableNameBase);\r\n  }\r\n\r\n  isCacheValid(cachedData: DBObject, minuteExpiration: number, lastActivity?: Date) {\r\n    if (cachedData && cachedData.createDate) {\r\n      const cacheDate = cachedData.createDate;\r\n      let expireDate;\r\n      if (isValidDate(lastActivity)) {\r\n        if (minuteExpiration === 0) {\r\n          expireDate = lastActivity;\r\n        } else {\r\n          const minuteXP = nowPlusMinutes(-minuteExpiration);\r\n          const lastActivityXP = lastActivity;\r\n          expireDate = minuteXP > lastActivityXP ? lastActivityXP : minuteXP;\r\n        }\r\n      } else {\r\n        expireDate = nowPlusMinutes(-minuteExpiration);\r\n      }\r\n      return cacheDate > expireDate;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateDB(clanId: string, rowId: string, data: any) {\r\n    this.clanDbBase.update(clanId, this.tableName, [\r\n      {\r\n        id: rowId,\r\n        createDate: new Date(),\r\n        data: data\r\n      }\r\n    ]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseDefinitionService",
            "id": "class-BaseDefinitionService-3f1a4648ea287776f456b1f058117617b612ec6fd42a4596d0f7c570dd5d6b28cab6983914692317701e0b3089ced78ea8977fc313cb46dba973f2df08bdab4c",
            "file": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class BaseDefinitionService<T> {\r\n  definitions: T[];\r\n  initializeCache(defs: T[]) {\r\n    this.definitions = defs;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseMemberActivityService",
            "id": "class-BaseMemberActivityService-7e386cb4777bcc8733a427fcd25d61169fd5ed114ad11f67b1db87ed8c6d6b51bfc6442714c66fe49dcc2273336b788a004294ed8625dd89b1eb952986c2cb2b",
            "file": "projects/data/src/lib/clan/base-member-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseClanService } from './base-clan.service';\r\n//import { ClanDatabase } from './ClanDatabase';\r\n//import { StoreId, DBObject } from './app-indexed-db';\r\nimport { groupActivitiesByDate } from '../utility/group-activity-by-date';\r\n\r\n//import { Destiny2Service, DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup } from 'bungie-api-angular';\r\n\r\n// import { MemberProfile } from 'bungie-models';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of, from, defer, concat, EMPTY, forkJoin } from 'rxjs';\r\nimport { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { MemberActivityStats } from '../models/MemberActivityStat';\r\nimport { MemberActivityTime } from '../models/MemberActivityTime';\r\nimport { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from '../models';\r\n//import { clanMemberActivitySerializer } from './clan-member-activity/clan-member-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityTime } from 'projects/bungie-models/src/lib/models/MemberActivityTime';\r\n//import { MemberActivityStats } from 'projects/bungie-models/src/lib/models/MemberActivityStat';\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\ninterface ActivityCollection {\r\n  activities: any[];\r\n}\r\nexport class BaseMemberActivityService extends BaseClanService {\r\n  private ACTIVITY_GET_COUNT = 250;\r\n  constructor(\r\n    private clanDbPBase: ClanDatabase,\r\n    private tableNamePBase: StoreId,\r\n    private apiKey: string,\r\n    // private d2ServiceBase: Destiny2Service,\r\n    public startValue: Date,\r\n    public maxRequestCount: Number,\r\n    public activityTypeId = 0\r\n  ) {\r\n    super(clanDbPBase, tableNamePBase);\r\n  }\r\n\r\n  public getMemberCharacterActivityFromAPI(member: MemberProfile, characterId: number, pageNumber = 0) {\r\n    // https://www.bungie.net/Platform/Destiny2/3/Account/4611686018483900283/Character/2305843009471454818/Stats/Activities/?count=250&mode=0&page=10\r\n\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.profile.data.userInfo.membershipType}/Account/${member.profile.data.userInfo.membershipId}/Character/${characterId}/Stats/Activities/?count=${this.ACTIVITY_GET_COUNT}&mode=${this.activityTypeId}&page=${pageNumber}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n\r\n    // return this.d2ServiceBase.destiny2GetActivityHistory(\r\n    //   characterId,\r\n    //   member.profile.data.userInfo.membershipId,\r\n    //   member.profile.data.userInfo.membershipType,\r\n    //   this.ACTIVITY_GET_COUNT,\r\n    //   this.activityTypeId,\r\n    //   pageNumber\r\n    // );\r\n  }\r\n\r\n  private activitiesContainExpiredYear(activities, expiration) {\r\n    if (!activities) {\r\n      return true;\r\n    }\r\n\r\n    return !!activities.find((x) => {\r\n      const activityYear = new Date(x.period);\r\n      return activityYear <= expiration;\r\n    });\r\n  }\r\n\r\n  private getAllRecentActivity(member: MemberProfile, characterId: number): Observable<ActivityCollection> {\r\n    const maxConcurrentCount = 4;\r\n    const fetchPage = (page = 0) => {\r\n      return this.getMemberCharacterActivityFromAPI(member, characterId, page).pipe(\r\n        map((x: any) => {\r\n          const nextPage =\r\n            this.activitiesContainExpiredYear(x?.Response?.activities, this.startValue) || page >= this.maxRequestCount\r\n              ? null\r\n              : page + maxConcurrentCount;\r\n\r\n          const activities = x?.Response?.activities || [];\r\n          return { activities, nextPage };\r\n        })\r\n      );\r\n    };\r\n\r\n    const getItems = (page) =>\r\n      defer(() => fetchPage(page)).pipe(\r\n        mergeMap(({ activities, nextPage }) => {\r\n          const items$ = from(activities);\r\n          const next$ = nextPage ? getItems(nextPage) : EMPTY;\r\n          return concat(items$, next$);\r\n        })\r\n      );\r\n\r\n    const batchedRequest = [];\r\n    for (let i = 0; i < maxConcurrentCount; i++) {\r\n      batchedRequest.push(getItems(i).pipe(toArray()));\r\n    }\r\n\r\n    return forkJoin(batchedRequest).pipe(\r\n      map((x: any) => {\r\n        return {\r\n          activities: x.flat()\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getMemberActivityId(member: MemberProfile, characterId: number) {\r\n    return `${this.getMemberProfileId(member)}-${characterId}`;\r\n  }\r\n  getMemberProfileId(member: MemberProfile) {\r\n    return `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`;\r\n  }\r\n\r\n  /**\r\n   *  Pulls character activity from cache and will return fresh data if cache is exipred\r\n   */\r\n  getMemberCharacterActivity(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean\r\n\r\n    // ): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    const characterActivityId = this.getMemberActivityId(member, characterId);\r\n\r\n    return from(this.getDataFromCache(clanId.toString(), characterActivityId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        // if (this.isCacheValid(cachedData, 720, new Date(member.profile.data.dateLastPlayed))) {\r\n        //   return of(cachedData.data);\r\n        // }\r\n\r\n        // return this.getFreshMemberCharacterActivity(clanId, member, characterId, characterActivityId, cachedData);\r\n\r\n        if (useCache) {\r\n          return this.verifyCacheIntegrity(clanId, member, characterId, cachedData);\r\n        }\r\n        return of(cachedData.data);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if Cached data is fresh enough to use. Triggers new call if too old.\r\n   *\r\n   */\r\n  verifyCacheIntegrity(clanId, memberProfile: MemberProfile, characterId, cachedData: DBObject) {\r\n    const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n    if (this.isCacheValid(cachedData, 720, new Date(memberProfile.profile.data.dateLastPlayed))) {\r\n      return of(cachedData.data);\r\n    }\r\n\r\n    return this.getFreshMemberCharacterActivity(clanId, memberProfile, characterId, characterActivityId, cachedData);\r\n  }\r\n\r\n  /**\r\n   * Calls for fresh character activity. Updates cache. Falls back on cache on failure.\r\n   */\r\n  getFreshMemberCharacterActivity(\r\n    clanId: string,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    characterActivityId: string,\r\n    cachedData: DBObject\r\n    //): Observable<Array<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup>> {\r\n  ): Observable<Array<any>> {\r\n    return this.getAllRecentActivity(member, characterId).pipe(\r\n      map((activityResponse) => {\r\n        if (activityResponse.activities) {\r\n          // serialize:\r\n          const slimmedActivities = activityResponse.activities.map((x) => {\r\n            return clanMemberActivitySerializer(x);\r\n          });\r\n\r\n          this.updateDB(clanId, characterActivityId, slimmedActivities);\r\n          return slimmedActivities;\r\n        }\r\n        return of([]);\r\n      }),\r\n      catchError((error) => {\r\n        if (error.error?.ErrorStatus === 'DestinyPrivacyRestriction') {\r\n          this.updateDB(clanId, characterActivityId, []);\r\n          return of([]);\r\n        }\r\n        if (cachedData && cachedData.data) {\r\n          return of(cachedData.data);\r\n        }\r\n\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  groupActivitiesToMember(memberProfile: MemberProfile, allActivities: DBObject[], activityMode: number = 0) {\r\n    if (!memberProfile) {\r\n      return undefined;\r\n    }\r\n    const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n\r\n    const memberActivitiesDB = allActivities.filter((x) => x.id.startsWith(memberProfileId));\r\n\r\n    const memberActivitiesSerialized = memberActivitiesDB.map((activityDB) =>\r\n      activityDB.data.map((activity) => clanMemberActivitySerializer(activity))\r\n    );\r\n\r\n    const allFilteredActivities =\r\n      activityMode > 0\r\n        ? memberActivitiesSerialized.map((items) =>\r\n            items.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1)\r\n          )\r\n        : memberActivitiesSerialized;\r\n\r\n    const timed = groupActivitiesByDate([].concat(...allFilteredActivities));\r\n\r\n    return {\r\n      id: memberProfileId,\r\n      activities: timed\r\n    };\r\n  }\r\n\r\n  groupActivitiesToMembers(\r\n    memberProfiles: MemberProfile[],\r\n    allActivities: DBObject[],\r\n    activityMode: number = 0\r\n  ): any[] {\r\n    return memberProfiles\r\n      .filter((m) => !!m)\r\n      .map((memberProfile) => {\r\n        return this.groupActivitiesToMember(memberProfile, allActivities, activityMode);\r\n      });\r\n  }\r\n\r\n  getAllActivitiesFromCache(\r\n    clanId: number,\r\n    memberProfiles: MemberProfile[],\r\n    activityMode = 0\r\n  ): Observable<MemberActivityTime[]> {\r\n    return from(this.getAllDataFromCache(clanId.toString())).pipe(\r\n      map((x) => {\r\n        const y = this.groupActivitiesToMembers(memberProfiles, x, activityMode);\r\n        return y;\r\n      })\r\n    );\r\n  }\r\n  // TODO: Turn this up to 11\r\n  updateAllActivityCache(clanId: number, memberProfiles: MemberProfile[], progress?: (done) => any) {\r\n    const memberProfilesObs = from(memberProfiles);\r\n    const cacheDataObs = from(this.getAllDataFromCache(clanId.toString()));\r\n\r\n    return cacheDataObs.pipe(\r\n      switchMap((cachedData) => {\r\n        let complete = 0;\r\n        return memberProfilesObs.pipe(\r\n          mergeMap((memberProfile) => {\r\n            if (!memberProfile?.profile?.data?.characterIds) {\r\n              return of();\r\n            }\r\n            return from(memberProfile.profile.data.characterIds).pipe(\r\n              mergeMap((characterId: number) => {\r\n                const characterActivityId = this.getMemberActivityId(memberProfile, characterId);\r\n                const characterActivityCache = cachedData.find((x) => x.id === characterActivityId);\r\n\r\n                return this.verifyCacheIntegrity(clanId, memberProfile, characterId, characterActivityCache);\r\n              }),\r\n              toArray(),\r\n              map((x) => {\r\n                const memberProfileId = `${memberProfile.profile.data.userInfo.membershipType}-${memberProfile.profile.data.userInfo.membershipId}`;\r\n                return {\r\n                  id: memberProfileId\r\n                };\r\n              })\r\n            );\r\n          }, 3),\r\n          tap((x) => {\r\n            complete++;\r\n            if (progress) {\r\n              progress(complete);\r\n            }\r\n          }),\r\n          toArray()\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getMemberActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityStats> {\r\n    if (!member?.profile) {\r\n      return of(null);\r\n    }\r\n    return from(member.profile.data.characterIds).pipe(\r\n      mergeMap((characterId: number) => {\r\n        return this.getMemberCharacterActivitySerialized(clanId, member, characterId, useCache, activityMode);\r\n      }),\r\n      map((x) => {\r\n        return x.activities;\r\n      }),\r\n      toArray(),\r\n      map((x) => {\r\n        return {\r\n          id: `${member.profile.data.userInfo.membershipType}-${member.profile.data.userInfo.membershipId}`,\r\n          activities: [].concat(...x)\r\n        };\r\n      }),\r\n      catchError((error) => {\r\n        console.error(error);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n  getMemberCharacterActivitySerialized(\r\n    clanId: number,\r\n    member: MemberProfile,\r\n    characterId: number,\r\n    useCache: boolean,\r\n    activityMode: number = 0\r\n  ) {\r\n    return this.getMemberCharacterActivity(clanId, member, characterId, useCache).pipe(\r\n      map((activity) => {\r\n        if (activityMode > 0) {\r\n          activity = activity.filter((a) => a.activityDetails.modes.indexOf(activityMode) > -1);\r\n        }\r\n        return {\r\n          activities: activity.map((a) => clanMemberActivitySerializer(a))\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDbPBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableNamePBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "startValue",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxRequestCount",
                        "type": "Number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityTypeId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "clanDbPBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableNamePBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "startValue",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maxRequestCount",
                        "type": "Number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityTypeId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "ACTIVITY_GET_COUNT",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activityTypeId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxRequestCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "activitiesContainExpiredYear",
                    "args": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityTime[]>",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRecentActivity",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityCollection>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFreshMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls for fresh character activity. Updates cache. Falls back on cache on failure.\n",
                    "description": "<p>Calls for fresh character activity. Updates cache. Falls back on cache on failure.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityStats>",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivityId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Pulls character activity from cache and will return fresh data if cache is exipred\n",
                    "description": "<p> Pulls character activity from cache and will return fresh data if cache is exipred</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCharacterActivityFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCharacterActivitySerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesToMember",
                    "args": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: string; activities: any; }",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesToMembers",
                    "args": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllActivityCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyCacheIntegrity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if Cached data is fresh enough to use. Triggers new call if too old.\n\n",
                    "description": "<p>Determines if Cached data is fresh enough to use. Triggers new call if too old.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseClanService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BungieInfoService",
            "id": "class-BungieInfoService-9d214f3ca61cc2abbf2530e109d2eb7aac1ae3f2690c1b8caad387ba13a6615554372161c9f3b1ae109e6bec8e9bf2f475c2aa445a328e5b472fd0a37c712e3b",
            "file": "projects/data/src/lib/clan/bungie-info/bungie-info.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of, throwError } from 'rxjs';\r\n// import { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\nimport { BungieInfo } from '../../models/BungieInfo';\r\ninterface MemberProfile {}\r\n\r\nexport class BungieInfoService {\r\n  private tableName: StoreId = StoreId.BungieInfo;\r\n  private concurrentRequests = 20;\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n  private getBungieNetMembershipId(member: ClanMember) {\r\n    return member.bungieNetUserInfo.membershipId;\r\n  }\r\n\r\n  private getBungieInfoFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getBungieInfoFromAPI(member: ClanMember) {\r\n    if (member?.bungieNetUserInfo?.membershipId) {\r\n      const url = `https://www.bungie.net/Platform/User/GetBungieNetUserById/${this.getBungieNetMembershipId(member)}/`;\r\n      // https://www.bungie.net/Platform/User/GetBungieNetUserById/612698/\r\n\r\n      return new Observable((observer) => {\r\n        fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (!data.Response) {\r\n              throw data;\r\n            }\r\n            observer.next(data);\r\n            observer.complete();\r\n          })\r\n          .catch((err) => {\r\n            console.log('error', err);\r\n            observer.error(err);\r\n          });\r\n      });\r\n    }\r\n    return of(null);\r\n  }\r\n\r\n  getBungieInfo(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getBungieInfoFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getBungieInfoFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse?.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, member);\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, member);\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedBungieInfos<T>(clanId: string, members: ClanMember[]): Observable<T> {\r\n    return from(members).pipe(mergeMap((member) => this.getSerializedBungieInfo(clanId, member), 100)) as Observable<T>;\r\n  }\r\n\r\n  getSerializedBungieInfosFromCache(clanId: string, members: ClanMember[]): Observable<BungieInfo[]> {\r\n    return from(members).pipe(\r\n      mergeMap((member) => this.getSerializedBungieInfoFromCache(clanId, member), 100),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  getSerializedBungieInfosWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<BungieInfo[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedBungieInfo(clanId, member), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedBungieInfo(clanId: string, member: ClanMember): Observable<BungieInfo> {\r\n    return this.getBungieInfo(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profile;\r\n        // return profileSerializer(\r\n        //   profile,\r\n        //   this.TRACKED_HASHES,\r\n        //   collectionHashes,\r\n        //   profileRecords,\r\n        //   profileMetrics\r\n        // ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n  getSerializedBungieInfoFromCache(clanId: string, member: ClanMember): Observable<BungieInfo> {\r\n    return from(this.getBungieInfoFromCache(clanId, member)).pipe(\r\n      map((profile) => {\r\n        return profile?.data || [];\r\n        // return profileSerializer(\r\n        //   profile?.data || [],\r\n        //   this.TRACKED_HASHES,\r\n        //   collectionHashes,\r\n        //   profileRecords,\r\n        //   profileMetrics\r\n        // ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "defaultValue": "StoreId.BungieInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBungieInfo",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieInfoFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieInfoFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieNetMembershipId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedBungieInfo",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BungieInfo>",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedBungieInfoFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BungieInfo>",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedBungieInfos",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedBungieInfosFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BungieInfo[]>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedBungieInfosWithProgress",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BungieInfo[]>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CachedProfileService",
            "id": "class-CachedProfileService-d971bccfbc9d6f4ef99e47480db63b22d38bbe6b02957ffbb89c471e8548260682b17c8e09dc9941a34e03fdae6715438f1262e6d4148c5f6fcf019e624ce07f",
            "file": "projects/data/src/lib/profile/cached-profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { createStore, UseStore } from 'idb-keyval';\r\nimport { catchError, from, map, mergeMap, Observable, of } from 'rxjs';\r\nimport { IdbKeyValService } from '../storage';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../utility/date-utils';\r\nimport { ProfileService } from './profile.service';\r\nimport { MemberProfile } from '../models/MemberProfile';\r\n\r\nexport class CachedProfileService extends ProfileService {\r\n  profileStore: UseStore;\r\n  constructor(private idbKeyValService: IdbKeyValService, private apiKey: string) {\r\n    super(apiKey);\r\n    this.profileStore = createStore('D2Dashboard-profiles', 'data');\r\n  }\r\n  private getStorageId(membershipType, membershipId) {\r\n    return `${membershipType}-${membershipId}`;\r\n  }\r\n  private getProfileFromCache(membershipType, membershipId) {\r\n    return this.idbKeyValService.get(this.getStorageId(membershipType, membershipId), this.profileStore);\r\n  }\r\n\r\n  getProfile(membershipType, membershipId): Observable<MemberProfile> {\r\n    console.log(`${membershipType}${membershipId}`);\r\n    return from(this.getProfileFromCache(membershipType, membershipId)).pipe(\r\n      mergeMap((cachedData) => {\r\n        console.log('cached', cachedData);\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          //const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          //const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > staleXP) {\r\n            console.log('returning cached');\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(membershipType, membershipId).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.idbKeyValService.set(\r\n                this.getStorageId(membershipType, membershipId),\r\n                {\r\n                  id: this.getStorageId(membershipType, membershipId),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                },\r\n                this.profileStore\r\n              );\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            console.log('of error', error);\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, this.getStorageId(membershipType, membershipId));\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, this.getStorageId(membershipType, membershipId));\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "idbKeyValService",
                        "type": "IdbKeyValService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "idbKeyValService",
                        "type": "IdbKeyValService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "profileStore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UseStore",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "profileComponents",
                    "defaultValue": "[100, 104, 200, 202, 800, 900, 1100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "ProfileService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromCache",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorageId",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromAPI",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ProfileService"
                    }
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ProfileService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ProfileService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanActivityService",
            "id": "class-ClanActivityService-8c3d0b24efdf88a60b1e66c5d8c1d66e902c2b3bd009972767ebe9d0f79237de60ae9c9f1e30e992c1a7109b7fcd713db5c0bf938f1ade790913748aaaed2cd0",
            "file": "projects/data/src/lib/stat-aggregators/clan-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { forkJoin, from, Observable, of } from 'rxjs';\r\nimport { map, mergeMap, toArray } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../clan/clan-database';\r\nimport { TrackedDuration } from '../clan/clan-member-recent-activity/clan-member-recent-activity.serializer';\r\nimport { ClanMemberRecentActivityService } from '../clan/clan-member-recent-activity/clan-member-recent-activity.service';\r\nimport { ActivityStats } from '../models/ActivityStats';\r\n// import { ActivityStats } from '../models';\r\n// import { ClanDatabase, ClanMemberRecentActivityService } from '../clan-db';\r\n\r\nexport class ClanActivityService {\r\n  readonly CONCURRENT_COUNT = 10;\r\n  private memberActivityService: ClanMemberRecentActivityService;\r\n  constructor(private clanDb: ClanDatabase, private apiKey) {\r\n    this.memberActivityService = new ClanMemberRecentActivityService(clanDb, apiKey);\r\n  }\r\n\r\n  //getClanActivityStats(clanId: number, clanMemberProfiles: MemberProfile[], activityMode: number = 0) {\r\n  getClanActivityStats(\r\n    clanId: number,\r\n    clanMemberProfiles: any[],\r\n    trackedDates: TrackedDuration[],\r\n    activityMode: number = 0\r\n  ) {\r\n    return from(clanMemberProfiles).pipe(\r\n      mergeMap((member) => {\r\n        return this.getMemberActivityStats(clanId, member, trackedDates, activityMode);\r\n      }, this.CONCURRENT_COUNT),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  private getMemberActivityStats(\r\n    clanId: number,\r\n    member: any,\r\n    trackedDates: TrackedDuration[],\r\n    activityMode: number = 0\r\n  ): Observable<ActivityStats> {\r\n    // private getMemberActivityStats(clanId: number, member: any, activityMode: number = 0): Observable<any> {\r\n    return this.memberActivityService\r\n      .getSerializedProfileActivity(clanId, member, true, trackedDates, activityMode)\r\n      .pipe(\r\n        map((memberActivityResponse) => {\r\n          return {\r\n            memberProfile: { profile: member?.profile },\r\n            stats: memberActivityResponse\r\n          };\r\n        })\r\n      );\r\n    //return of(null);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "CONCURRENT_COUNT",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "memberActivityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberRecentActivityService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getClanActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityStats>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanDatabase",
            "id": "class-ClanDatabase-7d9053c3c77b56fd0f6882a34e8eac14c9dbb97ab2b6c503ec44f2b061402dd3fe417e2f18d7755b2a04a28f6cc239237e96bae4edd1494a66e5ae464cdb642f",
            "file": "projects/data/src/lib/clan/clan-database.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AppIndexedDb, StoreId, DBObject, STORE_IDS } from '../db/clan-indexed-db';\r\n\r\nexport class ClanDatabase {\r\n  private database: AppIndexedDb;\r\n\r\n  getAll(repository: string, type: StoreId): Promise<DBObject[]> {\r\n    return this.getDatabase(repository).getAllData(type);\r\n  }\r\n\r\n  getById(repository: string, type: StoreId, id: string): Promise<DBObject> {\r\n    return this.getDatabase(repository).getById(type, id);\r\n  }\r\n\r\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\r\n    return this.getDatabase(repository).updateValues(entities, type);\r\n  }\r\n\r\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\r\n    return this.getDatabase(repository).removeValues(ids, type);\r\n  }\r\n\r\n  removeAll(repository: string, type: StoreId) {\r\n    return this.getDatabase(repository).removeAllValues(type);\r\n  }\r\n\r\n  deleteDatabase(repository: string) {\r\n    return this.getDatabase(repository, false).purgeDatabase();\r\n  }\r\n\r\n  purgeDatabase(repository: string) {\r\n    STORE_IDS.forEach((storeId) => {\r\n      this.getDatabase(repository, false).removeAllValues(storeId);\r\n    });\r\n  }\r\n\r\n  private getDatabase(repository: string, initializeValues: boolean = true) {\r\n    if (this.database && this.database.name === repository) {\r\n      return this.database;\r\n    }\r\n\r\n    if (this.database) {\r\n      this.database.close();\r\n    }\r\n\r\n    this.database = new AppIndexedDb(repository, initializeValues);\r\n    return this.database;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "purgeDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanMemberRecentActivityService",
            "id": "class-ClanMemberRecentActivityService-09aec81fb29bc6ac53842bdf95abc9ac6a4ee396e522b8c99cb091cab87e997378c4086a498444a410bbc5b79282885e7ab207bdee2ee365bbd07e77178c3236",
            "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseMemberActivityService } from '../base-member-activity.service';\r\n// import { ClanDatabase } from '../ClanDatabase';\r\n// import { StoreId } from '../app-indexed-db';\r\nimport { from, Observable } from 'rxjs';\r\nimport { mergeMap, map, toArray } from 'rxjs/operators';\r\n// import { MemberActivityStats, MemberProfile, MemberActivityRecentStats } from 'bungie-models';\r\n\r\n//import { clanMemberRecentActivitySerializer } from './clan-member-recent-activity.serializer';\r\n//import { MemberProfile } from 'projects/bungie-models/src/lib/models/MemberProfile';\r\n//import { MemberActivityRecentStats } from 'projects/bungie-models/src/lib/models/MemberActivityRecentStats';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\n// import { MemberProfile } from '../../models';\r\nimport { MemberActivityRecentStats } from '../../models/MemberActivityRecentStats';\r\nimport { clanMemberRecentActivitySerializer, TrackedDuration } from './clan-member-recent-activity.serializer';\r\n\r\ninterface MemberProfile {\r\n  profile: any;\r\n}\r\n\r\nexport class ClanMemberRecentActivityService extends BaseMemberActivityService {\r\n  private concurrentRequests = 5;\r\n  constructor(private clanDB: ClanDatabase, private baseApiKey: string) {\r\n    super(\r\n      clanDB,\r\n      StoreId.MemberRecentActivities,\r\n      baseApiKey,\r\n      new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 90)),\r\n      8,\r\n      0\r\n    );\r\n  }\r\n  getSerializedProfileActivity(\r\n    clanId: number,\r\n    member: any,\r\n    useCache: boolean,\r\n    trackedDates: TrackedDuration[],\r\n    activityMode: number = 0\r\n  ): Observable<MemberActivityRecentStats> {\r\n    return this.getMemberActivity(clanId, member, useCache, activityMode).pipe(\r\n      map((profileActivity) => {\r\n        return clanMemberRecentActivitySerializer(profileActivity, trackedDates);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDB",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseApiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "clanDB",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseApiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ACTIVITY_GET_COUNT",
                    "defaultValue": "250",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "activityTypeId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "maxRequestCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "startValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getSerializedProfileActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityRecentStats>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trackedDates",
                            "type": "TrackedDuration[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activitiesContainExpiredYear",
                    "args": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "activities",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getAllActivitiesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityTime[]>",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getAllRecentActivity",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActivityCollection>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getFreshMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls for fresh character activity. Updates cache. Falls back on cache on failure.\n",
                    "description": "<p>Calls for fresh character activity. Updates cache. Falls back on cache on failure.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterActivityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberActivityStats>",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberActivityId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberCharacterActivity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Pulls character activity from cache and will return fresh data if cache is exipred\n",
                    "description": "<p> Pulls character activity from cache and will return fresh data if cache is exipred</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberCharacterActivityFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberCharacterActivitySerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getMemberProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "groupActivitiesToMember",
                    "args": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: string; activities: any; }",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "groupActivitiesToMembers",
                    "args": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allActivities",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "updateAllActivityCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "verifyCacheIntegrity",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if Cached data is fresh enough to use. Triggers new call if too old.\n\n",
                    "description": "<p>Determines if Cached data is fresh enough to use. Triggers new call if too old.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberProfile",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "characterId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMemberActivityService"
                    }
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseMemberActivityService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanMembersServiceMock",
            "id": "class-ClanMembersServiceMock-007118e7e7cc0e00831f7ed9cb4b7195838d5fc7c7db3339ef6303539664ddf1582d4d0d3c52c8202dbc6079eee9a9ee069ca6235c9bd28f3465cfcb34c4fb5f",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nexport class ClanMembersServiceMock implements ClanMembersServiceInterface {\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    console.log('returning');\r\n    return of([]);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ClanMembersServiceInterface"
            ]
        },
        {
            "name": "ClanProfileService",
            "id": "class-ClanProfileService-11bcf9f19882076cdc83a6f8752d09a77c02a2bd7eb4e53ea116984dfc3c3d14911b7958be58a50950c9e9f4268ad4c899a32c3883c1fd569bca957c56ae8aeb",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\nimport { ProfileService } from '../../profile/profile.service';\r\nimport { profileSerializer } from '../../profile/profile.serializer';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ClanProfileService extends ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n\r\n  //  private profileComponents = [100, 104, 200, 202, 800, 900, 1100];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {\r\n    super(apiKey);\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member.destinyUserInfo.membershipType, member.destinyUserInfo.membershipId).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              console.error(`Error retrieving profile, not found`, member);\r\n              return of();\r\n            }\r\n            if (error?.ErrorStatus === 'DestinyUnexpectedError') {\r\n              console.error(`Error retrieving profile`, member);\r\n              return of();\r\n            }\r\n\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(\r\n          profile,\r\n          progressionHashes,\r\n          collectionHashes,\r\n          profileRecords,\r\n          profileMetrics\r\n        ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) =>\r\n          this.getSerializedProfile(\r\n            clanId,\r\n            member,\r\n            progressionHashes,\r\n            collectionHashes,\r\n            profileRecords,\r\n            profileMetrics\r\n          ),\r\n        100\r\n      )\r\n    ) as Observable<T>;\r\n  }\r\n  getSerializedProfilesFromCache(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<MemberProfile[]> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) =>\r\n          this.getSerializedProfileFromCache(\r\n            clanId,\r\n            member,\r\n            progressionHashes,\r\n            collectionHashes,\r\n            profileRecords,\r\n            profileMetrics\r\n          ),\r\n        100\r\n      ),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progressionHashes: any[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(\r\n        mergeMap(\r\n          (member) => this.getSerializedProfile(clanId, member, progressionHashes, [], [], []),\r\n          this.concurrentRequests\r\n        )\r\n      )\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfileFromCache(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    progressionHashes: any[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[],\r\n    profileMetrics: any[]\r\n  ): Observable<MemberProfile> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(\r\n          profile?.data || [],\r\n          progressionHashes,\r\n          collectionHashes,\r\n          profileRecords,\r\n          profileMetrics\r\n        ) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "defaultValue": "StoreId.MemberProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "profileComponents",
                    "defaultValue": "[100, 104, 200, 202, 800, 900, 1100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "ProfileService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfileFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfilesFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileMetrics",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfilesWithProgress",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromAPI",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ProfileService"
                    }
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ProfileService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ProfileService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DailyClanAggregateTimeService",
            "id": "class-DailyClanAggregateTimeService-6aa20187a3413c1922716148cd4ebd06ffa4b698a17eaac26ea27888c56a2dd7d6ec5048799a921e64b35e543f50db642d86e2ae2a2d5399968b3c30cf478f6e",
            "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MemberActivityTime } from '../../models/MemberActivityTime';\r\nimport { nowPlusDays } from '../../utility/date-utils';\r\nimport { groupActivityStatsByDate } from '../../utility/group-activity-by-date';\r\nimport { BaseClanAggregateTimeService } from './base-clan-aggregate-time.service';\r\nimport { StatAggregator } from './stat-aggregator-interface';\r\n\r\nexport class DailyClanAggregateTimeService extends BaseClanAggregateTimeService implements StatAggregator {\r\n  public getClanActivityStatsForDuration(memberActivities: MemberActivityTime[], activityMode: any, days = 60) {\r\n    const x = this.filterDates(memberActivities, nowPlusDays(-days));\r\n\r\n    const activities = [...x.map((y) => y.activities)];\r\n    const flatActivities = [].concat.apply([], activities);\r\n    const summedActivities = groupActivityStatsByDate(flatActivities);\r\n    return summedActivities;\r\n  }\r\n  public getClanActivityByPlayer(memberActivities: MemberActivityTime[], activityMode: any, days = 60) {\r\n    const x = this.filterDates(memberActivities, nowPlusDays(-days));\r\n\r\n    const results = x.map((y) => {\r\n      return {\r\n        id: y.id,\r\n        seconds: y.activities.reduce((prev, next) => prev + next.seconds, 0)\r\n      };\r\n    });\r\n\r\n    return results;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "CONCURRENT_COUNT",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "memberActivityService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberRecentActivityService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanActivityByPlayer",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanActivityStatsForDuration",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "60",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "filterDates",
                    "args": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MemberActivityTime[]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "memberActivities",
                            "type": "MemberActivityTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "getClanActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMemberProfiles",
                            "type": "MemberProfile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                },
                {
                    "name": "getMemberActivityStats",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": true,
                    "deprecationMessage": "use gender field instead",
                    "rawdescription": "",
                    "description": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activityMode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanAggregateTimeService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseClanAggregateTimeService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "StatAggregator"
            ]
        },
        {
            "name": "DataSource",
            "id": "class-DataSource-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "DataSourceOptions<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "DataSourceOptions<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DataSourceMetadata<T>>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDataLabelsWithType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataLabel[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataProperty",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "V",
                    "typeParameters": [
                        "V"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Exporter",
            "id": "class-Exporter-6fd70bab3e8f04e07bd5d3c76ecc283bc3bc10327a526bf4500abf22d6d6f39ad285556b487ddbc6d9ab0d18f2347de66b00e705e8faedb5e5f6e3003440fae7",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, startWith, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport type ExporterContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  contextProvider?: ExporterContextProvider<T, C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n  private contextProvider: ExporterContextProvider<T, C>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, context]) => {\r\n        const keys = [];\r\n        this.metadata.forEach((value, key) => keys.push(key));\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.text(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ExporterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ExporterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExporterContextProvider<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ExporterMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "exportData",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Filterer",
            "id": "class-Filterer-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "FiltererOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "FiltererOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | FiltererMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<FiltererState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "tokenizeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets a stream that returns the items and updates whenever the filters or search changes.",
                    "description": "<p>Gets a stream that returns the items and updates whenever the filters or search changes.</p>\n"
                },
                {
                    "name": "getFilterOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "FilterOption[]",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStateFilterOptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformTextFilterOptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Group",
            "id": "class-Group-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Grouper",
            "id": "class-Grouper-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "GrouperOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "GrouperOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | GrouperMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<GrouperState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "getGroupMetadata",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GrouperMetadata<T, C>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "GroupLabel[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "group",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Group[]>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performGrouping",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Group[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileService",
            "id": "class-ProfileService-76f4c9c4424a87084ebe2dab4f1fc3ebae993bbe8a0f7437e2c3ccf894f2fbad5b438b87833f4bf871641219b259667dd6abbb4f3aa489fbccff525b787c92be",
            "file": "projects/data/src/lib/profile/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { from, mergeMap, Observable } from 'rxjs';\r\nimport { ClanMember } from '../models/ClanMember';\r\nexport class ProfileService {\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  // 1100 Metrics\r\n  // 1400 Comendations\r\n  private profileComponents = [100, 104, 200, 202, 800, 900, 1100];\r\n  constructor(private baseAPiKey: string) {}\r\n\r\n  protected getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  protected getProfileFromAPI(membershipType, membershipId) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${membershipType}/Profile/${\r\n      membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.baseAPiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (!data.Response) {\r\n            throw data;\r\n          }\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => {\r\n          console.log('error', err);\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "baseAPiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "baseAPiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "profileComponents",
                    "defaultValue": "[100, 104, 200, 202, 800, 900, 1100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProfileFromAPI",
                    "args": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "membershipType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "membershipId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileWorkerServiceMock",
            "id": "class-ProfileWorkerServiceMock-bb4952e9bfda54453fa61f22c1caef9fc33b840aeef62b54441e0683fc9e2175b310bb090b7c153db66ce86b12dec7c8f3157598da51ae597c5dbf96eb47aa8e",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, delay, of, take, tap } from 'rxjs';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\nexport class ProfileWorkerServiceMock {\r\n  constructor() {}\r\n  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): void {\r\n    of(true)\r\n      .pipe(\r\n        delay(10),\r\n        tap(() => progress({ progress: 10 })),\r\n        delay(10),\r\n        tap(() => progress({ progress: 20 })),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this.members.next([{}, {}]);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Sorter",
            "id": "class-Sorter-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "SorterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "SorterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterContextProvider<C>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SorterMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<SorterState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "getSorts",
                    "args": [],
                    "optional": false,
                    "returnType": "SortLabel[]",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Viewer",
            "id": "class-Viewer-a3ffe24f0c27ef28662b85d14b37a058d7981443eabb378f236e3ee8359d453ede6ae71fd3f58b5a8647f184453cc31bce4141e5199c8053063a314dfc189e1b",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { tryJSONParse } from '@destiny/data/utility';\r\nimport { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string | string[];\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  tooltip?: string;\r\n  isSticky?: boolean;\r\n  labelClass?: string;\r\n  plainText: (item: T, context: C) => string | null;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  isSticky: boolean;\r\n  label: string;\r\n  tooltip?: string;\r\n  labelClass?: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n  private stateKey = '';\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}, key: string = '') {\r\n    let initialState = options.initialState;\r\n    if (key !== '') {\r\n      this.stateKey = key;\r\n      initialState = this.getSavedState(key);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(initialState || { views: this.getViews().map((v) => v.id) }, false);\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) =>\r\n      views.push({\r\n        id: key,\r\n        label: value.label,\r\n        tooltip: value.tooltip,\r\n        labelClass: value.labelClass,\r\n        isSticky: value.isSticky || false\r\n      })\r\n    );\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState, save: boolean = true) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    if (this.stateKey !== '') {\r\n      localStorage.setItem(this.stateKey, JSON.stringify({ views }));\r\n    }\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    combineLatest([items$, this.state, this.contextProvider])\r\n      .pipe(take(1))\r\n      .subscribe(([items, state, context]) => {\r\n        const keys = state.views.map((x) => x);\r\n        const formattedObj = items.map((item) => {\r\n          const obj = {};\r\n          keys.forEach((key) => {\r\n            const config = this.metadata.get(key);\r\n            obj[config.label] = config.plainText(item, context(item));\r\n          });\r\n          return obj;\r\n        });\r\n        downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n      });\r\n  }\r\n\r\n  getSavedState(key: string): ViewerState {\r\n    let stateString = localStorage.getItem(key);\r\n\r\n    if (stateString) {\r\n      const state = tryJSONParse<ViewerState>(stateString);\r\n      if (state && state.views && state.views.length > 0) {\r\n        return state;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\r\n  }\r\n  //data = encodeURI(csv);\r\n  data = csv;\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      // result += encodeURIComponent(item[key]);\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ViewerOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ViewerOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerContextProvider<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewerMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<ViewerState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "stateKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "description": "<p>The viewer carries information to render the items to the view.</p>\n",
            "rawdescription": "\nThe viewer carries information to render the items to the view.",
            "methods": [
                {
                    "name": "exportData",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRenderedView",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RenderedView>",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRenderedViews",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RenderedView[]>",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSavedState",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewerState",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getViews",
                    "args": [],
                    "optional": false,
                    "returnType": "ViewLabel[]",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RenderedViewDynamicCompDirective",
            "id": "directive-RenderedViewDynamicCompDirective-e67db51be723fe5e12601ae6ace0d5347a7e6b23a52db707710e51f6088ab322e474ada5819ca2512dd0becd664d520b14baf59f4b81b4934340f740e9b1bd44",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view-component.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: '[libDynamicComp]'\r\n})\r\nexport class RenderedViewDynamicCompDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}\r\n",
            "selector": "[libDynamicComp]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ResponsiveSidebarDirective",
            "id": "directive-ResponsiveSidebarDirective-c379868e4617e0794754d8831a9c8f077dc5d2f215d2f2f711333ae5e370b99736802b479509b46b528091a83113f2b25e7dce5498d6d92fd75f6c4abb0a85f1",
            "file": "projects/components/src/lib/shared/directives/responsive-sidebar.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil, filter } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[libResponsiveSidebar]'\r\n})\r\nexport class ResponsiveSidebarDirective implements OnInit, OnDestroy {\r\n  destroy$ = new Subject();\r\n\r\n  @Input() libResponsiveSidebar: number;\r\n\r\n  @Input() canOpen = () => true;\r\n\r\n  constructor(private router: Router, private breakpoint: BreakpointObserver, private sidenav: MatSidenav) {}\r\n\r\n  ngOnInit() {\r\n    const permanent$ = this.breakpoint.observe(`(min-width: ${this.libResponsiveSidebar}px)`).pipe(\r\n      takeUntil(this.destroy$),\r\n      map(({ matches }) => matches)\r\n    );\r\n\r\n    permanent$.subscribe((permanent) => {\r\n      this.sidenav.mode = permanent ? 'side' : 'over';\r\n      this.sidenav.opened = permanent && this.canOpen();\r\n    });\r\n\r\n    this.router.events\r\n      .pipe(\r\n        takeUntil(this.destroy$),\r\n        filter(() => this.sidenav.mode === 'over'),\r\n        filter((event) => event instanceof NavigationEnd)\r\n      )\r\n      .subscribe(() => this.sidenav.close());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next(true);\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "selector": "[libResponsiveSidebar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "canOpen",
                    "defaultValue": "() => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "() => boolean",
                    "decorators": []
                },
                {
                    "name": "libResponsiveSidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breakpoint",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sidenav",
                        "type": "MatSidenav",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpoint",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sidenav",
                        "type": "MatSidenav",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "ActivityCardDetailsComponent",
            "id": "component-ActivityCardDetailsComponent-6989acc8326cdb386cbbd38a2a621149a14654ed0e6107672892353a7ae2768c7e4e4d9589d886ec208118bb2992aba497a67eb247a5ea1368a3dfa29794bfdd",
            "file": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-card-details",
            "styleUrls": [
                "./activity-card-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-card-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activityDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "DestinyDefinitionsDestinyActivityDefinition",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TemplateRef<HTMLElement>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "viewActivity",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n@Component({\r\n  selector: 'app-activity-card-details',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, MatCardModule, MatButtonModule],\r\n  templateUrl: './activity-card-details.component.html',\r\n  styleUrls: ['./activity-card-details.component.scss']\r\n})\r\nexport class ActivityCardDetailsComponent {\r\n  @Input() activityDefinition: DestinyDefinitionsDestinyActivityDefinition;\r\n  @Input() title: string;\r\n  @Input() itemTemplate: TemplateRef<HTMLElement>;\r\n  @Output() viewActivity = new EventEmitter<number>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\r\n  height: 100%;\r\n}\r\nmat-card-header {\r\n  padding: 1rem;\r\n}\r\nmat-card-content {\r\n  height: 100%;\r\n  p {\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./activity-card-details.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title-group>\r\n      <mat-card-title>{{ activityDefinition.displayProperties.name }}</mat-card-title>\r\n    </mat-card-title-group>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://www.bungie.net/{{ activityDefinition.pgcrImage }}\" alt=\"\" />\r\n  <mat-card-content>\r\n    <p>\r\n      {{ activityDefinition.displayProperties.description }}\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions align=\"end\">\r\n    <a mat-button [routerLink]=\"activityDefinition.hash.toString()\">View</a>\r\n  </mat-card-actions>\r\n</mat-card>\r\n"
        },
        {
            "name": "ActivityDashboardComponent",
            "id": "component-ActivityDashboardComponent-19a48339731d607469cf00417b4a3039d0ffcba55a50de509e6a29b5143cdf7ca6943dc165c9a7cd69a820499043e3a8c825e8c68dec921bbd3c1b7bbd641f53",
            "file": "projects/clan-dashboard/src/app/features/activities/activity-dashboard/activity-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-dashboard",
            "styleUrls": [
                "./activity-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-activity-dashboard',\r\n  templateUrl: './activity-dashboard.component.html',\r\n  styleUrls: ['./activity-dashboard.component.scss']\r\n})\r\nexport class ActivityDashboardComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./activity-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>activity-dashboard works!</p>\r\n"
        },
        {
            "name": "ActivityDetailComponent",
            "id": "component-ActivityDetailComponent-1ef4e9998ffac26d58122b18d1cbaaeabba41b0561c9619738061423e6a9fac742e2a5436e1755dba8d7db56917ac92204e7f7e5ac5d082d71f3be5e3a670d1d",
            "file": "projects/clan-dashboard/src/app/features/activities/activity-detail/activity-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-detail",
            "styleUrls": [
                "./activity-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityHash$",
                    "defaultValue": "this.route.paramMap.pipe(map((params) => +params.get('activityHash')))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "curatedActivities",
                    "defaultValue": "this.activitiesService.getCuratedActivities()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "vm$",
                    "defaultValue": "this.activityHash$.pipe(\r\n    map((hash) => {\r\n      return {\r\n        activity: this.activitiesService.getActivityById(hash),\r\n        metrics: this.activitiesService.getCuratedMetrics(hash),\r\n        collections: this.activitiesService.getCuratedCollections(hash),\r\n        records: this.activitiesService.getCuratedRecords(hash)\r\n      };\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ActivitiesService } from '../data-access/activities.service';\r\nimport { map } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-activity-detail',\r\n  templateUrl: './activity-detail.component.html',\r\n  styleUrls: ['./activity-detail.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityDetailComponent {\r\n  constructor(private activitiesService: ActivitiesService, private route: ActivatedRoute) {}\r\n  curatedActivities = this.activitiesService.getCuratedActivities();\r\n\r\n  activityHash$ = this.route.paramMap.pipe(map((params) => +params.get('activityHash')));\r\n\r\n  vm$ = this.activityHash$.pipe(\r\n    map((hash) => {\r\n      return {\r\n        activity: this.activitiesService.getActivityById(hash),\r\n        metrics: this.activitiesService.getCuratedMetrics(hash),\r\n        collections: this.activitiesService.getCuratedCollections(hash),\r\n        records: this.activitiesService.getCuratedRecords(hash)\r\n      };\r\n    })\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.item-row {\r\n  display: flex;\r\n  span {\r\n    flex: 1;\r\n  }\r\n}\r\n.activity {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .activity-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    display:flex;\r\n  }\r\n}\r\n",
                    "styleUrl": "./activity-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activitiesService",
                        "type": "ActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "activitiesService",
                        "type": "ActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"activity\">\r\n  <ng-container *ngIf=\"vm$ | async as vm\">\r\n    <!-- TODO: Icon -->\r\n    <!-- <ng-container *ngIf=\"vm.activity as activity\">\r\n    <h1>{{activity.displayProperties.name}}</h1>\r\n    <h2>{{activity.displayProperties.description}}</h2>\r\n  </ng-container> -->\r\n\r\n    <!-- Metrics -->\r\n    <!-- <lib-collapsible-list title=\"Metrics\" [items]=\"vm.metrics\" [itemTemplate]=\"itemTemplate\">\r\n    <ng-template let-item #itemTemplate>\r\n      <div class=\"item-row\">\r\n        <span>\r\n          {{item.displayProperties.name}}\r\n        </span>\r\n        <button  mat-button >View</button>\r\n      </div>\r\n    </ng-template>\r\n  </lib-collapsible-list> -->\r\n    <app-activity-table\r\n      [title]=\"vm.activity.displayProperties.name\"\r\n      [metricDefinitions]=\"vm.metrics\"\r\n      [collectionDefinitions]=\"vm.collections\"\r\n      [recordDefinitions]=\"vm.records\"\r\n      class=\"activity-table\"\r\n    >\r\n    </app-activity-table>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ActivityModeCardDetailsComponent",
            "id": "component-ActivityModeCardDetailsComponent-23a368f9bc0c2f97db470ff641c11ad537b3973a5ce10b3e570a0f6d3234edd676adf046c141b1509df8205a4caab1612822ebd90cc5a48993df4b71b565d8a0",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/components/activity-mode-card-details/activity-mode-card-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-mode-card-details",
            "styleUrls": [
                "./activity-mode-card-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-mode-card-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activityDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TemplateRef<HTMLElement>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n// import { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n@Component({\r\n  selector: 'app-activity-mode-card-details',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, MatCardModule, MatButtonModule],\r\n  templateUrl: './activity-mode-card-details.component.html',\r\n  styleUrls: ['./activity-mode-card-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityModeCardDetailsComponent {\r\n  @Input() activityDefinition: any;\r\n  @Input() title: string;\r\n  @Input() itemTemplate: TemplateRef<HTMLElement>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\r\n  height: 100%;\r\n}\r\nmat-card-header {\r\n  padding: 1rem;\r\n}\r\nmat-card-content {\r\n  height: 100%;\r\n  p {\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./activity-mode-card-details.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title-group>\r\n      <mat-card-title>{{ activityDefinition.displayProperties.name }}</mat-card-title>\r\n    </mat-card-title-group>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://www.bungie.net/{{ activityDefinition.pgcrImage }}\" alt=\"\" />\r\n  <mat-card-content>\r\n    <p>\r\n      {{ activityDefinition.displayProperties.description }}\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions align=\"end\">\r\n    <a mat-button [routerLink]=\"activityDefinition.modeType\">View</a>\r\n  </mat-card-actions>\r\n</mat-card>\r\n"
        },
        {
            "name": "ActivityModeDashboardComponent",
            "id": "component-ActivityModeDashboardComponent-348e416935b7681d3a9506281c9e3807f5b7705538a07f2564ef042907dd88f5fd957b00623982d1ed318a6bf5e890f83313690b9f0e973bdb37d53c558117f4",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-dashboard/activity-mode-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-mode-dashboard",
            "styleUrls": [
                "./activity-mode-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-mode-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activities$",
                    "defaultValue": "this.activityModeService.getGroupedActivityModes()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "viewActivity",
                    "args": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ActivityModeService } from '../data-access/activity-mode.service';\r\n\r\n@Component({\r\n  selector: 'app-activity-mode-dashboard',\r\n  templateUrl: './activity-mode-dashboard.component.html',\r\n  styleUrls: ['./activity-mode-dashboard.component.scss']\r\n})\r\nexport class ActivityModeDashboardComponent {\r\n  constructor(\r\n    private activityModeService: ActivityModeService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n  activities$ = this.activityModeService.getGroupedActivityModes();\r\n  viewActivity(hash: number) {\r\n    this.router.navigate([hash], { relativeTo: this.route });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: auto;\r\n}\r\n.activity-dashboard {\r\n  margin: 1rem;\r\n}\r\n.activities-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n\r\n  .activity {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./activity-mode-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"activity-dashboard\">\r\n  <div *ngFor=\"let activityModes of activities$\">\r\n    <h2>{{ activityModes.group.title }}</h2>\r\n    <div class=\"activities-container\">\r\n      <ng-container *ngFor=\"let mode of activityModes.activities\">\r\n        <app-activity-mode-card-details\r\n          [activityDefinition]=\"mode\"\r\n          class=\"activity\"\r\n        >\r\n        </app-activity-mode-card-details>\r\n      </ng-container>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ActivityModeDetailComponent",
            "id": "component-ActivityModeDetailComponent-4b0467a13e8dfe134d8ff30cf1e4cc6cfce3ce2f3019bc4db46216ed0b20069c18df82482a4e141b408adc5c0c23fc2867fc4315485041ba1c7e868075df21ea",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-detail/activity-mode-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-mode-detail",
            "styleUrls": [
                "./activity-mode-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-mode-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modeType$",
                    "defaultValue": "this.route.paramMap.pipe(map((params) => +params.get('modeType')))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "vm$",
                    "defaultValue": "this.modeType$.pipe(\r\n    map((modeType) => {\r\n\r\n      return {\r\n        mode: this.activitiesService.getActivityModeDefinition(modeType)\r\n      };\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map } from 'rxjs';\r\nimport { ActivityModeService } from '../data-access/activity-mode.service';\r\n\r\n@Component({\r\n  selector: 'app-activity-mode-detail',\r\n  templateUrl: './activity-mode-detail.component.html',\r\n  styleUrls: ['./activity-mode-detail.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityModeDetailComponent {\r\n  constructor(private activitiesService: ActivityModeService, private route: ActivatedRoute) {}\r\n  modeType$ = this.route.paramMap.pipe(map((params) => +params.get('modeType')));\r\n\r\n  vm$ = this.modeType$.pipe(\r\n    map((modeType) => {\r\n\r\n      return {\r\n        mode: this.activitiesService.getActivityModeDefinition(modeType)\r\n      };\r\n    })\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.activity-mode-detail {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .activity-mode-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    display: flex;\r\n  }\r\n}\r\n",
                    "styleUrl": "./activity-mode-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activitiesService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "activitiesService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"activity-mode-detail\">\r\n  <ng-container *ngIf=\"vm$ | async as vm\">\r\n    <app-activity-mode-table [title]=\"vm.mode.displayProperties.name\" [mode]=\"vm.mode\" class=\"activity-mode-table\"></app-activity-mode-table>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ActivityModeTableComponent",
            "id": "component-ActivityModeTableComponent-4aa3aa1ce4d97f4bf8ea336b74d48c96ac5b7f7298c7e3ab4ad497bc302f2c480acda90d3cfbd1b5c85a7cf193bc4122f5f5cd2a3ab5a35287a20d775d19b65e",
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-mode-table",
            "styleUrls": [
                "./activity-mode-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-mode-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "DestinyDefinitionsDestinyActivityModeDefinition",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityFilterer",
                    "defaultValue": "new Filterer({ metadata: ACTIVITY_MODE_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "activityInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DataSource>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "activitySorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "activityViewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "trackedDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackedDuration[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "createSorter",
                    "args": [
                        {
                            "name": "definition",
                            "type": "TrackedDuration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SorterMetadata<ProfileRecentActivity>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "TrackedDuration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createViewer",
                    "args": [
                        {
                            "name": "definition",
                            "type": "TrackedDuration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewerMetadata<ProfileRecentActivity, ActivityModeViewContext>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "TrackedDuration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SeasonService } from '@core/services/season.service';\r\nimport { DataSource, Filterer, Sorter, SorterMetadata, Viewer, ViewerMetadata } from '@destiny/components';\r\nimport { BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { DestinyDefinitionsDestinyActivityModeDefinition } from 'bungie-api-angular';\r\nimport { TrackedDuration } from 'projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer';\r\nimport { map, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { ActivityModeService } from '../data-access/activity-mode.service';\r\nimport { ProfileRecentActivity } from '../models/ProfileActivityMode';\r\nimport { ACTIVITY_MODE_FILTERER_METADATA } from './activity-mode-metadata/ActivityModeFilterer';\r\nimport { ACTIVITY_MODE_SORTER_METADATA } from './activity-mode-metadata/ActivityModeSorter';\r\nimport { ActivityModeViewContext, ACTIVITY_MODE_VIEWER_METADATA } from './activity-mode-metadata/ActivityModeViewer';\r\n\r\n@Component({\r\n  selector: 'app-activity-mode-table',\r\n  templateUrl: './activity-mode-table.component.html',\r\n  styleUrls: ['./activity-mode-table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityModeTableComponent implements OnChanges {\r\n  @Input() title: string;\r\n  @Input() mode: DestinyDefinitionsDestinyActivityModeDefinition;\r\n\r\n  private readonly today = new Date();\r\n  trackedDates: TrackedDuration[];\r\n  isLoading = true;\r\n  activityViewer: Viewer;\r\n  activityFilterer = new Filterer({ metadata: ACTIVITY_MODE_FILTERER_METADATA });\r\n  activitySorter;\r\n  activityInfo$: Observable<DataSource>;\r\n\r\n  constructor(\r\n    private activitiesService: ActivityModeService,\r\n    private route: ActivatedRoute,\r\n    private seasonService: SeasonService,\r\n    private playtimePipe: PlaytimePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {\r\n    const currentSeason = this.seasonService.currentSeason;\r\n    const previousSeason = this.seasonService.getPreviousSeason();\r\n    this.trackedDates = [\r\n      {\r\n        id: 'lastWeek',\r\n        description: 'Last Week',\r\n        startDate: new Date(new Date().setDate(this.today.getDate() - 7)),\r\n        endDate: this.today\r\n      },\r\n      {\r\n        id: 'lastMonth',\r\n        description: 'Last Month',\r\n        startDate: new Date(new Date().setDate(this.today.getDate() - 30)),\r\n        endDate: this.today\r\n      },\r\n      {\r\n        id: 'lastNinetyDays',\r\n        description: 'Last 90 Days',\r\n        startDate: new Date(new Date().setDate(this.today.getDate() - 90)),\r\n        endDate: this.today\r\n      },\r\n\r\n      {\r\n        id: 'currentSeason',\r\n        description: 'Current Season',\r\n        startDate: new Date(currentSeason.startDate),\r\n        endDate: new Date(currentSeason.endDate)\r\n      },\r\n      {\r\n        id: 'lastSeason',\r\n        description: 'Last Season',\r\n        startDate: new Date(previousSeason.startDate),\r\n        endDate: new Date(previousSeason.endDate)\r\n      }\r\n    ];\r\n  }\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['mode']) {\r\n      const initialViewerData = new Map(ACTIVITY_MODE_VIEWER_METADATA);\r\n      const initialSorterData = new Map(ACTIVITY_MODE_SORTER_METADATA);\r\n\r\n      this.trackedDates.forEach((td) => {\r\n        initialViewerData.set(td.id, this.createViewer(td));\r\n        initialSorterData.set(td.id, this.createSorter(td));\r\n      });\r\n\r\n      this.activityViewer = new Viewer({\r\n        metadata: initialViewerData,\r\n        contextProvider: this.createViewContextProvider()\r\n      });\r\n\r\n      this.activitySorter = new Sorter({ metadata: initialSorterData });\r\n\r\n      //if (this.mode && this.mode.modeType) {\r\n      //console.log('trying');\r\n      this.activityInfo$ = this.activitiesService.getAllActivitiesByMode(this.mode.modeType, this.trackedDates).pipe(\r\n        map((ds) => {\r\n          return new DataSource<any>({ data: ds });\r\n        }),\r\n        tap((x) => {\r\n          this.isLoading = false;\r\n        })\r\n      );\r\n      //}\r\n    }\r\n  }\r\n\r\n  createViewer(definition: TrackedDuration): ViewerMetadata<ProfileRecentActivity, ActivityModeViewContext> {\r\n    return {\r\n      label: definition.description,\r\n      plainText: (item: ProfileRecentActivity, context: ActivityModeViewContext) =>\r\n        `${context.playTimePipe.transform(item.stats.trackedDates[definition.id])}`,\r\n      render: (item: ProfileRecentActivity, context: ActivityModeViewContext) => {\r\n        return {\r\n          // classList: 'text-center',\r\n          text: context.playTimePipe.transform(item.stats.trackedDates[definition.id])\r\n          //text: item.stats.trackedDates[definition.id].toString()\r\n        };\r\n      }\r\n    };\r\n  }\r\n  createSorter(definition: TrackedDuration): SorterMetadata<ProfileRecentActivity> {\r\n    return {\r\n      label: definition.description,\r\n      comparator: (a: ProfileRecentActivity, b: ProfileRecentActivity) => {\r\n        return (a.stats.trackedDates[definition.id] || 0) - (b.stats.trackedDates[definition.id] || 0);\r\n      }\r\n    };\r\n  }\r\n\r\n  createViewContextProvider() {\r\n    return of((item: any) => ({\r\n      item,\r\n      playTimePipe: this.playtimePipe,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./activity-mode-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activitiesService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playtimePipe",
                        "type": "PlaytimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "activitiesService",
                        "type": "ActivityModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seasonService",
                        "type": "SeasonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playtimePipe",
                        "type": "PlaytimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<lib-table-view class=\"clan-roster-table\" [isLoading]=\"isLoading\" [header]=\"title\"\r\n[dataSource]=\"activityInfo$ | async\" [viewer]=\"activityViewer\" [filterer]=\"activityFilterer\"\r\n[sorter]=\"activitySorter\">\r\n<div pre-header>\r\n  <button mat-icon-button aria-label=\"Back to Activity Modes\" routerLink=\"/activity-modes\">\r\n    <mat-icon>arrow_back</mat-icon>\r\n  </button>\r\n</div>\r\n</lib-table-view>\r\n\r\n<!--  -->\r\n"
        },
        {
            "name": "ActivityTableComponent",
            "id": "component-ActivityTableComponent-07c26420428126b445e4ebe2ecb7b033c295492a3edf44fdb1f7a257ec0042afe8f137c600f060b5cc560d14fe9c82a0852ba7b2b47dec39390904147e19af9d",
            "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-activity-table",
            "styleUrls": [
                "./activity-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./activity-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "collectionDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "CollectionDefinition[]",
                    "decorators": []
                },
                {
                    "name": "metricDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "MetricDefinition[]",
                    "decorators": []
                },
                {
                    "name": "recordDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "RecordDefinition[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityFilterer",
                    "defaultValue": "new Filterer({ metadata: ACTIVITY_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "activityInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DataSource>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "activitySorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "activityViewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "createSorterCollection",
                    "args": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SorterMetadata<ClanMemberProfile>",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSorterMetric",
                    "args": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SorterMetadata<ClanMemberProfile>",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createViewerCollection",
                    "args": [
                        {
                            "name": "definition",
                            "type": "CollectionDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewerMetadata<ClanMemberProfile, ViewContext>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "CollectionDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createViewerMetric",
                    "args": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewerMetadata<ClanMemberProfile, ViewContext>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createViewerRecord",
                    "args": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewerMetadata<ClanMemberProfile, ViewContext>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "MetricDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecord",
                    "args": [
                        {
                            "name": "definition",
                            "type": "RecordDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profile",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "RecordDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profile",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasCompleted",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasItem",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataSource, Filterer, Sorter, SorterMetadata, Viewer, ViewerMetadata } from '@destiny/components';\r\nimport { CollectionDefinition, MetricDefinition, RecordDefinition } from '@destiny/data/models';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { map, Observable, of, tap } from 'rxjs';\r\nimport { ActivitiesService } from '../data-access/activities.service';\r\nimport { ACTIVITY_FILTERER_METADATA } from './activity-table-metadata/ActivityTableFilterer';\r\nimport { ACTIVITY_SORTER_METADATA } from './activity-table-metadata/ActivityTableSorter';\r\nimport { ACTIVITY_VIEWER_METADATA } from './activity-table-metadata/ActivityTableViewer';\r\ninterface ViewContext {\r\n  item: ClanMemberProfile;\r\n}\r\n@Component({\r\n  selector: 'app-activity-table',\r\n  templateUrl: './activity-table.component.html',\r\n  styleUrls: ['./activity-table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ActivityTableComponent implements OnChanges {\r\n  @Input() title: string;\r\n  @Input() metricDefinitions: MetricDefinition[];\r\n  @Input() collectionDefinitions: CollectionDefinition[];\r\n  @Input() recordDefinitions: RecordDefinition[];\r\n\r\n  isLoading = true;\r\n  activityViewer: Viewer;\r\n  activityFilterer = new Filterer({ metadata: ACTIVITY_FILTERER_METADATA });\r\n  activitySorter;\r\n  activityInfo$: Observable<DataSource>;\r\n\r\n  constructor(private activitiesService: ActivitiesService, private route: ActivatedRoute) {}\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['metricDefinitions'] || simpleChanges['collectionDefinitions']) {\r\n      // Set Viewer\r\n      const initialViewerData = new Map(ACTIVITY_VIEWER_METADATA);\r\n      const initialSorterData = new Map(ACTIVITY_SORTER_METADATA);\r\n      this.metricDefinitions.forEach((md) => {\r\n        initialViewerData.set(md.hash.toString(), this.createViewerMetric(md));\r\n        initialSorterData.set(md.hash.toString(), this.createSorterMetric(md));\r\n      });\r\n\r\n      this.collectionDefinitions.forEach((md) => {\r\n        initialViewerData.set(md.hash.toString(), this.createViewerCollection(md));\r\n        initialSorterData.set(md.hash.toString(), this.createSorterCollection(md));\r\n      });\r\n\r\n      this.recordDefinitions.forEach((md) => {\r\n        initialViewerData.set(md.hash.toString(), this.createViewerRecord(md));\r\n      });\r\n\r\n      this.activityViewer = new Viewer({\r\n        metadata: initialViewerData,\r\n        contextProvider: this.createViewContextProvider()\r\n      });\r\n\r\n      this.activitySorter = new Sorter({ metadata: initialSorterData });\r\n\r\n      this.activityInfo$ = this.activitiesService\r\n        .getProfiles(\r\n          this.metricDefinitions.map((md) => md.hash),\r\n          this.collectionDefinitions.map((md) => md.hash),\r\n          this.recordDefinitions.map((md) => md.hash)\r\n        )\r\n        .pipe(\r\n          map((ds) => {\r\n            return new DataSource<ClanMemberProfile>({ data: ds });\r\n          }),\r\n          tap((x) => {\r\n            this.isLoading = false;\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  // TODO: Eventually add formatting. Metric definitions have the formatting\r\n  createViewerMetric(definition: MetricDefinition): ViewerMetadata<ClanMemberProfile, ViewContext> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      tooltip: definition.displayProperties.description,\r\n      plainText: (item: ClanMemberProfile) =>\r\n        `${item.profile.metrics.data.metrics[definition.hash]?.objectiveProgress?.progress.toString()}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          classList: 'text-center',\r\n          text: item.profile.metrics.data.metrics[definition.hash].objectiveProgress.progress.toString()\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  hasItem(value): boolean {\r\n    if (value === undefined || value.state === undefined) {\r\n      return false;\r\n    }\r\n    return (value?.state & 1) === 0;\r\n  }\r\n\r\n  hasCompleted(value): boolean {\r\n    if (value === undefined || value.state === undefined) {\r\n      console.log('fail', value);\r\n      return false;\r\n    }\r\n    // return value.objectives[value.objectives.length -1]?.complete;\r\n    if (value.objectives) {\r\n      return value.objectives.every((x) => x.complete);\r\n    }\r\n    if (value.intervalObjectives) {\r\n      return value.intervalObjectives.every((x) => x.complete);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  createViewerCollection(definition: CollectionDefinition): ViewerMetadata<ClanMemberProfile, ViewContext> {\r\n    return {\r\n      // label: definition.displayProperties.name,\r\n      label: definition.displayProperties.hasIcon\r\n        ? `<img class=\"table-icon\" src=\"https://www.bungie.net/${definition.displayProperties.icon}\" alt=\"${definition.displayProperties.name}\"/>`\r\n        : definition.displayProperties.name,\r\n      plainText: (item: ClanMemberProfile) =>\r\n        `${this.hasItem(item.profile.profileCollectibles?.data?.collectibles[definition.hash]) ? 'X' : ''}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          classList: 'text-center',\r\n          text: this.hasItem(item.profile.profileCollectibles?.data?.collectibles[definition.hash]) ? 'X' : ''\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  createViewerRecord(definition: MetricDefinition): ViewerMetadata<ClanMemberProfile, ViewContext> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      tooltip: definition.displayProperties.description,\r\n      plainText: (item: ClanMemberProfile) =>\r\n        `${this.hasCompleted(this.getRecord(definition, item.profile)) ? 'X' : ''}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          classList: 'text-center',\r\n          text: `${this.hasCompleted(this.getRecord(definition, item.profile)) ? 'X' : ''}`\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  createSorterMetric(definition: MetricDefinition): SorterMetadata<ClanMemberProfile> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      comparator: (a, b) =>\r\n        a.profile.metrics?.data?.metrics[definition.hash]?.objectiveProgress.progress <\r\n        b.profile.metrics?.data?.metrics[definition.hash]?.objectiveProgress.progress\r\n          ? -1\r\n          : 1\r\n    };\r\n  }\r\n  createSorterCollection(definition: MetricDefinition): SorterMetadata<ClanMemberProfile> {\r\n    return {\r\n      label: definition.displayProperties.name,\r\n      comparator: (a, b) =>\r\n        this.hasItem(a.profile.profileCollectibles.data.collectibles[definition.hash]) <\r\n        this.hasItem(a.profile.profileCollectibles.data.collectibles[definition.hash])\r\n          ? -1\r\n          : 1\r\n    };\r\n  }\r\n\r\n  createViewContextProvider() {\r\n    return of((item: ClanMemberProfile) => ({\r\n      item\r\n    }));\r\n  }\r\n\r\n  getRecord(definition: RecordDefinition, profile) {\r\n    return definition.scope === 1\r\n      ? profile.characterRecords?.data\r\n        ? (Object.values(profile.characterRecords.data)[0] as unknown as any)?.records[definition.hash]\r\n        : undefined\r\n      : profile.profileRecords?.data?.records[definition.hash];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./activity-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activitiesService",
                        "type": "ActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "activitiesService",
                        "type": "ActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "  <lib-table-view class=\"clan-roster-table\" [isLoading]=\"isLoading\" [header]=\"title\"\r\n    [dataSource]=\"activityInfo$ | async\" [viewer]=\"activityViewer\" [filterer]=\"activityFilterer\"\r\n    [sorter]=\"activitySorter\">\r\n    <div pre-header>\r\n      <button mat-icon-button aria-label=\"Back to Activities\" routerLink=\"/activities\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n    </div>\r\n  </lib-table-view>\r\n\r\n  <!--  -->\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-efa94d37f785f4e5f8d6a7b4493f605c0164514ebfc7feecd9fc72846da39aa9434579b5d394ba431f727e5e88505b83ba9b6e28a272e9c6400fcbf9b1ac1f8e",
            "file": "projects/clan-dashboard/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hideDisclaimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "manifestError$",
                    "defaultValue": "this.store.select(selectManifestError)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "manifestState$",
                    "defaultValue": "this.store.select(selectManifestState).pipe(\r\n    // eslint-disable-next-line @ngrx/avoid-mapping-selectors\r\n    map((x) => x),\r\n    catchError((err) => {\r\n      console.log('error');\r\n      return of(null);\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "setUpAnalytics",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { loadManifest, selectManifestError, selectManifestState } from '@core/store/manifest';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { registerIcons } from '@destiny/components/icons';\r\nimport { catchError, filter, map, of } from 'rxjs';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\n\r\ndeclare let gtag: Function;\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  hideDisclaimer;\r\n  manifestState$ = this.store.select(selectManifestState).pipe(\r\n    // eslint-disable-next-line @ngrx/avoid-mapping-selectors\r\n    map((x) => x),\r\n    catchError((err) => {\r\n      console.log('error');\r\n      return of(null);\r\n    })\r\n  );\r\n  manifestError$ = this.store.select(selectManifestError);\r\n\r\n  constructor(private store: Store, iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer, private router: Router) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n\r\n    this.store.dispatch(loadManifest());\r\n    this.setUpAnalytics();\r\n  }\r\n  setUpAnalytics() {\r\n    this.router.events.pipe(filter((event) => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n      gtag('config', 'G-FCTYCE6GLS', {\r\n        page_path: event.urlAfterRedirects\r\n      });\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-manifest-container {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 100%;\r\n}\r\n.mobile-disclaimer {\r\n  background: var(--app-background-color);\r\n  bottom: 0;\r\n  padding: 1rem;\r\n  position: absolute;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 999;\r\n  display: flex;\r\n  > div {\r\n    flex: 1;\r\n  }\r\n\r\n  @media (min-width: 48em) {\r\n    display: none;\r\n  }\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"manifestState$ | async as manifestState\">\r\n  <ng-container *ngIf=\"manifestState.loading === false && manifestState.loaded === true; else loading\">\r\n    <div class=\"content-wrapper\">\r\n      <router-outlet #o=\"outlet\"></router-outlet>\r\n    </div>\r\n    <div class=\"mobile-disclaimer\" *ngIf=\"!hideDisclaimer\">\r\n      <div>\r\n        This site is currently not mobile optimized. There is limited mobile functionality. Use a larger screen for\r\n        optimal experience.\r\n      </div>\r\n      <button mat-icon-button (click)=\"hideDisclaimer = true\">\r\n        <mat-icon>cancel</mat-icon>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template #loading>\r\n    <!-- <div class=\"loading-manifest-container\">\r\n      <h2>Loading Manifest</h2>\r\n      <mat-spinner mode=\"indeterminate\"></mat-spinner>\r\n    </div> -->\r\n    <ng-container *ngIf=\"manifestState.error\">\r\n      <div class=\"loading-manifest-container\">\r\n        <h1>Error Loading Manifest</h1>\r\n        <h2>Bungie Error - {{ manifestState.error.ErrorStatus }}</h2>\r\n        <p>{{ manifestState.error.Message }}</p>\r\n      </div>\r\n    </ng-container>\r\n    <div class=\"app-loading\" *ngIf=\"manifestState.loading\">\r\n      <h2>Destiny Clan Dashboard</h2>\r\n      <h3>Loading Manifest</h3>\r\n      <div class=\"logo\">\r\n        <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n          <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\" />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</ng-container>\r\n"
        },
        {
            "name": "AppOfflineDialogComponent",
            "id": "component-AppOfflineDialogComponent-cd91dc571f5c4b20e314b5bd32232d275372c141adc5f66e728912e53c63f1dafd334ccc8eab6d5f63688ef3c5c0f9a18e12182cde839987f64faa2ed6929bbd",
            "file": "projects/clan-dashboard/src/app/core/layout/app-offline-dialog/app-offline-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-app-offline-dialog",
            "styleUrls": [
                "./app-offline-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-offline-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AppOfflineDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialogRef, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AppConfig } from '../../config/app-config';\r\n@Component({\r\n  selector: 'app-app-offline-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule],\r\n  templateUrl: './app-offline-dialog.component.html',\r\n  styleUrls: ['./app-offline-dialog.component.scss']\r\n})\r\nexport class AppOfflineDialogComponent {\r\n  constructor(public dialogRef: MatDialogRef<AppOfflineDialogComponent>, private appConfig: AppConfig) {}\r\n  onNoClick(): void {\r\n    window.sessionStorage.setItem(this.appConfig.constants.D2DASHBOARD_ACKNOWLEDGE_OFFLINE, 'true');\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app-offline-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AppOfflineDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AppOfflineDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>API Offline</h1>\r\n<div mat-dialog-content>\r\n  <p>The Bungie API is currently down for maintenance. Look at <a href=\"https://twitter.com/bungiehelp\"\r\n      targe=\"_blank\">@BungieHelp</a> for more information.</p>\r\n  <p>You can continue to view the app based off cached data, but it is not up to date.</p>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Ok</button>\r\n</div>\r\n"
        },
        {
            "name": "BarChartComponent",
            "id": "component-BarChartComponent-b9c277d8332267040965eed6be23ca2fd1c3131dbb2ae0a912f59e6b379142d1e9fd43f3c00cfcce44594d1b759d2a62265cf2f9569c9345580da68d7536c322",
            "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-bar-chart",
            "styleUrls": [
                "./bar-chart.component.scss"
            ],
            "styles": [],
            "template": "<apx-chart\n  [series]=\"series\"\n  [chart]=\"chart\"\n  [dataLabels]=\"dataLabels\"\n  [plotOptions]=\"plotOptions\"\n  [yaxis]=\"yaxis\"\n  [legend]=\"legend\"\n  [fill]=\"fill\"\n  [colors]=\"colors\"\n  [stroke]=\"stroke\"\n  [tooltip]=\"tooltip\"\n  [xaxis]=\"xaxis\"\n  [theme]=\"{\n    mode: colorTheme\n  }\"\n></apx-chart>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "barColor",
                    "defaultValue": "'#3399FF'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "colorTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                },
                {
                    "name": "convertTo",
                    "defaultValue": "'Minutes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "chart",
                    "defaultValue": "{ type: 'bar', height: 400, zoom: { enabled: false }, toolbar: { tools: { download: false } } }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexChart",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "dataLabels",
                    "defaultValue": "{\r\n    enabled: false\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexDataLabels",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "fill",
                    "defaultValue": "{\r\n    opacity: 1\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexFill",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "formatPipe",
                    "defaultValue": "new PlaytimePipe()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "legend",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexLegend",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "plotOptions",
                    "defaultValue": "{\r\n    bar: {\r\n      horizontal: false,\r\n      columnWidth: '75%'\r\n      // endingShape: 'rounded'\r\n    }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexPlotOptions",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "series",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "stroke",
                    "defaultValue": "{\r\n    show: true,\r\n    width: 2,\r\n    colors: ['transparent']\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexStroke",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexTheme",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "tooltip",
                    "defaultValue": "{\r\n    y: {\r\n      formatter: (val) => {\r\n        let convertedVal = 0;\r\n        if (this.convertTo === 'Minutes') {\r\n          convertedVal = val * 60;\r\n        } else if (this.convertTo === 'Hours') {\r\n          convertedVal = val * 60 * 60;\r\n        }\r\n        return `${this.formatPipe.transform(convertedVal)}`;\r\n      }\r\n    }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexTooltip",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "xaxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexXAxis",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "yaxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexYAxis",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepDateData",
                    "args": [
                        {
                            "name": "sourceData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sort",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "sourceData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processData",
                    "args": [
                        {
                            "name": "sourceData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "sourceData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateChart",
                    "args": [
                        {
                            "name": "eventData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  NgZone,\r\n  OnInit,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { PlaytimePipe } from '../../pipes/playtime';\r\nimport {\r\n  ApexAxisChartSeries,\r\n  ApexChart,\r\n  ApexDataLabels,\r\n  ApexFill,\r\n  ApexLegend,\r\n  ApexPlotOptions,\r\n  ApexStroke,\r\n  ApexTheme,\r\n  ApexTooltip,\r\n  ApexXAxis,\r\n  ApexYAxis\r\n} from 'ng-apexcharts';\r\nimport { compare } from '@destiny/data/utility';\r\n\r\n@Component({\r\n  selector: 'lib-bar-chart',\r\n  template: `\r\n    <apx-chart\r\n      [series]=\"series\"\r\n      [chart]=\"chart\"\r\n      [dataLabels]=\"dataLabels\"\r\n      [plotOptions]=\"plotOptions\"\r\n      [yaxis]=\"yaxis\"\r\n      [legend]=\"legend\"\r\n      [fill]=\"fill\"\r\n      [colors]=\"colors\"\r\n      [stroke]=\"stroke\"\r\n      [tooltip]=\"tooltip\"\r\n      [xaxis]=\"xaxis\"\r\n      [theme]=\"{\r\n        mode: colorTheme\r\n      }\"\r\n    ></apx-chart>\r\n  `,\r\n  styleUrls: ['./bar-chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarChartComponent implements OnInit {\r\n  formatPipe = new PlaytimePipe();\r\n  // (window:resize)=”onResize($event)”\r\n  @Input()\r\n  convertTo: string = 'Minutes';\r\n\r\n  @Input()\r\n  colorTheme: 'light' | 'dark';\r\n\r\n  @Input()\r\n  barColor: string = '#3399FF';\r\n  //color: string = '#000';\r\n\r\n  _events;\r\n  @Input()\r\n  get events(): [] {\r\n    return this._events;\r\n  }\r\n\r\n  set events(value) {\r\n    if (value && value.length && value !== this._events) {\r\n      this._events = value;\r\n      this.updateChart(this._events);\r\n    }\r\n  }\r\n\r\n  series: ApexAxisChartSeries = [];\r\n  chart: ApexChart = { type: 'bar', height: 400, zoom: { enabled: false }, toolbar: { tools: { download: false } } };\r\n  yaxis: ApexYAxis;\r\n  theme: ApexTheme;\r\n\r\n  xaxis: ApexXAxis;\r\n  legend: ApexLegend = {};\r\n\r\n  plotOptions: ApexPlotOptions = {\r\n    bar: {\r\n      horizontal: false,\r\n      columnWidth: '75%'\r\n      // endingShape: 'rounded'\r\n    }\r\n  };\r\n  dataLabels: ApexDataLabels = {\r\n    enabled: false\r\n  };\r\n  fill: ApexFill = {\r\n    opacity: 1\r\n  };\r\n  stroke: ApexStroke = {\r\n    show: true,\r\n    width: 2,\r\n    colors: ['transparent']\r\n  };\r\n  tooltip: ApexTooltip = {\r\n    y: {\r\n      formatter: (val) => {\r\n        let convertedVal = 0;\r\n        if (this.convertTo === 'Minutes') {\r\n          convertedVal = val * 60;\r\n        } else if (this.convertTo === 'Hours') {\r\n          convertedVal = val * 60 * 60;\r\n        }\r\n        return `${this.formatPipe.transform(convertedVal)}`;\r\n      }\r\n    }\r\n  };\r\n  colors;\r\n  // private changeSubject = new Subject<any>();\r\n\r\n  constructor(private elRef: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {}\r\n\r\n  private updateChart(eventData) {\r\n    // if (!this.svg) {\r\n    //   this.createChart(eventData);\r\n    //   return;\r\n    // }\r\n\r\n    this.processData(this.events);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.colors = [this.barColor];\r\n    this.yaxis = {\r\n      title: {\r\n        text: this.convertTo\r\n      },\r\n      labels: {\r\n        formatter: (x) => {\r\n          return x.toString();\r\n        }\r\n      }\r\n    };\r\n    this.theme = {\r\n      mode: this.colorTheme\r\n    };\r\n  }\r\n\r\n  private processData(sourceData) {\r\n    if (sourceData) {\r\n      let cleanedData = [];\r\n      const firstData = sourceData[0].date;\r\n\r\n      if (firstData instanceof Date) {\r\n        this.xaxis = {\r\n          type: 'datetime'\r\n        };\r\n        cleanedData = this.prepDateData(sourceData, true);\r\n      } else {\r\n        this.xaxis = {\r\n          type: 'category'\r\n        };\r\n        cleanedData = this.prepDateData(sourceData, false);\r\n      }\r\n      this.series = [\r\n        {\r\n          name: '',\r\n          data: cleanedData\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  private prepDateData(sourceData, sort) {\r\n    const preppedData = [];\r\n    sourceData.forEach((data) => {\r\n      let convertedSeconds = 0;\r\n      if (this.convertTo === 'Minutes') {\r\n        convertedSeconds = Math.floor(data.seconds / 60);\r\n      } else if (this.convertTo === 'Hours') {\r\n        convertedSeconds = data.seconds / 60 / 60;\r\n      }\r\n\r\n      preppedData.push({ x: data.date, y: convertedSeconds });\r\n    });\r\n\r\n    if (!sort) {\r\n      return preppedData;\r\n    }\r\n\r\n    return preppedData.sort((a, b) => {\r\n      return compare(a.x, b.x);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".activity-tooltip {\r\n  position: fixed;\r\n  transition: opacity 0.2s;\r\n  border: 0px;\r\n  padding: 2px;\r\n  border-radius: 8px;\r\n  pointer-events: none;\r\n  font-size: 0.8em;\r\n  opacity: 0;\r\n}\r\n\r\n.activity-bar {\r\n  opacity: 0.6;\r\n  fill: var(--app-text-color);\r\n\r\n  transition: opacity 0.5s;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n}\r\n// .apexcharts-text {\r\n//   // fill: mat.get-color-from-palette($fg, text);\r\n// }\r\n.apexcharts-text {\r\n  fill: var(--app-text-color);\r\n}\r\n// .apexcharts-yaxis-title {\r\n//   //fill: mat.get-color-from-palette($fg, text);\r\n//     fill: var(--app-text-color);\r\n// }\r\n// .activity-bar-chart {\r\n//   .year-label {\r\n//     fill: var(--app-text-color);\r\n//     // fill: mat.get-color-from-palette($fg, text);\r\n//   }\r\n//   .day-label {\r\n//     fill: var(--app-text-color);\r\n//     // fill: mat.get-color-from-palette($fg, text);\r\n//   }\r\n//   .month-label {\r\n//     fill: var(--app-text-color);\r\n//     // fill: mat.get-color-from-palette($fg, text);\r\n//   }\r\n//   .legend-key {\r\n//     fill: var(--app-text-color);\r\n//     // fill: mat.get-color-from-palette($fg, text);\r\n//   }\r\n\r\n//   .legend-desc {\r\n//     fill: var(--app-text-color);\r\n//     // fill: mat.get-color-from-palette($fg, text);\r\n//   }\r\n// }\r\n.activity-tooltip {\r\n  background-color: var(--app-background-color);\r\n  // background: mat.get-color-from-palette($bg, background);\r\n}\r\n.apexcharts-tooltip {\r\n  background-color: var(--app-background-color) !important;\r\n  .apexcharts-tooltip-title {\r\n    background-color: var(--app-background-color) !important;\r\n    color: var(--app-text-color) !important;\r\n  }\r\n  .apexcharts-tooltip-text {\r\n    color: var(--app-text-color) !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./bar-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "events": {
                    "name": "events",
                    "setSignature": {
                        "name": "events",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "events",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8ceaf520f96e5437b08eeda244d84efb29effe62ddca4fc38eaa229085c2a1126c5715e61445bae741505aca1e4d377b350cb05fadd1dc45d9b2bbf7527029f1",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ClanActivityBarChartComponent",
            "id": "component-ClanActivityBarChartComponent-949d492b6ed72423aa67b3a9ea4551f7e2b33b05ae62e474febcae67a9dd84b3d163e6aa44644f848ea3c0ba4bef3336ce900df3069be1c7d7e30528a318efdb",
            "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-activity-bar-chart",
            "styleUrls": [
                "./clan-activity-bar-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-activity-bar-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "updating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BarChartModule } from '@destiny/components/shared/bar-chart';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { SkeletonChartLoaderComponent } from '@destiny/components/shared/skeleton-chart-loader';\r\n\r\n@Component({\r\n  selector: 'app-clan-activity-bar-chart',\r\n  standalone: true,\r\n  imports: [CommonModule, BarChartModule, MatCardModule, SkeletonChartLoaderComponent],\r\n  templateUrl: './clan-activity-bar-chart.component.html',\r\n  styleUrls: ['./clan-activity-bar-chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClanActivityBarChartComponent {\r\n  @Input()\r\n  events;\r\n\r\n  @Input()\r\n  loading: boolean;\r\n\r\n  @Input()\r\n  updating: boolean;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clan-activity-bar-chart.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card>\r\n  <mat-card-content>\r\n    <div class=\"card-header\">\r\n      <div class=\"h2\">In Game Time</div>\r\n    </div>\r\n    <div class=\"chart-container\" *ngIf=\"!loading; else loadingTemplate\">\r\n      <ng-container *ngIf=\"events.length > 0; else firstTimeLoading\">\r\n        <lib-bar-chart [events]=\"events\" convertTo=\"Hours\"></lib-bar-chart>\r\n      </ng-container>\r\n      <!-- <div class=\"h3\">Feature coming soon </div> -->\r\n    </div>\r\n    <div *ngIf=\"updating && events.length > 0\" class=\"update-info\">Updating...</div>\r\n    <div *ngIf=\"updating && events.length === 0\" class=\"chart-container\">\r\n      <!-- <lib-loading></lib-loading> -->\r\n      <div class=\"text-center\">\r\n        <div class=\"h3\">Loading Initial Data...</div>\r\n        <div class=\"h6\">This may take a while....</div>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>\r\n\r\n<ng-template #loadingTemplate>\r\n  <div class=\"loading-container\">\r\n    <!-- <lib-loading></lib-loading> -->\r\n    <!-- <div class=\"text-center\">\r\n      <div class=\"h3\">Loading Activities...</div>\r\n    </div> -->\r\n    <lib-skeleton-chart-loader></lib-skeleton-chart-loader>\r\n  </div>\r\n</ng-template>\r\n<ng-template #firstTimeLoading>\r\n  <div class=\"loading-container\">\r\n    <!-- <lib-loading></lib-loading> -->\r\n    <!-- <div class=\"text-center\">\r\n      <div class=\"h3\">Loading Activities...</div>\r\n    </div> -->\r\n    <lib-skeleton-chart-loader></lib-skeleton-chart-loader>\r\n    <h3 class=\"text-center\">Loading First Time Data</h3>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClanConfigComponent",
            "id": "component-ClanConfigComponent-d75b672fcb81f0ddd98282db67b938cf673c970698492c3d7bc2e5272493226a0c9638c69cb22ab3dc3044dfea9b4d11cd4b6b915e74f7f44d8612661e1e2ffa",
            "file": "projects/clan-dashboard/src/app/features/config/clan-config/clan-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-config",
            "styleUrls": [
                "./clan-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ClanConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteClanData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { Store } from '@ngrx/store';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\n\r\nimport { removeClan } from '@core/store/clans/clans.actions';\r\n\r\n@Component({\r\n  selector: 'app-clan-config',\r\n  templateUrl: './clan-config.component.html',\r\n  styleUrls: ['./clan-config.component.scss']\r\n})\r\nexport class ClanConfigComponent {\r\n  @Input() clanConfig: ClanConfig;\r\n\r\n  constructor(private db: ClanDatabase, private store: Store) {}\r\n\r\n  deleteClanData() {\r\n    this.store.dispatch(removeClan({ clanId: this.clanConfig.clanId }));\r\n    this.db.purgeDatabase(this.clanConfig.clanId);\r\n     /*\r\n    window.localStorage.removeItem(`lastActivityUpdate-${x}`)\r\n    window.localStorage.removeItem(`lastActivityAllUpdate-${x}`)\r\n    window.localStorage.removeItem(`MANIFEST_PATH_KEY`)\r\n    window.localStorage.removeItem(`MANIFEST_PATH_EXP_KEY`)\r\n    */\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 button {\r\n  float: right;\r\n}\r\n",
                    "styleUrl": "./clan-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div>\r\n  <h3>{{clanConfig.clanTag}} - {{clanConfig.clanName}} <button (click)=\"deleteClanData()\">Delete Clan Data</button></h3>\r\n\r\n</div>\r\n"
        },
        {
            "name": "ClanDetailCellComponent",
            "id": "component-ClanDetailCellComponent-1ed8955aa00259b37733ac2f0729a6595223a980b3a3618f73ba1952b361f80efe1b78972d57f607fb97f5ac4ed116abc335fcf72b573c1504158a7ad829481a",
            "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-detail-cell",
            "styleUrls": [
                "./clan-detail-cell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-detail-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanDetail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "GroupsV2GroupV2",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showReset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addClan",
                    "defaultValue": "new EventEmitter<GroupsV2GroupV2>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeClan",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "resetClan",
                    "defaultValue": "new EventEmitter<GroupsV2GroupV2>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GroupsV2GroupV2 } from 'bungie-api-angular';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n@Component({\r\n  selector: 'app-clan-detail-cell',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, MatButtonModule, MatListModule, PipesModule, MatIconModule, MatTooltipModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './clan-detail-cell.component.html',\r\n  styleUrls: ['./clan-detail-cell.component.scss']\r\n})\r\nexport class ClanDetailCellComponent {\r\n  @Input() clanDetail: GroupsV2GroupV2;\r\n  @Input() loading: boolean;\r\n  @Input() showAdd: boolean;\r\n  @Input() showReset: boolean;\r\n  @Output() removeClan = new EventEmitter<string>();\r\n  @Output() addClan = new EventEmitter<GroupsV2GroupV2>();\r\n  @Output() resetClan = new EventEmitter<GroupsV2GroupV2>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n.clan-detail {\r\n  width: 100%;\r\n  .mat-mdc-card-title-group {\r\n    display: block;\r\n  }\r\n  .mat-mdc-card-title {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .title-spacer {\r\n      flex: 1 1 auto;\r\n    }\r\n  }\r\n\r\n  &__loading {\r\n    .skeleton-title {\r\n      width: 250px;\r\n      margin-bottom: 0.75rem;\r\n    }\r\n    .skeleton-sub-title {\r\n      width: 250px;\r\n      margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .skeleton-list {\r\n      width: 200px;\r\n    }\r\n    .skeleton-button {\r\n      width: 75px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./clan-detail-cell.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"!loading; else loadingTemplate\">\r\n  <mat-card class=\"clan-detail\">\r\n    <mat-card-header>\r\n      <mat-card-title-group>\r\n        <!-- TODO: Clan Banner -->\r\n        <mat-card-title>\r\n          <div class=\"title-spacer\">{{clanDetail.name}} <ng-container *ngIf=\"clanDetail?.clanInfo?.clanCallsign\">\r\n              [{{clanDetail.clanInfo.clanCallsign}}]</ng-container>\r\n          </div>\r\n          <a mat-icon-button href=\"https://www.bungie.net/en/ClanV2?groupid={{clanDetail.groupId}}\" target=\"_blank\"\r\n            matTooltip=\"Bungie Group Page\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </a>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          {{clanDetail?.motto}}\r\n        </mat-card-subtitle>\r\n      </mat-card-title-group>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <mat-list>\r\n        <mat-list-item>\r\n          <mat-icon matListItemIcon>groups</mat-icon>{{clanDetail.memberCount}} Members\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <mat-icon matListItemIcon>calendar_month</mat-icon> Created\r\n          {{clanDetail.creationDate | bungieDate}}\r\n        </mat-list-item>\r\n        <!-- TODO: OPEN INVITE ONLY -->\r\n      </mat-list>\r\n\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <button *ngIf=\"showReset\" mat-button (click)=\"resetClan.emit(clanDetail)\">Reset</button>\r\n      <button *ngIf=\"showAdd\" mat-button (click)=\"addClan.emit(clanDetail)\">Add</button>\r\n      <button *ngIf=\"!showAdd\" mat-button (click)=\"removeClan.emit(clanDetail.groupId.toString())\">Remove</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</ng-container>\r\n<ng-template #loadingTemplate>\r\n  <mat-card class=\"clan-detail clan-detail__loading\">\r\n    <mat-card-header>\r\n      <mat-card-title-group>\r\n        <mat-card-title>\r\n          <span class=\"skeleton-item skeleton-title\"></span>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n        </mat-card-subtitle>\r\n      </mat-card-title-group>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <mat-list>\r\n        <mat-list-item>\r\n          <span class=\"skeleton-item skeleton-list\"></span>\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <span class=\"skeleton-item skeleton-list\"></span>\r\n        </mat-list-item>\r\n        <!-- TODO: OPEN INVITE ONLY -->\r\n      </mat-list>\r\n\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <span class=\"skeleton-item skeleton-button\"></span>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClanDetailComponent",
            "id": "component-ClanDetailComponent-7c2cb8694e523f0ae9d0a53e23fff60f374cbd795a64c65ceb072c9b721197a81002cfa5ade4931482419218941b04363ff93d49e67c8aec22bd64ba488d1f40",
            "file": "projects/clan-dashboard/src/app/features/clan-details/clan-detail/clan-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-detail",
            "styleUrls": [
                "./clan-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ClanConfig",
                    "decorators": []
                },
                {
                    "name": "showAdd",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showReset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clanDetails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GroupsV2GroupV2>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clanDetail",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanDetail",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetClan",
                    "args": [
                        {
                            "name": "clanDetail",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanDetail",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { ClanDetailService } from '../data-access/clan-detail.service';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { GroupsV2GroupV2 } from 'bungie-api-angular';\r\n\r\n@Component({\r\n  selector: 'app-clan-detail',\r\n  templateUrl: './clan-detail.component.html',\r\n  styleUrls: ['./clan-detail.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClanDetailComponent implements OnChanges {\r\n  // export class ClanDetailComponent {\r\n  @Input() clanConfig: ClanConfig;\r\n  @Input() showAdd: boolean = false;\r\n  @Input() showReset: boolean = false;\r\n\r\n  constructor(private clanDetailService: ClanDetailService) {}\r\n\r\n  clanDetails$: Observable<GroupsV2GroupV2>;\r\n  loading = false;\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['clanConfig']) {\r\n      this.loading = true;\r\n      if (this.clanConfig.clanId) {\r\n        this.clanDetails$ = this.clanDetailService\r\n          .getClan(this.clanConfig.clanId)\r\n          .pipe(tap(() => (this.loading = false)));\r\n      }\r\n    }\r\n  }\r\n\r\n  removeClan(clanId: string) {\r\n    this.clanDetailService.removeClan(clanId);\r\n  }\r\n  addClan(clanDetail: GroupsV2GroupV2) {\r\n    this.clanDetailService.addClan(clanDetail);\r\n  }\r\n  resetClan(clanDetail: GroupsV2GroupV2) {\r\n    this.clanDetailService.resetClan(clanDetail);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clan-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDetailService",
                        "type": "ClanDetailService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "clanDetailService",
                        "type": "ClanDetailService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<app-clan-detail-cell [clanDetail]=\"clanDetails$ | async\" [loading]=\"loading\" (removeClan)=\"removeClan($event)\"\r\n  [showAdd]=\"showAdd\" [showReset]=\"showReset\" (addClan)=\"addClan($event)\" (resetClan)=\"resetClan($event)\"></app-clan-detail-cell>\r\n"
        },
        {
            "name": "ClanInfoComponent",
            "id": "component-ClanInfoComponent-26ace077e7f0c78b692b2a6bd3b22c9551f92f1fa9ed0b16ec13e80f5ea7b05be823350f2283afb850cae1bb42ada53e09016f10f5b3d1662218290f021291df",
            "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-info",
            "styleUrls": [
                "./clan-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanDetail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "GroupsV2GroupV2",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clanProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "seasonProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GroupsV2GroupV2 } from 'bungie-api-angular/lib/model/groupsV2GroupV2';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-clan-info',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, PipesModule, MatIconModule, MatButtonModule, MatProgressBarModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './clan-info.component.html',\r\n  styleUrls: ['./clan-info.component.scss']\r\n})\r\nexport class ClanInfoComponent implements OnChanges {\r\n  @Input() clanDetail: GroupsV2GroupV2;\r\n  @Input() loading: boolean;\r\n\r\n  clanProgress;\r\n  seasonProgress;\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['clanDetail'] && this.clanDetail?.clanInfo) {\r\n      // TODO Constant this\r\n\r\n      this.clanProgress = this.clanDetail.clanInfo.d2ClanProgressions['584850370'];\r\n      if (this.clanProgress?.level === this.clanProgress?.levelCap) {\r\n        this.seasonProgress = 100;\r\n      } else {\r\n        this.seasonProgress = (this.clanProgress?.progressToNextLevel / this.clanProgress?.nextLevelAt) * 100;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n.clan-detail {\r\n  width: 100%;\r\n  .mat-mdc-card-title-group {\r\n    display: block;\r\n  }\r\n  .mat-mdc-card-title {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .title-spacer {\r\n      flex: 1 1 auto;\r\n    }\r\n    .clan-member-count {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n  }\r\n  .season-progress {\r\n    margin: 1rem 0;\r\n    display: flex;\r\n    align-items: center;\r\n    &-info {\r\n      flex: 1;\r\n    }\r\n  }\r\n  .season-level {\r\n    margin-right: 1rem;\r\n    span {\r\n      align-items: center;\r\n      background: var(--app-primary-color);\r\n      border-radius: 50%;\r\n      color: var(--app-primary-color-text);\r\n      display: flex;\r\n      justify-content: center;\r\n      height: 40px;\r\n      font-size: 1.25rem;\r\n      text-align: center;\r\n      width: 40px;\r\n    }\r\n  }\r\n  .progress-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 0.25rem;\r\n  }\r\n\r\n  &__loading {\r\n    .skeleton-title {\r\n      width: 250px;\r\n      margin-bottom: 0.75rem;\r\n    }\r\n    .skeleton-sub-title {\r\n      width: 250px;\r\n      margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .skeleton-list {\r\n      width: 200px;\r\n    }\r\n    .skeleton-button {\r\n      width: 75px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./clan-info.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"!loading && clanDetail; else loadingTemplate\">\r\n  <mat-card class=\"clan-detail\">\r\n    <mat-card-header>\r\n      <mat-card-title-group>\r\n        <!-- TODO: Clan Banner -->\r\n        <mat-card-title>\r\n          <div class=\"title-spacer\">{{clanDetail.name}} <ng-container *ngIf=\"clanDetail.clanInfo.clanCallsign\">\r\n              [{{clanDetail?.clanInfo?.clanCallsign}}]</ng-container>\r\n          </div>\r\n          <span class=\"clan-member-count\">\r\n            <mat-icon matListItemIcon>groups</mat-icon>&nbsp;{{clanDetail.memberCount}}\r\n          </span>\r\n          <a mat-icon-button href=\"https://www.bungie.net/en/ClanV2?groupid={{clanDetail.groupId}}\" target=\"_blank\"\r\n            matTooltip=\"Bungie Group Page\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </a>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          {{clanDetail?.motto}}\r\n        </mat-card-subtitle>\r\n      </mat-card-title-group>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n\r\n      <div class=\"season-progress\">\r\n        <div class=\"season-level\">\r\n          <span>{{clanProgress?.level}}</span>\r\n        </div>\r\n        <div class=\"season-progress-info\">\r\n          <mat-progress-bar mode=\"determinate\" [value]=\"seasonProgress\"></mat-progress-bar>\r\n          <div class=\"progress-info\">\r\n            Progress to next level:\r\n            <div class=\"float-right\" *ngIf=\"clanProgress?.levelCap !== clanProgress?.level; else maxLevel\">\r\n              {{clanProgress?.progressToNextLevel}} /\r\n              {{clanProgress?.nextLevelAt}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n\r\n  </mat-card>\r\n</ng-container>\r\n<ng-template #loadingTemplate>\r\n  <mat-card class=\"clan-detail clan-detail__loading\">\r\n    <mat-card-header>\r\n      <mat-card-title-group>\r\n        <mat-card-title>\r\n          <span class=\"skeleton-item skeleton-title\"></span>\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n        </mat-card-subtitle>\r\n      </mat-card-title-group>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div class=\"season-progress\">\r\n            <div class=\"season-level\">\r\n              <span>&nbsp;</span>\r\n            </div>\r\n            <div class=\"season-progress-info\">\r\n                <span class=\"skeleton-item skeleton-full-width\"></span>\r\n              <div class=\"progress-info\">\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n    </mat-card-content>\r\n\r\n  </mat-card>\r\n</ng-template>\r\n<ng-template #maxLevel>\r\n  <div class=\"float-right\">\r\n    Max level\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClanMemberCardComponent",
            "id": "component-ClanMemberCardComponent-7152c6815dd5e00f1c41debab9f580a57e8566495abe7c3dca6771cbab7efd4e7cc2d910f82cf32727dc7fd9f9aa489444c578fa2137cddde410638378e07f62",
            "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-member-card",
            "styleUrls": [
                "./clan-member-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-member-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "TemplateRef<HTMLElement>",
                    "decorators": []
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ClanMemberProfile[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { BungieDisplayNameModule } from 'projects/components/src/lib/pipes/bungie-display-name';\r\n\r\n@Component({\r\n  selector: 'app-clan-member-card',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, MatListModule, MatTooltipModule, BungieDisplayNameModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './clan-member-card.component.html',\r\n  styleUrls: ['./clan-member-card.component.scss']\r\n})\r\nexport class ClanMemberCardComponent {\r\n  @Input()\r\n  cardTitle: string;\r\n\r\n  @Input()\r\n  members: ClanMemberProfile[];\r\n\r\n  @Input()\r\n  isLoading: boolean;\r\n\r\n  @Input() itemTemplate: TemplateRef<HTMLElement>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clan-member-card {\r\n  overflow: hidden;\r\n  height: 100%;\r\n  &__card-content {\r\n    overflow-y: auto;\r\n  }\r\n}\r\n.member-info {\r\n  display: flex;\r\n  align-content: space-between;\r\n  width: 100%;\r\n\r\n  .member-name {\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n}\r\n.online {\r\n  background: var(--app-online-color);\r\n  border-radius: 50%;\r\n  display: block;\r\n  height: 12px;\r\n  margin-left: 0.5rem;\r\n  width: 12px;\r\n}\r\n",
                    "styleUrl": "./clan-member-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"clan-member-card\">\r\n  <mat-card-header>\r\n    <mat-card-title-group>\r\n      <mat-card-title>{{ cardTitle }}</mat-card-title>\r\n    </mat-card-title-group>\r\n  </mat-card-header>\r\n  <mat-card-content class=\"clan-member-card__card-content slim-scroll\">\r\n    <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\r\n      <mat-list>\r\n        <mat-list-item *ngFor=\"let member of members; let idx = index\">\r\n          <div class=\"member-info\">\r\n            <div class=\"member-name\">\r\n              {{ member.profile | bungieDisplayName }}\r\n              <ng-container *ngIf=\"member.member.isOnline\"><span class=\"online\" matTooltip=\"Online / In Orbit\"></span></ng-container>\r\n            </div>\r\n            <ng-container [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{ $implicit: member }\">\r\n            </ng-container>\r\n          </div>\r\n        </mat-list-item>\r\n      </mat-list>\r\n    </ng-container>\r\n  </mat-card-content>\r\n</mat-card>\r\n<ng-template #loadingTemplate>\r\n  <mat-list>\r\n    <ng-container *ngFor=\"let x of ['', '', '', '', '', '', '', '', '', '', '', '', '', '']\">\r\n      <mat-list-item>\r\n        <span class=\"skeleton-item skeleton-full-width\"></span>\r\n      </mat-list-item>\r\n    </ng-container>\r\n  </mat-list>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClansActivityCardComponent",
            "id": "component-ClansActivityCardComponent-f6807dfe8de8ebff1476449e209f248e4dc5a1c3f1f0bd6fe748ccf4a4461c4ea6e5b623b72bd625dea1aae99b67e602c7d26bdf71d19d1d11810da5bb413b5d",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-activity-card/clans-activity-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-activity-card",
            "styleUrls": [
                "./clans-activity-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-activity-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "events$",
                    "defaultValue": "this.clansDetailsActivitiesService.events$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.clansDetailsActivitiesService.playerActivitiesLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ClansDetailsActivitiesService } from '../data-access/clans-details-activities.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-activity-card',\r\n  templateUrl: './clans-activity-card.component.html',\r\n  styleUrls: ['./clans-activity-card.component.scss']\r\n})\r\nexport class ClansActivityCardComponent {\r\n  constructor(private clansDetailsActivitiesService: ClansDetailsActivitiesService) {}\r\n  events$ = this.clansDetailsActivitiesService.events$;\r\n  loading$ = this.clansDetailsActivitiesService.playerActivitiesLoading$;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-activity-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsActivitiesService",
                        "type": "ClansDetailsActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "clansDetailsActivitiesService",
                        "type": "ClansDetailsActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-clan-activity-bar-chart [events]=\"events$ | async\" [loading]=\"loading$ | async\"></app-clan-activity-bar-chart>\r\n"
        },
        {
            "name": "ClansDetailsComponent",
            "id": "component-ClansDetailsComponent-71607332debe0627bec4304deffa0f9af43d003a9e8c9688d55d4b6407eb93851e008c78ca1b6a4ab55fd62b7a4b7942b744a59a137310177604c86006c66968",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details/clans-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-details",
            "styleUrls": [
                "./clans-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ClanConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clanDetails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GroupsV2GroupV2>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { GroupsV2GroupV2 } from 'bungie-api-angular';\r\nimport { combineLatest, map, Observable, tap } from 'rxjs';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-details',\r\n  templateUrl: './clans-details.component.html',\r\n  styleUrls: ['./clans-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ClansDetailsComponent  implements OnChanges{\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n  // clansInfo$ = this.clansDetailsService.clanInfo$;\r\n  // clansInfoLoading$ = this.clansDetailsService.clansInfoLoading$;\r\n  // vm$ = combineLatest([this.clansInfo$, this.clansInfoLoading$]).pipe(\r\n  //   map(([clansInfo, clansLoading]) => ({\r\n  //     clansInfo,\r\n  //     clansLoading\r\n  //   }))\r\n  // );\r\n  @Input() clanConfig: ClanConfig;\r\n  clanDetails$: Observable<GroupsV2GroupV2>;\r\n  loading = false;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['clanConfig']) {\r\n      this.loading = true;\r\n      if (this.clanConfig.clanId) {\r\n        this.clanDetails$ = this.clansDetailsService\r\n          .getClan(this.clanConfig.clanId)\r\n          .pipe(tap(() => (this.loading = false)));\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clans-wrapper {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n",
                    "styleUrl": "./clans-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<!-- <div class=\"clans-wrapper\">\r\n  <ng-container *ngIf=\"clansInfo$ | async as clansInfo\">\r\n    <ng-container *ngFor=\"let clanInfo of clansInfo\">\r\n      <h1>{{clanInfo.name}} - {{clanInfo.clanInfo.clanCallsign}}</h1>\r\n      <h2>Member Count - {{clanInfo.memberCount}}</h2>\r\n      <h2>Level - {{clanInfo.clanInfo.d2ClanProgressions['584850370'].level}} /\r\n        {{clanInfo.clanInfo.d2ClanProgressions['584850370'].levelCap}}</h2>\r\n      <hr>\r\n\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n\r\n\r\n</div> -->\r\n<app-clan-info [clanDetail]=\"clanDetails$ | async\" [loading]=\"loading\"></app-clan-info>\r\n"
        },
        {
            "name": "ClansDetailsDashboardComponent",
            "id": "component-ClansDetailsDashboardComponent-50694053ad512a7c719d4357cdd37a8e5ff5df6c02ef1778bee333a1847ae6fda1be37cc4ef009526241de519413af68ce02e0047346ac4bf4dda3f8390a981f",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-dashboard.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-details-dashboard",
            "styleUrls": [
                "./clans-details-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-details-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clans$",
                    "defaultValue": "this.clansDetailsService.activeClans$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-details-dashboard',\r\n  templateUrl: './clans-details-dashboard.component.html',\r\n  styleUrls: ['./clans-details-dashboard.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansDetailsDashboardComponent {\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n  clans$ = this.clansDetailsService.activeClans$;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: auto;\r\n}\r\n.clans-details {\r\n  &__wrapper {\r\n    padding: 20px;\r\n  }\r\n  &__info {\r\n    .clan {\r\n      display: block;\r\n\r\n      margin-bottom: 1rem;\r\n    }\r\n  }\r\n  &__charts {\r\n    margin-bottom: 1rem;\r\n  }\r\n  &__info-card {\r\n    margin-bottom: 1rem;\r\n    display: block;\r\n    //  height: 100%;\r\n  }\r\n}\r\n@media (min-width: 48em) {\r\n  // Add back when We go 2 col\r\n  // .clans-details {\r\n  //   &__wrapper {\r\n  //     display: flex;\r\n  //   }\r\n  //   &__clans {\r\n  //     flex: 1;\r\n  //     margin-right: 1rem;\r\n  //     .clan {\r\n  //       display: block;\r\n  //     }\r\n  //   }\r\n\r\n  //   &__info-cards {\r\n  //     min-width: 350px;\r\n  //     max-height: 500px;\r\n  //   }\r\n  // }\r\n  .clans-details {\r\n    &__wrapper {\r\n    }\r\n    &__clans {\r\n      //  display: flex;\r\n      // margin-right: 1rem;\r\n\r\n      .clan {\r\n        display: block;\r\n      }\r\n    }\r\n\r\n    &__info-cards {\r\n      display: flex;\r\n      max-height: 500px;\r\n      justify-content: space-between;\r\n    }\r\n    &__info-card {\r\n      width: 30%;\r\n    }\r\n  }\r\n}\r\n\r\n@media (min-width: 96em) {\r\n  .clans-details {\r\n    &__main {\r\n      display: grid;\r\n      grid-template-columns: minmax(10px, 3fr) minmax(10px, 1fr);\r\n      gap: 1rem;\r\n      margin-right: auto;\r\n      margin-left: auto;\r\n    }\r\n    &__info {\r\n      grid-column: 2;\r\n      grid-row: 1;\r\n      > * {\r\n        display: block;\r\n        margin-bottom: 1rem;\r\n      }\r\n    }\r\n    &__charts {\r\n      grid-column: 1;\r\n      grid-row: 1;\r\n      > * {\r\n        display: block;\r\n        margin-bottom: 1rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./clans-details-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clans-details__wrapper\">\r\n  <div class=\"clans-details__main\">\r\n    <div class=\"clans-details__charts\">\r\n      <app-clans-activity-card></app-clans-activity-card>\r\n    </div>\r\n    <div class=\"clans-details__info\">\r\n      <ng-container *ngFor=\"let clan of clans$ | async\">\r\n        <app-clans-details [clanConfig]=\"clan\" class=\"clan\"></app-clans-details>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n  <div class=\"clans-details__info-cards\">\r\n    <app-clans-highest-light-level-card class=\"clans-details__info-card\"></app-clans-highest-light-level-card>\r\n    <app-clans-recently-active-card class=\"clans-details__info-card\"></app-clans-recently-active-card>\r\n    <app-clans-inactive-card class=\"clans-details__info-card\"></app-clans-inactive-card>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ClanSearchAutocompleteComponent",
            "id": "component-ClanSearchAutocompleteComponent-8cba324bdb2160161ff4830b0a1fd022936f299b1a472d447aebf483f9f0053e75da5c99d80855f34ed1c7ec879bb8942c86e813276b44ea5f600f3ee36c988b",
            "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search-autocomplete",
            "styleUrls": [
                "./clan-search-autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search-autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoCompleteResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ClanSearchResultItem[]",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addClan",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "addMembersClan",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "searchClans",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autocompleteControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "autocompleteSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { sampleTime } from 'rxjs';\r\nimport { ClanSearchResultItem } from '../../models/ClanSearchResultItem';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n@Component({\r\n  selector: 'app-clan-search-autocomplete',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatAutocompleteModule,\r\n    ReactiveFormsModule,\r\n    MatProgressSpinnerModule,\r\n    MatIconModule\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './clan-search-autocomplete.component.html',\r\n  styleUrls: ['./clan-search-autocomplete.component.scss']\r\n})\r\nexport class ClanSearchAutocompleteComponent implements OnInit {\r\n  @Input() autoCompleteResults: ClanSearchResultItem[];\r\n  @Input() loading: boolean;\r\n\r\n  @Output() addClan = new EventEmitter<any>();\r\n  @Output() addMembersClan = new EventEmitter<any>();\r\n  @Output() searchClans = new EventEmitter<string>();\r\n\r\n  autocompleteControl = new FormControl('');\r\n\r\n  ngOnInit() {\r\n    this.autocompleteControl.valueChanges.pipe(sampleTime(1000)).subscribe((result) => {\r\n      if (typeof result === 'string') {\r\n        this.searchClans.emit(result);\r\n      }\r\n    });\r\n  }\r\n\r\n  autocompleteSelected(event: MatAutocompleteSelectedEvent, input: HTMLInputElement) {\r\n    const selectedItem = event.option.value as ClanSearchResultItem;\r\n    input.value = '';\r\n    input.blur();\r\n    if (selectedItem.type === 'clan') {\r\n      this.addClan.emit(selectedItem.clanInfo);\r\n    } else if (selectedItem.type === 'player') {\r\n      console.log(selectedItem);\r\n      this.addMembersClan.emit(selectedItem.memberInfo);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-spinner,\r\n.clan-result {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  mat-spinner,\r\n  mat-icon {\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n.search {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.clan-search-autocomplete__input {\r\n  caret-color: var(--app-text-color);\r\n  &:focus::placeholder {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n",
                    "styleUrl": "./clan-search-autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\" class=\"search\">\r\n  <input matInput #clanInput  [matAutocomplete]=\"auto\" class=\"clan-search-autocomplete__input\"\r\n    [formControl]=\"autocompleteControl\" placeholder=\"Search by Player Name, Clan Name, Clan Id, or Bungie Clan URL\">\r\n  <!-- <i matSuffix class=\"material-icons\">mode_edit</i> -->\r\n  <mat-autocomplete #auto=\"matAutocomplete\" autoActiveFirstOption=\"true\"\r\n    (optionSelected)=\"autocompleteSelected($event, clanInput)\">\r\n    <ng-container *ngIf=\"autoCompleteResults || loading\">\r\n      <mat-option disabled class=\"loading\" *ngIf=\"loading\">\r\n        <span class=\"loading-spinner\">\r\n          <mat-spinner matSuffix diameter='35' mode=\"indeterminate\"></mat-spinner>\r\n          Loading\r\n        </span>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let clan of autoCompleteResults\" [value]=\"clan\">\r\n        <span class=\"clan-result\">\r\n          <ng-container *ngIf=\"clan.type === 'player'; else group\">\r\n            <mat-icon [svgIcon]=\"clan.iconName\"></mat-icon>\r\n          </ng-container>\r\n          {{clan.name}}\r\n        </span>\r\n      </mat-option>\r\n      <mat-option disabled *ngIf=\"autoCompleteResults?.length === 0 && !loading\">\r\n        Clan Not Found\r\n      </mat-option>\r\n    </ng-container>\r\n  </mat-autocomplete>\r\n</mat-form-field>\r\n\r\n<ng-template #group>\r\n  <mat-icon>people</mat-icon>\r\n</ng-template>\r\n"
        },
        {
            "name": "ClanSearchComponent",
            "id": "component-ClanSearchComponent-2f152cc4ce30b00c94424f55426deea249b10de3ca9d92153f0106d3f4852c66a8c4bc33d682bc1f2e2c66969416bf62c4a1f82364d7811b05a44f53536227d4",
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search",
            "styleUrls": [
                "./clan-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clans$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { addClan, selectAllClans } from '@core/store/clans';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-clan-search',\r\n  templateUrl: './clan-search.component.html',\r\n  styleUrls: ['./clan-search.component.scss']\r\n})\r\nexport class ClanSearchComponent {\r\n  constructor(private store: Store) {}\r\n\r\n  clans$ = this.store.select(selectAllClans);\r\n  addClan(clanId: string, clanName: string, clanTag: string) {\r\n    this.store.dispatch(addClan({ clanId, clanName, clanTag }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  button {\r\n    margin: 10px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./clan-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"wrapper\">\r\n  <h1>DOD - Quick Start</h1>\r\n  <p>\r\n    Click these two buttons and then let's go.\r\n  </p>\r\n  <button (click)=\"addClan('2073131', 'DoD - Paternal Chums', 'DOD')\">DoD-PC - Chums</button><br>\r\n  <button (click)=\"addClan('4859164', 'DoD - Paternal Champs', 'DOD')\">DoD-PC - Champs</button><br>\r\n  <a routerLink=\"/\">Let's Go</a>\r\n</div>\r\n"
        },
        {
            "name": "ClanSearchCuratedViewComponent",
            "id": "component-ClanSearchCuratedViewComponent-287181c02583a4da025a458881a811aef69c68d0e1c1ec28e4d8368ff6e8e61aaa2324568db58f203cadffac291e38a3654b2a5040c4853c7d327ad370aa14e6",
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search-curated-view",
            "styleUrls": [
                "./clan-search-curated-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search-curated-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeClans$",
                    "defaultValue": "this.clanSearchService.clans$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clans$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return ALL_CLANS.find((x) => x.key === params.get('key'));\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "vm$",
                    "defaultValue": "combineLatest([this.activeClans$, this.clans$]).pipe(\r\n    map(([ac, c]) => {\r\n      return {\r\n        activeClans: ac,\r\n        clans: c\r\n      };\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "clanIsActive",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activeClans",
                            "type": "ClanConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activeClans",
                            "type": "ClanConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ClanConfig } from '@core/store/clans';\r\nimport { combineLatest, map } from 'rxjs';\r\nimport { ClanSearchService } from '../data-access/clan-search.service';\r\nimport { ALL_CLANS } from './curated_clans';\r\n\r\n@Component({\r\n  selector: 'app-clan-search-curated-view',\r\n  templateUrl: './clan-search-curated-view.component.html',\r\n  styleUrls: ['./clan-search-curated-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClanSearchCuratedViewComponent {\r\n  constructor(private route: ActivatedRoute, private clanSearchService: ClanSearchService) {}\r\n\r\n  activeClans$ = this.clanSearchService.clans$;\r\n\r\n  clans$ = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return ALL_CLANS.find((x) => x.key === params.get('key'));\r\n    })\r\n  );\r\n  vm$ = combineLatest([this.activeClans$, this.clans$]).pipe(\r\n    map(([ac, c]) => {\r\n      return {\r\n        activeClans: ac,\r\n        clans: c\r\n      };\r\n    })\r\n  );\r\n\r\n  // Don't ever do this on a big app.\r\n  // I'm donig this in a controlled state and I'm\r\n  // feeling too lazy to make a pipe\r\n  clanIsActive(clan: ClanConfig, activeClans: ClanConfig[]) {\r\n    return !activeClans.find((x) => x.clanId === clan.clanId);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "header {\r\n  margin: 1rem;\r\n  text-align: center;\r\n}\r\n.found-clans {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  .clan {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 1rem;\r\n  }\r\n}\r\n.clan-groups {\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n  hr {\r\n    width: 98%;\r\n  }\r\n  margin-bottom: 4rem;\r\n}\r\n",
                    "styleUrl": "./clan-search-curated-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"vm$|async as vm\">\r\n  <header>\r\n    <h1>{{vm.clans.title}}</h1>\r\n    <p>\r\n      Please reach out to <a href=\"https://twitter.com/WorthyD\" target=\"_blank\">WorthyD</a> to update\r\n    </p>\r\n    <button color=\"accent\" mat-raised-button routerLink=\"/\">Let's Go</button>\r\n  </header>\r\n  <div class=\"found-clans\">\r\n    <ng-container *ngFor=\"let clan of vm.clans.clans\">\r\n      <app-clan-detail [clanConfig]=\"clan\" [showAdd]=\"clanIsActive(clan, vm.activeClans)\" class=\"clan\">\r\n      </app-clan-detail>\r\n    </ng-container>\r\n\r\n  </div>\r\n  <ng-container *ngFor=\"let clanGroup of vm.clans.subGroups\">\r\n    <div class=\"clan-groups\">\r\n      <h2>{{clanGroup.title}}</h2>\r\n      <div class=\"found-clans\">\r\n        <ng-container *ngFor=\"let clan of clanGroup.clans\">\r\n          <app-clan-detail [clanConfig]=\"clan\" [showAdd]=\"clanIsActive(clan, vm.activeClans)\" class=\"clan\">\r\n          </app-clan-detail>\r\n        </ng-container>\r\n      </div>\r\n      <hr>\r\n    </div>\r\n  </ng-container>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ClanSearchViewComponent",
            "id": "component-ClanSearchViewComponent-fe63ed4500c9a44bd61c61b3d79774e70f1650f41b555ca418bf1b462d1066385fd3066ed002d6552fb22a4b7d9fe3599b44ad2eba51defbfe945f6d842bfb4d",
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search-view",
            "styleUrls": [
                "./clan-search-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autoCompleteResults$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "bgClass",
                    "defaultValue": "`bg-${Math.floor(Math.random() * 3) + 1}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "clans$",
                    "defaultValue": "this.clanSearchService.clans$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "versionNumber",
                    "defaultValue": "this.appConfig.appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "year",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "GroupsV2GroupV2Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMembersClan",
                    "args": [
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "demoClan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchClans",
                    "args": [
                        {
                            "name": "search",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { Store } from '@ngrx/store';\r\nimport { GroupsV2GroupV2Card } from 'bungie-api-angular/lib/model/groupsV2GroupV2Card';\r\nimport { catchError, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { ClanSearchService } from '../data-access/clan-search.service';\r\n\r\n@Component({\r\n  selector: 'app-clan-search-view',\r\n  templateUrl: './clan-search-view.component.html',\r\n  styleUrls: ['./clan-search-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ClanSearchViewComponent {\r\n  constructor(private clanSearchService: ClanSearchService, private appConfig: AppConfig) {}\r\n  year = new Date().getFullYear();\r\n  clans$ = this.clanSearchService.clans$;\r\n\r\n  bgClass = `bg-${Math.floor(Math.random() * 3) + 1}`;\r\n  loading = false;\r\n  autoCompleteResults$: Observable<any>;\r\n  versionNumber = this.appConfig.appVersion;\r\n  searchClans(search: any) {\r\n    this.autoCompleteResults$ = of(search).pipe(\r\n      tap(() => (this.loading = true)),\r\n      switchMap((search) => {\r\n        if (!search || search.name) {\r\n          this.loading = false;\r\n          return of([]);\r\n        } else if (!isNaN(search)) {\r\n          return this.clanSearchService.numericClanSearch(search);\r\n        } else if (search.indexOf && search.indexOf('https://www.bungie.net/') > -1) {\r\n          const clanId = search.split('=')[1];\r\n          return this.clanSearchService.numericClanSearch(clanId);\r\n        } else {\r\n          //return this.textClanSearch(currentQuery);\r\n          return this.clanSearchService.combinedSearch(search);\r\n        }\r\n      }),\r\n      tap(() => (this.loading = false)),\r\n      catchError((err) => {\r\n        this.loading = false;\r\n        // Just remapping the data to show the error\r\n        // There are better ways of doing this\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  addClan(clan: GroupsV2GroupV2Card) {\r\n    this.clanSearchService.addClan(clan);\r\n  }\r\n  demoClan() {\r\n    this.clanSearchService.addClan({ groupId: 2073131, name: 'DoD Paternal Chums', clanInfo: { clanCallsign: 'DoD' } });\r\n  }\r\n\r\n  addMembersClan(member: any) {\r\n    this.clanSearchService.findPlayerClan(member);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".home-info {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  @media (min-width: 48em) {\r\n    height: 200px;\r\n  }\r\n  @media (min-width: 96em) {\r\n    height: 400px;\r\n  }\r\n  &::before {\r\n    content: ' ';\r\n    background: #000;\r\n    display: block;\r\n    height: 100%;\r\n    opacity: 0.8;\r\n    position: absolute;\r\n    width: 100%;\r\n    z-index: 1;\r\n  }\r\n\r\n  .info {\r\n    position: relative;\r\n    z-index: 10;\r\n    max-width: 960px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    color: #fff;\r\n  }\r\n}\r\n.bg {\r\n  background-position: center center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n.bg-1 {\r\n  background-image: url('/assets/backgrounds/1.jpg');\r\n}\r\n.bg-2 {\r\n  background-image: url('/assets/backgrounds/2.jpg');\r\n}\r\n.bg-3 {\r\n  background-image: url('/assets/backgrounds/3.jpg');\r\n}\r\n.unstyled-button {\r\n  border: none;\r\n  color: inherit;\r\n  cursor: pointer;\r\n  text-decoration: underline;\r\n  letter-spacing: 0.03125em;\r\n  background: none;\r\n\r\n  padding: 0;\r\n}\r\n.alert-card {\r\n  align-items: center;\r\n  background-color: var(--app-warning-background);\r\n  display: inline-flex;\r\n  color: var(--app-warning-text);\r\n  justify-content: center;\r\n  padding: 1rem;\r\n  border-radius: 0.5rem;\r\n  margin: 0 auto;\r\n\r\n  .mat-icon {\r\n    margin-right: 1rem;\r\n  }\r\n  h2 {\r\n    flex: 1;\r\n    margin: 0;\r\n  }\r\n}\r\n.lets-go-btn {\r\n  text-align: center;\r\n  button {\r\n    padding: 2rem 4rem;\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n\r\n.clan-search {\r\n  margin: 3rem auto;\r\n  max-width: 500px;\r\n  h2 {\r\n    text-align: center;\r\n    display: flex;\r\n    align-items: center;\r\n    //margin: 0 auto;\r\n    justify-content: center;\r\n    i {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  h4 {\r\n    text-align: center;\r\n    button {\r\n      font-size: inherit;\r\n    }\r\n  }\r\n  .clan-search-autocomplete {\r\n    display: block;\r\n    max-width: 500px;\r\n  }\r\n}\r\n\r\n.found-clans {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 100%;\r\n  max-width: 1920px;\r\n  margin: 0 auto;\r\n  .clan {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n.app-info {\r\n  width: 100%;\r\n  max-width: 1020px;\r\n  margin: 1rem auto;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  .info-card {\r\n    flex: 0 0 25%;\r\n    max-width: 250px;\r\n    display: flex;\r\n    .icon {\r\n      flex: 0 0 16.6666666667%;\r\n      max-width: 16.6666666667%;\r\n    }\r\n    .info-card-content {\r\n      flex: 0 0 83.3333333333%;\r\n      max-width: 83.3333333333%;\r\n    }\r\n  }\r\n}\r\n\r\nfooter {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./clan-search-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "clanSearchService",
                        "type": "ClanSearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clan-search-wrapper\">\r\n  <div class=\"home-info bg {{ bgClass }}\">\r\n    <div class=\"info\">\r\n      <h1>Destiny Clan Dashboard</h1>\r\n      <h2>View your clan's activity, accomplishments, and population with relative ease.</h2>\r\n      <p>I hope you find this thing useful. <a href=\"https://twitter.com/worthyd\">Send me your feedback</a></p>\r\n      <small style=\"font-size: 6px\">If you can read this, you do not need glasses.</small>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"clan-search\">\r\n    <h2>\r\n      Find Your Clan<i\r\n        class=\"material-icons\"\r\n        matTooltip=\"Search by Clan Name, Clan Id, or Clan URL. Clan Name must search for full clan name. Bungie doesn't support a 'fuzzy' search.\"\r\n      >\r\n        help\r\n      </i>\r\n    </h2>\r\n    <h4>\r\n      Find your clan and any additional clans you wish to track. <br />Just want to look? Try\r\n      <button (click)=\"demoClan()\" class=\"unstyled-button\">this one</button> and have a look around.\r\n    </h4>\r\n    <app-clan-search-autocomplete\r\n      class=\"clan-search-autocomplete\"\r\n      [autoCompleteResults]=\"autoCompleteResults$ | async\"\r\n      [loading]=\"loading\"\r\n      (searchClans)=\"searchClans($event)\"\r\n      (addClan)=\"addClan($event)\"\r\n      (addMembersClan)=\"addMembersClan($event)\"\r\n    ></app-clan-search-autocomplete>\r\n  </div>\r\n  <ng-container *ngIf=\"clans$ | async as clans\">\r\n    <div *ngIf=\"clans.length > 4\">\r\n      <div class=\"alert-card\">\r\n        <mat-icon>warning</mat-icon>\r\n        <h2>Adding too many clans will impact the performance of the application</h2>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"clans.length > 0\" class=\"lets-go-btn\">\r\n      <button color=\"accent\" mat-raised-button routerLink=\"/\">View Dashboard</button>\r\n    </div>\r\n    <!-- TODO: Add Let's go -->\r\n\r\n    <div class=\"found-clans\">\r\n      <ng-container *ngFor=\"let clan of clans\">\r\n        <app-clan-detail [clanConfig]=\"clan\" class=\"clan\"></app-clan-detail>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <section class=\"app-info\">\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\"> date_range </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Seasonal Progress</h3>\r\n          <p>View seasonal progress on both a clan and player level.</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\"> group </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Roster Activity</h3>\r\n          <p>Find out who has been the most active over the last year by viewing interactive heatmaps.</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\"> reduce_capacity </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Activity Stats</h3>\r\n          <p>Track who has cleared what, who has gotten the rare drops and completed the hardest challenges.</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"info-card\">\r\n        <div class=\"icon\">\r\n          <i class=\"material-icons\"> verified_user </i>\r\n        </div>\r\n        <div class=\"info-card-content\">\r\n          <h3>Seal Completion</h3>\r\n          <p>\r\n            Celebrate the accomplishment of completing seals with your clan. Easily view who's finished seals and find\r\n            out who needs help.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </ng-container>\r\n\r\n  <footer>\r\n    © {{ year }} - <a href=\"https://twitter.com/worthyd\" target=\"_blank\">@WorthyD</a> -\r\n    <span> v {{ versionNumber }} </span> -\r\n    <a href=\"https://github.com/WorthyD/d2-clandashboard\" target=\"_blank\">Source Code</a> - Not Affiliated with Bungie\r\n  </footer>\r\n</div>\r\n"
        },
        {
            "name": "ClansHighestLightLevelCardComponent",
            "id": "component-ClansHighestLightLevelCardComponent-a8b345d64141a4f83c9ac9c6ea312ad2cd771fcaa8aed1b8da272bbc252c9b6d1e4ecac784111a9d03445d4067f0d72b4af52fa8d53ce4ee3d406402056118dc",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-highest-light-level-card/clans-highest-light-level-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-highest-light-level-card",
            "styleUrls": [
                "./clans-highest-light-level-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-highest-light-level-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "highestPowerMembers$",
                    "defaultValue": "this.clansDetailsService.highestPowerBonusMembers$.pipe(startWith([]))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoading$",
                    "defaultValue": "this.clansDetailsService.clanProfilesLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "vm$",
                    "defaultValue": "combineLatest([this.highestPowerMembers$, this.isLoading$]).pipe(\r\n    map(([highestPowerMembers, isLoading]) => ({\r\n      highestPowerMembers,\r\n      isLoading\r\n    }))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\nimport { combineLatest, map, startWith, tap } from 'rxjs';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-highest-light-level-card',\r\n  templateUrl: './clans-highest-light-level-card.component.html',\r\n  styleUrls: ['./clans-highest-light-level-card.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansHighestLightLevelCardComponent {\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n\r\n  highestPowerMembers$ = this.clansDetailsService.highestPowerBonusMembers$.pipe(startWith([]));\r\n  isLoading$ = this.clansDetailsService.clanProfilesLoading$;\r\n  vm$ = combineLatest([this.highestPowerMembers$, this.isLoading$]).pipe(\r\n    map(([highestPowerMembers, isLoading]) => ({\r\n      highestPowerMembers,\r\n      isLoading\r\n    }))\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-highest-light-level-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"vm$ | async as vm\">\r\n  <app-clan-member-card [cardTitle]=\"'Highest Power Bonus'\" [itemTemplate]=\"itemTemplate\" [isLoading]=\"vm.isLoading\"\r\n    [members]=\"vm.highestPowerMembers\">\r\n    <ng-template let-member #itemTemplate>\r\n      <div>\r\n        {{member.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}}\r\n      </div>\r\n    </ng-template>\r\n  </app-clan-member-card>\r\n</ng-container>\r\n"
        },
        {
            "name": "ClansInactiveCardComponent",
            "id": "component-ClansInactiveCardComponent-ed7839555ae99e5ec8ba3933dd6e3d38a432f37e61228156847d485853fb543aac091dec7364921fcabb313aedb920180ecd7a6ba32b1e116cdbe2cda574218a",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-inactive-card/clans-inactive-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-inactive-card",
            "styleUrls": [
                "./clans-inactive-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-inactive-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inactiveMemberList$",
                    "defaultValue": "this.clansDetailsService.inactiveMemberList$.pipe(startWith([]))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isLoading$",
                    "defaultValue": "this.clansDetailsService.clanProfilesLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "vm$",
                    "defaultValue": "combineLatest([this.inactiveMemberList$, this.isLoading$]).pipe(\r\n    map(([inactiveMemberList, isLoading]) => ({\r\n      inactiveMemberList,\r\n      isLoading\r\n    }))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { combineLatest, map, startWith } from 'rxjs';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-inactive-card',\r\n  templateUrl: './clans-inactive-card.component.html',\r\n  styleUrls: ['./clans-inactive-card.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansInactiveCardComponent {\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n\r\n  inactiveMemberList$ = this.clansDetailsService.inactiveMemberList$.pipe(startWith([]));\r\n  isLoading$ = this.clansDetailsService.clanProfilesLoading$;\r\n  vm$ = combineLatest([this.inactiveMemberList$, this.isLoading$]).pipe(\r\n    map(([inactiveMemberList, isLoading]) => ({\r\n      inactiveMemberList,\r\n      isLoading\r\n    }))\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-inactive-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"vm$ | async as vm\">\r\n    <app-clan-member-card [cardTitle]=\"'Longest Away Members'\" [itemTemplate]=\"itemTemplate\" [isLoading]=\"vm.isLoading\"\r\n      [members]=\"vm.inactiveMemberList\">\r\n      <ng-template let-member #itemTemplate>\r\n        <div>\r\n          {{member.profile?.profile.data.dateLastPlayed |  bungieDate}}\r\n        </div>\r\n      </ng-template>\r\n    </app-clan-member-card>\r\n  </ng-container>\r\n"
        },
        {
            "name": "ClansRecentlyActiveCardComponent",
            "id": "component-ClansRecentlyActiveCardComponent-4f4d6ff12bda774ab6960b890aad71973db00c423d3513f8d5ef690a5a911998e51868ad8fff1fbc5242ec840852e49d6270669b9bab6b428fe63e61427fd7f1",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-recently-active-card/clans-recently-active-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-recently-active-card",
            "styleUrls": [
                "./clans-recently-active-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-recently-active-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "defaultValue": "this.clansDetailsService.clanProfilesLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "lastLoginMembers$",
                    "defaultValue": "this.clansDetailsService.lastLoginMembers$.pipe(startWith([]))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "vm$",
                    "defaultValue": "combineLatest([this.lastLoginMembers$, this.isLoading$]).pipe(\r\n    map(([lastLoginMembers, isLoading]) => ({\r\n      lastLoginMembers,\r\n      isLoading\r\n    }))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { combineLatest, map, startWith } from 'rxjs';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-recently-active-card',\r\n  templateUrl: './clans-recently-active-card.component.html',\r\n  styleUrls: ['./clans-recently-active-card.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansRecentlyActiveCardComponent {\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n\r\n  lastLoginMembers$ = this.clansDetailsService.lastLoginMembers$.pipe(startWith([]));\r\n  isLoading$ = this.clansDetailsService.clanProfilesLoading$;\r\n  vm$ = combineLatest([this.lastLoginMembers$, this.isLoading$]).pipe(\r\n    map(([lastLoginMembers, isLoading]) => ({\r\n      lastLoginMembers,\r\n      isLoading\r\n    }))\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-recently-active-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"vm$ | async as vm\">\r\n    <app-clan-member-card [cardTitle]=\"'Recently Active Members'\" [itemTemplate]=\"itemTemplate\" [isLoading]=\"vm.isLoading\"\r\n      [members]=\"vm.lastLoginMembers\">\r\n      <ng-template let-member #itemTemplate>\r\n        <div>\r\n          {{member.profile?.profile.data.dateLastPlayed |  bungieDateTime}}\r\n        </div>\r\n      </ng-template>\r\n    </app-clan-member-card>\r\n  </ng-container>\r\n"
        },
        {
            "name": "ClansRosterComponent",
            "id": "component-ClansRosterComponent-7227547c0ef0d3fa8deb739d3f7759c624c2afc4b45b6e5545bb6002d46fef8bc94f1ee399374e8fa5811b4e241e4937eec7ba1c3b6129033754e4e7ebab98a9",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-roster",
            "styleUrls": [
                "./clans-roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-roster.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "rosterFilter",
                    "defaultValue": "new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "rosterInfo$",
                    "defaultValue": "this.clansRosterService.clanRosterItems$.pipe(\r\n    map((clanProfiles) => {\r\n      return {\r\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\r\n        viewer: this.rosterViewer,\r\n        filterer: this.rosterFilter,\r\n      //  exporter: this.rosterExporter,\r\n        sorter: this.rosterSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RosterResources>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "rosterSorter",
                    "defaultValue": "new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "rosterViewer",
                    "defaultValue": "new Viewer(\r\n    {\r\n      metadata: CLAN_ROSTER_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Table_ViewerV3'\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { map, Observable, of, tap } from 'rxjs';\r\n\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { ClansRosterService } from '../data-access/clans-roster.service';\r\nimport { CLAN_ROSTER_VIEWER_METADATA } from './clan-roster-metadata';\r\nimport { CLAN_ROSTER_FILTERER_METADATA } from './clan-roster-metadata/ClanRosterFilterer';\r\nimport { CLAN_ROSTER_SORTER_METADATA } from './clan-roster-metadata/ClanRosterSorter';\r\n// import { CLAN_ROSTER_EXPORTER_METADATA } from './clan-roster-metadata/ClanRosterExporter';\r\nimport { ClanMemberProfile } from '@shared/models/ClanMemberProfile';\r\n\r\ninterface RosterResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  // exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-clans-roster',\r\n  templateUrl: './clans-roster.component.html',\r\n  styleUrls: ['./clans-roster.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClansRosterComponent {\r\n  constructor(\r\n    private clansRosterService: ClansRosterService,\r\n    private bungieDatePage: BungieDatePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n  rosterViewer = new Viewer(\r\n    {\r\n      metadata: CLAN_ROSTER_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Table_ViewerV3'\r\n  );\r\n  rosterFilter = new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA });\r\n  rosterSorter = new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA });\r\n  // rosterExporter = new Exporter({ metadata: CLAN_ROSTER_EXPORTER_METADATA });\r\n  isLoading = true;\r\n\r\n  rosterInfo$: Observable<RosterResources> = this.clansRosterService.clanRosterItems$.pipe(\r\n    map((clanProfiles) => {\r\n      return {\r\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\r\n        viewer: this.rosterViewer,\r\n        filterer: this.rosterFilter,\r\n      //  exporter: this.rosterExporter,\r\n        sorter: this.rosterSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n\r\n  createViewContextProvider() {\r\n    return of((item: ClanMemberProfile) => ({\r\n      item,\r\n      datePipe: this.bungieDatePage,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-clans-roster {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.clan-roster {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .clan-roster-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n  .characters-cell {\r\n    display: flex;\r\n    height: 51px;\r\n  }\r\n  .character-cell {\r\n    display: flex;\r\n    flex: 1 1 33.33%;\r\n    align-items: center;\r\n    > * {\r\n      //   display: flex;\r\n      //   align-items: center;\r\n      height: 100%;\r\n      width: 100%;\r\n      //   text-align: center;\r\n      //   justify-content: center;\r\n    }\r\n    div {\r\n      width: 100%;\r\n      height: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      text-align: center;\r\n      justify-content: center;\r\n      min-width: 60px;\r\n    }\r\n    .titan-cell {\r\n      background: rgba(100, 47, 47, 0.8) !important;\r\n      color: #fff;\r\n    }\r\n    .hunter-cell {\r\n      background: rgba(30, 66, 99, 0.8) !important;\r\n      color: #fff;\r\n    }\r\n    .warlock-cell {\r\n      background: rgba(132, 108, 24, 0.8) !important;\r\n      color: #fff;\r\n    }\r\n\r\n    .power-cell {\r\n      background: rgba(183, 140, 37, 0.7);\r\n      color: #fff;\r\n    }\r\n  }\r\n  .power-cell {\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    height: 51px;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    text-align: center;\r\n    width: 100%;\r\n    background-color: #b78c25b3;\r\n    color: #fff;\r\n    padding: 0 16px;\r\n  }\r\n  .mat-column-characters,\r\n  .mat-column-powerLevel {\r\n    padding: 0;\r\n  }\r\n  .score-cell {\r\n    display: flex;\r\n    height: auto;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    text-align: center;\r\n    width: 100%;\r\n  }\r\n}\r\n.loading {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./clans-roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDatePage",
                        "type": "BungieDatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDatePage",
                        "type": "BungieDatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clan-roster\">\r\n  <lib-table-view class=\"clan-roster-table\"\r\n    [isLoading]=\"isLoading\"\r\n    [dataSource]=\"(rosterInfo$ | async)?.dataSource\"\r\n    [header]=\"'Clan Roster'\"\r\n    [viewer]=\"rosterViewer\"\r\n    [filterer]=\"rosterFilter\" [sorter]=\"rosterSorter\"\r\n    >\r\n\r\n  </lib-table-view>\r\n</div>\r\n"
        },
        {
            "name": "ClassCellComponent",
            "id": "component-ClassCellComponent-fad269847b9bf6519fdaf0ac52ee7240d85d169fe99faff9fa5d10b21260ff65ed89c9a0dbc9a846c85076b2182f052b2e537ceba4fd55f414b88be9d084eb35",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-class-cell",
            "styleUrls": [],
            "styles": [],
            "template": "<div [ngClass]=\"(profile?.characters.data)[characterHash].classType | classicon\">\n  {{ (profile?.characters.data)[characterHash].light }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characterHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "MemberProfile",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input,  Pipe, PipeTransform } from '@angular/core';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Component({\r\n  selector: 'app-class-cell',\r\n  template: `\r\n    <div [ngClass]=\"(profile?.characters.data)[characterHash].classType | classicon\">\r\n      {{ (profile?.characters.data)[characterHash].light }}\r\n    </div>\r\n  `,\r\n  styles: [\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ClassCellComponent {\r\n  @Input() characterHash: string;\r\n\r\n  @Input() profile: MemberProfile;\r\n\r\n  constructor() {}\r\n\r\n  getIcon(): string {\r\n    const classType = (this.profile?.characters.data)[this.characterHash].classType;\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan';\r\n      case 1:\r\n        return 'hunter';\r\n      case 2:\r\n        return 'warlock';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n@Pipe({\r\n  name: 'classicon',\r\n  pure: true\r\n})\r\nexport class ClassIconPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(classType: number): any {\r\n    switch (classType) {\r\n      case 0:\r\n        return 'titan-cell';\r\n      case 1:\r\n        return 'hunter-cell';\r\n      case 2:\r\n        return 'warlock-cell';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            }
        },
        {
            "name": "CollapsibleListComponent",
            "id": "component-CollapsibleListComponent-bd25fbc004b10d255abb75b546bdc3ddf8e7791f5de52c382cea29dc112e79571c214839328c720b5bb0bef2237d30f6d84a89d6df7098758f9cc264e20ddffe",
            "file": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-collapsible-list",
            "styleUrls": [
                "./collapsible-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./collapsible-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TemplateRef<HTMLElement>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatListModule } from '@angular/material/list';\r\n@Component({\r\n  selector: 'lib-collapsible-list',\r\n  standalone: true,\r\n  imports: [CommonModule, MatExpansionModule, MatListModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './collapsible-list.component.html',\r\n  styleUrls: ['./collapsible-list.component.scss']\r\n})\r\nexport class CollapsibleListComponent {\r\n  @Input() title: string;\r\n  @Input() items: any[];\r\n  @Input() itemTemplate: TemplateRef<HTMLElement>;\r\n  //@Output() viewActivity = new EventEmitter<number>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collapsible-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-accordion>\r\n  <mat-expansion-panel expanded>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n       {{title}}\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <mat-list role=\"list\">\r\n      <ng-container *ngFor=\"let item of items; let idx = index\">\r\n        <mat-list-item role=\"listitem\">\r\n          <ng-container [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\">\r\n          </ng-container>\r\n        </mat-list-item>\r\n      </ng-container>\r\n    </mat-list>\r\n\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n"
        },
        {
            "name": "ConfigComponent",
            "id": "component-ConfigComponent-d5bc44360861a569495511800f7ece12efeaab86b2d366f1836b9b1e85c94bbcba633f43b52e2623ef0bae958788a6d972b0971ca38c87c48545b3b820470b62",
            "file": "projects/clan-dashboard/src/app/features/config/config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config",
            "styleUrls": [
                "./config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clanConfigs$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "nuke",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { selectAllClans } from '@core/store/clans';\r\n\r\n@Component({\r\n  selector: 'app-config',\r\n  templateUrl: './config.component.html',\r\n  styleUrls: ['./config.component.scss']\r\n})\r\nexport class ConfigComponent {\r\n  constructor(private store: Store) {}\r\n\r\n  clanConfigs$ = this.store.select(selectAllClans);\r\n\r\n  async nuke() {\r\n    window.localStorage.clear();\r\n\r\n    const dbs = await window.indexedDB.databases();\r\n    dbs.forEach((db) => {\r\n      if (db.name === 'manifest') {\r\n        window.indexedDB.deleteDatabase(db.name);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".config-wrapper {\r\n  margin: 1rem;\r\n}\r\n.big-button {\r\n  margin-bottom: 2rem;\r\n\r\n  button {\r\n    padding: 2rem;\r\n    font-size: 2rem;\r\n  }\r\n}\r\n.found-clans {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  width: 100%;\r\n  max-width: 1920px;\r\n  margin: 0 auto;\r\n  .clan {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"config-wrapper\">\r\n  <div class=\"big-button\">\r\n    <h2>Reset Data - <small>Refresh Your Browser After Clicking </small></h2>\r\n    <button (click)=\"nuke()\" mat-raised-button color=\"warn\">Delete Manifest</button>\r\n  </div>\r\n\r\n  <h2>Stored Clans</h2>\r\n  <ng-container *ngIf=\"clanConfigs$ | async as clans\">\r\n    <div class=\"found-clans\">\r\n      <ng-container *ngFor=\"let clan of clans\">\r\n        <app-clan-detail [clanConfig]=\"clan\" [showReset]=\"true\" class=\"clan\"></app-clan-detail>\r\n      </ng-container>\r\n\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ConfigComponent",
            "id": "component-ConfigComponent-0c2ae2ba5421421291c17cad705a84d9133491174d675f1cf6f4b887cc1ae876a31ce17932c9e5e02c382f28e952cf334b1eecf18417a8ea7a18991fb81fd0a7-1",
            "file": "projects/clan-dashboard/src/app/views/config/config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config-view",
            "styleUrls": [
                "./config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-config-view',\r\n  templateUrl: './config.component.html',\r\n  styleUrls: ['./config.component.scss']\r\n})\r\nexport class ConfigComponent {\r\n\r\n  constructor() { }\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfigComponent-1",
            "templateData": "<app-config></app-config>\r\n"
        },
        {
            "name": "CuratedActivitiesDashboardComponent",
            "id": "component-CuratedActivitiesDashboardComponent-efaf28d4f3f81a8b9091be05ecff2f42dba9bd336d2ce591cf6a9fc3a1b9fdda18449024c83b7e0e7c2598b78982b4da6fa7df1eb0ed8c57eeeeaed77cda6c16",
            "file": "projects/clan-dashboard/src/app/features/activities/curated-activities-dashboard/curated-activities-dashboard.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-curated-activities-dashboard",
            "styleUrls": [
                "./curated-activities-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./curated-activities-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "curatedActivityGroups",
                    "defaultValue": "this.activitiesService.getCuratedActivities()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "viewActivity",
                    "args": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ActivitiesService } from '../data-access/activities.service';\r\n\r\n@Component({\r\n  selector: 'app-curated-activities-dashboard',\r\n  templateUrl: './curated-activities-dashboard.component.html',\r\n  styleUrls: ['./curated-activities-dashboard.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CuratedActivitiesDashboardComponent {\r\n  constructor(private activitiesService: ActivitiesService, private router: Router, private route: ActivatedRoute) {}\r\n  curatedActivityGroups = this.activitiesService.getCuratedActivities();\r\n\r\n  viewActivity(hash: number) {\r\n    this.router.navigate([hash], { relativeTo: this.route });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: auto;\r\n}\r\n.activity-dashboard {\r\n  margin: 1rem;\r\n}\r\n.activities-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n\r\n  .activity {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./curated-activities-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activitiesService",
                        "type": "ActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "activitiesService",
                        "type": "ActivitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "  <div class=\"activity-dashboard\">\r\n    <div *ngFor=\"let activityGroups of curatedActivityGroups\">\r\n      <h2>{{activityGroups.title}}</h2>\r\n      <div class=\"activities-container\">\r\n        <ng-container *ngFor=\"let activity of activityGroups.activities\">\r\n          <app-activity-card-details [activityDefinition]=\"activity\" class=\"activity\"\r\n            (viewActivity)=\"viewActivity($event)\">\r\n          </app-activity-card-details>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"
        },
        {
            "name": "DisplayOptionsComponent",
            "id": "component-DisplayOptionsComponent-15e2f369158417ddac7494536760fdfec4c69105843f7b3e289b0c9fd84be690adf3ea8400285a8277820c8cf4a002b94a5ac1c0b49a3a3700acbbe87199e3a6",
            "file": "projects/components/src/lib/shared/display-options/display-options.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-display-options",
            "styleUrls": [
                "./display-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./display-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "grouper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Grouper",
                    "decorators": []
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Sorter",
                    "decorators": []
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Viewer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sorts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleViewKey",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { take } from 'rxjs';\r\nimport { Grouper, GroupLabel } from '../../data/grouper';\r\nimport { Sorter, SortLabel } from '../../data/sorter';\r\nimport { Viewer, ViewLabel } from '../../data/viewer';\r\n\r\n@Component({\r\n  selector: 'lib-display-options',\r\n  templateUrl: './display-options.component.html',\r\n  imports: [CommonModule, FormsModule, MatButtonModule, MatMenuModule, MatIconModule],\r\n  standalone: true,\r\n  styleUrls: ['./display-options.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DisplayOptionsComponent implements OnChanges {\r\n  groups: GroupLabel[];\r\n\r\n  sorts: SortLabel[];\r\n\r\n  views: ViewLabel[];\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['grouper']) {\r\n      this.groups = this.grouper ? this.grouper.getGroups() : [];\r\n    }\r\n    if (simpleChanges['sorter']) {\r\n      this.sorts = this.sorter ? this.sorter.getSorts() : [];\r\n    }\r\n    if (simpleChanges['viewer']) {\r\n      this.views = this.viewer ? this.viewer.getViews() : [];\r\n    }\r\n  }\r\n\r\n  setGroup(group: string) {\r\n    this.grouper.setState({ group });\r\n  }\r\n\r\n  setSort(sort: string) {\r\n    this.sorter.state.pipe(take(1)).subscribe((state) => {\r\n      let reverse = state.reverse;\r\n      if (state.sort === sort) {\r\n        reverse = !reverse;\r\n      } else {\r\n        reverse = false;\r\n      }\r\n\r\n      this.sorter.setState({ ...state, sort, reverse });\r\n    });\r\n  }\r\n\r\n  toggleViewKey(view: string) {\r\n    this.viewer.toggle(view);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.mat-button {\r\n  min-width: 0;\r\n  display: block;\r\n  padding: 0 8px;\r\n}\r\n\r\n.button-content {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.options-menu-trigger {\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  font-size: 12px;\r\n}\r\n\r\nbutton.mat-mdc-menu-item {\r\n  mat-icon {\r\n    visibility: hidden;\r\n  }\r\n\r\n  &.selected {\r\n    font-weight: bold;\r\n    mat-icon {\r\n      visibility: visible;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-menu-item {\r\n  //@include slim-menu-item();\r\n}\r\n",
                    "styleUrl": "./display-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<button mat-button [mat-menu-trigger-for]=\"rootMenu\">\r\n  <div class=\"options-menu-trigger\"> Display Options </div>\r\n</button>\r\n\r\n<mat-menu #rootMenu=\"matMenu\">\r\n  <button *ngIf=\"grouper\" mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">\r\n    Group By\r\n  </button>\r\n  <button *ngIf=\"sorter\" mat-menu-item [matMenuTriggerFor]=\"sortingMenu\">\r\n    Sort By\r\n  </button>\r\n  <button *ngIf=\"viewer\" mat-menu-item [matMenuTriggerFor]=\"viewingMenu\">\r\n    View\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Group Menu -->\r\n<mat-menu #groupingMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let group of groups\"\r\n          [class.selected]=\"(grouper.state | async).group === group.id\"\r\n          (click)=\"setGroup(group.id); $event.stopPropagation();\">\r\n    <div class=\"button-content\">\r\n      <mat-icon>check</mat-icon>\r\n      {{group.label}}\r\n    </div>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- Sort Menu -->\r\n<mat-menu #sortingMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let sort of sorts\"\r\n          [class.selected]=\"(sorter.state | async).sort === sort.id\"\r\n          (click)=\"setSort(sort.id); $event.stopPropagation();\">\r\n    <div class=\"button-content\">\r\n      <mat-icon>\r\n        {{(sorter.state | async).reverse ? 'arrow_downward' : 'arrow_upward'}}\r\n      </mat-icon>\r\n      {{sort.label}}\r\n    </div>\r\n  </button>\r\n</mat-menu>\r\n\r\n<!-- View Menu -->\r\n<mat-menu #viewingMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let view of views\"\r\n          [class.selected]=\"(viewer.state | async).views.indexOf(view.id) !== -1\"\r\n          (click)=\"viewer.toggle(view.id); $event.stopPropagation();\">\r\n    <div class=\"button-content\">\r\n      <mat-icon>check</mat-icon>\r\n      {{view.label}}\r\n    </div>\r\n  </button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "FooterInfoComponent",
            "id": "component-FooterInfoComponent-9495189cf713bb04fc9b0c04d0e38b42ad8db9b2e742c28d9d8c7bda5f4b78337325e06d2d71c745654889a9771b608389de08306598139235346719b54756e2",
            "file": "projects/clan-dashboard/src/app/core/layout/footer-info/footer-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer-info",
            "styleUrls": [
                "./footer-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer-info',\r\n  templateUrl: './footer-info.component.html',\r\n  styleUrls: ['./footer-info.component.scss']\r\n})\r\nexport class FooterInfoComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer-info.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>footer-info works!</p>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bda17aa3451a9f731685153f2587877b8267c32007f05e7abad3581336e6bc02346a1b660e8c69c4d90b4526b6e047b3ac1f4246252c9dc83985c9148aab5e97",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            primary\r\n            size=\"small\"\r\n            primary=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-b83fc17e6688681d205facbd77e82b1e18db76ecfd511b35e01fe04e2e34fee75b677ecd09c1de49e875fa412a258df79f5a952fb50a5f1b9bad0541da4f6cea",
            "file": "projects/components/src/lib/icons/member-type.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-icons",
            "styleUrls": [],
            "styles": [],
            "template": "<lib-member-type [type]=\"1\"></lib-member-type>\n<lib-member-type [type]=\"2\"></lib-member-type>\n<lib-member-type [type]=\"3\"></lib-member-type>\n<lib-member-type [type]=\"4\"></lib-member-type>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata } from '@storybook/angular';\r\n/// import { ActivityGridComponent } from './activity-grid.component';\r\n// import { ActivityGridModule } from './activity-grid.module';\r\n// import {MOCK_GRID_ITEMS} from './_MOCK_GRID_ITEMS';\r\n// import { ClanWeeklyProgressComponent } from './clan-weekly-progress.component';\r\n// import { ClanWeeklyProgressModule } from './clan-weekly-progress.module';\r\n//import { MOCK_WEEKLY_PROGRESS } from './_MOCK_WEEKLY_PROGRESS';\r\nimport { StorybookModule } from '../storybook/storybook.module';\r\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from './register-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconsModule } from './icons.module';\r\n\r\n@Component({\r\n  selector: 'lib-icons',\r\n  template: `\r\n    <lib-member-type [type]=\"1\"></lib-member-type>\r\n    <lib-member-type [type]=\"2\"></lib-member-type>\r\n    <lib-member-type [type]=\"3\"></lib-member-type>\r\n    <lib-member-type [type]=\"4\"></lib-member-type>\r\n  `\r\n})\r\nclass IconComponent {\r\n  constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  exports: [IconComponent],\r\n  imports: [CommonModule, MatIconModule, HttpClientModule, IconsModule]\r\n})\r\nclass IconTestModule {}\r\n\r\nexport default {\r\n  title: 'Icons / Member Type',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [IconTestModule, StorybookModule]\r\n    })\r\n  ]\r\n};\r\n\r\nexport const base = () => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n});\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LookupComponent",
            "id": "component-LookupComponent-248b4f23f7ff8b6fc033bf02e41298c1b663ca169f3a4f9cc34c3604e35362505be8975f3e045830a7cb8f6856e983168a488a50a6690d13f5f981ba6829b4f0",
            "file": "projects/clan-dashboard/src/app/features/sandbox/lookup/lookup.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lookup",
            "styleUrls": [
                "./lookup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lookup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayHash",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "displayObject",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "imageUrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "imgUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "milestoneHash",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "output",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "recordHash",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "loadImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lookupMilestone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lookupPresentation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lookupRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDisplay",
                    "args": [
                        {
                            "name": "thing",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "thing",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userLookup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n// import { MilestoneDefinitionService } from '@core/definition-services/milestone-definition.service';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { take } from 'rxjs';\r\nimport { DefinitionService } from '@core/definition-services/definition.service';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-lookup',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, MatTabsModule, RouterModule],\r\n  templateUrl: './lookup.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./lookup.component.scss']\r\n})\r\nexport class LookupComponent {\r\n  constructor(\r\n    // private presentationNodeService: PresentationNodeDefinitionService,\r\n    //  private milestoneDefinitionService: MilestoneDefinitionService,\r\n    private definitionService: DefinitionService,\r\n    private d2ServiceBase: Destiny2Service\r\n  ) {}\r\n\r\n  displayObject: any = {};\r\n  displayHash = new FormControl('');\r\n  milestoneHash = new FormControl('');\r\n  recordHash = new FormControl('');\r\n  output = new FormControl('');\r\n  imageUrl = new FormControl('');\r\n  imgUrls = [];\r\n\r\n  lookupPresentation() {\r\n    this.updateDisplay(this.definitionService.presentationDefinition[this.displayHash.value as unknown as number]);\r\n  }\r\n  lookupMilestone() {\r\n    this.updateDisplay(this.definitionService.milestoneDefinition[this.milestoneHash.value as unknown as number]);\r\n  }\r\n  lookupRecord() {\r\n    this.updateDisplay(this.definitionService.recordDefinition[this.recordHash.value as unknown as number]);\r\n  }\r\n\r\n  updateDisplay(thing: any) {\r\n    this.output.patchValue(JSON.stringify(thing, undefined, 4));\r\n  }\r\n  loadImage() {\r\n    this.imgUrls.push(`//bungie.net/${this.imageUrl.value}`);\r\n  }\r\n  userLookup() {\r\n    this.d2ServiceBase\r\n      //.destiny2GetProfile('4611686018467238913' as unknown as number, 3, [100, 104, 200, 202, 800, 900, 1100, 1400])\r\n      .destiny2GetProfile('4611686018467238913' as unknown as number, 3, [100, 104, 200, 202])\r\n      //.destiny2GetProfile('4611686018467238913' as unknown as number, 3, [ 1400])\r\n      .pipe(take(1))\r\n      .subscribe((result) => {\r\n        this.updateDisplay(result);\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-lookup {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n.tab-stuff {\r\n  display: flex;\r\n  width: 100%;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  .mat-mdc-tab-body-wrapper {\r\n    flex: 1;\r\n  }\r\n}\r\n.lookup-wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  .section {\r\n    padding: 1rem;\r\n    input {\r\n      display: block;\r\n    }\r\n    select {\r\n      display: block;\r\n    }\r\n  }\r\n  .info {\r\n    width: 75%;\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: auto;\r\n    .info-content {\r\n      margin: 1rem;\r\n      flex: 1;\r\n    }\r\n    textarea {\r\n      display: block;\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./lookup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "d2ServiceBase",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "definitionService",
                        "type": "DefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "d2ServiceBase",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "  <mat-tab-group class=\"tab-stuff\">\r\n    <mat-tab label=\"Definition Lookups\">\r\n      <div class=\"lookup-wrapper\">\r\n        <div>\r\n          <div class=\"section\">\r\n            <h3>Presentation</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"displayHash\">\r\n            <br>\r\n            <select [formControl]=\"displayHash\">\r\n              <option value=\"2592822840\">\r\n                Ghost Writer\r\n              </option>\r\n            </select>\r\n            <button (click)=\"lookupPresentation()\">Lookup Presentation</button>\r\n            <hr>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h3>Milestones Hashes</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"milestoneHash\">\r\n            <br>\r\n            <select [formControl]=\"milestoneHash\">\r\n\r\n            </select>\r\n            <button (click)=\"lookupMilestone()\">Lookup Presentation</button>\r\n            <hr>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h3>Record Hashes</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"recordHash\">\r\n            <br>\r\n            <select [formControl]=\"recordHash\">\r\n              <option value=\"1089543274\">\r\n                Ghost Writer\r\n              </option>\r\n            </select>\r\n            <button (click)=\"lookupRecord()\">Lookup Presentation</button>\r\n            <hr>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h3>User Lookup</h3>\r\n            <br>\r\n            <button (click)=\"userLookup()\">User Lookup</button>\r\n            <hr>\r\n            <a [routerLink]=\"'/player/3-4611686018467238913'\">Player Profile</a>\r\n          </div>\r\n        </div>\r\n        <div class=\"info\">\r\n          <div class=\"info-content\">\r\n            <textarea [formControl]=\"output\"></textarea>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </mat-tab>\r\n    <mat-tab label=\"Image Lookup\">\r\n      <div class=\"lookup-wrapper\">\r\n        <div>\r\n          <div class=\"section\">\r\n            <h3>Presentation</h3>\r\n            <input id=\"name\" type=\"text\" [formControl]=\"imageUrl\">\r\n            <br>\r\n            <button (click)=\"loadImage()\">Load Image</button>\r\n          </div>\r\n        </div>\r\n        <div class=\"info\">\r\n          <div class=\"info-content\">\r\n            <ng-container *ngFor=\"let imgUrl of imgUrls\">\r\n              <img src=\"{{imgUrl}}\" alt=\"none\" />\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n"
        },
        {
            "name": "MemberTypeComponent",
            "id": "component-MemberTypeComponent-588fd299f444b31f9fd593297a5ec71485323170276c26684f727f840d3bbdf5096377a5de06ef7916ff23aaf7aaa537af5384bf15902b669dd89ec420e6390b",
            "file": "projects/components/src/lib/icons/member-type.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-member-type",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-icon [svgIcon]=\"type | memberType\" class=\"ico-{{type | memberType}}\"></mat-icon>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-member-type',\r\n  template: `<mat-icon [svgIcon]=\"type | memberType\" class=\"ico-{{type | memberType}}\"></mat-icon>`,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MemberTypeComponent  {\r\n  @Input()\r\n  type;\r\n  constructor(){\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            }
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-1999d3c6f11797f7b7904e6964ab26310e6f4d43020ce569e56b306c9385c709354055450de57f45c71608030cf16149fe230de642cb5839155737ea5ec29ea5",
            "file": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notifications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Notification[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "manualDismiss",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sync",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatCardModule } from '@angular/material/card';\r\ninterface Notification {\r\n  title: string;\r\n  data: {\r\n    total?: number;\r\n    progress: number;\r\n    complete?: number;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule, MatCardModule, OverlayModule, MatButtonModule, MatProgressBarModule],\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss']\r\n})\r\nexport class NotificationsComponent implements OnChanges {\r\n  isOpen = false;\r\n  manualDismiss = false;\r\n\r\n  @Input() notifications: Notification[];\r\n  constructor() {}\r\n\r\n  ngOnChanges(simpleChanges: SimpleChanges) {\r\n    if (simpleChanges['notifications']) {\r\n      if (this.notifications && this.notifications.length > 0 && !this.manualDismiss) {\r\n        this.isOpen = true;\r\n      }\r\n    }\r\n  }\r\n  sync() {\r\n    //this.isOpen = !this.isOpen;\r\n    if (this.isOpen == false && this.notifications.length > 0) {\r\n      this.isOpen = true;\r\n    } else {\r\n      this.isOpen = false;\r\n      this.manualDismiss = true;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\r\n  //width: 360px;\r\n}\r\n.notification {\r\n  width: 100%;\r\n  //display: flex;\r\n  // align-items: center;\r\n  .progress-bar {\r\n    flex: 1;\r\n    padding: 0.5rem;\r\n  }\r\n  .info {\r\n    padding: 0.5rem;\r\n  }\r\n}\r\n\r\n.syncing {\r\n  animation: rotation 2s infinite linear;\r\n}\r\n@keyframes rotation {\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(-359deg);\r\n  }\r\n}\r\n",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<button mat-icon-button (click)=\"sync()\" cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\">\r\n  <mat-icon [ngClass]=\"{'syncing': notifications.length > 0 }\">\r\n    sync\r\n  </mat-icon>\r\n</button>\r\n<ng-template cdkConnectedOverlay\r\n  [cdkConnectedOverlayBackdropClass]=\"'cdk-overlay-transparent-backdrop'\" [cdkConnectedOverlayHasBackdrop]=\"false\"\r\n  [cdkConnectedOverlayOrigin]=\"trigger\" [cdkConnectedOverlayOpen]=\"isOpen\">\r\n\r\n  <mat-card *ngIf=\"notifications.length > 0\">\r\n    <mat-card-content>\r\n      <div *ngFor=\"let notification of  notifications\" mat-menu-item disabled class=\"notification\">\r\n\r\n\r\n        <div class=\"info\">\r\n          {{notification.title}} - {{notification.data.complete}} / {{notification.data.total}}\r\n        </div>\r\n        <div class=\"progress-bar\">\r\n\r\n          <mat-progress-bar mode=\"determinate\" [value]=\"notification.data.progress*100\">\r\n          </mat-progress-bar>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n</ng-template>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-1fc7c24c98b4f0b0f413d91f5a6126f11ad55647457f5a7f372b7f83fe8ecd6dbe67b5ca4b826ed20b9bfbc04d5606b15f82a203b1311f98b18bd28ec9f4fc7c",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nsection h2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nsection p {\r\n  margin: 1em 0;\r\n}\r\n\r\nsection a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nsection ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nsection li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nsection .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\nsection .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nsection .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\nsection .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PlayerDetailComponent",
            "id": "component-PlayerDetailComponent-de8cda2c4b25045f578610503b266223aa23750db99006a0cc361f4a2396c1523c7915a15a06539a5d51db686a946f03259fecd65600a7aa4ed2e56bcef9495e",
            "file": "projects/clan-dashboard/src/app/features/player/player-detail/player-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-player-detail",
            "styleUrls": [
                "./player-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./player-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "memberInfo$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    map((params) => {\r\n      const playerInfo = params.get('player-id');\r\n      return { memberType: playerInfo.split('-')[0], memberId: playerInfo.split('-')[1] };\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MemberInfo>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "profile$",
                    "defaultValue": "this.memberInfo$.pipe(\r\n    switchMap((memberInfo) => this.playerService.getProfile(memberInfo.memberType, memberInfo.memberId))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map, Observable, switchMap } from 'rxjs';\r\nimport { PlayerService } from '../data-access/player.service';\r\n\r\ninterface MemberInfo {\r\n  memberType: string;\r\n  memberId: string;\r\n}\r\n@Component({\r\n  selector: 'app-player-detail',\r\n  templateUrl: './player-detail.component.html',\r\n  styleUrls: ['./player-detail.component.scss']\r\n})\r\nexport class PlayerDetailComponent {\r\n  constructor(private route: ActivatedRoute, private playerService: PlayerService) {}\r\n  memberInfo$: Observable<MemberInfo> = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      const playerInfo = params.get('player-id');\r\n      return { memberType: playerInfo.split('-')[0], memberId: playerInfo.split('-')[1] };\r\n    })\r\n  );\r\n\r\n  profile$ = this.memberInfo$.pipe(\r\n    switchMap((memberInfo) => this.playerService.getProfile(memberInfo.memberType, memberInfo.memberId))\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./player-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerService",
                        "type": "PlayerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerService",
                        "type": "PlayerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-toolbar>\r\n  <button\r\n    mat-button\r\n    class=\"nav-button\"\r\n    routerLink=\"./\"\r\n    routerLinkActive=\"active-link\"\r\n    [routerLinkActiveOptions]=\"{ exact: true }\"\r\n  >\r\n    Player Overview\r\n  </button>\r\n  <button mat-button class=\"nav-button\" routerLink=\"./activity\" routerLinkActive=\"active-link\">Activity</button>\r\n\r\n  <ng-container *ngIf=\"profile$ | async as profile\">\r\n    <a mat-button class=\"nav-button\" href=\"{{ profile | bungieProfileUrl }}\" target=\"_blank\"\r\n      >Bungie Profile &nbsp; <mat-icon>open_in_new </mat-icon></a\r\n    >\r\n    <a mat-button class=\"nav-button\" href=\"{{ profile | raidReportProfileUrl }}\" target=\"_blank\"\r\n      >Raid Report &nbsp; <mat-icon> open_in_new </mat-icon></a\r\n    >\r\n\r\n    <a mat-button class=\"nav-button\" href=\"{{ profile | dungeonReportProfileUrl }}\" target=\"_blank\"\r\n      >Dungeon Report &nbsp; <mat-icon>open_in_new </mat-icon></a\r\n    >\r\n\r\n    <a mat-button class=\"nav-button\" href=\"{{ profile | destinyTrackerUrl }}\" target=\"_blank\"\r\n      >Destiny Tracker &nbsp; <mat-icon> open_in_new </mat-icon></a\r\n    >\r\n    <a mat-button class=\"nav-button\" href=\"{{ profile | d2ChecklistUrl }}\" target=\"_blank\">\r\n      D2Checklist &nbsp; <mat-icon>open_in_new </mat-icon></a\r\n    >\r\n    <a mat-button class=\"nav-button\" href=\"{{ profile | triumphReport }}\" target=\"_blank\">\r\n      Triumph.Report &nbsp; <mat-icon>open_in_new </mat-icon></a\r\n    >\r\n    <!-- https://raid.report/pc/4611686018467238913 -->\r\n  </ng-container>\r\n</mat-toolbar>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "PlayerOverviewComponent",
            "id": "component-PlayerOverviewComponent-d2330bbcf4c4d716b6039f5ca99c9db2dabbadf3d3192d01b4cec959214b273718caebe6356be86ea0d0a472cf666ca2fb57aaa32575782a783eea4c15e35eca",
            "file": "projects/clan-dashboard/src/app/features/player/player-overview/player-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-player-overview",
            "styleUrls": [
                "./player-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./player-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "memberInfo$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    map((params) => {\r\n      const playerInfo = params.get('player-id');\r\n      return { memberType: playerInfo.split('-')[0], memberId: playerInfo.split('-')[1] };\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MemberInfo>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "profile$",
                    "defaultValue": "this.memberInfo$.pipe(\r\n    switchMap((memberInfo) => this.playerService.getProfile(memberInfo.memberType, memberInfo.memberId))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map, Observable, switchMap } from 'rxjs';\r\nimport { PlayerService } from '../data-access/player.service';\r\ninterface MemberInfo {\r\n  memberType: string;\r\n  memberId: string;\r\n}\r\n@Component({\r\n  selector: 'app-player-overview',\r\n  templateUrl: './player-overview.component.html',\r\n  styleUrls: ['./player-overview.component.scss']\r\n})\r\nexport class PlayerOverviewComponent {\r\n  constructor(private route: ActivatedRoute, private playerService: PlayerService) {}\r\n  memberInfo$: Observable<MemberInfo> = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      const playerInfo = params.get('player-id');\r\n      return { memberType: playerInfo.split('-')[0], memberId: playerInfo.split('-')[1] };\r\n    })\r\n  );\r\n\r\n  profile$ = this.memberInfo$.pipe(\r\n    switchMap((memberInfo) => this.playerService.getProfile(memberInfo.memberType, memberInfo.memberId))\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./player-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerService",
                        "type": "PlayerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerService",
                        "type": "PlayerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>player-overview works!</p>\r\n<pre\r\n  >{{ profile$ | async | json }}\r\n</pre>\r\n"
        },
        {
            "name": "ProfileLinkComponent",
            "id": "component-ProfileLinkComponent-26446307ea30799b3ed0e27e478aa6a45b1edbe6794e0559d816d59d2ad0da870b2e19257db27d3e760c218b01699c1e479c7cedf6934637aaa67e24ff9f00a7",
            "file": "projects/components/src/lib/shared/profile-link/profile-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-profile-link",
            "styleUrls": [
                "./profile-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "MemberProfile",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MemberProfile } from \"@destiny/data/models\";\nimport { BungieDisplayNameModule } from '../../pipes/bungie-display-name';\n@Component({\n  selector: 'lib-profile-link',\n  standalone: true,\n  imports: [CommonModule, BungieDisplayNameModule],\n  templateUrl: './profile-link.component.html',\n  styleUrls: ['./profile-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProfileLinkComponent {\n  @Input()\n  profile: MemberProfile;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile-link.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "{{ profile | bungieDisplayName }}\n"
        },
        {
            "name": "RecentActivityComponent",
            "id": "component-RecentActivityComponent-98811d33d98ed2bb4ec467c697d35ca1859d31fd719ed80b99baef84331e8da2557325ee7544beaf208e7cf96f9d2c832cd69eacb641d3b762603716d9aaaa31",
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recent-activity-viewer",
            "styleUrls": [
                "./recent-activity.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recent-activity.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityExporter",
                    "defaultValue": "new Exporter({\r\n    metadata: CLAN_ROSTER_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "activityFilterer",
                    "defaultValue": "new Filterer({ metadata: RECENT_ACTIVITY_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "activitySorter",
                    "defaultValue": "new Sorter({ metadata: RECENT_ACTIVITY_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "activityViewer",
                    "defaultValue": "new Viewer(\r\n    {\r\n      metadata: RECENT_ACTIVITY_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Activity_Table_Viewer'\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "clanProfileActivity$",
                    "defaultValue": "this.recentActivityService.activeClanActivity$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "rosterRecentActivityInfo$",
                    "defaultValue": "combineLatest([this.clanProfileActivity$]).pipe(\r\n    map(([clanProfiles]) => {\r\n      return {\r\n        dataSource: new DataSource<ProfileRecentActivity>({ data: clanProfiles }),\r\n        viewer: this.activityViewer,\r\n        filterer: this.activityFilterer,\r\n        exporter: this.activityExporter,\r\n        sorter: this.activitySorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RosterActivityResources>",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { BungieDateTimePipe, PlaytimePipe } from '@destiny/components/pipes';\r\nimport { combineLatest, map, Observable, of, tap } from 'rxjs';\r\nimport { RecentActivityService } from '../data-access/recent-activity.service';\r\nimport { ProfileRecentActivity } from '../models/profile-recent-activity';\r\nimport {\r\n  CLAN_ROSTER_EXPORTER_METADATA,\r\n  RECENT_ACTIVITY_FILTERER_METADATA,\r\n  RECENT_ACTIVITY_SORTER_METADATA,\r\n  RECENT_ACTIVITY_VIEWER_METADATA\r\n} from './recent-activity-metadata';\r\n\r\ninterface RosterActivityResources {\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n  exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-recent-activity-viewer',\r\n  templateUrl: './recent-activity.component.html',\r\n  styleUrls: ['./recent-activity.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RecentActivityComponent {\r\n  constructor(\r\n    private recentActivityService: RecentActivityService,\r\n    private playtimePipe: PlaytimePipe,\r\n    private bungieDateTimePipe: BungieDateTimePipe\r\n  ) {}\r\n\r\n  clanProfileActivity$ = this.recentActivityService.activeClanActivity$;\r\n  activityViewer = new Viewer(\r\n    {\r\n      metadata: RECENT_ACTIVITY_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Roster_Activity_Table_Viewer'\r\n  );\r\n  activityFilterer = new Filterer({ metadata: RECENT_ACTIVITY_FILTERER_METADATA });\r\n  activitySorter = new Sorter({ metadata: RECENT_ACTIVITY_SORTER_METADATA });\r\n  activityExporter = new Exporter({\r\n    metadata: CLAN_ROSTER_EXPORTER_METADATA,\r\n    contextProvider: this.createViewContextProvider()\r\n  });\r\n  isLoading = true;\r\n\r\n  rosterRecentActivityInfo$: Observable<RosterActivityResources> = combineLatest([this.clanProfileActivity$]).pipe(\r\n    map(([clanProfiles]) => {\r\n      return {\r\n        dataSource: new DataSource<ProfileRecentActivity>({ data: clanProfiles }),\r\n        viewer: this.activityViewer,\r\n        filterer: this.activityFilterer,\r\n        exporter: this.activityExporter,\r\n        sorter: this.activitySorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n  );\r\n  createViewContextProvider() {\r\n    return of((item: ProfileRecentActivity) => ({\r\n      item,\r\n      playTimePipe: this.playtimePipe,\r\n      dateTimePipe: this.bungieDateTimePipe\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.clan-roster {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .clan-roster-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n}\r\n.loading {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./recent-activity.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recentActivityService",
                        "type": "RecentActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playtimePipe",
                        "type": "PlaytimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "recentActivityService",
                        "type": "RecentActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playtimePipe",
                        "type": "PlaytimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clan-roster\">\r\n  <lib-table-view class=\"clan-roster-table\" [isLoading]=\"isLoading\"\r\n    [dataSource]=\"(rosterRecentActivityInfo$ | async)?.dataSource\" [header]=\"'Recent Activity'\"\r\n    [viewer]=\"activityViewer\" [filterer]=\"activityFilterer\"\r\n    [sorter]=\"activitySorter\" [exporter]=\"activityExporter\">\r\n  </lib-table-view>\r\n\r\n  <ng-template #loading>\r\n    <div class=\"loading\">\r\n      Loading Roster Activity\r\n    </div>\r\n  </ng-template>\r\n\r\n</div>\r\n"
        },
        {
            "name": "RenderedViewComponent",
            "id": "component-RenderedViewComponent-67d8b45b53cf536106ecd6f6d3c159046098df35cc3d048cc3a95669fe7085785fee9b3a9f94dc6f83ee055e489aa1c087a22fb99a9a0b2451c051c44a99af61",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-rendered-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rendered-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childrenViews",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "RenderedView[]",
                    "decorators": []
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "libDynamicComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RenderedViewDynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "RenderedViewDynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RenderedView[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RenderedView } from '../../data/viewer';\r\nimport { RenderedViewDynamicCompDirective } from './rendered-view-component.directive';\r\n\r\n@Component({\r\n  selector: 'lib-rendered-view',\r\n  templateUrl: './rendered-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RenderedViewComponent implements OnInit {\r\n  @ViewChild(RenderedViewDynamicCompDirective, { static: true }) libDynamicComp!: RenderedViewDynamicCompDirective;\r\n  views: Observable<RenderedView[]>;\r\n\r\n  @Input() text: string;\r\n\r\n  @Input() childrenViews: RenderedView[] = [];\r\n  @Input() component: any;\r\n  @Input() data: any;\r\n\r\n  ngOnInit() {\r\n    // TODO: Keep eye on this for performance.\r\n    if (this.component) {\r\n      const viewContainerRef = this.libDynamicComp.viewContainerRef;\r\n      viewContainerRef.clear();\r\n\r\n      const componentRef = viewContainerRef.createComponent(this.component);\r\n      for (const property in this.data) {\r\n        componentRef.instance[property] = this.data[property];\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [outerHTML]=\"text\"></span>\r\n<ng-template libDynamicComp></ng-template>\r\n<ng-container *ngFor=\"let view of childrenViews\">\r\n  <lib-rendered-view *ngIf=\"view\" [class]=\"view.classList || ''\" [ngStyle]=\"view.styles || {}\" [text]=\"view['text']\"\r\n    [component]=\"view['component']\" [data]=\"view['data']\" [childrenViews]=\"view['children']\">\r\n  </lib-rendered-view>\r\n</ng-container>\r\n"
        },
        {
            "name": "SealDetailsComponent",
            "id": "component-SealDetailsComponent-9df3a4d08429d172780066ea7e625457b79f8ff1fb415e8afbb3f939e3575f87b91738db119e8427b5f01ab7bd0f0321ef0a2f2fece782192d0499dee15ce123",
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seal-details",
            "styleUrls": [
                "./seal-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seal-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "sealDetails$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    switchMap((params) => {\r\n      return this.sealsService.getSealDetails$(params.get('hash'));\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "sealDetailsFilterer",
                    "defaultValue": "new Filterer({ metadata: SEAL_DETAILS_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "sealDetailsInfo$",
                    "defaultValue": "combineLatest([this.sealDetails$]).pipe(\r\n    map(([sealDetails]) => {\r\n      return {\r\n        loading: of(false),\r\n        dataSource: new DataSource<SealClanMember>({ data: sealDetails }),\r\n        viewer: this.sealDetailsViewer,\r\n        filterer: this.sealDetailsFilterer,\r\n     //   exporter: this.sealDetailsExporter,\r\n        sorter: this.sealDetailsSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n    //filter((ds) => !!ds)\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SealDetailsResources>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "sealDetailsSorter",
                    "defaultValue": "new Sorter({ metadata: SEAL_DETAILS_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "sealDetailsViewer",
                    "defaultValue": "new Viewer(\r\n    {\r\n      metadata: SEAL_DETAILS_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Seals_Details_ViewerV2'\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "sealHash$",
                    "defaultValue": "this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return this.sealsService.sealNodes.find((x) => x.hash === +params.get('hash'));\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataSource, Exporter, Filterer, Sorter, Viewer } from '@destiny/components';\r\nimport { combineLatest, filter, map, Observable, of, switchMap, tap } from 'rxjs';\r\nimport { SealsService } from '../data-access/seals.service';\r\nimport { SealClanMember } from '../models/seal-clan-member';\r\nimport {\r\n  //SEAL_DETAILS_EXPORTER_METADATA,\r\n  SEAL_DETAILS_FILTERER_METADATA,\r\n  SEAL_DETAILS_SORTER_METADATA,\r\n  SEAL_DETAILS_VIEWER_METADATA\r\n} from './seal-details-metadata';\r\n\r\ninterface SealDetailsResources {\r\n  loading: Observable<boolean>;\r\n  viewer: Viewer;\r\n  filterer: Filterer;\r\n  //grouper: Grouper;\r\n // exporter: Exporter;\r\n  sorter: Sorter;\r\n  dataSource: DataSource;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-seal-details',\r\n  templateUrl: './seal-details.component.html',\r\n  styleUrls: ['./seal-details.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SealDetailsComponent {\r\n  constructor(private route: ActivatedRoute, private sealsService: SealsService) {}\r\n\r\n  sealHash$ = this.route.paramMap.pipe(\r\n    map((params) => {\r\n      return this.sealsService.sealNodes.find((x) => x.hash === +params.get('hash'));\r\n    })\r\n  );\r\n\r\n  sealDetails$ = this.route.paramMap.pipe(\r\n    switchMap((params) => {\r\n      return this.sealsService.getSealDetails$(params.get('hash'));\r\n    })\r\n  );\r\n\r\n  isLoading = true;\r\n  sealDetailsViewer = new Viewer(\r\n    {\r\n      metadata: SEAL_DETAILS_VIEWER_METADATA,\r\n      contextProvider: this.createViewContextProvider()\r\n    },\r\n    'D2Dashboard_Seals_Details_ViewerV2'\r\n  );\r\n  sealDetailsFilterer = new Filterer({ metadata: SEAL_DETAILS_FILTERER_METADATA });\r\n  sealDetailsSorter = new Sorter({ metadata: SEAL_DETAILS_SORTER_METADATA });\r\n  // sealDetailsExporter = new Exporter({\r\n  //   metadata: SEAL_DETAILS_EXPORTER_METADATA,\r\n  //   contextProvider: this.createViewContextProvider()\r\n  // });\r\n  createViewContextProvider() {\r\n    return of((item: SealClanMember) => ({\r\n      item\r\n      // dateTimePipe: this.bungieDateTimePipe\r\n    }));\r\n  }\r\n\r\n  sealDetailsInfo$: Observable<SealDetailsResources> = combineLatest([this.sealDetails$]).pipe(\r\n    map(([sealDetails]) => {\r\n      return {\r\n        loading: of(false),\r\n        dataSource: new DataSource<SealClanMember>({ data: sealDetails }),\r\n        viewer: this.sealDetailsViewer,\r\n        filterer: this.sealDetailsFilterer,\r\n     //   exporter: this.sealDetailsExporter,\r\n        sorter: this.sealDetailsSorter\r\n      };\r\n    }),\r\n    tap((x) => (this.isLoading = false))\r\n    //filter((ds) => !!ds)\r\n  );\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.seal-details {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  .seal-detail-table {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n}\r\n",
                    "styleUrl": "./seal-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"sealHash$ | async as sealDetails\">\r\n  <div class=\"seal-details\">\r\n    <lib-table-view\r\n      class=\"seal-detail-table\"\r\n      [isLoading]=\"isLoading\"\r\n      [dataSource]=\"(sealDetailsInfo$ | async)?.dataSource\"\r\n      [header]=\"sealDetails.displayProperties.name\"\r\n      [viewer]=\"sealDetailsViewer\"\r\n      [filterer]=\"sealDetailsFilterer\"\r\n      [sorter]=\"sealDetailsSorter\"\r\n    >\r\n      <div pre-header>\r\n        <button mat-icon-button aria-label=\"Back to Seals\" routerLink=\"/seals\">\r\n          <mat-icon>arrow_back</mat-icon>\r\n        </button>\r\n      </div>\r\n    </lib-table-view>\r\n\r\n    <ng-template #loading>\r\n      <div class=\"loading\">Loading Seal Details</div>\r\n    </ng-template>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SealMemberProgressTableComponent",
            "id": "component-SealMemberProgressTableComponent-953b088dc7a4886582712b8a465c1505fa33db14f668d48a6bdb123feec22fd44237df6091c4bbfd0780d272b66ede6364f4aab19f32e5f2cf9ab0cdc312147f",
            "file": "projects/clan-dashboard/src/app/features/seals/components/seal-member-progress-table/seal-member-progress-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seal-member-progress-table",
            "styleUrls": [
                "./seal-member-progress-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seal-member-progress-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-seal-member-progress-table',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './seal-member-progress-table.component.html',\r\n  styleUrls: ['./seal-member-progress-table.component.scss']\r\n})\r\nexport class SealMemberProgressTableComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./seal-member-progress-table.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>seal-member-progress-table works!</p>\r\n"
        },
        {
            "name": "SealsDashboardComponent",
            "id": "component-SealsDashboardComponent-228f600c7043ab8e6bda1c3ca5675b2469b609e28cc050c042d59b8834693d69a86d2c786755cac022866fb81cb014b1f606e1839f53afdced76334a5b32733b",
            "file": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seals-dashboard",
            "styleUrls": [
                "./seals-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seals-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "seals$",
                    "defaultValue": "this.sealsService.milestonesWithProfiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { SealsService } from '../data-access/seals.service';\r\n\r\n@Component({\r\n  selector: 'app-seals-dashboard',\r\n  templateUrl: './seals-dashboard.component.html',\r\n  styleUrls: ['./seals-dashboard.component.scss']\r\n})\r\nexport class SealsDashboardComponent {\r\n  constructor(private sealsService: SealsService) {}\r\n  seals$ = this.sealsService.milestonesWithProfiles$;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  flex: 1;\r\n  overflow: auto;\r\n}\r\n.seals-wrapper {\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n",
                    "styleUrl": "./seals-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "sealsService",
                        "type": "SealsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"seals-wrapper\">\r\n  <ng-container *ngIf=\"{ seals: seals$  | async } as vm\">\r\n    <app-seals-list [sealsList]=\"vm.seals\"></app-seals-list>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "SealsListComponent",
            "id": "component-SealsListComponent-8d686a0768aa56c551f4d2dcbfa002cb4f09d4bce0248bbf664a0f17e49d00f8490bcb19d230b89dcedf9696735d4c858e2f9f53b081606a7ffeffbae083eb75",
            "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-seals-list",
            "styleUrls": [
                "./seals-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./seals-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sealsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "SealListItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sealListItem",
                            "type": "SealListItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sealListItem",
                            "type": "SealListItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SealListItem } from '@features/seals/models/seal-list-item';\r\nimport { MatCardModule } from '@angular/material/card';\r\n@Component({\r\n  selector: 'app-seals-list',\r\n  templateUrl: './seals-list.component.html',\r\n  styleUrls: ['./seals-list.component.scss'],\r\n  imports: [CommonModule, RouterModule, MatCardModule, MatButtonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true\r\n})\r\nexport class SealsListComponent {\r\n  @Input() sealsList: SealListItem[];\r\n\r\n  trackByFn(index: number, sealListItem: SealListItem) {\r\n    return sealListItem.seal.hash;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading {\r\n  text-align: center;\r\n}\r\n\r\n.seals-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n\r\n  .seal {\r\n    width: 100%;\r\n    max-width: 480px;\r\n    margin: 2rem;\r\n  }\r\n}\r\n.seal-info {\r\n  padding-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.seal-image {\r\n  height: 126px;\r\n  width: 126px;\r\n}\r\n\r\n/// Loading Styles\r\n.loading {\r\n  .skeleton-title {\r\n    width: 250px;\r\n    margin-bottom: 0.75rem;\r\n  }\r\n  .skeleton-sub-title {\r\n    width: 250px;\r\n    margin-bottom: 0.75rem;\r\n  }\r\n  .seal-info {\r\n    .skeleton-item {\r\n      width: 100px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./seals-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"sealsList; else loading\">\r\n  <p *ngIf=\"!sealsList.length\">\r\n    No Seals Found\r\n  </p>\r\n  <div class=\"seals-container\" *ngIf=\"sealsList\">\r\n    <ng-container *ngFor=\"let sealDetails of sealsList\">\r\n      <mat-card class=\"seal\">\r\n        <mat-card-header>\r\n          <mat-card-title-group>\r\n            <img class=\"seal-image\" src=\"//bungie.net/{{sealDetails.seal?.displayProperties?.icon}}\"\r\n              alt=\"{{sealDetails.seal?.displayProperties?.name}}\">\r\n            <mat-card-title>{{sealDetails.seal.displayProperties.name}}</mat-card-title>\r\n            <mat-card-subtitle>{{sealDetails.seal.displayProperties.description}}</mat-card-subtitle>\r\n          </mat-card-title-group>\r\n        </mat-card-header>\r\n        <mat-card-content class=\"seal-info\">\r\n          <div>\r\n            Complete: {{sealDetails.completedCount}} / {{sealDetails.totalMembers}}\r\n          </div>\r\n          <div *ngIf=\"sealDetails.isGilded\">\r\n            Gilded: {{sealDetails.gildedCount}} / {{sealDetails.totalMembers}}\r\n          </div>\r\n          <div>\r\n            <button mat-button routerLink=\"/seals/{{sealDetails.seal.hash}}\">View</button>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <div class=\"loading seals-container\">\r\n    <ng-container *ngFor=\"let x of ['','','','','','','','','','','','','','']\">\r\n      <mat-card class=\"seal\">\r\n        <mat-card-header>\r\n          <mat-card-title-group>\r\n            <mat-card-title><span class=\"skeleton-item skeleton-title\"></span></mat-card-title>\r\n            <mat-card-subtitle>\r\n              <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n              <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n              <span class=\"skeleton-item skeleton-sub-title\"></span>\r\n            </mat-card-subtitle>\r\n            <span class=\"skeleton-item seal-image\"></span>\r\n          </mat-card-title-group>\r\n        </mat-card-header>\r\n        <mat-card-content class=\"seal-info\">\r\n          <span class=\"skeleton-item\" style=\"width:100px\"></span>\r\n          <span class=\"skeleton-item\"></span>\r\n          <span class=\"skeleton-item\"></span>\r\n        </mat-card-content>\r\n      </mat-card>\r\n\r\n    </ng-container>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "SearchErrorDialogComponent",
            "id": "component-SearchErrorDialogComponent-47dd9a6266f174af516d769e02d2e393f83ae6b54b851b7c07f177d2a6c33c4d93fa652f71eff792be1623587043b89577eeca62646f174540e5ffd062272a05",
            "file": "projects/clan-dashboard/src/app/features/clan-search/components/search-error-dialog/search-error-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-error-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 mat-dialog-title>Clan Search Error</h1>\n<div mat-dialog-content>\n  {{ data }}\n</div>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-search-error-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <h1 mat-dialog-title>Clan Search Error</h1>\r\n    <div mat-dialog-content>\r\n      {{ data }}\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-button mat-dialog-close>Close</button>\r\n    </mat-dialog-actions>\r\n  `\r\n})\r\nexport class SearchErrorDialogComponent {\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: string) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SettingsMenuComponent",
            "id": "component-SettingsMenuComponent-6c01b02c034c924ab479b010779e5b50dc816cc404b4ff2b850fc88f9140e917977ce4fed6151428bb22507b553ef202868acabe52c41e67924f3075eb8125ae",
            "file": "projects/clan-dashboard/src/app/core/layout/settings-menu/settings-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-menu",
            "styleUrls": [
                "./settings-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "versionNumber",
                    "defaultValue": "this.appConfig.appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AppConfig } from '@core/config/app-config';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule } from '@angular/router';\r\n@Component({\r\n  selector: 'app-settings-menu',\r\n  standalone: true,\r\n  imports: [CommonModule, MatMenuModule, MatIconModule, MatButtonModule, RouterModule],\r\n  templateUrl: './settings-menu.component.html',\r\n  styleUrls: ['./settings-menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SettingsMenuComponent {\r\n  constructor(private appConfig: AppConfig) {}\r\n  versionNumber = this.appConfig.appVersion;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button mat-icon-button [matMenuTriggerFor]=\"settingsMenu\">\r\n  <mat-icon>\r\n    settings\r\n  </mat-icon>\r\n</button>\r\n<mat-menu #settingsMenu=\"matMenu\">\r\n  <a href=\"https://github.com/WorthyD/destiny-clan-dashboard/issues\" target=\"_blank\" mat-menu-item>\r\n    <mat-icon>\r\n      bug_report\r\n    </mat-icon>\r\n    <span> Report a Bug</span>\r\n  </a>\r\n  <a href=\"https://github.com/WorthyD/destiny-clan-dashboard\" target=\"_blank\" mat-menu-item>\r\n    <mat-icon>\r\n      code\r\n    </mat-icon>\r\n    <span> Source Code</span>\r\n  </a>\r\n  <a href=\"https://twitter.com/WorthyD\" target=\"_blank\" mat-menu-item>\r\n    <mat-icon>\r\n      keyboard\r\n    </mat-icon>\r\n    <span> Developer</span>\r\n  </a>\r\n  <!-- <button mat-menu-item>\r\n    <mat-icon>\r\n      help\r\n    </mat-icon>\r\n    <span> About App</span>\r\n  </button> -->\r\n  <a mat-menu-item routerLink=\"config\">\r\n    <mat-icon>\r\n      settings\r\n    </mat-icon>\r\n    <span> Config</span>\r\n  </a>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon>\r\n      info\r\n    </mat-icon>\r\n    <span>\r\n      v {{versionNumber}}\r\n    </span>\r\n  </button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "SkeletonChartLoaderComponent",
            "id": "component-SkeletonChartLoaderComponent-20abe2702c1d1be5b0ef118f722781391573c94f3c9e6fd8d2c41ac6e2659de3350fcd2fe027850ef393a57222c9e0e3162ec12e1a7b958b2837b38d5e6766a5",
            "file": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-skeleton-chart-loader",
            "styleUrls": [],
            "styles": [
                "\n      .skeleton-chart-loader {\n        height: 400px;\n        width: 100%;\n        display: flex;\n        align-items: flex-end;\n        justify-content: space-between;\n\n        &__chart-item {\n          flex: 1 1 15%;\n          display: block;\n          position: relative;\n          //text-align: center;\n          //vertical-align: bottom;\n          max-width: 20%;\n          height: 100%;\n          margin: 0 0.9% 0 0.9%;\n\n          $i: 1;\n          $ref: 20%, 25%, 40%, 45%, 65%, 50%, 45%, 55%, 65%, 75%, 85%;\n\n          @for $i from 1 through length($ref) {\n            $c: nth($ref, $i);\n\n            &:nth-child(#{$i}) {\n              height: $c;\n            }\n          }\n        }\n      }\n    "
            ],
            "template": "<div class=\"skeleton-chart-loader\">\n  <div\n    class=\"skeleton-chart-loader__chart-item skeleton-item\"\n    *ngFor=\"let x of ['', '', '', '', '', '', '', '', '', '', '']\"\n  ></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'lib-skeleton-chart-loader',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  styles: [\r\n    `\r\n      .skeleton-chart-loader {\r\n        height: 400px;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: space-between;\r\n\r\n        &__chart-item {\r\n          flex: 1 1 15%;\r\n          display: block;\r\n          position: relative;\r\n          //text-align: center;\r\n          //vertical-align: bottom;\r\n          max-width: 20%;\r\n          height: 100%;\r\n          margin: 0 0.9% 0 0.9%;\r\n\r\n          $i: 1;\r\n          $ref: 20%, 25%, 40%, 45%, 65%, 50%, 45%, 55%, 65%, 75%, 85%;\r\n\r\n          @for $i from 1 through length($ref) {\r\n            $c: nth($ref, $i);\r\n\r\n            &:nth-child(#{$i}) {\r\n              height: $c;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  ],\r\n  template: `\r\n    <div class=\"skeleton-chart-loader\">\r\n      <div\r\n        class=\"skeleton-chart-loader__chart-item skeleton-item\"\r\n        *ngFor=\"let x of ['', '', '', '', '', '', '', '', '', '', '']\"\r\n      ></div>\r\n    </div>\r\n  `,\r\n  //templateUrl: './skeleton-chart-loader.component.html',\r\n  //styleUrls: ['./skeleton-chart-loader.component.scss']\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SkeletonChartLoaderComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .skeleton-chart-loader {\n        height: 400px;\n        width: 100%;\n        display: flex;\n        align-items: flex-end;\n        justify-content: space-between;\n\n        &__chart-item {\n          flex: 1 1 15%;\n          display: block;\n          position: relative;\n          //text-align: center;\n          //vertical-align: bottom;\n          max-width: 20%;\n          height: 100%;\n          margin: 0 0.9% 0 0.9%;\n\n          $i: 1;\n          $ref: 20%, 25%, 40%, 45%, 65%, 50%, 45%, 55%, 65%, 75%, 85%;\n\n          @for $i from 1 through length($ref) {\n            $c: nth($ref, $i);\n\n            &:nth-child(#{$i}) {\n              height: $c;\n            }\n          }\n        }\n      }\n    \n"
        },
        {
            "name": "TableViewComponent",
            "id": "component-TableViewComponent-ef49304f8e7a4ccb72ab18fd31d89b53f20b31c1baf176513d7c5bb260405d82930a9e92af311f67453d9391124f8f61d0cb7f086580fdcec77b7725efa71bf2",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-table-view",
            "styleUrls": [
                "./table-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "DataSource",
                    "decorators": []
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "Exporter",
                    "decorators": []
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "Filterer",
                    "decorators": []
                },
                {
                    "name": "grouper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "Grouper",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "Sorter",
                    "decorators": []
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "Viewer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "loadingSize",
                    "defaultValue": "new Array(25).fill('_').map((x) => x)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "page",
                    "defaultValue": "new BehaviorSubject({ size: 25, index: 0 })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TablePage>",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "renderedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "renderedHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Map<Item, Map<string, Observable<RenderedView>>>>",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "export",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatTooltipModule,\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnChanges {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() header: string;\r\n  @Input() isLoading: boolean = undefined;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  itemCount: Observable<number>;\r\n  loadingSize = new Array(25).fill('_').map((x) => x);\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 25, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['dataSource'] || changes['filterer'] || changes['sorter'] || changes['viewer'] || changes['loading']) {\r\n      if (this.filterer && this.sorter && this.viewer) {\r\n        if (this.isLoading === true ) {\r\n          this.showLoading();\r\n        } else {\r\n          this.loadData();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    if (this.dataSource && this.filterer && this.sorter && this.viewer) {\r\n      const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n      this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n        map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n      );\r\n      this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n      this.views = this.viewer.getViews();\r\n      this.displayedColumns = this.viewer.state.pipe(\r\n        map((state) => {\r\n          return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n        })\r\n      );\r\n\r\n      this.renderedHtml = this.renderedData.pipe(\r\n        map((items) => {\r\n          const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n          items.forEach((item) => {\r\n            const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n            this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n            renderedHtml.set(item, itemRenderedViews);\r\n          });\r\n          return renderedHtml;\r\n        }),\r\n        shareReplay(1)\r\n      );\r\n    }\r\n  }\r\n\r\n  private showLoading() {\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.viewer.exportData(this.header?.toLowerCase()?.replace(' ', '_'), curatedData);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n}\r\n\r\n.filter {\r\n  max-width: 650px;\r\n  margin: 8px auto;\r\n  width: 100%;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding-left: 8px;\r\n  h3 {\r\n    padding-left: 8px;\r\n    flex: 1;\r\n    margin-bottom: 0;\r\n  }\r\n  .header-actions {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.item-count {\r\n  padding-left: 24px;\r\n}\r\n\r\nadvanced-search {\r\n  flex: 1;\r\n  margin-top: 12px;\r\n  padding-left: 24px;\r\n  max-width: 650px;\r\n}\r\n\r\n.header-actions {\r\n  padding: 16px;\r\n}\r\n\r\n.table-container {\r\n  overflow: auto;\r\n  .info-tip {\r\n    margin-left: 0.5rem;\r\n    display: inline;\r\n  }\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n\r\n  th,\r\n  td {\r\n    //   padding-top: 4px;\r\n    //    padding-bottom: 4px;\r\n    white-space: nowrap;\r\n  }\r\n}\r\n\r\n.mat-menu-item {\r\n  //   @include slim-menu-item();\r\n}\r\n\r\n.header-text-center {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./table-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 94
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"header\">\r\n  <ng-content select=\"[pre-header]\"></ng-content>\r\n  <h3>{{ header }}</h3>\r\n  <!-- <advanced-search [filterer]=\"filterer\" [dataSource]=\"dataSource\">\r\n   </advanced-search> -->\r\n\r\n  <div class=\"header-actions\">\r\n    <lib-display-options [sorter]=\"sorter\" [viewer]=\"viewer\"></lib-display-options>\r\n    <button mat-button (click)=\"export()\">Export</button>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"table-container\">\r\n  <table mat-table [dataSource]=\"renderedData\" *ngIf=\"isLoading === false || isLoading === undefined; else loading\">\r\n    <ng-container *ngFor=\"let view of views\" [matColumnDef]=\"view.id\" [sticky]=\"view?.isSticky\">\r\n      <th mat-header-cell *matHeaderCellDef [class]=\"view.labelClass || ''\">\r\n        <span [innerHTML]=\"view.label\"></span>\r\n        <mat-icon *ngIf=\"view.tooltip\" class=\"info-tip\" inline=\"true\" [matTooltip]=\"view.tooltip\">info</mat-icon>\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let item\">\r\n        <ng-container *ngIf=\"(renderedHtml | async).get(item).get(view.id) | async as view\">\r\n          <lib-rendered-view\r\n            *ngIf=\"view\"\r\n            [class]=\"view.classList || ''\"\r\n            [ngStyle]=\"view.styles || {}\"\r\n            [text]=\"view['text'] || ''\"\r\n            [childrenViews]=\"view['children'] || null\"\r\n            [component]=\"view['component'] || null\"\r\n            [data]=\"view['data'] || null\"\r\n          >\r\n          </lib-rendered-view>\r\n        </ng-container>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns | async; sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let item; columns: displayedColumns | async\"></tr>\r\n  </table>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<mat-paginator (page)=\"setPage($event)\" [pageSize]=\"(page | async).size\" [length]=\"itemCount | async\"> </mat-paginator>\r\n\r\n<ng-template #loading>\r\n  <table mat-table [dataSource]=\"loadingSize\">\r\n    <ng-container *ngFor=\"let view of views\" [matColumnDef]=\"view.id\" [sticky]=\"view?.isSticky\">\r\n      <th mat-header-cell *matHeaderCellDef [innerHTML]=\"view.label\" [class]=\"view.labelClass || ''\"></th>\r\n      <td mat-cell *matCellDef=\"let item\">\r\n        <span class=\"skeleton-item\"></span>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns | async; sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let item; columns: displayedColumns | async\"></tr>\r\n  </table>\r\n</ng-template>\r\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-ecfbcc19487848c357ae0427a46689cc383c60cd6ffe603fdd638d3c16938378c311c0e6d885e7bef07f1e2114ab5d699ac6ae2cf2bcb05ac859a5540c91e835",
            "file": "projects/components/src/lib/shared/rendered-view/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-test",
            "styleUrls": [
                "./test.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "test",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-test',\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent {\r\n  @Input() test: string = 'default';\r\n  constructor() {}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<p>test works!</p>\r\n{{test}}\r\n"
        },
        {
            "name": "WrapperComponent",
            "id": "component-WrapperComponent-068efd33b61d83c05c9bec34fc37e2f4a0eaea0707c3d3bb8affeae0317439596040f5ccd7df9900404981bda2f4088e34cf478d949ef6374fb55a6c5fd564ef",
            "file": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wrapper",
            "styleUrls": [
                "./wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "footerOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "notifications$",
                    "defaultValue": "this.store.select(getAllNotifications)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showSandbox",
                    "defaultValue": "!this.appConfig.production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "versionNumber",
                    "defaultValue": "this.appConfig.appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "year",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { getAllNotifications } from '@core/store/notifications';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { of, take } from 'rxjs';\r\nimport { ClanUpdaterService } from '../../services/updaters/clan-updater.service';\r\nimport { AppConfig } from '../../config/app-config';\r\nimport { initializeClanMemberProfiles } from '@core/store/clans-members-profiles/clan-members-profiles.actions';\r\n\r\n@Component({\r\n  selector: 'app-wrapper',\r\n  templateUrl: './wrapper.component.html',\r\n  styleUrls: ['./wrapper.component.scss']\r\n})\r\nexport class WrapperComponent implements OnInit {\r\n  constructor(private clanUpdaterService: ClanUpdaterService, private store: Store, private appConfig: AppConfig) {}\r\n  year = new Date().getFullYear();\r\n  loading: boolean = false;\r\n  showSandbox = !this.appConfig.production;\r\n  footerOpen = false;\r\n\r\n  notifications$ = this.store.select(getAllNotifications);\r\n  versionNumber = this.appConfig.appVersion;\r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    this.clanUpdaterService\r\n      .update()\r\n      .pipe(take(1))\r\n      .subscribe((x) => (this.loading = false));\r\n\r\n    this.store.dispatch(initializeClanMemberProfiles());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: 0px;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n\r\n.clan-nav {\r\n  min-width: 150px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // height: 100%;\r\n  padding-top: 0;\r\n\r\n  .section-nav {\r\n    flex: 1;\r\n  }\r\n}\r\n.clan-name {\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n  font-size: 1.25rem;\r\n  @media (min-width: 48em) {\r\n    text-align: left;\r\n  }\r\n}\r\nlib-navbar {\r\n  position: fixed;\r\n  // top: 0;\r\n  // left: 0;\r\n  // right: 0;\r\n  z-index: 2;\r\n}\r\n\r\nmat-sidenav-container {\r\n  //min-height: calc(100vh - 64px);\r\n  flex: 1;\r\n}\r\n\r\nmat-sidenav-content {\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.active-link {\r\n  color: var(--app-primary-color-text) !important;\r\n  background: var(--app-primary-color) !important;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: var(--app-primary-color-darker) !important;\r\n  }\r\n}\r\n\r\n.footer-spacer {\r\n  height: 30px;\r\n}\r\n\r\nfooter {\r\n  background: var(--app-primary-color) !important;\r\n  color: var(--app-primary-color-text) !important;\r\n  position: fixed;\r\n  transform: translateY(100%);\r\n  transition: 1s transform, 1s -webkit-transform;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  z-index: 1;\r\n  box-sizing: border-box;\r\n  &.open {\r\n    transform: translateY(0%);\r\n    .footer-button {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n  .footer-display {\r\n    background: var(--app-primary-color) !important;\r\n    display: flex;\r\n    font-size: 12px;\r\n    justify-content: space-between;\r\n    top: -30px;\r\n    position: absolute;\r\n    padding: 0.25rem;\r\n    width: 100%;\r\n  }\r\n  .footer_app-info {\r\n    flex: 1;\r\n    text-align: right;\r\n    padding-right: 1rem;\r\n  }\r\n  .footer-button {\r\n    background: var(--app-background-color);\r\n    color: var(--app-primary-color-text) !important;\r\n    border-radius: 50%;\r\n    padding: 0;\r\n    margin: 0;\r\n    border: none;\r\n    height: 22px;\r\n    width: 22px;\r\n    cursor: pointer;\r\n    transform-origin: center;\r\n    transition: 0.25s;\r\n    mat-icon {\r\n      font-size: 18px;\r\n      line-height: 21px;\r\n      height: 20px;\r\n      width: 20px;\r\n    }\r\n  }\r\n  .footer-content {\r\n    padding-top: 1rem;\r\n    padding-bottom: 1rem;\r\n    text-align: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row>\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n      <div class=\"clan-name\">Destiny Clan Dashboard</div>\r\n      <app-notifications [notifications]=\"notifications$ | async\"></app-notifications>\r\n      <div>\r\n        <app-settings-menu></app-settings-menu>\r\n      </div>\r\n    </mat-toolbar-row>\r\n  </mat-toolbar>\r\n  <mat-sidenav-container hasBackdrop=\"false\">\r\n    <mat-sidenav [libResponsiveSidebar]=\"960\" #sidenav mode=\"side\" opened>\r\n      <mat-nav-list class=\"clan-nav\">\r\n        <div class=\"section-nav\">\r\n          <a mat-list-item routerLink=\"./\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n            Dashboard\r\n          </a>\r\n          <a mat-list-item routerLink=\"roster\" routerLinkActive=\"active-link\"> Roster </a>\r\n          <a mat-list-item routerLink=\"activity-modes/0\" routerLinkActive=\"active-link\"> Recent Activity </a>\r\n          <a mat-list-item routerLink=\"seals\" routerLinkActive=\"active-link\"> Seals </a>\r\n          <a mat-list-item routerLink=\"activities\" routerLinkActive=\"active-link\"> Curated Activities </a>\r\n          <a mat-list-item routerLink=\"activity-modes\" routerLinkActive=\"active-link\"> Activity Modes </a>\r\n          <a mat-list-item routerLink=\"home\" routerLinkActive=\"active-link\"> Home </a>\r\n          <ng-container *ngIf=\"showSandbox\">\r\n            <a mat-list-item routerLink=\"sandbox\" routerLinkActive=\"active-link\"> Sandbox </a>\r\n          </ng-container>\r\n\r\n          <!-- Left here so I can remember all the stuff I deleted -->\r\n          <!-- <a mat-list-item routerLink=\"crucible\" routerLinkActive=\"active-link\"> Crucible </a> -->\r\n          <!-- <a mat-list-item routerLink=\"gambit\" routerLinkActive=\"active-link\"> Gambit </a> -->\r\n          <!-- <a mat-list-item routerLink=\"raids\" routerLinkActive=\"active-link\"> Raids </a> -->\r\n          <!-- <a mat-list-item routerLink=\"dungeons\" routerLinkActive=\"active-link\"> Dungeons </a> -->\r\n          <!-- <a mat-list-item (click)=\"openPlayerSearch()\">Player Search</a> -->\r\n          <!-- <a mat-list-item (click)=\"goHome()\">Home</a> -->\r\n        </div>\r\n      </mat-nav-list>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n      <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container>\r\n  <div class=\"footer-spacer\"></div>\r\n  <footer [ngClass]=\"{ open: footerOpen }\">\r\n    <div class=\"footer-display\">\r\n      <div class=\"footer_app-info\">\r\n        © {{ year }} - <a href=\"https://twitter.com/worthyd\" target=\"_blank\">@WorthyD</a> - Not Affiliated with Bungie -\r\n        <span> v {{ versionNumber }} </span>\r\n      </div>\r\n      <button class=\"footer-button footer-button__open\" (click)=\"footerOpen = !footerOpen\">\r\n        <mat-icon>keyboard_double_arrow_up</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"footer-content\">\r\n      <div>\r\n        Source code hosted on <a href=\"\" target=\"_blank\">Github</a>. <a href=\"\" target=\"_blank\">File a bug</a> or\r\n        <a href=\"\" disabled target=\"_blank\">join the Discord (coming soon)</a> for assistance or request a feature.\r\n      </div>\r\n      <div>\r\n        Destiny is a registered trademark of <a href=\"https://www.bungie.net/\" _target=\"blank\">Bungie</a>. Data and\r\n        images are from Bungie.\r\n      </div>\r\n    </div>\r\n  </footer>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "ActivitiesDashboardRoutingModule",
            "id": "module-ActivitiesDashboardRoutingModule-096f4de22907fe467217fbf10e2b89f107278466169dbd6090ca8b2b78b0a896fe4f30c3348d88338416b0520f46db9ea6010f13fd9aafb1124982ceb0a5fd6e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activity-dashboard/activity-dashboard-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ActivityDashboardComponent } from './activity-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ActivityDashboardComponent\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ActivitiesDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivitiesShellModule",
            "id": "module-ActivitiesShellModule-30ef44fab1a10c664e1f2588de6e2dae6ec94aaabe97c005b56c1985ab8b534b4020b2943d9f302c0e111cdd8084265f7b8677358d4b1a684c8cde1eaa9d6408",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activities-shell/activities-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivitiesShellRoutingModule } from './activities-shell-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, ActivitiesShellRoutingModule]\r\n})\r\nexport class ActivitiesShellModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivitiesShellRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivitiesShellRoutingModule",
            "id": "module-ActivitiesShellRoutingModule-980de4487b435239822fb74dba40566322036c3b7af0a256e901cc65171c7cdc105882c549d8a7832c38af2a970bf6129ba76b95bb1a41833c80b4ad33d612dc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activities-shell/activities-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  // {\r\n  //   path: '',\r\n  //   loadChildren: () =>\r\n  //     import('../activity-mode-dashboard/activity-mode-dashboard.module').then(\r\n  //       (module) => module.ActivityModeDashboardModule\r\n  //     )\r\n  // },\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../curated-activities-dashboard/curated-activities-dashboard.module').then(\\\n        (module) => module.CuratedActivitiesDashboardModule\\\n      )\"\r\n  },\r\n  // {\r\n  //   path: 'mode/:modeType',\r\n  //   loadChildren: () =>\r\n  //     import('../activity-mode-detail/activity-mode-detail.module').then((module) => module.ActivityModeDetailModule)\r\n  // },\r\n  // TODO: GUARD THIS\r\n  {\r\n    path: ':activityHash',\r\n    loadChildren: () =>\r\n      \"import('../activity-detail/activity-detail.module').then((module) => module.ActivityDetailModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ActivitiesShellRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityDashboardModule",
            "id": "module-ActivityDashboardModule-2f218f75793e4617a0cf5e9e942227cdc16f4ef50e2f8564cdc8e77d0defac07f2f62ab98bd1cc1985cffae592d61bb2a20dcfd81061cfbd5e3bf82b4ba41ccd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activity-dashboard/activity-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivityDashboardComponent } from './activity-dashboard.component';\r\nimport { ActivitiesDashboardRoutingModule } from './activity-dashboard-routes.module';\r\n\r\n@NgModule({\r\n  declarations: [ActivityDashboardComponent],\r\n  imports: [CommonModule, ActivitiesDashboardRoutingModule]\r\n})\r\nexport class ActivityDashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivitiesDashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityDetailModule",
            "id": "module-ActivityDetailModule-81dd61371142aefc3b5226b697a4d0ba40be589fd7e3fae3de26aa7f80f9c45c398e25a43d46c7085b9aa95c3909b2a954912755044737afee390db7d10e1b24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activity-detail/activity-detail.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivityDetailComponent } from './activity-detail.component';\r\nimport { ActivityDetailRoutingModule } from './activity-detail-routes.module';\r\n\r\nimport { CollapsibleListComponent } from '@destiny/components/shared/collapsible-list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ActivityTableModule } from '../activity-table/activity-table.module';\r\n\r\n@NgModule({\r\n  declarations: [ActivityDetailComponent],\r\n  imports: [CommonModule, CollapsibleListComponent, ActivityDetailRoutingModule, MatButtonModule, ActivityTableModule]\r\n})\r\nexport class ActivityDetailModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivityDetailRoutingModule"
                        },
                        {
                            "name": "ActivityTableModule"
                        },
                        {
                            "name": "CollapsibleListComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityDetailRoutingModule",
            "id": "module-ActivityDetailRoutingModule-87688fc56c378e7b0d5c6cd909eca58045c3fcbaa6d15cbc80ecd382ad45d4148645d6d370affb3a2ce4ca579c39c0caf6d3f4235d871cb78d6b522bcbbcc201",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activity-detail/activity-detail-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import { ActivitiesDashboardComponent } from './activities-dashboard.component';\r\nimport { ActivityDetailComponent } from './activity-detail.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ActivityDetailComponent\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ActivityDetailRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeDashboardModule",
            "id": "module-ActivityModeDashboardModule-8e864bd4a83668a6814b9ffb62ca0c61fd51352f779e7d7e1347fc4b54abdc3b935f9a84141996aad0f5ec782a44905abec69fa8b400f54cf3a48be31a8cef37",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-dashboard/activity-mode-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivityModeDashboardComponent } from './activity-mode-dashboard.component';\r\nimport { ActivityModeDashboardRoutingModule } from './activity-dashboard-routes.module';\r\nimport { ActivityModeCardDetailsComponent } from '../components/activity-mode-card-details/activity-mode-card-details.component';\r\n\r\n@NgModule({\r\n  declarations: [ActivityModeDashboardComponent],\r\n  imports: [CommonModule, ActivityModeDashboardRoutingModule, ActivityModeCardDetailsComponent]\r\n})\r\nexport class ActivityModeDashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityModeDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivityModeCardDetailsComponent"
                        },
                        {
                            "name": "ActivityModeDashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeDashboardRoutingModule",
            "id": "module-ActivityModeDashboardRoutingModule-4d3412d1a2a141b9ab9c2b7cbd47da03d963ddd5a745475a09af602b54e2468aa64942bd5c3e2e812595d20cdd207fc9c41601630896497806064fe4ea4a25ea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-dashboard/activity-dashboard-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ActivityModeDashboardComponent } from './activity-mode-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ActivityModeDashboardComponent\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ActivityModeDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeDetailModule",
            "id": "module-ActivityModeDetailModule-68380330146e95065fc01e73cc06556da8d18c19211fce72e36d7141ad8a4955b6c5d913cff986e4d433617b9c1886664e2ceb7c0d83b1be24111fa20f58e3de",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-detail/activity-mode-detail.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivityModeDetailComponent } from './activity-mode-detail.component';\r\nimport { ActivityModeDetailRoutingModule } from './activity-mode-detail-routes.module';\r\nimport { ActivityModeTableModule } from '../activity-mode-table/activity-mode-table.module';\r\n\r\n@NgModule({\r\n  declarations: [ActivityModeDetailComponent],\r\n  imports: [CommonModule, ActivityModeDetailRoutingModule, ActivityModeTableModule]\r\n})\r\nexport class ActivityModeDetailModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityModeDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivityModeDetailRoutingModule"
                        },
                        {
                            "name": "ActivityModeTableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeDetailRoutingModule",
            "id": "module-ActivityModeDetailRoutingModule-049125ba74aaa09a745788b6b90c334807451d6b611eb0f5e2620619cab8a5ee42ff0a2e766e1de76b938045212a97046dbdfd44908b18123c7a8ca503b1cf77",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-detail/activity-mode-detail-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ActivityModeDetailComponent } from './activity-mode-detail.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ActivityModeDetailComponent\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ActivityModeDetailRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeShellModule",
            "id": "module-ActivityModeShellModule-c706410da582ee186965ce86fc036caf21cd2c4426e41e7230ea4a543a1168e37d855bfeabe3a88c81718463206c4810e05e1fe917cf09f64143b81805e180cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-shell/activity-mode-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {ActivityModeShellRoutingModule} from './activity-mode-shell-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, ActivityModeShellRoutingModule]\r\n})\r\nexport class ActivityModeShellModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivityModeShellRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeShellRoutingModule",
            "id": "module-ActivityModeShellRoutingModule-173afbcab759731b668205e3c3789a35b30d35ca8639c94951673429fbb24a0b39750a68e2a99658f8b50a2af6f880f10ae7eef6af470f326f2c62e1a55da504",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-shell/activity-mode-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n// import { ActivityModeResolveGuard } from '../guards/activity-mode.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../activity-mode-dashboard/activity-mode-dashboard.module').then(\\\n        (module) => module.ActivityModeDashboardModule\\\n      )\"\r\n  },\r\n  //TODO // Guard\r\n  {\r\n    path: ':modeType',\r\n  //  canActivate:[ActivityModeResolveGuard],\r\n    loadChildren: () =>\r\n      \"import('../activity-mode-detail/activity-mode-detail.module').then((module) => module.ActivityModeDetailModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ActivityModeShellRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeTableModule",
            "id": "module-ActivityModeTableModule-2a3dcac18ce6f9fcdf13a6198e096a198c3491d283cfb0271d46b8402c832abdfb27e194810cc09d2dcda35d4c9617da2b62e67df14350028046691f7dfc2256",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivityModeTableComponent } from './activity-mode-table.component';\r\nimport { ActivityModeTableRoutingModule } from './activity-mode-table-routes.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [ActivityModeTableComponent],\r\n  exports: [ActivityModeTableComponent],\r\n  imports: [CommonModule, MatButtonModule, PipesModule, MatIconModule, TableViewComponent, RouterModule]\r\n})\r\nexport class ActivityModeTableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityModeTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActivityModeTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityModeTableRoutingModule",
            "id": "module-ActivityModeTableRoutingModule-492f15b1309996ef13c57799dcfad4c017612f5c8ef0d7055c729f0a9580fd561ed9dd71856ab0f2798eb114568697900acac63f321ccb449f0a7a22be3d0a61",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-table-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ActivityModeTableComponent } from './activity-mode-table.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ActivityModeTableComponent\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ActivityModeTableRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActivityTableModule",
            "id": "module-ActivityTableModule-c489d8051747787468e88819aac8dea082718a0b2965dbba2aa784b90021594cdf04e423e441d3e451e043ee581bfeaa9284f3cf6f2969405021ff221b7f0c15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivityTableComponent } from './activity-table.component';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterModule } from '@angular/router';\r\n@NgModule({\r\n  declarations: [ActivityTableComponent],\r\n  exports: [ActivityTableComponent],\r\n  imports: [CommonModule, MatButtonModule, MatIconModule, TableViewComponent, RouterModule ]\r\n})\r\nexport class ActivityTableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivityTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActivityTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-10e1b1db5f71da637b498b39ba055c9a0a44c2dc01f89181dbe0f03897968cae4d59120354cf024bfae5b282e221c33b295569dc6c5674870561c9b4e30a9b3d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    AppRoutingModule,\r\n    CoreModule,\r\n    BrowserAnimationsModule,\r\n    MatProgressSpinnerModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-d57b4458b5a5cf8ba313c2b198393e721f672bd5fda4c826c20a87fe9a5193ba70b0bee656a0ad3849303785e65c692c0b90a7164a8d58b56e4e5d15d0848498",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClanResolveGuard } from '@core/guards/clan.guard';\r\nimport { WrapperComponent } from '@core/layout/wrapper/wrapper.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    canActivate: [ClanResolveGuard],\r\n    component: WrapperComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () =>\r\n          \"import('./features/clans-details/clans-details-shell/clans-details.module').then(\\\n            (module) => module.ClansDetailsModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'roster',\r\n        //loadChildren: () => import('./views/roster/roster.module').then((module) => module.RosterModule)\r\n\r\n        loadChildren: () =>\r\n          \"import('./features/clans-roster/clans-roster-shell/clans-roster.module').then(\\\n            (module) => module.ClansRosterModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'seals',\r\n        loadChildren: () =>\r\n          \"import('./features/seals/seals-shell/seals-routing.module').then((module) => module.SealsRoutingModule)\"\r\n      },\r\n      {\r\n        path: 'activities',\r\n        loadChildren: () =>\r\n          \"import('./features/activities/activities-shell/activities-shell.module').then(\\\n            (module) => module.ActivitiesShellModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'player',\r\n        loadChildren: () =>\r\n          \"import('./features/player/player-shell/player-shell.module').then((module) => module.PlayerShellModule)\"\r\n      },\r\n      {\r\n        path: 'activity-modes',\r\n        loadChildren: () =>\r\n          \"import('./features/activity-modes/activity-mode-shell/activity-mode-shell.module').then(\\\n            (module) => module.ActivityModeShellModule\\\n          )\"\r\n      },\r\n      {\r\n        path: 'config',\r\n        loadChildren: () => \"import('./views/config/config.module').then((module) => module.ConfigModule)\"\r\n      },\r\n      {\r\n        path: 'sandbox',\r\n        loadChildren: () =>\r\n          \"import('./features/sandbox/sandbox-shell/sandbox-shell.module').then((module) => module.SandboxShellModule)\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'home',\r\n    // TODO: Clan Guard\r\n    //canActivate: [ClanResolveGuard],\r\n    // loadChildren: () => import('./views/clan-search/clan-search.module').then((module) => module.ClanSearchModule)\r\n    loadChildren: () =>\r\n      \"import('./features/clan-search/clan-search-shell/clan-search-shell.module').then(\\\n        (module) => module.ClanSearchModule\\\n      )\"\r\n  },\r\n  { path: '**', redirectTo: '', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BarChartModule",
            "id": "module-BarChartModule-f02d4aa01237987a509e54fae6076aea9f6b4dae7b2a257bbe6eeec3925a4507fba943746b8ebcedb2ee71221dc1d237094911ab9521d693cca9ed23c0a90f2c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/bar-chart/bar-chart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BarChartComponent } from './bar-chart.component';\r\nimport { NgApexchartsModule } from 'ng-apexcharts';\r\n\r\n@NgModule({\r\n  declarations: [BarChartComponent],\r\n  imports: [CommonModule, NgApexchartsModule],\r\n  exports: [BarChartComponent]\r\n})\r\nexport class BarChartModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BarChartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BarChartComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BungieDisplayNameModule",
            "id": "module-BungieDisplayNameModule-b29488edcc080a68caef5328511cfc05ab0ddf4f8f5f4d1a69b35584447f14f45498899cd5a14191310f9a7d521419b7083c831c51b111fa5f1b98f019f29d25",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/pipes/bungie-display-name/bungie-display-name.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BungieDisplayNamePipe } from './bungie-display-name.pipe';\r\n\r\n@NgModule({\r\n  declarations: [BungieDisplayNamePipe],\r\n  exports: [BungieDisplayNamePipe],\r\n  imports: []\r\n})\r\nexport class BungieDisplayNameModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BungieDisplayNamePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BungieDisplayNamePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanDbModule",
            "id": "module-ClanDbModule-a7659e7698215fdbc3cc007d80bdab805a3016762af2da6106cf677c3b19c613fe261e552b025375ebfcdb7f2e7fc076a669173db4cf97ec8630de05ddce88ee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/data/src/lib/clan/clan-db.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanDetailsService } from './clan-details/clan-details.service';\r\nimport { ClanDatabase } from './clan-database';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [ClanDetailsService, ClanDatabase]\r\n})\r\nexport class ClanDbModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClanDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanDetailsModule",
            "id": "module-ClanDetailsModule-cacb10b35eed0917cb4a3ab1cd76b50b54407e01b54d8c7502914dfb3255c5b917657ad3c1e7bd03f19b7bac3e3b3728d30d144c0177b6d75c57f84a85b168ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-details/clan-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanDetailCellComponent } from './components/clan-detail-cell/clan-detail-cell.component';\r\nimport { ClanDetailComponent } from './clan-detail/clan-detail.component';\r\n\r\n@NgModule({\r\n  declarations: [ClanDetailComponent],\r\n  exports: [ClanDetailComponent],\r\n  imports: [CommonModule, ClanDetailCellComponent]\r\n})\r\nexport class ClanDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailCellComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClanDetailComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansActivityCardModule",
            "id": "module-ClansActivityCardModule-f3e6f66d2c4e981169075c6e08901bb34972777e80f1432cc7e612ed1d9d7be5ee7585d575f46960fa9095c7e961704bdee8d9df7b59fb51420ae06376678313",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-activity-card/clans-activity-card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansActivityCardComponent } from './clans-activity-card.component';\r\nimport { ClanActivityBarChartComponent } from '../components/clan-activity-bar-chart/clan-activity-bar-chart.component';\r\n\r\n@NgModule({\r\n  declarations: [ClansActivityCardComponent],\r\n  exports: [ClansActivityCardComponent],\r\n  imports: [CommonModule, ClanActivityBarChartComponent]\r\n})\r\nexport class ClansActivityCardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansActivityCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanActivityBarChartComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansActivityCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsDashboardModule",
            "id": "module-ClansDetailsDashboardModule-e57f1c746c01d96bda06883dbe7a6fec65e2e2522ccaf044035d5cde0bc34a2dd1edf3e6e3d24ab7ffb00114a0a396aa908e8f8f2d4f1aca2f6582e6ae019240",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansDetailsDashboardComponent } from './clans-details-dashboard.component';\r\nimport { ClansDetailsModule } from '../clans-details/clans-details.module';\r\nimport { ClansDetailsRoutingModule } from './clans-details-dashboard-routing.module';\r\nimport { ClansHighestLightLevelCardModule } from '../clans-highest-light-level-card/clans-highest-light-level-card.module';\r\nimport { ClansRecentlyActiveCardModule } from '../clans-recently-active-card/clans-recently-active-card.module';\r\nimport { ClansInactiveCardModule } from '../clans-inactive-card/clans-inactive-card.module';\r\nimport { ClansActivityCardModule } from '../clans-activity-card/clans-activity-card.module';\r\n\r\n@NgModule({\r\n  declarations: [ClansDetailsDashboardComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ClansDetailsModule,\r\n    ClansDetailsRoutingModule,\r\n    ClansHighestLightLevelCardModule,\r\n    ClansRecentlyActiveCardModule,\r\n    ClansInactiveCardModule,\r\n    ClansActivityCardModule\r\n  ]\r\n})\r\nexport class ClansDetailsDashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansDetailsDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansActivityCardModule"
                        },
                        {
                            "name": "ClansDetailsModule"
                        },
                        {
                            "name": "ClansDetailsRoutingModule"
                        },
                        {
                            "name": "ClansHighestLightLevelCardModule"
                        },
                        {
                            "name": "ClansInactiveCardModule"
                        },
                        {
                            "name": "ClansRecentlyActiveCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsModule",
            "id": "module-ClansDetailsModule-651cf0455f9c704ae2a8f7d236f0ab5dd67b9ffef1e2f87293b60d7893b8ce205c69ddfb616f40e15d8f7ab43fd66738faed3579429d2a0a0a52adbfae53c835",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details/clans-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansDetailsComponent } from './clans-details.component';\r\nimport { ClansDetailsService } from '../data-access/clans-details.service';\r\nimport { IconsModule } from '@destiny/components/icons';\r\nimport { ClansDetailsRoutingModule } from './clans-details-routing.module';\r\nimport { ClanInfoComponent } from '../components/clan-info/clan-info.component';\r\n\r\n@NgModule({\r\n  declarations: [ClansDetailsComponent],\r\n  providers: [ClansDetailsService],\r\n  exports: [ClansDetailsComponent],\r\n  imports: [CommonModule, IconsModule, ClanInfoComponent]\r\n})\r\nexport class ClansDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanInfoComponent"
                        },
                        {
                            "name": "IconsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsModule",
            "id": "module-ClansDetailsModule-d32f4784435521f5b23dcb3c6c6b879d77e592bdf2aa504f75709a1af2459135d4384220e140078ddaa7025776841cbc1c6b275c383ba029aeb6dc45dbdab853-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-shell/clans-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ClansDetailsRoutingModule } from './clans-details-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ClansDetailsRoutingModule]\r\n})\r\nexport class ClansDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansDetailsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsRoutingModule",
            "id": "module-ClansDetailsRoutingModule-8f1f06866740af79efa6efc2c7233b9511c30a079a0ee4f95a0559ed496892bcc630d817b87a8e9d0f4e8a723189a9f090d32572d4f7362b0f6844482363f610",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClansDetailsDashboardComponent } from './clans-details-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClansDetailsDashboardComponent\r\n    // component: null\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansDetailsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsRoutingModule",
            "id": "module-ClansDetailsRoutingModule-6cd54ab9e20897f16106127dc13bad6fbedf47541245a0ac74c63ce7e0065d544f5e5abffc460277ad98ac55e5c604dc24b3885f3dc1bfcae1ff676b7d107e58-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details/clans-details-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClansDetailsComponent } from './clans-details.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClansDetailsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansDetailsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsRoutingModule",
            "id": "module-ClansDetailsRoutingModule-2a99e7c8d8c4d607f224968a965329bfd18b451de63c34f939993e558ac2089fb83cd1ee798d393b2d0dc8c1aa8f3cc907567385db9ab9c21d31c51b23519b41-2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details-shell/clans-details-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../clans-details-dashboard/clans-details-dashboard.module').then(\\\n        (module) => module.ClansDetailsDashboardModule\\\n      )\"\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansDetailsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsRoutingModule",
            "id": "module-ClansDetailsRoutingModule-f50c6447c1aed5213f2738b8cd65f6b0006b8a65d3da2d712f92efd3c1fd170cf6abb05971a2dd07e5f95b4ee368301a2d524bd3c336cb9f73cce07681f3dfd2-3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/player/player-overview/player-overview-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport {PlayerOverviewComponent} from './player-overview.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PlayerOverviewComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansDetailsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchCuratedViewModule",
            "id": "module-ClanSearchCuratedViewModule-ea20091f8da45e04e5c817be28ff533d093c265b2fd492dc03ed397eaf3f7a75618f64cde8c4ee23d502118abc7e70f591fef51cf99eb86acd2e0e84e9f12af0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchCuratedViewComponent } from './clan-search-curated-view.component';\r\nimport { ClanDetailsModule } from '@features/clan-details/clan-details.module';\r\nimport { ClanSearchRoutingModule } from './clan-search-curated-view-routing.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchCuratedViewComponent],\r\n  imports: [CommonModule, ClanDetailsModule, ClanSearchRoutingModule, MatButtonModule]\r\n})\r\nexport class ClanSearchCuratedViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchCuratedViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailsModule"
                        },
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchModule",
            "id": "module-ClanSearchModule-9186d01fa88e50d0267f776cb6cfa302a3df57ed4da77aa66802566b188005787d8b9f2534acaa031b36fdcbc287840fcec1702c48e74a7b2bb60fa449c60959",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\nimport { ClanSearchRoutingModule } from './clan-search-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchComponent],\r\n  imports: [CommonModule, ClanSearchRoutingModule]\r\n})\r\nexport class ClanSearchModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchModule",
            "id": "module-ClanSearchModule-8f71738902c63f9592710ecedfd55a5be44fff8bcc6cca2eefe3b095e7878b1877c595ecf82d18291fa5640a294a95e9adb1c506ba4de1a0a94d94da01536fc8-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-shell/clan-search-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ClanSearchRoutingModule } from './clan-search-shell-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ClanSearchRoutingModule]\r\n})\r\nexport class ClanSearchModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-7b32126c4ac10ad4d41495d3e6340eb73a2ca569a768db1452896998b467bd8486530a74a9ae94928c5b7b6c02b192896507fd51aa3c65ad0ade622cbeb6d820",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-67d259252480c9078b4e2ca5d71e681d824d903b88c0110960d2ce7c22083fb4ff4c62c6460f464b3be5fda7ffc543c4534095842de5ab1e956b7b20fa9ad4f4-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n//import { ClanSearchViewComponent } from './clan-search-view.component';\r\nimport { ClanSearchCuratedViewComponent } from './clan-search-curated-view.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchCuratedViewComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-d870dcd5a65049a349deec15f2a64b5bb79cb344d9b7104455feb32ea638f31a264712264024177e015e1ed351930a397aab8d5ed19d0c3aa7fb629afd77630c-2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-shell/clan-search-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../clan-search-view/clan-search-view.module').then((module) => module.ClanSearchViewModule)\"\r\n  },\r\n  {\r\n    path: ':key',\r\n    loadChildren: () =>\r\n      \"import('../clan-search-curated-view/clan-search-curated-view.module').then(\\\n        (module) => module.ClanSearchCuratedViewModule\\\n      )\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-e09b35ec65798fc1093149615aa545fae564ee58accbc55dfbf8c0227ab975ded33f450aef9771c5454ee2f8440029f39d8ff3a8390c866e353eb675a3067928-3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClanSearchViewComponent } from './clan-search-view.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchViewComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchViewModule",
            "id": "module-ClanSearchViewModule-a76b2b5015ce3594a7df0ae6fef132aa0068785386fd7938a13db01d49c797a1ae87bac32f8e000dc29a0864aa3a870eecf1979dfcf8f370487746bd91435a54",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchViewComponent } from './clan-search-view.component';\r\nimport { ClanSearchRoutingModule } from './clan-search-view-routing.module';\r\nimport { ClanSearchAutocompleteComponent } from '../components/clan-search-autocomplete/clan-search-autocomplete.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ClanDetailsModule } from '../../clan-details/clan-details.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchViewComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ClanSearchRoutingModule,\r\n    ClanSearchAutocompleteComponent,\r\n    MatTooltipModule,\r\n    MatCardModule,\r\n    ClanDetailsModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class ClanSearchViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailsModule"
                        },
                        {
                            "name": "ClanSearchAutocompleteComponent"
                        },
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansHighestLightLevelCardModule",
            "id": "module-ClansHighestLightLevelCardModule-bdbe6cf1838e67cbda51e731ab8eea1741c1eed92a01b02afbb0f25f74f4fd7fa08d039336173cc4d25ee9f43849b93eca7e380ca1ccbbcbfe028065766420a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-highest-light-level-card/clans-highest-light-level-card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansHighestLightLevelCardComponent } from './clans-highest-light-level-card.component';\r\n\r\nimport { ClanMemberCardComponent } from '../components/clan-member-card/clan-member-card.component';\r\n\r\n@NgModule({\r\n  declarations: [ClansHighestLightLevelCardComponent],\r\n  exports: [ClansHighestLightLevelCardComponent],\r\n  imports: [CommonModule, ClanMemberCardComponent]\r\n})\r\nexport class ClansHighestLightLevelCardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansHighestLightLevelCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanMemberCardComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansHighestLightLevelCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansInactiveCardModule",
            "id": "module-ClansInactiveCardModule-322ebbb37fbf55a6b178c0354614c35b916e8a4f7675937d5cb48e1ccef633d96321d560b8354fa46b2db2b2229d67250824334688a7cbce364a4352b55832ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-inactive-card/clans-inactive-card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansInactiveCardComponent } from './clans-inactive-card.component';\r\nimport { ClanMemberCardComponent } from '../components/clan-member-card/clan-member-card.component';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\n\r\n@NgModule({\r\n  declarations: [ClansInactiveCardComponent],\r\n  exports: [ClansInactiveCardComponent],\r\n  imports: [CommonModule, ClanMemberCardComponent, PipesModule]\r\n})\r\nexport class ClansInactiveCardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansInactiveCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanMemberCardComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansInactiveCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRecentlyActiveCardModule",
            "id": "module-ClansRecentlyActiveCardModule-cc4781051352180bb756d7c2494f66445bbd4e95f192741b71309ddbfa165046cc2a6d869488f9da0b5b0967c35262b695f295ce1660edd2587d59d6d74a6654",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-recently-active-card/clans-recently-active-card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansRecentlyActiveCardComponent } from './clans-recently-active-card.component';\r\nimport { ClanMemberCardComponent } from '../components/clan-member-card/clan-member-card.component';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ClansRecentlyActiveCardComponent\r\n  ],\r\n  exports:[ClansRecentlyActiveCardComponent],\r\n  imports: [\r\n    CommonModule,ClanMemberCardComponent,PipesModule\r\n  ]\r\n})\r\nexport class ClansRecentlyActiveCardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansRecentlyActiveCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanMemberCardComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansRecentlyActiveCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-e8fbf0a9927e5ffe6c5691d2e62668309daf8e0da918b20bb03567178da8a25bb4f1876ade4fdc7e41275c9e661a7ac0c32de1874e7c510e95c3c6ed7b5c8af4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansRosterComponent } from './clans-roster.component';\r\nimport { ClansRosterService } from '../data-access/clans-roster.service';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { ClassCellComponent, ClassIconPipe } from '../components/class-cell/class-cell.component';\r\nimport { ClansRosterRoutingModule } from './clan-roster-routing.module.ts';\r\n\r\n@NgModule({\r\n  declarations: [ClansRosterComponent, ClassCellComponent, ClassIconPipe],\r\n  providers: [ClansRosterService],\r\n  exports: [ClansRosterComponent],\r\n  imports: [CommonModule, TableViewComponent, PipesModule, ClansRosterRoutingModule]\r\n})\r\nexport class ClansRosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansRosterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        },
                        {
                            "name": "ClassCellComponent"
                        },
                        {
                            "name": "ClassIconPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansRosterRoutingModule"
                        },
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-de6c5e03e0e585b2052b9fea4d6525c851f4f44ab3eff930cac8d90b82184d3042efecbf91937c3746313f9a4429a0eafdc6bb6426237848fb219b50db1b5569-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-shell/clans-roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ClansRosterRoutingModule } from './clans-roster-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ClansRosterRoutingModule]\r\n})\r\nexport class ClansRosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansRosterRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-8e9f89f35c847e639c23b447751324b882adce3e8a1137bbb28ad04b7c9e1baabbd5f320f8251af399dd2e8270dfcc38f1c34fd7f850a2e51fc0f016c60fe801-2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/config/clans-roster-shell/config.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ConfigRoutingModule } from './config-routing.module';\r\n\r\n@NgModule({\r\n  imports: [ConfigRoutingModule]\r\n})\r\nexport class ClansRosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ConfigRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterRoutingModule",
            "id": "module-ClansRosterRoutingModule-0a69d3b43601c1520fd1e87f631a4453bff929aed7228dedf2e03f481c8a93bcc6f6627cdce2ea197a725f9cf7bcc4f7d05e46029c5d2181f5225854dfd0a15c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-routing.module.ts.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClansRosterComponent } from './clans-roster.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClansRosterComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClansRosterRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterRoutingModule",
            "id": "module-ClansRosterRoutingModule-e7a27db68a3c10585e43ae05cfe2a087fb9536610d1891cf7daebb6f623393a0064d19252c86193a196e98b3ea7f27030bb3f90dc32f2c378df66b9c85596e79-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-shell/clans-roster-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => \"import('../clans-roster-list/clans-roster.module').then((module) => module.ClansRosterModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ClansRosterRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigModule",
            "id": "module-ConfigModule-fbec53b97b6b67759fefac601d1a7b255fdafc289da62027c04bc6b7abacad30e9cad6af57df9f27249df3391e57507974ea57cc291844086071a0e4550d3f7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/config/config.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ConfigComponent } from './config.component';\r\nimport { ClanConfigComponent } from './clan-config/clan-config.component';\r\nimport { ClanDetailsModule } from '../clan-details/clan-details.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [ConfigComponent, ClanConfigComponent],\r\n  exports: [ConfigComponent],\r\n  imports: [CommonModule, ClanDetailsModule, MatButtonModule]\r\n})\r\nexport class ConfigModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanConfigComponent"
                        },
                        {
                            "name": "ConfigComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDetailsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfigComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigModule",
            "id": "module-ConfigModule-59a3aa6cc5dbd416340be8bf73c8e80e8109a0708433f8f2dfa86c85136d78ba457fc62295f580f73d2dc2a3993be66ca870c5b80a8b1c858f5d093c8c2c1ca5-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/config/config.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ConfigComponent } from './config.component';\r\nimport { ConfigRoutingModule } from './config-routing.module';\r\nimport { ConfigModule as ConfigFeatureModule } from '../../features/config/config.module';\r\n\r\n@NgModule({\r\n  declarations: [ConfigComponent],\r\n  imports: [CommonModule, ConfigRoutingModule, ConfigFeatureModule]\r\n})\r\nexport class ConfigModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfigComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ConfigRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigRoutingModule",
            "id": "module-ConfigRoutingModule-8d94eb353f1506dcf3d18b4a51b7d8c783e08b4f37a88135779d82e0de0eaa455c3c6f10afbf1b2d5606c02925cff1db74f4cb3962d42b7c6b2c5c1e0296c52c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/config/config-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ConfigComponent } from './config.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ConfigComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ConfigRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigRoutingModule",
            "id": "module-ConfigRoutingModule-3169179abac36e720e0a28736fc67e6c40090850fb5801afa8533902802de6132540494b3f34384bb22d29a58008651cae20ece9d7d08a2f502d22bc18f26b89-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/config/clans-roster-shell/config-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ConfigComponent } from '../config.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ConfigComponent\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class ConfigRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-3993d2ef1e932090d85562f7f276de26c0e0a2a66e3e5110868848ff130d546b5766e869dfed36ab95fe8bcb31a451d1b4e1dba94af14aed3e927e3ba86cf16f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AppConfig } from './config/app-config';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ApiKeyInterceptor } from './interceptors/apikey.interceptor';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { coreReducers, coreEffects, metaReducers } from './core.state';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { Configuration } from 'bungie-api-angular';\r\nimport { ClanDbModule } from '@destiny/data/clan';\r\nimport { IdbKeyValService } from '@destiny/data/storage';\r\nimport { LayoutModule } from './layout/layout.module';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ClanProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\nimport { locationProvider, LocationToken } from './injection-tokens/location-token';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { windowProvider, WindowToken } from 'projects/data/src/lib/injection-tokens/window-token';\r\nimport { BungieInfoService } from 'projects/data/src/lib/clan/bungie-info/bungie-info.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    ClanDbModule,\r\n    LayoutModule,\r\n    MatDialogModule,\r\n    StoreModule.forRoot(coreReducers, { metaReducers }),\r\n    EffectsModule.forRoot(coreEffects),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\r\n  ],\r\n  providers: [\r\n    ClanMembersService,\r\n    IdbKeyValService,\r\n    { provide: LocationToken, useFactory: locationProvider },\r\n    { provide: WindowToken, useFactory: windowProvider },\r\n    {\r\n      provide: ClanProfileService,\r\n      useFactory: (canDB) => {\r\n        return new ClanProfileService(canDB, environment.apiKey);\r\n      },\r\n      deps: [ClanDatabase]\r\n    },\r\n    {\r\n      provide: BungieInfoService,\r\n      useFactory: (canDB) => {\r\n        return new BungieInfoService(canDB, environment.apiKey);\r\n      },\r\n      deps: [ClanDatabase]\r\n    },\r\n    { provide: AppConfig, useValue: environment },\r\n    // {\r\n    //   provide: Configuration,\r\n    //   useFactory: () => new Configuration(\r\n    //     {\r\n\r\n    //       //basePath: environment.apiUrl,\r\n    //       //accessToken: authService.getAccessToken.bind(authService)\r\n    //     }\r\n    //   ),\r\n    //   multi: false\r\n    // },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ApiKeyInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CoreModule {\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: CoreModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CoreModule is already loaded. Import only in AppModule');\r\n    }\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiKeyInterceptor"
                        },
                        {
                            "name": "ClanMembersService"
                        },
                        {
                            "name": "IdbKeyValService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDbModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CuratedActivitiesDashboardModule",
            "id": "module-CuratedActivitiesDashboardModule-c33ac8786bea3a6fa29a791650f7e1b6c3c92de00b9bd62b077778afdefa8ff6af1099279fe1d8e5d9bf21b23034f489915d02cc078afba77fe5df5f1d276012",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/curated-activities-dashboard/curated-activities-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CuratedActivitiesDashboardComponent } from './curated-activities-dashboard.component';\r\nimport { CuratedActivitiesDashboardRoutingModule } from './curated-activities-dashboard-routes.module';\r\nimport { ActivityCardDetailsComponent } from '../components/activity-card-details/activity-card-details.component';\r\n\r\n@NgModule({\r\n  declarations: [CuratedActivitiesDashboardComponent],\r\n  imports: [CommonModule, ActivityCardDetailsComponent, CuratedActivitiesDashboardRoutingModule]\r\n})\r\nexport class CuratedActivitiesDashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CuratedActivitiesDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActivityCardDetailsComponent"
                        },
                        {
                            "name": "CuratedActivitiesDashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CuratedActivitiesDashboardRoutingModule",
            "id": "module-CuratedActivitiesDashboardRoutingModule-0cd8a54aab21daf4cb4990ba913fc204b0ca21a89af6fde914131e89627a42b028821982db1f2c3ae9f709be5bc71436e6b9d0a2ad35a5cd334c664aaaf00bcf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/activities/curated-activities-dashboard/curated-activities-dashboard-routes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CuratedActivitiesDashboardComponent } from './curated-activities-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CuratedActivitiesDashboardComponent\r\n  }\r\n];\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class CuratedActivitiesDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-9a6a6a7ff0ee47e8544017b53d592abc6aed4c40f5a9d6936236af7ed7c402b18b30ec5ae45d28e3ba0bb8f9a9772ba73c4fee943f3266bebc910982ed8e9e78",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResponsiveSidebarDirective } from './responsive-sidebar.directive';\r\n\r\n@NgModule({\r\n  declarations: [ResponsiveSidebarDirective],\r\n  exports: [ResponsiveSidebarDirective],\r\n  imports: [CommonModule]\r\n})\r\nexport class DirectivesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResponsiveSidebarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResponsiveSidebarDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconsModule",
            "id": "module-IconsModule-6d047f7034bef873f0fdcfe67bc71f3b91a83acb6e70a4831722e926045ca17722ff1a52b4426bc79529901448a5a2018c806e4b599ec9b9f940ad2660ee156e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/icons/icons.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MemberTypeComponent } from './member-type.component';\r\nimport { PipesModule } from '../pipes/pipes.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [MemberTypeComponent],\r\n  exports: [MemberTypeComponent],\r\n  imports: [CommonModule, PipesModule, MatIconModule]\r\n})\r\nexport class IconsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MemberTypeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MemberTypeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconTestModule",
            "id": "module-IconTestModule-b83fc17e6688681d205facbd77e82b1e18db76ecfd511b35e01fe04e2e34fee75b677ecd09c1de49e875fa412a258df79f5a952fb50a5f1b9bad0541da4f6cea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/icons/member-type.stories.ts",
            "methods": [],
            "sourceCode": "import { moduleMetadata } from '@storybook/angular';\r\n/// import { ActivityGridComponent } from './activity-grid.component';\r\n// import { ActivityGridModule } from './activity-grid.module';\r\n// import {MOCK_GRID_ITEMS} from './_MOCK_GRID_ITEMS';\r\n// import { ClanWeeklyProgressComponent } from './clan-weekly-progress.component';\r\n// import { ClanWeeklyProgressModule } from './clan-weekly-progress.module';\r\n//import { MOCK_WEEKLY_PROGRESS } from './_MOCK_WEEKLY_PROGRESS';\r\nimport { StorybookModule } from '../storybook/storybook.module';\r\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from './register-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconsModule } from './icons.module';\r\n\r\n@Component({\r\n  selector: 'lib-icons',\r\n  template: `\r\n    <lib-member-type [type]=\"1\"></lib-member-type>\r\n    <lib-member-type [type]=\"2\"></lib-member-type>\r\n    <lib-member-type [type]=\"3\"></lib-member-type>\r\n    <lib-member-type [type]=\"4\"></lib-member-type>\r\n  `\r\n})\r\nclass IconComponent {\r\n  constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  exports: [IconComponent],\r\n  imports: [CommonModule, MatIconModule, HttpClientModule, IconsModule]\r\n})\r\nclass IconTestModule {}\r\n\r\nexport default {\r\n  title: 'Icons / Member Type',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [IconTestModule, StorybookModule]\r\n    })\r\n  ]\r\n};\r\n\r\nexport const base = () => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n});\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-b4277957e853989976b3d7e083b93924af71181126f2afa71f2068835c19211100dc90ea32d739bf90a5b12bddef17b8a28045cc605c5ca1d29d1b7692e925d2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WrapperComponent } from './wrapper/wrapper.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NotificationsComponent } from './notifications/notifications.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { DirectivesModule } from '@destiny/components/shared/directives';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { SettingsMenuComponent } from './settings-menu/settings-menu.component';\r\n@NgModule({\r\n  declarations: [WrapperComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    NotificationsComponent,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    DirectivesModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    SettingsMenuComponent\r\n  ]\r\n})\r\nexport class LayoutModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "SettingsMenuComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-2852cc65df4773f5302d3e9c9387c88fae2a402613cf6cd62a4c3bfdcaf913c8fc16d4476b6664f4e998ac63c3a1ed80a39f29e1f8a1926b010be383d9b63756",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n// import { DateAgoPipe } from './date-ago.pipe';\r\n// import { ClassTypeTextPipe } from './class-type/class-type-text.pipe';\r\n// import { RaceTypeTextPipe } from './race-type/race-type-text.pipe';\r\n// import { GenderTypeTextPipe } from './gender-type/gender-type-text.pipe';\r\n// import { RaidReportUrlPipe } from './raid-report-url/raid-report-url.pipe';\r\n// import { DestinyTrackerUrlPipe } from './destiny-tracker-url/destiny-tracker-url.pipe';\r\n// import { BungieProfileUrlPipe } from './bungie-profile-url/bungie-profile-url.pipe';\r\n// import { RaidReportProfileUrlPipe } from './raid-report-url/raid-report-profile-url.pipe';\r\n// import { PlaytimePipe, PlaytimeMillisecondsPipe } from './playtime/playtime.pipe';\r\n// import { DungeonReportUrlPipe } from './dungeon-report-url/dungeon-report-url.pipe';\r\n// import { DungeonReportProfileUrlPipe } from './dungeon-report-url/dungeon-report-profile-url.pipe';\r\nimport { BungieDatePipe } from './bungie-date/bungie-date.pipe';\r\nimport { BungieDateTimePipe } from './bungie-date/bungie-date-time.pipe';\r\nimport { MemberTypePipe } from './member-type/member-type.pipe';\r\n// import { SortByClassPipe } from './sortByClass/sort-by-class.pipe';\r\n// import { RaidCompletionTotalPipe } from './raid-completion-total/raid-completion-total.pipe';\r\n// import { MetricTotalPipe } from './metric-total/metric-total.pipe';\r\n// import { InCollectionsPipe } from './in-collections/in-collections.pipe';\r\n// import { InCollectionsTotalPipe } from './in-collections/in-collections-total.pipe';\r\n// import { D2ChecklistUrlPipe } from './d2-checklist-url/d2-checklist-url.pipe';\r\n// import { TriumphReportPipe } from './triumph-report/triumph-report.pipe';\r\nimport { PlaytimeMillisecondsPipe, PlaytimePipe } from './playtime/playtime.pipe';\r\nimport { BungieDisplayNamePipe } from './bungie-display-name/bungie-display-name.pipe';\r\n\r\nconst pipes = [\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  PlaytimePipe,\r\n  PlaytimeMillisecondsPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n];\r\n\r\n@NgModule({\r\n  providers: [...pipes],\r\n  declarations: [...pipes],\r\n  exports: [...pipes],\r\n  imports: [CommonModule]\r\n})\r\nexport class PipesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BungieDatePipe"
                        },
                        {
                            "name": "BungieDateTimePipe"
                        },
                        {
                            "name": "MemberTypePipe"
                        },
                        {
                            "name": "PlaytimeMillisecondsPipe"
                        },
                        {
                            "name": "PlaytimePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BungieDatePipe"
                        },
                        {
                            "name": "BungieDateTimePipe"
                        },
                        {
                            "name": "MemberTypePipe"
                        },
                        {
                            "name": "PlaytimeMillisecondsPipe"
                        },
                        {
                            "name": "PlaytimePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlayerDetailModule",
            "id": "module-PlayerDetailModule-f84a047f1bf3628173cdcee06e1dfd893d4cd4a2fd4c4f0e9a81f4026fac5fc0776cd4b9c2d5300d4d01bbe02c09458d3c44129481445a9443781a7be8b04ee4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/player/player-detail/player-detail.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PlayerDetailComponent } from './player-detail.component';\r\n\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { BungieProfileUrlPipe } from '@destiny/components/pipes/bungie-profile-url';\r\nimport { RaidReportProfileUrlPipe } from '@destiny/components/pipes/raid-report-url';\r\nimport { DungeonReportProfileUrlPipe } from '@destiny/components/pipes/dungeon-report-url';\r\nimport { DestinyTrackerUrlPipe } from '@destiny/components/pipes/destiny-tracker-url';\r\nimport { D2ChecklistUrlPipe } from '@destiny/components/pipes/d2-checklist-url';\r\nimport { TriumphReportPipe } from '@destiny/components/pipes/triumph-report';\r\n\r\n@NgModule({\r\n  declarations: [PlayerDetailComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    RouterModule,\r\n    MatIconModule,\r\n    BungieProfileUrlPipe,\r\n    RaidReportProfileUrlPipe,\r\n    DungeonReportProfileUrlPipe,\r\n    DestinyTrackerUrlPipe,\r\n    D2ChecklistUrlPipe,\r\n    TriumphReportPipe\r\n  ]\r\n})\r\nexport class PlayerDetailModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PlayerDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BungieProfileUrlPipe"
                        },
                        {
                            "name": "D2ChecklistUrlPipe"
                        },
                        {
                            "name": "DestinyTrackerUrlPipe"
                        },
                        {
                            "name": "DungeonReportProfileUrlPipe"
                        },
                        {
                            "name": "RaidReportProfileUrlPipe"
                        },
                        {
                            "name": "TriumphReportPipe"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlayerOverviewModule",
            "id": "module-PlayerOverviewModule-cd232a79682da75801619b7eca506f7476a369df58eefaa4703bc0328971e0b6a516867e854648f1e85bf8ee910aa8de4617c11f4d7f0b61814af2fb0201b800",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/player/player-overview/player-overview.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PlayerOverviewComponent } from './player-overview.component';\r\nimport { ClansDetailsRoutingModule } from './player-overview-routes.module';\r\n\r\n@NgModule({\r\n  declarations: [PlayerOverviewComponent],\r\n  imports: [CommonModule, ClansDetailsRoutingModule]\r\n})\r\nexport class PlayerOverviewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PlayerOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansDetailsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlayerShellModule",
            "id": "module-PlayerShellModule-1bca8735793cd1779dc7c1eee995fdc72c4614f69c3efdc88c6b22efa4ea4359ff7434878e5410704bf025c9ceb252037fe5719f13611dc224cf64d582199d3f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/player/player-shell/player-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PlayerShellRoutingModule } from './player-shell-routing.module';\r\nimport { PlayerDetailModule } from '../player-detail/player-detail.module';\r\nimport { CachedProfileService } from '@destiny/data/profile';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { IdbKeyValService } from '@destiny/data/storage';\r\nimport { PlayerService } from '../data-access/player.service';\r\n@NgModule({\r\n  declarations: [],\r\n  providers: [\r\n    PlayerService,\r\n    {\r\n      provide: CachedProfileService,\r\n      useFactory: (store) => {\r\n        return new CachedProfileService(store, environment.apiKey);\r\n      },\r\n      deps: [IdbKeyValService]\r\n    }\r\n  ],\r\n  imports: [PlayerShellRoutingModule, PlayerDetailModule]\r\n})\r\nexport class PlayerShellModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PlayerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PlayerDetailModule"
                        },
                        {
                            "name": "PlayerShellRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlayerShellRoutingModule",
            "id": "module-PlayerShellRoutingModule-71b5e912f6302cc234f984ea59901ccc41d15d12687d467f8fa2058b745a790ff6ddcb74f1fb449c69c64aa05713db15d9f7a881dfd7a7517418cfc84b640bb7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/player/player-shell/player-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PlayerDetailComponent } from '../player-detail/player-detail.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: ':player-id',\r\n    component: PlayerDetailComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () =>\r\n          \"import('../player-overview/player-overview.module').then((module) => module.PlayerOverviewModule)\"\r\n      }\r\n    ]\r\n    //loadChildren: () => import('../player-detail/player-detail.module').then((module) => module.PlayerDetailModule)\r\n  }\r\n  // {\r\n  //   path: '',\r\n  //   loadChildren: () =>\r\n  //     import('../clans-details-dashboard/clans-details-dashboard.module').then(\r\n  //       (module) => module.ClansDetailsDashboardModule\r\n  //     )\r\n  // }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PlayerShellRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityModule",
            "id": "module-RecentActivityModule-cff434130beed1a018851793ca342c2dcb9c2556030a751a3225e3f623c40a9f1758359eac8296bbab12d6eeb78a7e0c820d7beb13be9b74d69055f4b6609dcf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RecentActivityComponent } from './recent-activity.component';\r\nimport { PipesModule } from '@destiny/components/pipes';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { RecentActivityRoutingModule } from './clan-roster-routing.module.ts';\r\n\r\n@NgModule({\r\n  declarations: [RecentActivityComponent],\r\n  exports: [RecentActivityComponent],\r\n  imports: [CommonModule, TableViewComponent, PipesModule, RecentActivityRoutingModule]\r\n})\r\nexport class RecentActivityModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecentActivityComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecentActivityRoutingModule"
                        },
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RecentActivityComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityModule",
            "id": "module-RecentActivityModule-85de2887800c4049af04118f290bdb58c912e2562dd273278e0260e1a37d1cdfd24b6763974064b6953279c2ab7eff230a97a74b9bb6aec1ea8975e23d1e69fc-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-shell/recent-activity.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RecentActivityRoutingModule } from './recent-activity-routing.module';\r\n\r\n@NgModule({\r\n  imports: [RecentActivityRoutingModule]\r\n})\r\nexport class RecentActivityModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecentActivityRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityRoutingModule",
            "id": "module-RecentActivityRoutingModule-320a8fc4050cc00c23f08cd755b01016c093774df27364d75f26feae506dea8de323c3b7b465545b64eda3161f4ccea7e09e0cda8f4dc13c7dbf36e7769a1931",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/clan-roster-routing.module.ts.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RecentActivityComponent } from './recent-activity.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RecentActivityComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RecentActivityRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecentActivityRoutingModule",
            "id": "module-RecentActivityRoutingModule-b3e375eeadf45fe77676b87e9ee9f15fe7e9d391071cd8f7e996770057c10c10a282a3e3ddeed674816d2c3209d7569eb36566874bf410a6f371e5f5c9e6ead2-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-shell/recent-activity-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => \"import('../recent-activity-dashboard/recent-activity.module').then((module) => module.RecentActivityModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class RecentActivityRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RenderedViewModule",
            "id": "module-RenderedViewModule-40973cac22f4c243eddeb3850b7f29855894d00c21c0663dec111c61d1efc866fa71dc22b7186a1092e3069100e88d54bbebc59c5b04dbba639ec0948b575e85",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RenderedViewComponent } from './rendered-view.component';\r\nimport { RenderedViewDynamicCompDirective } from './rendered-view-component.directive';\r\n\r\n@NgModule({\r\n  declarations: [RenderedViewComponent, RenderedViewDynamicCompDirective],\r\n  exports: [RenderedViewComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class RenderedViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        },
                        {
                            "name": "RenderedViewDynamicCompDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SandboxRoutingModule",
            "id": "module-SandboxRoutingModule-20098ce588809df090e8dc8ef3aeb801112e4d692bba7b5de28ba9d996b87d4b25a18a810a4610cb342b15b8e48bf25b850aea42374a4f30d95c4e9cb1fd6c31",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/sandbox/sandbox-shell/sandbox-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LookupComponent } from '../lookup/lookup.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LookupComponent\r\n    //loadChildren: () => import('../clans-roster-list/clans-roster.module').then((module) => module.ClansRosterModule)\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class SandboxRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SandboxShellModule",
            "id": "module-SandboxShellModule-4407e209290fe2749e785354d4ce843691161890a827c8b7e9b248a7d4e127e0d47068f644efe2efab680d1e53f4daf2ebe682cef8149c9af0c537b2fb15a942",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/sandbox/sandbox-shell/sandbox-shell.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SandboxRoutingModule } from './sandbox-shell-routing.module';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, SandboxRoutingModule, RouterModule]\r\n})\r\nexport class SandboxShellModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SandboxRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealDetailsModule",
            "id": "module-SealDetailsModule-a2de92749f3f02d6741f752cb3b0e58119a63d913b412ddd0fa9c4e541c6fbaf02a9bc50643863cee76a419c2feb67499c75e2b50521070c5c8684e91ee4a637",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SealDetailsComponent } from './seal-details.component';\r\nimport { SealsDashboardRoutingModule } from './seal-detail-routing.module';\r\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [SealDetailsComponent],\r\n  imports: [CommonModule, SealsDashboardRoutingModule, TableViewComponent, MatIconModule, MatButtonModule, RouterModule]\r\n})\r\nexport class SealDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SealDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SealsDashboardRoutingModule"
                        },
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsDashboardModule",
            "id": "module-SealsDashboardModule-fbd129a2691c0c705ec037183827cdb2845eae30c2f5735bdf0e09073e4095dceaf6aa765932f0c538bcdf71bbbc6169358355c43260519b1f5de2872ae0b9ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SealsDashboardComponent } from './seals-dashboard.component';\r\nimport { SealsDashboardRoutingModule } from './seals-dashboard-routing.module';\r\nimport { SealsListComponent } from '../components/seals-list/seals-list.component';\r\n\r\n@NgModule({\r\n  declarations: [SealsDashboardComponent],\r\n  imports: [CommonModule, SealsDashboardRoutingModule, SealsListComponent]\r\n})\r\nexport class SealsDashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SealsDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SealsDashboardRoutingModule"
                        },
                        {
                            "name": "SealsListComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsDashboardRoutingModule",
            "id": "module-SealsDashboardRoutingModule-f797166f24891cab1959b9773b9aee6fff1b81d3aba7a455037920bb8feb54e49201b1b0efb676f17a34961d16fabaea6ea67398afea44804bc7965e7b1f7650",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SealsDashboardComponent } from './seals-dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SealsDashboardComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SealsDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsDashboardRoutingModule",
            "id": "module-SealsDashboardRoutingModule-b4346c4b8742c9c9fcf14793ee080ae7267031cf8b472401534db7fdc9d9ea1a0100f4b31873a9d0abd947c196c7662abf64970a301cb23bb9a80a09fdc72ee6-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-detail-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SealDetailsComponent } from './seal-details.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SealDetailsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SealsDashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsModule",
            "id": "module-SealsModule-8377a1da1362694fb4b76e0882ba61458e21df0f3ea7d4dbd0220cd5352fbb20f6473c88a01001bf6812617e5f5b23ff42ceddb9d5c1ece127227ced179fc1d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-shell/seals.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SealsRoutingModule } from './seals-routing.module';\r\n\r\n@NgModule({\r\n  imports: [SealsRoutingModule]\r\n})\r\nexport class SealsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SealsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SealsRoutingModule",
            "id": "module-SealsRoutingModule-4756ca346e8f60b37379c15fdf25491183d9e493c4c005793248027c2b251e7e3eb6a4fca2dab711a7f146abca9e892dc34fff418f82fd5ef2dcb0fb215efdde",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/seals/seals-shell/seals-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('../seals-dashboard/seals-dashboard.module').then((module) => module.SealsDashboardModule)\"\r\n  },\r\n  {\r\n    path: ':hash',\r\n    loadChildren: () => \"import('../seal-details/seal-details.module').then((module) => module.SealDetailsModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] })\r\nexport class SealsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-00d194df6aa500fd7094e03b67a5faab8d03b1d4428840c770acd5fd3591bb2de97964be02f4304ef77c76741f9649d0f44ad1d19c71fdc4ca69b518e03ff0f7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookModule",
            "id": "module-StorybookModule-a722b52f5c0ee0f0c71251a61a0a3d843fbfeee5b90202d74ddc7c980c544a8cafc5ded7dd566ff1f37c31a294afc16234f8ddb968c8d0fd4563f83938eccf73",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/storybook/storybook.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { StorybookService } from './storybook.service';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from '../icons/register-icons';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    providers: [],\r\n    imports: [CommonModule, BrowserAnimationsModule, HttpClientModule]\r\n})\r\nexport class StorybookModule {\r\n    constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n        registerIcons(iconRegistry, domSanitizer);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACTIVITY_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "ACTIVITY_MODE_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ProfileRecentActivity>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "ACTIVITY_MODE_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ProfileRecentActivity>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        getBungieDisplayName(a.profile).toLowerCase() < getBungieDisplayName(b.profile).toLowerCase() ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     comparator: (a, b) => ((a.profileActivity.stats.lastWeek || 0) < (b.profileActivity.stats.lastWeek || 0) ? -1 : 1)\r\n  //   }\r\n  // ],\r\n\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastMonth || 0) < (b.profileActivity.stats.lastMonth || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastNinetyDays || 0) < (b.profileActivity.stats.lastNinetyDays || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastLogin',\r\n  //   {\r\n  //     label: 'Last Login',\r\n  //     comparator: (a, b) =>\r\n  //       (new Date(a.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900)) <\r\n  //       (new Date(b.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900))\r\n  //         ? -1\r\n  //         : 1\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "ACTIVITY_MODE_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<\r\n  string,\r\n  ViewerMetadata<ProfileRecentActivity, ActivityModeViewContext>\r\n>([\r\n  // [\r\n  //   'playerName',\r\n  //   {\r\n  //     label: 'Display Name',\r\n  //     isSticky: true,\r\n  //     plainText: (item: ProfileRecentActivity) => `${item.member?.destinyUserInfo?.displayName}`,\r\n  //     render: (item: ProfileRecentActivity) => {\r\n  //       return {\r\n  //         text: `${item.member?.destinyUserInfo?.displayName}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: ProfileRecentActivity) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ProfileRecentActivity) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // TODO: Add back\r\n  // [\r\n  //   'dateLastPlayed',\r\n  //   {\r\n  //     label: 'Last Played',\r\n  //     plainText: (item: ProfileRecentActivity, context: ActivityModeViewContext) =>\r\n  //       `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ActivityModeViewContext) => {\r\n  //       return {\r\n  //         text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "ACTIVITY_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ClanMemberProfile>>([\r\n\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     comparator: (a, b) =>\r\n  //       a.profile?.profile?.data.userInfo.displayName?.toLowerCase() <\r\n  //       b.profile?.profile?.data.userInfo.displayName?.toLowerCase()\r\n  //         ? -1\r\n  //         : 1\r\n  //   }\r\n  // ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        compare(getBungieDisplayName(a.profile).toLowerCase(), getBungieDisplayName(b.profile).toLowerCase())\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "ACTIVITY_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  // [\r\n  //   'playerName',\r\n  //   {\r\n  //     label: 'Display Name',\r\n  //     isSticky: true,\r\n  //     plainText: (item: ClanMemberProfile) => `${item.member?.destinyUserInfo?.displayName}`,\r\n  //     render: (item: ClanMemberProfile) => {\r\n  //       return {\r\n  //         text: `${item.member?.destinyUserInfo?.displayName}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      isSticky: true,\r\n      plainText: (item: ClanMemberProfile) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanMemberProfile) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ClanMemberProfile) => `${item.clan.clanName}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "addClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string; clanName: string; clanTag: string }>())"
            },
            {
                "name": "addNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(`${base} Add Notification`, props<{ notification: Notification }>())"
            },
            {
                "name": "ALL_CLANS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[DOD, DOD_PC]"
            },
            {
                "name": "AND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' AND '"
            },
            {
                "name": "APP_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'D2DASH-'"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/member-type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n})"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Manifest] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Clans] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ClansMemberPorfile] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Notifications] - '"
            },
            {
                "name": "baseConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  D2DASHBOARD_ACKNOWLEDGE_OFFLINE: 'D2DASHBOARD_ACKNOWLEDGE_OFFLINE',\r\n  PROFILE_UPDATING_EXP_MINUTES: 180,\r\n  MEMBER_RECENT_ACTIVITY_EXP_MINUTES: 360,\r\n  CURRENT_SEALS_HASH: 616318467\r\n}"
            },
            {
                "name": "baseUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://dungeon.report'"
            },
            {
                "name": "baseUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://raid.report'"
            },
            {
                "name": "Children",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CLAN_LEVEL_HASH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/hashes/clan-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'584850370'"
            },
            {
                "name": "CLAN_ROSTER_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastWeek)}`\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastMonth)}`\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastNinetyDays)}`\r\n  //   }\r\n  // ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      text: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile?.data?.dateLastPlayed as unknown as Date)}`\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ClanRosterItem>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.destinyUserInfo?.displayName?.toLowerCase() < b.member?.destinyUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.bungieNetUserInfo?.displayName?.toLowerCase() <\r\n        b.member?.bungieNetUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      comparator: (a, b) => (a.member?.destinyUserInfo?.membershipType < b.member?.destinyUserInfo?.membershipType ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Unique Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.uniqueName?.toLowerCase() <\r\n        b.bungieInfo?.uniqueName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  // ----\r\n  [\r\n    'psnDisplayName',\r\n    {\r\n      label: 'PSN Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.psnDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.psnDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'xboxDisplayName',\r\n    {\r\n      label: 'XBox Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.xboxDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.xboxDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'steamDisplayName',\r\n    {\r\n      label: 'Steam Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.steamDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.steamDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n\r\n  [\r\n    'twitchDisplayName',\r\n    {\r\n      label: 'Twitch Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.twitchDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.twitchDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n\r\n  // ----\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: 'Power Level',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus <\r\n        b.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'rank',\r\n    {\r\n      label: 'Guardian Rank',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data?.currentGuardianRank < b.profile?.profile?.data?.currentGuardianRank ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeRank',\r\n    {\r\n      label: 'Lifetime Guardian Rank',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data?.lifetimeHighestGuardianRank < b.profile?.profile?.data?.lifetimeHighestGuardianRank ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.activeScore < b.profile?.profileRecords?.data?.activeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.lifetimeScore < b.profile?.profileRecords?.data?.lifetimeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName < b.clan.clanName ? -1 : 1)\r\n    }\r\n  ],\r\n\r\n  [\r\n    'joinDate',\r\n    {\r\n      label: 'Join Date',\r\n      comparator: (a, b) => (new Date(a.member?.joinDate) < new Date(b.member?.joinDate) ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Date Last Played',\r\n      comparator: (a, b) =>\r\n        new Date(a.profile?.profile.data.dateLastPlayed) < new Date(b.profile?.profile.data.dateLastPlayed) ? -1 : 1\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<ClanRosterItem, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      //  labelClass: 'text-header-center',\r\n      plainText: (item: ClanRosterItem) => `${getMembershipType(item.member.destinyUserInfo.membershipType)}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        //        styles: {},\r\n        classList: ['text-center'],\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member?.destinyUserInfo?.membershipType || 0 }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      labelClass: '',\r\n      isSticky: true,\r\n      plainText: (item: ClanRosterItem) => `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Unique Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.uniqueName || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.uniqueName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'psnName',\r\n    {\r\n      label: 'PSN Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.psnDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.psnDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'xboxName',\r\n    {\r\n      label: 'XBox Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.xboxDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.xboxDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'steamName',\r\n    {\r\n      label: 'Steam Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.steamDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.steamDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'twitchName',\r\n    {\r\n      label: 'Twitch Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.twitchDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.bungieInfo?.twitchDisplayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanRosterItem) => {\r\n        const characterIds = item.profile?.profile?.data?.characterIds;\r\n        return {\r\n          classList: 'characters-cell',\r\n          children: characterIds?.map((id) => {\r\n            return {\r\n              classList: 'character-cell',\r\n              component: ClassCellComponent,\r\n              data: {\r\n                characterHash: id,\r\n                profile: item.profile\r\n              }\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: 'power-cell',\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'rank',\r\n    {\r\n      label: 'Guardian Rank',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profile?.data?.currentGuardianRank}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profile?.data?.currentGuardianRank}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeRank',\r\n    {\r\n      label: 'Lifetime Guardian Rank',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profile?.data?.lifetimeHighestGuardianRank}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profile?.data?.lifetimeHighestGuardianRank}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileRecords?.data?.activeScore}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileRecords?.data?.lifetimeScore}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clan',\r\n    {\r\n      label: 'Clan',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.clan.clanName}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${item.clan.clanName}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'bungieProfileCreation',\r\n    {\r\n      label: 'Bungie Join Date',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.bungieInfo?.firstAccess || (new Date() as unknown as Date))}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.bungieInfo?.firstAccess || (new Date() as unknown as Date))}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
            },
            {
                "name": "ClanConfigAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ClanConfig>",
                "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
            },
            {
                "name": "CLANS_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'clans'"
            },
            {
                "name": "ClansMembersProfilesAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ClanMemberProfileWID>",
                "defaultValue": "createEntityAdapter<ClanMemberProfileWID>({\r\n    selectId: (cc: ClanMemberProfileWID) => cc.id,\r\n    sortComparer: false\r\n  })"
            },
            {
                "name": "ClansMembersProfilesReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialClanMemberProfileState,\r\n  on(initializeClanMemberProfiles, (state): ClansMembersProfilesState => ({ ...state, isLoading: true })),\r\n  on(\r\n    setClanMemberProfiles,\r\n    (state, { clanMemberProfiles }): ClansMembersProfilesState =>\r\n      ClansMembersProfilesAdapter.setAll(clanMemberProfiles, { ...state, isLoading: false })\r\n  )\r\n)"
            },
            {
                "name": "ClansReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId, clanName, clanTag }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      return ClanConfigAdapter.upsertOne({ clanId, clanName, clanTag, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n  on(resetClan, (state, { clanId, clanName, clanTag }) => {\r\n    return ClanConfigAdapter.upsertOne({ clanId, clanName, clanTag, ...DefaultClanConfig }, { ...state });\r\n  }),\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
            },
            {
                "name": "Components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "convertToMinutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(totalSeconds) => String(Math.floor(totalSeconds / 60))"
            },
            {
                "name": "coreEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ManifestEffects, ClansEffects, ClansMembersProfilesEffects]"
            },
            {
                "name": "coreReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer,\r\n  notifications: NotificationReducer,\r\n  clansMembersProfiles: ClansMembersProfilesReducer\r\n}"
            },
            {
                "name": "CURATED_ACTIVITIES_ALL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedActivity[]",
                "defaultValue": "[\r\n  ...CURATED_ACTIVITIES_EXOTIC_MISSIONS.activities,\r\n  ...CURATED_ACTIVITIES_DUNGEONS.activities,\r\n  ...CURATED_ACTIVITIES_RAIDS.activities,\r\n  ...CURATED_ACTIVITIES_PINNACLE.activities\r\n]"
            },
            {
                "name": "CURATED_ACTIVITIES_DUNGEONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.dungeons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedActivityGroup",
                "defaultValue": "{\r\n  title: 'Dungeons',\r\n  activities: [\r\n    {\r\n      hash: 1262462921,\r\n      metrics: [\r\n        3702217360, //Spire of the Watcher Completions\r\n        411086447, //Spire of the Watcher Flawless Solo Completions\r\n        4002846192 //Spire of the Watcher Flawless Completions\r\n      ],\r\n      collections: [\r\n        3558330464 //3558330464\r\n        // 4174431791\r\n      ],\r\n      records:[\r\n        3006836031, //InSPIREd Posse\r\n        958830294, //Resident Vexpert\r\n      ]\r\n    },\r\n    {\r\n      // Duality\r\n      hash: 2823159265,\r\n      metrics: [\r\n        3862075762, // Completions\r\n        1034442994, // flawless\r\n        1084707005 , // flawless solo\r\n      ],\r\n      collections: [\r\n        467760883, //Heartshadow\r\n        1047374873 //Mandate of Strength\r\n      ],\r\n      records:[\r\n        2388189655, //United in Secrecy\r\n        196842574, //Master Thoughtstealer\r\n      ]\r\n    },\r\n    {\r\n      // Grasp\r\n      hash: 4078656646,\r\n      metrics: [\r\n        451157118, // Completions\r\n        2269915270, // flawless\r\n        3765286137 , // flawless solo\r\n      ],\r\n      collections: [\r\n        4027219968, // Galler\r\n        196980257 // Gallarswift\r\n      ],\r\n      records:[\r\n        2411018844, // Master\r\n      ]\r\n    },\r\n    {\r\n      // Prophecy\r\n      hash: 4148187374,\r\n      metrics: [\r\n        352659556 , // completions\r\n        1099614108 , // flawless\r\n      ],\r\n      collections: [\r\n        3865096258, // Hareball SHell,\r\n        1669843839 //Of Ten Suns\r\n      ],\r\n      records:[\r\n        3191784400, // Solo flawless\r\n      ]\r\n    },\r\n    {\r\n      // Pit\r\n      hash: 1375089621,\r\n      metrics: [\r\n        1451729471, // completions\r\n        310888283, // Flawless\r\n        3741172422, // flawless solo\r\n      ],\r\n      collections: [\r\n        1258579677 // xeno\r\n      ]\r\n    },\r\n    {\r\n      // Throne\r\n      hash: 2032534090,\r\n      metrics: [\r\n        1339818929, // Completions\r\n        761318885, // Flawless\r\n      ],\r\n      collections: [\r\n        1660030044 // wish ender\r\n      ],\r\n      records:[\r\n        3899996566, // Solo ,\r\n        174211525, // full gear\r\n        2436465535,  //Thorny predicament\r\n        4180867423, // Douse\r\n\r\n      ]\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "CURATED_ACTIVITIES_EXOTIC_MISSIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.exotic.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedActivityGroup",
                "defaultValue": "{\r\n  title: 'Exotic Missions',\r\n  activities: [\r\n    {\r\n      hash: 3755529435,\r\n      metrics: [],\r\n      collections: [\r\n        2629609052,//\r\n        2689028695\r\n      ],\r\n      records: [\r\n        3271224950, // Flawless\r\n        1589025252, // Legendary flawless\r\n        1967189514, /// Solo\r\n        154855905, // 30 min\r\n        297678175, // truley satisfactory\r\n      ]\r\n    },\r\n    {\r\n      hash: 202306511,\r\n      metrics: [],\r\n      collections: [\r\n        // 760708739, //??\r\n        1161231112 //??\r\n      ],\r\n      records: [\r\n        3645325693, // Solo\r\n        2381003836, // Aim for the bushes\r\n        1282305097, // Solo Flawless\r\n        1168356473, // Flawless seraph\r\n        3011661755, // Legend flawless\r\n        110405822 // Dog\r\n      ]\r\n    },\r\n    {\r\n      // Vox\r\n      hash: 901429423,\r\n      metrics: [],\r\n      collections: [4028619088, 154026683],\r\n      records: [\r\n        2846845044, // Complated master\r\n        3219227863, // Completed catalyst\r\n        2012324885, // Listen to all propoganda\r\n        978050738 // Master flawless\r\n      ]\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "CURATED_ACTIVITIES_PINNACLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.pinnacle.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedActivityGroup",
                "defaultValue": "{\r\n  title: 'Pinnacle Activities',\r\n  activities: [\r\n    {\r\n      // Trials\r\n      hash: 588019350,\r\n      metrics: [\r\n        1365664208, // wins\r\n        2367472811,// Wins this season\r\n        1765255052, // flawwless\r\n        1114483243, //  Flawless this season\r\n        2082314848, //Opponents Defeated\r\n        301249970, // Caries\r\n        4112712479 // Flawless seal guilding\r\n      ],\r\n      collections: [\r\n        1212240353, // shell\r\n        4150064816, // sparrow\r\n        39134720 // ship\r\n      ],\r\n      records:[\r\n        3064133018,\r\n        1662916867,\r\n        1965035984,\r\n        1522246467,\r\n        2502902092\r\n      ]\r\n    },\r\n    {\r\n      // Iron Banner\r\n      hash: 2014552458,\r\n      metrics: [\r\n\r\n      ],\r\n      collections: [\r\n\r\n      ],\r\n      records:[\r\n        2096302465,\r\n        4159436958,\r\n        999240767,\r\n        280201145,\r\n        3191049056,\r\n        4001216960,\r\n        3644674925\r\n      ]\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "CURATED_ACTIVITIES_RAIDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.raids.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedActivityGroup",
                "defaultValue": "{\r\n  title: 'Raids',\r\n  activities: [\r\n    {\r\n      // Root of Nightmare\r\n      hash: 2381413764, // may be 1191701339\r\n      metrics: [\r\n        321051454, // completions\r\n        2499684194, // Carries\r\n        // 1624029217, //King's Fall Completions\r\n        // 4210188841 //  Carries complete\r\n      ],\r\n      collections: [\r\n        2553509474\r\n        // 192937277, // ToM\r\n        // 2100640553, // Ship\r\n        // 1942146807 //sparrow\r\n      ],\r\n      records: [\r\n        397062446, // Living Nightmares Flawwless\r\n        4149006431 // Final Nightmare\r\n      ]\r\n    },\r\n    {\r\n      // Kings Fall\r\n      hash: 1374392663,\r\n      metrics: [\r\n        1624029217, //King's Fall Completions\r\n        4210188841 //  Carries complete\r\n      ],\r\n      collections: [\r\n        192937277, // ToM\r\n        2100640553, // Ship\r\n        1942146807 //sparrow\r\n      ],\r\n      records: [\r\n        1360511082, //Flawless\r\n        70932677, // clan\r\n        3388215749 // Master\r\n      ]\r\n    },\r\n    {\r\n      // Vow\r\n      hash: 1441982566,\r\n      metrics: [3585185883, 2629533159],\r\n      collections: [\r\n        2817568609, // weapon\r\n        3070552038, // shell\r\n        844832867 // Sparrow\r\n      ],\r\n      records: [\r\n        610864524, // Master\r\n        4019717242, // Flawless\r\n        3330343477 // Clan\r\n      ]\r\n    },\r\n    {\r\n      //Vault\r\n      hash: 3881495763,\r\n      metrics: [\r\n        2506886274, 619234070\r\n        //905219689 Time trial\r\n      ],\r\n      collections: [\r\n        2300465938, // weapon\r\n        958866288 // ship\r\n      ],\r\n      records: [\r\n        2750088202, // Flawless\r\n        991121189, // Vault of clans\r\n        3890225317 //  master\r\n      ]\r\n    },\r\n    {\r\n      // DSC\r\n      hash: 910380154,\r\n      metrics: [\r\n        954805812, 2330596844\r\n        //  3679202587 //Time trial\r\n      ],\r\n      collections: [\r\n        753200559, //weapon\r\n        3574313939, //shell\r\n        392272160 // sparrow\r\n      ],\r\n      records: [\r\n        3560923614, // Flawless\r\n        518342793 // clan\r\n      ]\r\n    },\r\n    {\r\n      // Garden\r\n      hash: 2659723068,\r\n      metrics: [\r\n        1168279855, 3331373451\r\n        //1835852368// time trial\r\n      ],\r\n      collections: [\r\n        1988948484 // weapon\r\n      ],\r\n      records: [\r\n        1221037312, // Clan night\r\n        1522774125 // flawless\r\n      ]\r\n    },\r\n    {\r\n      //LW\r\n      hash: 1661734046,\r\n      metrics: [\r\n        905240985, 1139173585\r\n        //4164362538 // Time trial\r\n      ],\r\n      collections: [\r\n        199171385, // weapon\r\n        3360537485, // shell\r\n        3163873693, //ship\r\n        1469913804 //sparrow\r\n      ],\r\n      records: [\r\n        4078980921, // Clan Night\r\n        380332968 // Petra's run\r\n      ]\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "CURATED_ACTIVITY_GROUPS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedActivityGroup[]",
                "defaultValue": "[\r\n  CURATED_ACTIVITIES_EXOTIC_MISSIONS,\r\n  CURATED_ACTIVITIES_DUNGEONS,\r\n  CURATED_ACTIVITIES_RAIDS,\r\n  CURATED_ACTIVITIES_PINNACLE\r\n]"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "6"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DEFAULT_TOKENIZE_ITEM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  }",
                "rawdescription": "Default and naive tokenize function that combines the item's property values into a string.",
                "description": "<p>Default and naive tokenize function that combines the item&#39;s property values into a string.</p>\n"
            },
            {
                "name": "DefaultClanConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClanConfig",
                "defaultValue": "{\r\n  enabled: true,\r\n  memberUpdate: '1/1/1900',\r\n  profileUpdate: '1/1/1900',\r\n  memberRecentActivityUpdate: '1/1/1900',\r\n  bungieInfoUpdate: '1/1/1900'\r\n} as ClanConfig"
            },
            {
                "name": "defaultGetStoreFunc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UseStore | undefined"
            },
            {
                "name": "DESTINY_ACTIVITY_MODES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DestinyActivityModeCategory[]",
                "defaultValue": "[NONE, PvE, PvP, PvECompetitive]"
            },
            {
                "name": "DestinyActivityModeTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/DestinyActivityModeType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  None: 0,\r\n  Story: 2,\r\n  Strike: 3,\r\n  Raid: 4,\r\n  AllPvP: 5,\r\n  Patrol: 6,\r\n  AllPvE: 7,\r\n  Reserved9: 9,\r\n  Control: 10,\r\n  Reserved11: 11,\r\n  Clash: 12,\r\n  CrimsonDoubles: 15,\r\n  Nightfall: 16,\r\n  HeroicNightfall: 17,\r\n  AllStrikes: 18,\r\n  IronBanner: 19,\r\n  Reserved20: 20,\r\n  Reserved21: 21,\r\n  Reserved22: 22,\r\n  Reserved24: 24,\r\n  AllMayhem: 25,\r\n  Reserved26: 26,\r\n  Reserved27: 27,\r\n  Reserved28: 28,\r\n  Reserved29: 29,\r\n  Reserved30: 30,\r\n  Supremacy: 31,\r\n  PrivateMatchesAll: 32,\r\n  Survival: 37,\r\n  Countdown: 38,\r\n  TrialsOfTheNine: 39,\r\n  Social: 40,\r\n  TrialsCountdown: 41,\r\n  TrialsSurvival: 42,\r\n  IronBannerControl: 43,\r\n  IronBannerClash: 44,\r\n  IronBannerSupremacy: 45,\r\n  ScoredNightfall: 46,\r\n  ScoredHeroicNightfall: 47,\r\n  Rumble: 48,\r\n  AllDoubles: 49,\r\n  Doubles: 50,\r\n  PrivateMatchesClash: 51,\r\n  PrivateMatchesControl: 52,\r\n  PrivateMatchesSupremacy: 53,\r\n  PrivateMatchesCountdown: 54,\r\n  PrivateMatchesSurvival: 55,\r\n  PrivateMatchesMayhem: 56,\r\n  PrivateMatchesRumble: 57,\r\n  HeroicAdventure: 58,\r\n  Showdown: 59,\r\n  Lockdown: 60,\r\n  Scorched: 61,\r\n  ScorchedTeam: 62,\r\n  Gambit: 63,\r\n  AllPvECompetitive: 64,\r\n  Breakthrough: 65,\r\n  BlackArmoryRun: 66,\r\n  Salvage: 67,\r\n  IronBannerSalvage: 68,\r\n  PvPCompetitive: 69,\r\n  PvPQuickplay: 70,\r\n  ClashQuickplay: 71,\r\n  ClashCompetitive: 72,\r\n  ControlQuickplay: 73,\r\n  ControlCompetitive: 74,\r\n  GambitPrime: 75,\r\n  Reckoning: 76,\r\n  Menagerie: 77,\r\n  VexOffensive: 78,\r\n  NightmareHunt: 79,\r\n  Elimination: 80,\r\n  Momentum: 81,\r\n  Dungeon: 82,\r\n  Sundial: 83,\r\n  TrialsOfOsiris: 84,\r\n  Dares: 85,\r\n  Offensive: 86,\r\n  LostSector: 87,\r\n  Rift: 88,\r\n  ZoneControl: 89,\r\n  IronBannerRift: 90,\r\n  IronBannerZoneControl: 91\r\n}"
            },
            {
                "name": "DOD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedClan",
                "defaultValue": "{\r\n  key: 'dod',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'All Platforms',\r\n      clans: m(dod_clans_all)\r\n    },\r\n    {\r\n      title: 'PC',\r\n      clans: m(dod_clans_pc)\r\n    },\r\n    {\r\n      title: 'Playstation',\r\n      clans: m(dod_clans_ps)\r\n    },\r\n    {\r\n      title: 'Play Station',\r\n      clans: m(dod_clans_xbox)\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "dod_clans_all",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  4803739, //DoD Still Vexier Than You\r\n  4523816, //DoD Lightforged\r\n  223562, //DoD Westside\r\n  523657, //DoD Battleborn\r\n  3872451, //DoD Battleborn Ascendant\r\n  1726332 //DoD California\r\n]"
            },
            {
                "name": "dod_clans_pc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  2073131, // Chums\r\n  5018079, //compadres\r\n  4322250, // DoD Dad Guard\r\n  2866236, // GMT\r\n  4430645, //Family Pride\r\n  4473297, // Guiding light\r\n  4767446 // Lucid Loops\r\n]"
            },
            {
                "name": "dod_clans_ps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[2942177, 1288185, 2071608, 1771725, 1161209, 2180975, 3136336, 1186355, 1375802]"
            },
            {
                "name": "dod_clans_xbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  910604, //DOD Chattawhyte Krew\r\n  849654, //DoD Empire/Orbit/Rebellion/United\r\n  1179713, //DoD Iron Warlords\r\n  4271754, //DoD Shenanigans,\r\n  3219957, //DoD Storm ,\r\n  4748154, // DoD West Coast Blueberries\r\n  806412, // DoD X1 Foxtrot,\r\n  167225 //Dads of Destiny X1 Ghost\r\n]"
            },
            {
                "name": "DOD_PC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CuratedClan",
                "defaultValue": "{\r\n  key: 'dod-pc',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'PC',\r\n      clans: m([\r\n        2073131, // Chums\r\n        5018079,\r\n        3816773\r\n      ]) //compadres])\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "events",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[MOCK_GRID_ITEMS, MOCK_GRID_ITEMS2.slice(0, 20), MOCK_GRID_CATEGORIES]"
            },
            {
                "name": "EXAMPLE_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<MockListItem>>([\r\n  ['id', { label: 'Id', text: (item) => item.id.toString() }],\r\n  ['startDate', { label: 'Start Date', text: (item) => new Date(item.startDate).toDateString() }]\r\n])"
            },
            {
                "name": "EXAMPLE_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      type:'number',\r\n      matcher:(item, filter) => numberMatchesEquality(item.id, filter.value, filter.equality)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "EXAMPLE_GROUPER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, GrouperMetadata<MockListItem>>([\r\n  [\r\n    'all',\r\n    {\r\n      label: 'All',\r\n      groupingFunction: (items) => {\r\n        return [{ id: 'all', title: 'All', items }];\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'isPublic', {\r\n      label: 'IsPublic',\r\n      groupingFunction: items => getGroupByValue(items, 'isPublic'),\r\n    }\r\n  ],\r\n])"
            },
            {
                "name": "EXAMPLE_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Name',\r\n      comparator: (a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "EXAMPLE_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'id',\r\n      plainText: (item) => `${item.id}`,\r\n      render: (item) => ({ styles: { fontWeight: 'bold' }, text: `${item.id}` })\r\n    }\r\n  ],\r\n  [\r\n    'isPublic',\r\n    { label: 'Is Public', plainText: (item) => `${item.isPublic}`, render: (item) => ({ text: `${item.isPublic}` }) }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Names',\r\n      tooltip: 'testing tooltip',\r\n      plainText: (item) => `${item.name}`,\r\n      render: (item) => ({ text: `${item.name}` })\r\n    }\r\n  ],\r\n  [\r\n    'startDate',\r\n    {\r\n      label: 'Start Date',\r\n      plainText: (item) => `${new Date(item.startDate).toDateString()}`,\r\n      render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` })\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "getDungeonReportUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(platform: number, displayName: string, membershipId: number) => {\r\n  switch (platform) {\r\n    case MembershipTypes.Xbox:\r\n      return getXBOXUrl(displayName);\r\n    case MembershipTypes.Psn:\r\n      return getPSUrl(displayName);\r\n    case MembershipTypes.Steam:\r\n      return getPCUrl(membershipId);\r\n    case MembershipTypes.Stadia:\r\n      return getStadiaUrl(membershipId);\r\n    default:\r\n      return '';\r\n  }\r\n}"
            },
            {
                "name": "getPCUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/pc/${membershipId}`;\r\n}"
            },
            {
                "name": "getPCUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/pc/${membershipId}`;\r\n}"
            },
            {
                "name": "getPSUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/ps/${escape(displayName)}`;\r\n}"
            },
            {
                "name": "getPSUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/ps/${escape(displayName)}`;\r\n}"
            },
            {
                "name": "getRaidReportUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(platform: number, displayName: string, membershipId: number) => {\r\n  switch (platform) {\r\n    case MembershipTypes.Xbox:\r\n      return getXBOXUrl(displayName);\r\n    case MembershipTypes.Psn:\r\n      return getPSUrl(displayName);\r\n    case MembershipTypes.Steam:\r\n      return getPCUrl(membershipId);\r\n    case MembershipTypes.Stadia:\r\n      return getStadiaUrl(membershipId);\r\n    default:\r\n      return '';\r\n  }\r\n}"
            },
            {
                "name": "getRandomNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/utility/random-number.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}"
            },
            {
                "name": "getRandomSLI",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n  return { seal: MOCK_SEAL_DEFINITION, totalMembers: 100, completedCount: getRandomNumber(1, 100) } as SealListItem;\r\n}"
            },
            {
                "name": "getStadiaUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/stadia/${membershipId}`;\r\n}"
            },
            {
                "name": "getStadiaUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/stadia/${membershipId}`;\r\n}"
            },
            {
                "name": "getXBOXUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/xb/${escape(displayName)}`;\r\n}"
            },
            {
                "name": "getXBOXUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/xb/${escape(displayName)}`;\r\n}"
            },
            {
                "name": "gtag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Function"
            },
            {
                "name": "initialClanMemberProfileState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClansMembersProfilesState",
                "defaultValue": "ClansMembersProfilesAdapter.getInitialState({\r\n  isLoading: true\r\n})"
            },
            {
                "name": "initialClanState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClansState",
                "defaultValue": "ClanConfigAdapter.getInitialState({})"
            },
            {
                "name": "initializeClanMemberProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Initialize ClanMemberProfiles'))"
            },
            {
                "name": "initialManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ManifestState",
                "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return {\r\n    id: '1',\r\n    name: 'Item 1',\r\n    iconName: 'people',\r\n    type: 'clan'\r\n  };\r\n})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SealListItem[]",
                "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return getRandomSLI();\r\n})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('load'))"
            },
            {
                "name": "loadManifestComplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('complete'))"
            },
            {
                "name": "loadManifestFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
            },
            {
                "name": "LocationToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/injection-tokens/location-token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Location')"
            },
            {
                "name": "LocationToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Location')"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MANIFEST_PATH_EXP_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
            },
            {
                "name": "MANIFEST_PATH_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_KEY'"
            },
            {
                "name": "ManifestReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
            },
            {
                "name": "MEMBERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[initStateFromLocalStorage]"
            },
            {
                "name": "MOCK_CLAN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/__mocks__/clan-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  groupId: '2073131',\r\n  name: 'DoD Paternal Chums',\r\n  groupType: 1,\r\n  membershipIdCreated: '22807',\r\n  creationDate: '2017-08-24T21:26:26.668Z',\r\n  modificationDate: '2022-04-09T00:14:51.491Z',\r\n  about:\r\n    'REQUIRED: Follow the instructions in Discord to be considered for a invite to join.\\n\\nClan Discord: https://discord.gg/z3nsx47\\n\\n---------------------\\n\\nWe are a bunch of Guardians with families who are united around the love of Destiny. We have members who are casuals, full time raiders, triumph fanatics and everything between. \\n\\nOur clan:\\n-- PC is our **only** platform of operation.\\n-- We are based in North America.\\n-- Activities are oriented around play times from 7pm to 11pm in US Eastern timezone. \\n\\nWe are recruiting Dads who are:\\n-- Committed to playing with clan members and participating in Discord voice chat.\\n-- Have a Base Power 1520+\\n-- Aged 25 and older. The average age of our group is 41.\\n-- Can demonstrate consistent recent engagement in Destiny 2 (20+hrs across the last month).',\r\n  tags: [],\r\n  memberCount: 93,\r\n  isPublic: true,\r\n  isPublicTopicAdminOnly: false,\r\n  motto: 'Dads of Destiny PC',\r\n  allowChat: true,\r\n  isDefaultPostPublic: false,\r\n  chatSecurity: 0,\r\n  locale: 'en',\r\n  avatarImageIndex: 0,\r\n  homepage: 0,\r\n  membershipOption: 2,\r\n  defaultPublicity: 2,\r\n  theme: 'Group_Community1',\r\n  bannerPath: '/img/Themes/Group_Community1/struct_images/group_top_banner.jpg',\r\n  avatarPath: '/img/profile/avatars/group/defaultGroup.png',\r\n  conversationId: '27030166',\r\n  enableInvitationMessagingForAdmins: false,\r\n  banExpireDate: '2001-01-01T00:00:00Z',\r\n  features: {\r\n    maximumMembers: 100,\r\n    maximumMembershipsOfGroupType: 1,\r\n    capabilities: 31,\r\n    membershipTypes: [1, 2, 3, 5, 6],\r\n    invitePermissionOverride: true,\r\n    updateCulturePermissionOverride: false,\r\n    hostGuidedGamePermissionOverride: 1,\r\n    updateBannerPermissionOverride: false,\r\n    joinLevel: 1\r\n  },\r\n  clanInfo: {\r\n    d2ClanProgressions: {\r\n      '584850370': {\r\n        progressionHash: 584850370,\r\n        dailyProgress: 200000,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 100000,\r\n        weeklyLimit: 100000,\r\n        currentProgress: 200000,\r\n        level: 2,\r\n        levelCap: 6,\r\n        stepIndex: 2,\r\n        progressToNextLevel: 100000,\r\n        nextLevelAt: 125000\r\n      },\r\n      '1273404180': {\r\n        progressionHash: 1273404180,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3381682691': {\r\n        progressionHash: 3381682691,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3759191272': {\r\n        progressionHash: 3759191272,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      }\r\n    },\r\n    clanCallsign: 'DoD',\r\n    clanBannerData: {\r\n      decalId: 4142223387,\r\n      decalColorId: 3379387796,\r\n      decalBackgroundColorId: 3568748754,\r\n      gonfalonId: 1473910866,\r\n      gonfalonColorId: 2157636320,\r\n      gonfalonDetailId: 1664476155,\r\n      gonfalonDetailColorId: 4128900497\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "MOCK_GRID_CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "MOCK_GRID_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "stats"
            },
            {
                "name": "MOCK_GRID_ITEMS2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "stats2"
            },
            {
                "name": "MOCK_LIST_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockListItem[]",
                "defaultValue": "names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n})"
            },
            {
                "name": "MOCK_SEAL_DEFINITION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SealDefinition",
                "defaultValue": "{\r\n  displayProperties: {\r\n    description: 'Complete Event Challenges during the Festival of the Lost. Progress resets at the end of the event.',\r\n    name: 'Ghost Writer',\r\n    icon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n    iconSequences: [\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n          '/common/destiny2_content/icons/6987d309d0bc4029f3a814d7e5325469.png',\r\n          '/common/destiny2_content/icons/12dcab8ca6809f3a875f24b4dc5a0437.png'\r\n        ]\r\n      },\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/42df53be3530e75cf88e54f6932827ec.png',\r\n          '/common/destiny2_content/icons/f2515008c74cf3b69242f91edd977176.png',\r\n          '/common/destiny2_content/icons/d31bc05850b70c5094bd23bfe77ba0af.png'\r\n        ]\r\n      }\r\n    ],\r\n    hasIcon: true\r\n  },\r\n  originalIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  rootViewIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  nodeType: 3,\r\n  scope: 1,\r\n  completionRecordHash: 1089543274,\r\n  children: {\r\n    presentationNodes: [],\r\n    collectibles: [],\r\n    records: [\r\n      { recordHash: 2402210136, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883618, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883619, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883616, nodeDisplayPriority: 0 },\r\n      { recordHash: 3907371284, nodeDisplayPriority: 0 },\r\n      { recordHash: 4240802932, nodeDisplayPriority: 0 },\r\n      { recordHash: 1276598420, nodeDisplayPriority: 0 },\r\n      { recordHash: 2260243645, nodeDisplayPriority: 0 },\r\n      { recordHash: 170025438, nodeDisplayPriority: 0 },\r\n      { recordHash: 3135128969, nodeDisplayPriority: 0 },\r\n      { recordHash: 3448638613, nodeDisplayPriority: 0 },\r\n      { recordHash: 2895286773, nodeDisplayPriority: 0 },\r\n      { recordHash: 1082927728, nodeDisplayPriority: 0 },\r\n      { recordHash: 4283733196, nodeDisplayPriority: 0 },\r\n      { recordHash: 1644352879, nodeDisplayPriority: 0 },\r\n      { recordHash: 3951338722, nodeDisplayPriority: 0 },\r\n      { recordHash: 3949332075, nodeDisplayPriority: 0 },\r\n      { recordHash: 552478397, nodeDisplayPriority: 0 },\r\n      { recordHash: 2358631133, nodeDisplayPriority: 0 },\r\n      { recordHash: 1321634422, nodeDisplayPriority: 0 }\r\n    ],\r\n    metrics: [],\r\n    craftables: []\r\n  },\r\n  displayStyle: 2,\r\n  screenStyle: 2,\r\n  requirements: { entitlementUnavailableMessage: '' },\r\n  disableChildSubscreenNavigation: false,\r\n  maxCategoryRecordScore: 0,\r\n  presentationNodeType: 1,\r\n  traitIds: [],\r\n  traitHashes: [],\r\n  parentNodeHashes: [616318467],\r\n  hash: 2592822840,\r\n  index: 1319,\r\n  redacted: false,\r\n}"
            },
            {
                "name": "MockConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppConfig",
                "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  production: false,\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "names",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
            },
            {
                "name": "names",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
            },
            {
                "name": "NONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DestinyActivityModeCategory",
                "defaultValue": "{\r\n  id: 0,\r\n  title: 'All',\r\n  desc: 'Activities that are neither PVP nor PVE, such as social activities.'\r\n}"
            },
            {
                "name": "NotificationAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Notification>",
                "defaultValue": "createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n})"
            },
            {
                "name": "NotificationInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NotificationState",
                "defaultValue": "NotificationAdapter.getInitialState()"
            },
            {
                "name": "NotificationReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  NotificationInitialState,\r\n  on(addNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(updateNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(removeNotification, (state, { notification }) => {\r\n    return NotificationAdapter.removeOne(notification.id, { ...state });\r\n  })\r\n)"
            },
            {
                "name": "OR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' OR '"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "pipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/pipes.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  PlaytimePipe,\r\n  PlaytimeMillisecondsPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/profile-link/profile-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PvE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DestinyActivityModeCategory",
                "defaultValue": "{\r\n  id: 1,\r\n  title: 'PvE',\r\n  desc: 'PvE activities, where you shoot aliens in the face.'\r\n}"
            },
            {
                "name": "PvECompetitive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DestinyActivityModeCategory",
                "defaultValue": "{\r\n  id: 3,\r\n  title: 'PvECompetitive',\r\n  desc: 'PVE competitive activities, where you shoot whoever you want whenever you want. Or run around collecting small glowing triangles.'\r\n}"
            },
            {
                "name": "PvP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DestinyActivityModeCategory",
                "defaultValue": "{\r\n  id: 2,\r\n  title: 'PvP',\r\n  desc: 'PvP activities, where you shoot your \"friends\".'\r\n}"
            },
            {
                "name": "REAL_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    date: '2020-07-28',\r\n    seconds: 17980\r\n  },\r\n  {\r\n    date: '2020-07-14',\r\n    seconds: 10799\r\n  },\r\n  {\r\n    date: '2020-07-07',\r\n    seconds: 42980\r\n  },\r\n  {\r\n    date: '2020-06-30',\r\n    seconds: 9096\r\n  },\r\n  {\r\n    date: '2020-06-23',\r\n    seconds: 5380\r\n  },\r\n  {\r\n    date: '2020-06-16',\r\n    seconds: 7985\r\n  },\r\n  {\r\n    date: '2020-02-25',\r\n    seconds: 1118\r\n  },\r\n  {\r\n    date: '2023-02-11',\r\n    seconds: 5502\r\n  },\r\n  {\r\n    date: '2023-05-14',\r\n    seconds: 2589\r\n  },\r\n  {\r\n    date: '2020-05-07',\r\n    seconds: 3810\r\n  },\r\n  {\r\n    date: '2019-12-31',\r\n    seconds: 3928\r\n  },\r\n  {\r\n    date: '2019-12-24',\r\n    seconds: 7161\r\n  },\r\n  {\r\n    date: '2019-12-17',\r\n    seconds: 9598\r\n  },\r\n  {\r\n    date: '2019-12-10',\r\n    seconds: 6755\r\n  },\r\n  {\r\n    date: '2019-12-03',\r\n    seconds: 5923\r\n  },\r\n  {\r\n    date: '2019-11-26',\r\n    seconds: 11169\r\n  },\r\n  {\r\n    date: '2019-11-19',\r\n    seconds: 9496\r\n  },\r\n  {\r\n    date: '2019-11-12',\r\n    seconds: 60783\r\n  },\r\n  {\r\n    date: '2019-11-05',\r\n    seconds: 71285\r\n  },\r\n  {\r\n    date: '2019-10-29',\r\n    seconds: 75989\r\n  },\r\n  {\r\n    date: '2019-10-22',\r\n    seconds: 61420\r\n  },\r\n  {\r\n    date: '2019-10-15',\r\n    seconds: 46780\r\n  },\r\n  {\r\n    date: '2019-10-08',\r\n    seconds: 31837\r\n  },\r\n  {\r\n    date: '2019-10-01',\r\n    seconds: 36309\r\n  },\r\n  {\r\n    date: '2019-09-17',\r\n    seconds: 4481\r\n  },\r\n  {\r\n    date: '2019-09-03',\r\n    seconds: 33579\r\n  },\r\n  {\r\n    date: '2019-08-27',\r\n    seconds: 37958\r\n  },\r\n  {\r\n    date: '2019-08-20',\r\n    seconds: 29367\r\n  },\r\n  {\r\n    date: '2019-08-13',\r\n    seconds: 28290\r\n  },\r\n  {\r\n    date: '2019-08-06',\r\n    seconds: 21828\r\n  },\r\n  {\r\n    date: '2019-07-30',\r\n    seconds: 97254\r\n  },\r\n  {\r\n    date: '2019-07-23',\r\n    seconds: 19456\r\n  }\r\n]"
            },
            {
                "name": "RECENT_ACTIVITY_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ProfileRecentActivity>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "RECENT_ACTIVITY_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ProfileRecentActivity>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data.userInfo.displayName?.toLowerCase() <\r\n        b.profile?.profile?.data.userInfo.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     comparator: (a, b) => ((a.profileActivity.stats.lastWeek || 0) < (b.profileActivity.stats.lastWeek || 0) ? -1 : 1)\r\n  //   }\r\n  // ],\r\n\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastMonth || 0) < (b.profileActivity.stats.lastMonth || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastNinetyDays || 0) < (b.profileActivity.stats.lastNinetyDays || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  [\r\n    'lastLogin',\r\n    {\r\n      label: 'Last Login',\r\n      comparator: (a, b) =>\r\n        (new Date(a.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900)) <\r\n        (new Date(b.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900))\r\n          ? -1\r\n          : 1\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "RECENT_ACTIVITY_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clanMember?.destinyUserInfo?.displayName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats..lastNinetyDays)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "registerIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/register-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(registry: MatIconRegistry, domSanitizer: DomSanitizer) => {\r\n    Object.keys(svgIcons).map(name => {\r\n        const path = svgIcons[name];\r\n        registry.addSvgIcon(name, domSanitizer.bypassSecurityTrustResourceUrl(path));\r\n    });\r\n}"
            },
            {
                "name": "removeClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
            },
            {
                "name": "removeNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(`${base} Remove Notification`, props<{ notification: Notification }>())"
            },
            {
                "name": "resetClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Reset Clan'), props<{ clanId: string; clanName: string; clanTag: string }>())"
            },
            {
                "name": "SEAL_DETAILS_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<SealClanMember>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "SEAL_DETAILS_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<SealClanMember>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        compare(getBungieDisplayName(a.profile).toLowerCase(), getBungieDisplayName(b.profile).toLowerCase())\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => compare(a.clan.clanName, b.clan.clanName)\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Progress',\r\n      comparator: (a, b) => compare(a.sealProgression.completionPercentage, b.sealProgression.completionPercentage)\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      comparator: (a, b) => compare(a.sealProgression.gildedCount, b.sealProgression.gildedCount)\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      comparator: (a: any, b: any) => a.sealProgression.isCompleted - b.sealProgression.isCompleted\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      comparator: (a: any, b: any) => a.sealProgression.isGilded - b.sealProgression.isGilded\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      // comparator: (a, b) => (a.sealProgression.gildedCount < b.sealProgression.gildedCount ? -1 : 1)\r\n      comparator: (a, b) => compare(a.sealProgression.gildedCount || -10, b.sealProgression.gildedCount || -10)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "SEAL_DETAILS_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<SealClanMember, ViewContext>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     labelClass: '',\r\n  //     plainText: (item: SealClanMember) => `${getMemberName(item.clanMember)}`,\r\n  //     render: (item: SealClanMember) => ({ text: `${getMemberName(item.clanMember)}` })\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: SealClanMember) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: SealClanMember) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      labelClass: '',\r\n      plainText: (item: SealClanMember) => `${item.clan.clanName}`,\r\n      render: (item: SealClanMember) => ({ text: `${item.clan.clanName}` })\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: item.sealProgression.isCompleted ? TABLE_DONE : TABLE_NOT_DONE\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isGilded ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: item.sealProgression.isGilded ? TABLE_DONE : TABLE_NOT_DONE\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.gildedCount || ''}`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.gildedCount || ''}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed / Total',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) =>\r\n        `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Completed',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.completionPercentage}%`\r\n      })\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SECONDS_IN_DAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/time.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SECONDS_IN_HOUR * 24"
            },
            {
                "name": "SECONDS_IN_HOUR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/time.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SECONDS_IN_MINUTE * 60"
            },
            {
                "name": "SECONDS_IN_MINUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/time.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "SECONDS_IN_WEEK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/time.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SECONDS_IN_DAY * 7"
            },
            {
                "name": "secretKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/secrets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
            },
            {
                "name": "selectAllRecentActivityUpdates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) => {\r\n\r\n  return state.map((x) => x.memberRecentActivityUpdate);\r\n})"
            },
            {
                "name": "selectClanMemberProfileState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ClansMembersProfilesState>('clansMembersProfiles')"
            },
            {
                "name": "selectClanMemberProfileStateLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectClanMemberProfileState,\r\n  (state) => state.isLoading\r\n)"
            },
            {
                "name": "selectClansState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ClansState>('clans')"
            },
            {
                "name": "selectEnabledClanIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
            },
            {
                "name": "selectEnabledClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
            },
            {
                "name": "selectLastProfileUpdate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
            },
            {
                "name": "selectLastRecentActivityUpdate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.memberRecentActivityUpdate) || '';\r\n  })"
            },
            {
                "name": "selectManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
            },
            {
                "name": "selectManifestError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
            },
            {
                "name": "selectManifestLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
            },
            {
                "name": "selectManifestLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
            },
            {
                "name": "selectManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
            },
            {
                "name": "selectNotificationsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<NotificationState>('notifications')"
            },
            {
                "name": "setClanMemberProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Set ClanMemberProfiles'), props<{ clanMemberProfiles: ClanMemberProfileWID[] }>())"
            },
            {
                "name": "setClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "sortNumeric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(a: number, b: number) => {\r\n  return a < b ? -1 : 1;\r\n}"
            },
            {
                "name": "SPIRE_ACTIVITY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/models/__mocks__/activity-definition.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  displayProperties: {\r\n    description: 'Machinations run wild in this dust-ridden ruin. Bring them to heel.',\r\n    name: 'Spire of the Watcher: Normal',\r\n    icon: '/img/misc/missing_icon_d2.png',\r\n    hasIcon: false\r\n  },\r\n  originalDisplayProperties: {\r\n    description: 'Machinations run wild in this dust-ridden ruin. Bring them to heel.',\r\n    name: 'Spire of the Watcher',\r\n    icon: '/img/misc/missing_icon_d2.png',\r\n    hasIcon: false\r\n  },\r\n  selectionScreenDisplayProperties: {\r\n    description: 'A strong fireteam is recommended to overcome this challenge.\\n\\nMatchmaking: OFF',\r\n    name: 'Normal',\r\n    hasIcon: false\r\n  },\r\n  releaseIcon: '/img/misc/missing_icon_d2.png',\r\n  releaseTime: 0,\r\n  completionUnlockHash: 0,\r\n  activityLightLevel: 1570,\r\n  destinationHash: 1615213322,\r\n  placeHash: 2809578934,\r\n  activityTypeHash: 608898761,\r\n  tier: -1,\r\n  pgcrImage: '/img/theme/destiny/bgs/pgcrs/placeholder.jpg',\r\n  rewards: [],\r\n  modifiers: [],\r\n  isPlaylist: false,\r\n  challenges: [\r\n    {\r\n      rewardSiteHash: 0,\r\n      inhibitRewardsUnlockHash: 0,\r\n      objectiveHash: 424208044,\r\n      dummyRewards: [{ itemHash: 73143230, quantity: 0, hasConditionalVisibility: false }]\r\n    }\r\n  ],\r\n  optionalUnlockStrings: [],\r\n  inheritFromFreeRoam: false,\r\n  suppressOtherRewards: false,\r\n  playlistItems: [],\r\n  matchmaking: { isMatchmade: false, minParty: 1, maxParty: 3, maxPlayers: 3, requiresGuardianOath: false },\r\n  loadouts: [],\r\n  isPvP: false,\r\n  insertionPoints: [\r\n    { phaseHash: 3852545214, unlockHash: 0 },\r\n    { phaseHash: 201188049, unlockHash: 0 },\r\n    { phaseHash: 1483068591, unlockHash: 0 },\r\n    { phaseHash: 2027998024, unlockHash: 0 },\r\n    { phaseHash: 1779644342, unlockHash: 0 },\r\n    { phaseHash: 3603277873, unlockHash: 0 },\r\n    { phaseHash: 3934781543, unlockHash: 0 },\r\n    { phaseHash: 2676434388, unlockHash: 0 }\r\n  ],\r\n  activityLocationMappings: [],\r\n  hash: 1262462921,\r\n  index: 412,\r\n  redacted: false,\r\n  blacklisted: false\r\n}"
            },
            {
                "name": "stats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "stats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "stats2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "STATUS_DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'done'"
            },
            {
                "name": "STATUS_EXTRACTING_TABLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'extracting tables'"
            },
            {
                "name": "STATUS_UNZIPPING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'unzipping'"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "['allData']"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "[\r\n // StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  //StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.BungieInfo\r\n  //StoreId.ProfileMilestones,\r\n  //StoreId.MemberActivityStats,\r\n  //StoreId.ProfileMetrics,\r\n // StoreId.Raids\r\n]"
            },
            {
                "name": "svgIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/register-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    titan: '/assets/icons/titan.svg',\r\n    hunter: '/assets/icons/hunter.svg',\r\n    warlock: '/assets/icons/warlock.svg',\r\n    steam: '/assets/icons/steam.svg',\r\n    stadia: '/assets/icons/stadia.svg',\r\n    playstation: '/assets/icons/playstation.svg',\r\n    xbox: '/assets/icons/xbox.svg',\r\n    twitch: '/assets/icons/twitch-purp.svg',\r\n}"
            },
            {
                "name": "TABLE_DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/constants/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'<span class=\"mat-icon material-icons\">done</span>'"
            },
            {
                "name": "TABLE_NOT_DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/constants/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "''"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MatButton>",
                "defaultValue": "(args: MatButton) => ({\r\n  component: MatButton,\r\n  props: args,\r\n  styles: [\r\n    `\r\n  section {\r\n    display: table;\r\n  }\r\n  .example-label {\r\n    display: table-cell;\r\n    font-size: 14px;\r\n    margin-left: 8px;\r\n    min-width: 120px;\r\n  }\r\n  .example-button-row {\r\n    display: table-cell;\r\n    width: 800px;\r\n  }\r\n  .example-button-row .mat-button-base {\r\n    margin: 8px 8px 8px 0;\r\n  }\r\n  .example-flex-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n  }\r\n  .example-button-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 120px;\r\n  }`\r\n  ],\r\n  template: `\r\n  <section>\r\n  <div class=\"example-label\">Basic</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-button>Basic</button>\r\n    <button mat-button disabled>Disabled</button>\r\n    <button mat-button color=\"primary\">Primary</button>\r\n    <button mat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-button color=\"accent\">Accent</button>\r\n    <button mat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-button color=\"warn\">Warn</button>\r\n    <button mat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Raised</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-raised-button>Basic</button>\r\n    <button mat-raised-button disabled>Disabled</button>\r\n    <button mat-raised-button color=\"primary\">Primary</button>\r\n    <button mat-raised-button color=\"primary\"  disabled>Primary</button>\r\n    <button mat-raised-button color=\"accent\">Accent</button>\r\n    <button mat-raised-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-raised-button color=\"warn\">Warn</button>\r\n    <button mat-raised-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-raised-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Stroked</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-stroked-button>Basic</button>\r\n    <button mat-stroked-button disabled>Disabled</button>\r\n    <button mat-stroked-button color=\"primary\">Primary</button>\r\n    <button mat-stroked-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-stroked-button color=\"accent\">Accent</button>\r\n    <button mat-stroked-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-stroked-button color=\"warn\">Warn</button>\r\n    <button mat-stroked-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-stroked-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Flat</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-flat-button>Basic</button>\r\n    <button mat-flat-button disabled>Disabled</button>\r\n    <button mat-flat-button color=\"primary\">Primary</button>\r\n    <button mat-flat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-flat-button color=\"accent\">Accent</button>\r\n    <button mat-flat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-flat-button color=\"warn\">Warn</button>\r\n    <button mat-flat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-flat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Icon</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\">\r\n        <mat-icon>home</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"accent\" aria-label=\"Example icon button with a menu icon\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" aria-label=\"Example icon button with a heart icon\">\r\n        <mat-icon>favorite</mat-icon>\r\n      </button>\r\n      <button mat-icon-button disabled aria-label=\"Example icon button with a open in new tab icon\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"primary\" aria-label=\"Example icon button with a delete icon\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"accent\" aria-label=\"Example icon button with a bookmark icon\">\r\n          <mat-icon>bookmark</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"warn\" aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab disabled aria-label=\"Example icon button with a heart icon\">\r\n          <mat-icon>favorite</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Mini FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"primary\" aria-label=\"Example icon button with a menu icon\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"accent\" aria-label=\"Example icon button with a plus one icon\">\r\n          <mat-icon>plus_one</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"warn\" aria-label=\"Example icon button with a filter list icon\">\r\n          <mat-icon>filter_list</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab disabled aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MatCard>",
                "defaultValue": "(args: MatCard) => ({\r\n  component: MatCard,\r\n  props: args,\r\n  styles: [\r\n    `\r\n    .example-card {\r\n        max-width: 400px;\r\n      }\r\n\r\n      .example-header-image {\r\n        background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n        background-size: cover;\r\n      }\r\n   `\r\n  ],\r\n  template: `\r\n    <mat-card>\r\n    <mat-card-content>Simple card</mat-card-content>\r\n  </mat-card>\r\n  <hr>\r\n<a class=\"mat-card-link\">\r\n<mat-card>\r\n    <mat-card-content>Link Card</mat-card-content>\r\n  </mat-card>\r\n  </a>\r\n  <hr>\r\n\r\n  <mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>Actions Buttons</mat-card-title>\r\n    <mat-card-subtitle>Start</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n<hr>\r\n<mat-card class=\"example-card\">\r\n  <mat-card-header>\r\n    <div mat-card-avatar class=\"example-header-image\"></div>\r\n    <mat-card-title>Shiba Inu</mat-card-title>\r\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n  <mat-card-content>\r\n    <p>\r\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n      bred for hunting.\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n    `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BarChartComponent>",
                "defaultValue": "(args: BarChartComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DisplayOptionsComponent>",
                "defaultValue": "(args: DisplayOptionsComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CollapsibleListComponent>",
                "defaultValue": "(args: CollapsibleListComponent) => ({\r\n  template: `\r\n    <div style=\"height:300px\">\r\n    <lib-collapsible-list [items]=\"items\" [title]=\"title\" [itemTemplate]=\"itemTemplate\">\r\n    <ng-template let-item #itemTemplate>\r\n    <div >\r\n    View\r\n    </div>\r\n    </ng-template>\r\n    </lib-collapsible-list>\r\n    </div>\r\n   `,\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RenderedViewComponent>",
                "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/profile-link/profile-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileLinkComponent>",
                "defaultValue": "(args: ProfileLinkComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SkeletonChartLoaderComponent>",
                "defaultValue": "(args: SkeletonChartLoaderComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableViewComponent>",
                "defaultValue": "(args: TableViewComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ActivityCardDetailsComponent>",
                "defaultValue": "(args: ActivityCardDetailsComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanSearchAutocompleteComponent>",
                "defaultValue": "(args: ClanSearchAutocompleteComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanDetailCellComponent>",
                "defaultValue": "(args: ClanDetailCellComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanActivityBarChartComponent>",
                "defaultValue": "(args: ClanActivityBarChartComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanMemberCardComponent>",
                "defaultValue": "(args: ClanMemberCardComponent) => ({\r\n  template: `\r\n  <div style=\"height:300px\">\r\n  <app-clan-member-card [cardTitle]=\"cartTitle\" [members]=\"roster\" [isLoading]=\"isLoading\" [itemTemplate]=\"itemTemplate\">\r\n  <ng-template let-member #itemTemplate>\r\n  <div >\r\n  View\r\n  </div>\r\n  </ng-template>\r\n  </app-clan-member-card>\r\n  </div>\r\n `,\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClanInfoComponent>",
                "defaultValue": "(args: ClanInfoComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SealsListComponent>",
                "defaultValue": "(args: SealsListComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "today",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 189))"
            },
            {
                "name": "today",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 189))"
            },
            {
                "name": "updateBungieInfoSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Bungie Info Sync'), props<{ clanId: string }>())"
            },
            {
                "name": "updateClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
            },
            {
                "name": "updateClanMemberActivitySync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan Activity Sync'), props<{ clanId: string }>())"
            },
            {
                "name": "updateClanProfileSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
            },
            {
                "name": "VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'v2'"
            },
            {
                "name": "weeks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['week 1', 'week 2', 'week 3']"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ClansMembersProfilesAdapter.getSelectors(selectClanMemberProfileState)"
            },
            {
                "name": "updateNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(`${base} Update Notification`, props<{ notification: Notification }>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NotificationAdapter.getSelectors(selectNotificationsState)"
            },
            {
                "name": "Updating",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WindowToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/injection-tokens/window-token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('Window')"
            }
        ],
        "functions": [
            {
                "name": "addDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanDetailSerializer",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClanDetails",
                "jsdoctags": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanMemberActivitySerializer",
                "file": "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "activity",
                        "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                "jsdoctags": [
                    {
                        "name": "activity",
                        "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanMemberRecentActivitySerializer",
                "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "activity",
                        "type": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "trackedDates",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MemberActivityRecentStats",
                "jsdoctags": [
                    {
                        "name": "activity",
                        "type": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "trackedDates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clear",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Clear all values in the store.</p>\n",
                "args": [
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4934,
                            "end": 4945,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 4928,
                            "end": 4933,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "compare",
                "file": "projects/data/src/lib/utility/compare.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "compare",
                "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertArrayOfObjectsToCSV",
                "file": "projects/components/src/lib/data/exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertArrayOfObjectsToCSV",
                "file": "projects/components/src/lib/data/viewer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createStore",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dbName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "UseStore",
                "jsdoctags": [
                    {
                        "name": "dbName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "DateEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "DateEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateToUnixTimeStamp",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "defaultGetStore",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "del",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Delete a particular key from the store.</p>\n",
                "args": [
                    {
                        "name": "key",
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4087,
                            "end": 4090,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "key"
                        },
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4081,
                            "end": 4086,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 4102,
                            "end": 4113,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 4096,
                            "end": 4101,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "delMany",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Delete multiple keys at once.</p>\n",
                "args": [
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4468,
                            "end": 4472,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "keys"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4462,
                            "end": 4467,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>List of keys to delete.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4508,
                            "end": 4519,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 4502,
                            "end": 4507,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "downloadCSV",
                "file": "projects/components/src/lib/data/exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "downloadCSV",
                "file": "projects/components/src/lib/data/viewer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "eachCursor",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "IDBObjectStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "IDBObjectStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "entries",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get all entries in the store. Each entry is an array of <code>[key, value]</code>.</p>\n",
                "args": [
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<[]>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 6807,
                            "end": 6818,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 6801,
                            "end": 6806,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "filterItems",
                "file": "projects/components/src/lib/data/filterer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function to filter the items. May be used to synchronously filter items.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "context",
                        "type": "M",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metadata",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "M",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metadata",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatDate",
                "file": "projects/data/src/lib/utility/format-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "get",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get a value by its key.</p>\n",
                "args": [
                    {
                        "name": "key",
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<T | undefined>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1299,
                            "end": 1302,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "key"
                        },
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1293,
                            "end": 1298,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1314,
                            "end": 1325,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 1308,
                            "end": 1313,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "getBungieDisplayName",
                "file": "projects/data/src/lib/utility/get-display-name.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBungieStartDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBungieStartDate",
                "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterProgressions",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterProgressions",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterRecords",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterRecords",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getClanMemberId",
                "file": "projects/data/src/lib/utility/get-ids.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDateArray",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDayOfWeek",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFirstDayOfMonth",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupByListValues",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that creates a group based on the list of values of the item&#39;s property.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupByValue",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that creates a group based on the value of the item&#39;s property.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupsFromMap",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that transforms a map of groups into a list.</p>\n",
                "args": [
                    {
                        "name": "groupsMap",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "groupsMap",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMany",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get multiple values by their keys</p>\n",
                "args": [
                    {
                        "name": "keys",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<T[]>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2701,
                            "end": 2705,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "keys"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2695,
                            "end": 2700,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2717,
                            "end": 2728,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 2711,
                            "end": 2716,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "getMemberName",
                "file": "projects/data/src/lib/utility/get-display-name.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "ClanMember",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMemberProfileId",
                "file": "projects/data/src/lib/utility/get-ids.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMembershipType",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileItems",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileItems",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileMetrics",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileMetrics",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileName",
                "file": "projects/data/src/lib/utility/get-display-name.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "member",
                        "type": "MemberProfile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileRecords",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileRecords",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProgressionValues",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProgressionValues",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivities",
                "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "raw",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "raw",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByDate",
                "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByMonth",
                "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<MemberActivityRecentStatsActivity>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByWeek",
                "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<MemberActivityRecentStatsActivity>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivitiesByWeek",
                "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<MemberActivityRecentStatsActivity>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivityStatsByDate",
                "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivityStatsByMonth",
                "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupActivityStatsByWeek",
                "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initStateFromLocalStorage",
                "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<AppState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isMobile",
                "file": "projects/clan-dashboard/src/app/core/utilities/is-mobile.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "boolean"
            },
            {
                "name": "isValidDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "keys",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get all keys in the store.</p>\n",
                "args": [
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<KeyType[]>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5580,
                            "end": 5591,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 5574,
                            "end": 5579,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "lastWord",
                "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "words",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "words",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "locationProvider",
                "file": "projects/data/src/lib/injection-tokens/location-token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "locationProvider",
                "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "m",
                "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "c",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "c",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusMinutes",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusWeeks",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "numberMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "NumberEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "NumberEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "playtime",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileSerializer",
                "file": "projects/data/src/lib/profile/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileMetrics",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileMetrics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileSerializer",
                "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileMetrics",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileMetrics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "promisifyRequest",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "request",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<T>",
                "jsdoctags": [
                    {
                        "name": "request",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "searchItems",
                "file": "projects/components/src/lib/data/filterer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenizeItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenizeItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "serializeProgression",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "set",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Set a value with a key.</p>\n",
                "args": [
                    {
                        "name": "key",
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1644,
                            "end": 1647,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "key"
                        },
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1638,
                            "end": 1643,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1659,
                            "end": 1664,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "value"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1653,
                            "end": 1658,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1676,
                            "end": 1687,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 1670,
                            "end": 1675,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "setMany",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Set multiple values at once. This is faster than calling set() multiple times.\nIt&#39;s also atomic – if one of the pairs can&#39;t be added, none will be added.</p>\n",
                "args": [
                    {
                        "name": "entries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2189,
                            "end": 2196,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "entries"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2183,
                            "end": 2188,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Array of entries, where each entry is an array of <code>[key, value]</code>.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2274,
                            "end": 2285,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 2268,
                            "end": 2273,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "sortItems",
                "file": "projects/components/src/lib/data/sorter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "comparator",
                        "type": "SortComparator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reverse",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "C",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "comparator",
                        "type": "SortComparator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reverse",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "C",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stateMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputState",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "StateEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputState",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "StateEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textArrayMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tryJSONParse",
                "file": "projects/data/src/lib/utility/try-json-parse.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "json",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T | undefined",
                "jsdoctags": [
                    {
                        "name": "json",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unixTimeStampToDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "update",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Update a value. This lets you see the old value and update it as an atomic operation.</p>\n",
                "args": [
                    {
                        "name": "key",
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "updater",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3148,
                            "end": 3151,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "key"
                        },
                        "type": "IDBValidKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3142,
                            "end": 3147,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3163,
                            "end": 3170,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "updater"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3157,
                            "end": 3162,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>A callback that takes the old value and returns a new value.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3243,
                            "end": 3254,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 3237,
                            "end": 3242,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "values",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get all values in the store.</p>\n",
                "args": [
                    {
                        "name": "customStore",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()"
                    }
                ],
                "returnType": "Promise<T[]>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 6214,
                            "end": 6225,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customStore"
                        },
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "defaultGetStore()",
                        "tagName": {
                            "pos": 6208,
                            "end": 6213,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                    }
                ]
            },
            {
                "name": "windowProvider",
                "file": "projects/data/src/lib/injection-tokens/window-token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "AggregateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/clan-aggregate-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "ClanSearchResultItemType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"player\" | \"clan\"",
                "file": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DateEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"before\" | \"after\" | \"on\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DeepPartial",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/models/DeepPartial.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "ExporterContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/exporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextFilter | NumberFilter | DateFilter | StateFilter",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FiltererContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<M>",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FiltererMetadata",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextFiltererMetadata<T | C> | NumberFiltererMetadata<T | C> | DateFiltererMetadata<T | C> | StateFiltererMetadata<T | C>",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FilterType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"number\" | \"date\" | \"state\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "NumberEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"greaterThan\" | \"lessThan\" | \"equalTo\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RenderedView",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent",
                "file": "projects/components/src/lib/data/viewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SortComparator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/data/sorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "SorterContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/sorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "StateEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"is\" | \"notIs\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "StoreId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "TextEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contains\" | \"is\" | \"notContains\" | \"notIs\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TextFilterAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UseStore",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/data/src/lib/manifest/test-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ViewerContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/viewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "MembershipTypes",
                "childs": [
                    {
                        "name": "Xbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Psn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Steam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "Blizzard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "Stadia",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "Demon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/models/enums/MembershipTypes.ts"
            },
            {
                "name": "StoreId",
                "childs": [
                    {
                        "name": "ClanDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanDetails"
                    },
                    {
                        "name": "MemberProfiles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberProfiles"
                    },
                    {
                        "name": "MemberActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivities"
                    },
                    {
                        "name": "MemberRecentActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberRecentActivities"
                    },
                    {
                        "name": "BungieInfo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BungieInfo"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts"
            }
        ],
        "groupedVariables": {
            "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableFilterer.ts": [
                {
                    "name": "ACTIVITY_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeFilterer.ts": [
                {
                    "name": "ACTIVITY_MODE_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ProfileRecentActivity>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeSorter.ts": [
                {
                    "name": "ACTIVITY_MODE_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ProfileRecentActivity>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        getBungieDisplayName(a.profile).toLowerCase() < getBungieDisplayName(b.profile).toLowerCase() ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     comparator: (a, b) => ((a.profileActivity.stats.lastWeek || 0) < (b.profileActivity.stats.lastWeek || 0) ? -1 : 1)\r\n  //   }\r\n  // ],\r\n\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastMonth || 0) < (b.profileActivity.stats.lastMonth || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastNinetyDays || 0) < (b.profileActivity.stats.lastNinetyDays || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastLogin',\r\n  //   {\r\n  //     label: 'Last Login',\r\n  //     comparator: (a, b) =>\r\n  //       (new Date(a.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900)) <\r\n  //       (new Date(b.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900))\r\n  //         ? -1\r\n  //         : 1\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeViewer.ts": [
                {
                    "name": "ACTIVITY_MODE_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<\r\n  string,\r\n  ViewerMetadata<ProfileRecentActivity, ActivityModeViewContext>\r\n>([\r\n  // [\r\n  //   'playerName',\r\n  //   {\r\n  //     label: 'Display Name',\r\n  //     isSticky: true,\r\n  //     plainText: (item: ProfileRecentActivity) => `${item.member?.destinyUserInfo?.displayName}`,\r\n  //     render: (item: ProfileRecentActivity) => {\r\n  //       return {\r\n  //         text: `${item.member?.destinyUserInfo?.displayName}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: ProfileRecentActivity) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ProfileRecentActivity) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // TODO: Add back\r\n  // [\r\n  //   'dateLastPlayed',\r\n  //   {\r\n  //     label: 'Last Played',\r\n  //     plainText: (item: ProfileRecentActivity, context: ActivityModeViewContext) =>\r\n  //       `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ActivityModeViewContext) => {\r\n  //       return {\r\n  //         text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableSorter.ts": [
                {
                    "name": "ACTIVITY_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ClanMemberProfile>>([\r\n\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     comparator: (a, b) =>\r\n  //       a.profile?.profile?.data.userInfo.displayName?.toLowerCase() <\r\n  //       b.profile?.profile?.data.userInfo.displayName?.toLowerCase()\r\n  //         ? -1\r\n  //         : 1\r\n  //   }\r\n  // ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        compare(getBungieDisplayName(a.profile).toLowerCase(), getBungieDisplayName(b.profile).toLowerCase())\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableViewer.ts": [
                {
                    "name": "ACTIVITY_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  // [\r\n  //   'playerName',\r\n  //   {\r\n  //     label: 'Display Name',\r\n  //     isSticky: true,\r\n  //     plainText: (item: ClanMemberProfile) => `${item.member?.destinyUserInfo?.displayName}`,\r\n  //     render: (item: ClanMemberProfile) => {\r\n  //       return {\r\n  //         text: `${item.member?.destinyUserInfo?.displayName}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      isSticky: true,\r\n      plainText: (item: ClanMemberProfile) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanMemberProfile) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ClanMemberProfile) => `${item.clan.clanName}`,\r\n      render: (item: ClanMemberProfile) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts": [
                {
                    "name": "addClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string; clanName: string; clanTag: string }>())"
                },
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Clans] - '"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                },
                {
                    "name": "removeClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
                },
                {
                    "name": "resetClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Reset Clan'), props<{ clanId: string; clanName: string; clanTag: string }>())"
                },
                {
                    "name": "setClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
                },
                {
                    "name": "updateBungieInfoSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Bungie Info Sync'), props<{ clanId: string }>())"
                },
                {
                    "name": "updateClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
                },
                {
                    "name": "updateClanMemberActivitySync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan Activity Sync'), props<{ clanId: string }>())"
                },
                {
                    "name": "updateClanProfileSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts": [
                {
                    "name": "addNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(`${base} Add Notification`, props<{ notification: Notification }>())"
                },
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Notifications] - '"
                },
                {
                    "name": "removeNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(`${base} Remove Notification`, props<{ notification: Notification }>())"
                },
                {
                    "name": "updateNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(`${base} Update Notification`, props<{ notification: Notification }>())"
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts": [
                {
                    "name": "ALL_CLANS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[DOD, DOD_PC]"
                },
                {
                    "name": "DOD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedClan",
                    "defaultValue": "{\r\n  key: 'dod',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'All Platforms',\r\n      clans: m(dod_clans_all)\r\n    },\r\n    {\r\n      title: 'PC',\r\n      clans: m(dod_clans_pc)\r\n    },\r\n    {\r\n      title: 'Playstation',\r\n      clans: m(dod_clans_ps)\r\n    },\r\n    {\r\n      title: 'Play Station',\r\n      clans: m(dod_clans_xbox)\r\n    }\r\n  ]\r\n}"
                },
                {
                    "name": "dod_clans_all",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  4803739, //DoD Still Vexier Than You\r\n  4523816, //DoD Lightforged\r\n  223562, //DoD Westside\r\n  523657, //DoD Battleborn\r\n  3872451, //DoD Battleborn Ascendant\r\n  1726332 //DoD California\r\n]"
                },
                {
                    "name": "dod_clans_pc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  2073131, // Chums\r\n  5018079, //compadres\r\n  4322250, // DoD Dad Guard\r\n  2866236, // GMT\r\n  4430645, //Family Pride\r\n  4473297, // Guiding light\r\n  4767446 // Lucid Loops\r\n]"
                },
                {
                    "name": "dod_clans_ps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[2942177, 1288185, 2071608, 1771725, 1161209, 2180975, 3136336, 1186355, 1375802]"
                },
                {
                    "name": "dod_clans_xbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  910604, //DOD Chattawhyte Krew\r\n  849654, //DoD Empire/Orbit/Rebellion/United\r\n  1179713, //DoD Iron Warlords\r\n  4271754, //DoD Shenanigans,\r\n  3219957, //DoD Storm ,\r\n  4748154, // DoD West Coast Blueberries\r\n  806412, // DoD X1 Foxtrot,\r\n  167225 //Dads of Destiny X1 Ghost\r\n]"
                },
                {
                    "name": "DOD_PC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedClan",
                    "defaultValue": "{\r\n  key: 'dod-pc',\r\n  title: \"Dad's of Destiny\",\r\n  subGroups: [\r\n    {\r\n      title: 'PC',\r\n      clans: m([\r\n        2073131, // Chums\r\n        5018079,\r\n        3816773\r\n      ]) //compadres])\r\n    }\r\n  ]\r\n}"
                }
            ],
            "projects/components/src/lib/data/utility/filter-matcher.ts": [
                {
                    "name": "AND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' AND '"
                },
                {
                    "name": "OR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' OR '"
                }
            ],
            "projects/clan-dashboard/src/app/core/services/local-storage.service.ts": [
                {
                    "name": "APP_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'D2DASH-'"
                }
            ],
            "projects/components/src/lib/icons/member-type.stories.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/member-type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Manifest] - '"
                },
                {
                    "name": "loadManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('load'))"
                },
                {
                    "name": "loadManifestComplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('complete'))"
                },
                {
                    "name": "loadManifestFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ClansMemberPorfile] - '"
                },
                {
                    "name": "initializeClanMemberProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Initialize ClanMemberProfiles'))"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                },
                {
                    "name": "setClanMemberProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Set ClanMemberProfiles'), props<{ clanMemberProfiles: ClanMemberProfileWID[] }>())"
                }
            ],
            "projects/clan-dashboard/src/environments/constants.ts": [
                {
                    "name": "baseConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  D2DASHBOARD_ACKNOWLEDGE_OFFLINE: 'D2DASHBOARD_ACKNOWLEDGE_OFFLINE',\r\n  PROFILE_UPDATING_EXP_MINUTES: 180,\r\n  MEMBER_RECENT_ACTIVITY_EXP_MINUTES: 360,\r\n  CURRENT_SEALS_HASH: 616318467\r\n}"
                }
            ],
            "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts": [
                {
                    "name": "baseUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://dungeon.report'"
                },
                {
                    "name": "getDungeonReportUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(platform: number, displayName: string, membershipId: number) => {\r\n  switch (platform) {\r\n    case MembershipTypes.Xbox:\r\n      return getXBOXUrl(displayName);\r\n    case MembershipTypes.Psn:\r\n      return getPSUrl(displayName);\r\n    case MembershipTypes.Steam:\r\n      return getPCUrl(membershipId);\r\n    case MembershipTypes.Stadia:\r\n      return getStadiaUrl(membershipId);\r\n    default:\r\n      return '';\r\n  }\r\n}"
                },
                {
                    "name": "getPCUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/pc/${membershipId}`;\r\n}"
                },
                {
                    "name": "getPSUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/ps/${escape(displayName)}`;\r\n}"
                },
                {
                    "name": "getStadiaUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/stadia/${membershipId}`;\r\n}"
                },
                {
                    "name": "getXBOXUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/xb/${escape(displayName)}`;\r\n}"
                }
            ],
            "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts": [
                {
                    "name": "baseUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://raid.report'"
                },
                {
                    "name": "getPCUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/pc/${membershipId}`;\r\n}"
                },
                {
                    "name": "getPSUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/ps/${escape(displayName)}`;\r\n}"
                },
                {
                    "name": "getRaidReportUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(platform: number, displayName: string, membershipId: number) => {\r\n  switch (platform) {\r\n    case MembershipTypes.Xbox:\r\n      return getXBOXUrl(displayName);\r\n    case MembershipTypes.Psn:\r\n      return getPSUrl(displayName);\r\n    case MembershipTypes.Steam:\r\n      return getPCUrl(membershipId);\r\n    case MembershipTypes.Stadia:\r\n      return getStadiaUrl(membershipId);\r\n    default:\r\n      return '';\r\n  }\r\n}"
                },
                {
                    "name": "getStadiaUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(membershipId: number) => {\r\n  return `${baseUrl}/stadia/${membershipId}`;\r\n}"
                },
                {
                    "name": "getXBOXUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(displayName: string) => {\r\n  return `${baseUrl}/xb/${escape(displayName)}`;\r\n}"
                }
            ],
            "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts": [
                {
                    "name": "Children",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RenderedViewComponent>",
                    "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/data/src/lib/hashes/clan-details.ts": [
                {
                    "name": "CLAN_LEVEL_HASH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/hashes/clan-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'584850370'"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts": [
                {
                    "name": "CLAN_ROSTER_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      text: (item: ProfileRecentActivity) => `${item.clan.clanName}`\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastWeek)}`\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastMonth)}`\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days (Minutes)',\r\n  //     text: (item: ProfileRecentActivity) => `${convertToMinutes(item.profileActivity?.stats?.lastNinetyDays)}`\r\n  //   }\r\n  // ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      text: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile?.data?.dateLastPlayed as unknown as Date)}`\r\n    }\r\n  ]\r\n])"
                },
                {
                    "name": "convertToMinutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(totalSeconds) => String(Math.floor(totalSeconds / 60))"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts": [
                {
                    "name": "CLAN_ROSTER_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts": [
                {
                    "name": "CLAN_ROSTER_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ClanRosterItem>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.destinyUserInfo?.displayName?.toLowerCase() < b.member?.destinyUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        a.member?.bungieNetUserInfo?.displayName?.toLowerCase() <\r\n        b.member?.bungieNetUserInfo?.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      comparator: (a, b) => (a.member?.destinyUserInfo?.membershipType < b.member?.destinyUserInfo?.membershipType ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Unique Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.uniqueName?.toLowerCase() <\r\n        b.bungieInfo?.uniqueName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  // ----\r\n  [\r\n    'psnDisplayName',\r\n    {\r\n      label: 'PSN Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.psnDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.psnDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'xboxDisplayName',\r\n    {\r\n      label: 'XBox Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.xboxDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.xboxDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'steamDisplayName',\r\n    {\r\n      label: 'Steam Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.steamDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.steamDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n\r\n  [\r\n    'twitchDisplayName',\r\n    {\r\n      label: 'Twitch Name',\r\n      comparator: (a, b) =>\r\n        a.bungieInfo?.twitchDisplayName?.toLowerCase() <\r\n        b.bungieInfo?.twitchDisplayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n\r\n  // ----\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: 'Power Level',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus <\r\n        b.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'rank',\r\n    {\r\n      label: 'Guardian Rank',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data?.currentGuardianRank < b.profile?.profile?.data?.currentGuardianRank ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeRank',\r\n    {\r\n      label: 'Lifetime Guardian Rank',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data?.lifetimeHighestGuardianRank < b.profile?.profile?.data?.lifetimeHighestGuardianRank ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.activeScore < b.profile?.profileRecords?.data?.activeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      comparator: (a, b) =>\r\n        a.profile?.profileRecords?.data?.lifetimeScore < b.profile?.profileRecords?.data?.lifetimeScore ? -1 : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName < b.clan.clanName ? -1 : 1)\r\n    }\r\n  ],\r\n\r\n  [\r\n    'joinDate',\r\n    {\r\n      label: 'Join Date',\r\n      comparator: (a, b) => (new Date(a.member?.joinDate) < new Date(b.member?.joinDate) ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Date Last Played',\r\n      comparator: (a, b) =>\r\n        new Date(a.profile?.profile.data.dateLastPlayed) < new Date(b.profile?.profile.data.dateLastPlayed) ? -1 : 1\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts": [
                {
                    "name": "CLAN_ROSTER_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<ClanRosterItem, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      //  labelClass: 'text-header-center',\r\n      plainText: (item: ClanRosterItem) => `${getMembershipType(item.member.destinyUserInfo.membershipType)}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        //        styles: {},\r\n        classList: ['text-center'],\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member?.destinyUserInfo?.membershipType || 0 }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      labelClass: '',\r\n      isSticky: true,\r\n      plainText: (item: ClanRosterItem) => `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.member?.destinyUserInfo?.displayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.member?.bungieNetUserInfo?.displayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Unique Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.uniqueName || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.uniqueName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'psnName',\r\n    {\r\n      label: 'PSN Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.psnDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.psnDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'xboxName',\r\n    {\r\n      label: 'XBox Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.xboxDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.xboxDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'steamName',\r\n    {\r\n      label: 'Steam Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.steamDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({ text: `${item.bungieInfo?.steamDisplayName || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'twitchName',\r\n    {\r\n      label: 'Twitch Name',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item?.bungieInfo?.twitchDisplayName || ''}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        text: `${item.bungieInfo?.twitchDisplayName || ''}`,\r\n        classList: []\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: ClanRosterItem) => {\r\n        const characterIds = item.profile?.profile?.data?.characterIds;\r\n        return {\r\n          classList: 'characters-cell',\r\n          children: characterIds?.map((id) => {\r\n            return {\r\n              classList: 'character-cell',\r\n              component: ClassCellComponent,\r\n              data: {\r\n                characterHash: id,\r\n                profile: item.profile\r\n              }\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: 'power-cell',\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'rank',\r\n    {\r\n      label: 'Guardian Rank',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profile?.data?.currentGuardianRank}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profile?.data?.currentGuardianRank}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeRank',\r\n    {\r\n      label: 'Lifetime Guardian Rank',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profile?.data?.lifetimeHighestGuardianRank}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profile?.data?.lifetimeHighestGuardianRank}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileRecords?.data?.activeScore}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.profile?.profileRecords?.data?.lifetimeScore}`,\r\n      render: (item: ClanRosterItem) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clan',\r\n    {\r\n      label: 'Clan',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem) => `${item.clan.clanName}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${item.clan.clanName}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'bungieProfileCreation',\r\n    {\r\n      label: 'Bungie Join Date',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.bungieInfo?.firstAccess || (new Date() as unknown as Date))}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.bungieInfo?.firstAccess || (new Date() as unknown as Date))}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`,\r\n          classList: []\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      labelClass: '',\r\n      plainText: (item: ClanRosterItem, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ClanRosterItem, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts": [
                {
                    "name": "ClanConfigAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ClanConfig>",
                    "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
                },
                {
                    "name": "DefaultClanConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "defaultValue": "{\r\n  enabled: true,\r\n  memberUpdate: '1/1/1900',\r\n  profileUpdate: '1/1/1900',\r\n  memberRecentActivityUpdate: '1/1/1900',\r\n  bungieInfoUpdate: '1/1/1900'\r\n} as ClanConfig"
                },
                {
                    "name": "initialClanState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "defaultValue": "ClanConfigAdapter.getInitialState({})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts": [
                {
                    "name": "CLANS_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'clans'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts": [
                {
                    "name": "ClansMembersProfilesAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ClanMemberProfileWID>",
                    "defaultValue": "createEntityAdapter<ClanMemberProfileWID>({\r\n    selectId: (cc: ClanMemberProfileWID) => cc.id,\r\n    sortComparer: false\r\n  })"
                },
                {
                    "name": "initialClanMemberProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansMembersProfilesState",
                    "defaultValue": "ClansMembersProfilesAdapter.getInitialState({\r\n  isLoading: true\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.reducers.ts": [
                {
                    "name": "ClansMembersProfilesReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialClanMemberProfileState,\r\n  on(initializeClanMemberProfiles, (state): ClansMembersProfilesState => ({ ...state, isLoading: true })),\r\n  on(\r\n    setClanMemberProfiles,\r\n    (state, { clanMemberProfiles }): ClansMembersProfilesState =>\r\n      ClansMembersProfilesAdapter.setAll(clanMemberProfiles, { ...state, isLoading: false })\r\n  )\r\n)"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts": [
                {
                    "name": "ClansReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId, clanName, clanTag }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      return ClanConfigAdapter.upsertOne({ clanId, clanName, clanTag, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n  on(resetClan, (state, { clanId, clanName, clanTag }) => {\r\n    return ClanConfigAdapter.upsertOne({ clanId, clanName, clanTag, ...DefaultClanConfig }, { ...state });\r\n  }),\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
                }
            ],
            "projects/clan-dashboard/src/app/core/core.state.ts": [
                {
                    "name": "coreEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ManifestEffects, ClansEffects, ClansMembersProfilesEffects]"
                },
                {
                    "name": "coreReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer,\r\n  notifications: NotificationReducer,\r\n  clansMembersProfiles: ClansMembersProfilesReducer\r\n}"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[initStateFromLocalStorage]"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts": [
                {
                    "name": "CURATED_ACTIVITIES_ALL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivity[]",
                    "defaultValue": "[\r\n  ...CURATED_ACTIVITIES_EXOTIC_MISSIONS.activities,\r\n  ...CURATED_ACTIVITIES_DUNGEONS.activities,\r\n  ...CURATED_ACTIVITIES_RAIDS.activities,\r\n  ...CURATED_ACTIVITIES_PINNACLE.activities\r\n]"
                },
                {
                    "name": "CURATED_ACTIVITY_GROUPS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivityGroup[]",
                    "defaultValue": "[\r\n  CURATED_ACTIVITIES_EXOTIC_MISSIONS,\r\n  CURATED_ACTIVITIES_DUNGEONS,\r\n  CURATED_ACTIVITIES_RAIDS,\r\n  CURATED_ACTIVITIES_PINNACLE\r\n]"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.dungeons.ts": [
                {
                    "name": "CURATED_ACTIVITIES_DUNGEONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.dungeons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivityGroup",
                    "defaultValue": "{\r\n  title: 'Dungeons',\r\n  activities: [\r\n    {\r\n      hash: 1262462921,\r\n      metrics: [\r\n        3702217360, //Spire of the Watcher Completions\r\n        411086447, //Spire of the Watcher Flawless Solo Completions\r\n        4002846192 //Spire of the Watcher Flawless Completions\r\n      ],\r\n      collections: [\r\n        3558330464 //3558330464\r\n        // 4174431791\r\n      ],\r\n      records:[\r\n        3006836031, //InSPIREd Posse\r\n        958830294, //Resident Vexpert\r\n      ]\r\n    },\r\n    {\r\n      // Duality\r\n      hash: 2823159265,\r\n      metrics: [\r\n        3862075762, // Completions\r\n        1034442994, // flawless\r\n        1084707005 , // flawless solo\r\n      ],\r\n      collections: [\r\n        467760883, //Heartshadow\r\n        1047374873 //Mandate of Strength\r\n      ],\r\n      records:[\r\n        2388189655, //United in Secrecy\r\n        196842574, //Master Thoughtstealer\r\n      ]\r\n    },\r\n    {\r\n      // Grasp\r\n      hash: 4078656646,\r\n      metrics: [\r\n        451157118, // Completions\r\n        2269915270, // flawless\r\n        3765286137 , // flawless solo\r\n      ],\r\n      collections: [\r\n        4027219968, // Galler\r\n        196980257 // Gallarswift\r\n      ],\r\n      records:[\r\n        2411018844, // Master\r\n      ]\r\n    },\r\n    {\r\n      // Prophecy\r\n      hash: 4148187374,\r\n      metrics: [\r\n        352659556 , // completions\r\n        1099614108 , // flawless\r\n      ],\r\n      collections: [\r\n        3865096258, // Hareball SHell,\r\n        1669843839 //Of Ten Suns\r\n      ],\r\n      records:[\r\n        3191784400, // Solo flawless\r\n      ]\r\n    },\r\n    {\r\n      // Pit\r\n      hash: 1375089621,\r\n      metrics: [\r\n        1451729471, // completions\r\n        310888283, // Flawless\r\n        3741172422, // flawless solo\r\n      ],\r\n      collections: [\r\n        1258579677 // xeno\r\n      ]\r\n    },\r\n    {\r\n      // Throne\r\n      hash: 2032534090,\r\n      metrics: [\r\n        1339818929, // Completions\r\n        761318885, // Flawless\r\n      ],\r\n      collections: [\r\n        1660030044 // wish ender\r\n      ],\r\n      records:[\r\n        3899996566, // Solo ,\r\n        174211525, // full gear\r\n        2436465535,  //Thorny predicament\r\n        4180867423, // Douse\r\n\r\n      ]\r\n    }\r\n  ]\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.exotic.ts": [
                {
                    "name": "CURATED_ACTIVITIES_EXOTIC_MISSIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.exotic.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivityGroup",
                    "defaultValue": "{\r\n  title: 'Exotic Missions',\r\n  activities: [\r\n    {\r\n      hash: 3755529435,\r\n      metrics: [],\r\n      collections: [\r\n        2629609052,//\r\n        2689028695\r\n      ],\r\n      records: [\r\n        3271224950, // Flawless\r\n        1589025252, // Legendary flawless\r\n        1967189514, /// Solo\r\n        154855905, // 30 min\r\n        297678175, // truley satisfactory\r\n      ]\r\n    },\r\n    {\r\n      hash: 202306511,\r\n      metrics: [],\r\n      collections: [\r\n        // 760708739, //??\r\n        1161231112 //??\r\n      ],\r\n      records: [\r\n        3645325693, // Solo\r\n        2381003836, // Aim for the bushes\r\n        1282305097, // Solo Flawless\r\n        1168356473, // Flawless seraph\r\n        3011661755, // Legend flawless\r\n        110405822 // Dog\r\n      ]\r\n    },\r\n    {\r\n      // Vox\r\n      hash: 901429423,\r\n      metrics: [],\r\n      collections: [4028619088, 154026683],\r\n      records: [\r\n        2846845044, // Complated master\r\n        3219227863, // Completed catalyst\r\n        2012324885, // Listen to all propoganda\r\n        978050738 // Master flawless\r\n      ]\r\n    }\r\n  ]\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.pinnacle.ts": [
                {
                    "name": "CURATED_ACTIVITIES_PINNACLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.pinnacle.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivityGroup",
                    "defaultValue": "{\r\n  title: 'Pinnacle Activities',\r\n  activities: [\r\n    {\r\n      // Trials\r\n      hash: 588019350,\r\n      metrics: [\r\n        1365664208, // wins\r\n        2367472811,// Wins this season\r\n        1765255052, // flawwless\r\n        1114483243, //  Flawless this season\r\n        2082314848, //Opponents Defeated\r\n        301249970, // Caries\r\n        4112712479 // Flawless seal guilding\r\n      ],\r\n      collections: [\r\n        1212240353, // shell\r\n        4150064816, // sparrow\r\n        39134720 // ship\r\n      ],\r\n      records:[\r\n        3064133018,\r\n        1662916867,\r\n        1965035984,\r\n        1522246467,\r\n        2502902092\r\n      ]\r\n    },\r\n    {\r\n      // Iron Banner\r\n      hash: 2014552458,\r\n      metrics: [\r\n\r\n      ],\r\n      collections: [\r\n\r\n      ],\r\n      records:[\r\n        2096302465,\r\n        4159436958,\r\n        999240767,\r\n        280201145,\r\n        3191049056,\r\n        4001216960,\r\n        3644674925\r\n      ]\r\n    }\r\n  ]\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.raids.ts": [
                {
                    "name": "CURATED_ACTIVITIES_RAIDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.raids.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CuratedActivityGroup",
                    "defaultValue": "{\r\n  title: 'Raids',\r\n  activities: [\r\n    {\r\n      // Root of Nightmare\r\n      hash: 2381413764, // may be 1191701339\r\n      metrics: [\r\n        321051454, // completions\r\n        2499684194, // Carries\r\n        // 1624029217, //King's Fall Completions\r\n        // 4210188841 //  Carries complete\r\n      ],\r\n      collections: [\r\n        2553509474\r\n        // 192937277, // ToM\r\n        // 2100640553, // Ship\r\n        // 1942146807 //sparrow\r\n      ],\r\n      records: [\r\n        397062446, // Living Nightmares Flawwless\r\n        4149006431 // Final Nightmare\r\n      ]\r\n    },\r\n    {\r\n      // Kings Fall\r\n      hash: 1374392663,\r\n      metrics: [\r\n        1624029217, //King's Fall Completions\r\n        4210188841 //  Carries complete\r\n      ],\r\n      collections: [\r\n        192937277, // ToM\r\n        2100640553, // Ship\r\n        1942146807 //sparrow\r\n      ],\r\n      records: [\r\n        1360511082, //Flawless\r\n        70932677, // clan\r\n        3388215749 // Master\r\n      ]\r\n    },\r\n    {\r\n      // Vow\r\n      hash: 1441982566,\r\n      metrics: [3585185883, 2629533159],\r\n      collections: [\r\n        2817568609, // weapon\r\n        3070552038, // shell\r\n        844832867 // Sparrow\r\n      ],\r\n      records: [\r\n        610864524, // Master\r\n        4019717242, // Flawless\r\n        3330343477 // Clan\r\n      ]\r\n    },\r\n    {\r\n      //Vault\r\n      hash: 3881495763,\r\n      metrics: [\r\n        2506886274, 619234070\r\n        //905219689 Time trial\r\n      ],\r\n      collections: [\r\n        2300465938, // weapon\r\n        958866288 // ship\r\n      ],\r\n      records: [\r\n        2750088202, // Flawless\r\n        991121189, // Vault of clans\r\n        3890225317 //  master\r\n      ]\r\n    },\r\n    {\r\n      // DSC\r\n      hash: 910380154,\r\n      metrics: [\r\n        954805812, 2330596844\r\n        //  3679202587 //Time trial\r\n      ],\r\n      collections: [\r\n        753200559, //weapon\r\n        3574313939, //shell\r\n        392272160 // sparrow\r\n      ],\r\n      records: [\r\n        3560923614, // Flawless\r\n        518342793 // clan\r\n      ]\r\n    },\r\n    {\r\n      // Garden\r\n      hash: 2659723068,\r\n      metrics: [\r\n        1168279855, 3331373451\r\n        //1835852368// time trial\r\n      ],\r\n      collections: [\r\n        1988948484 // weapon\r\n      ],\r\n      records: [\r\n        1221037312, // Clan night\r\n        1522774125 // flawless\r\n      ]\r\n    },\r\n    {\r\n      //LW\r\n      hash: 1661734046,\r\n      metrics: [\r\n        905240985, 1139173585\r\n        //4164362538 // Time trial\r\n      ],\r\n      collections: [\r\n        199171385, // weapon\r\n        3360537485, // shell\r\n        3163873693, //ship\r\n        1469913804 //sparrow\r\n      ],\r\n      records: [\r\n        4078980921, // Clan Night\r\n        380332968 // Petra's run\r\n      ]\r\n    }\r\n  ]\r\n}"
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "['allData']"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "6"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "[\r\n // StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  //StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.BungieInfo\r\n  //StoreId.ProfileMilestones,\r\n  //StoreId.MemberActivityStats,\r\n  //StoreId.ProfileMetrics,\r\n // StoreId.Raids\r\n]"
                }
            ],
            "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MatButton>",
                    "defaultValue": "(args: MatButton) => ({\r\n  component: MatButton,\r\n  props: args,\r\n  styles: [\r\n    `\r\n  section {\r\n    display: table;\r\n  }\r\n  .example-label {\r\n    display: table-cell;\r\n    font-size: 14px;\r\n    margin-left: 8px;\r\n    min-width: 120px;\r\n  }\r\n  .example-button-row {\r\n    display: table-cell;\r\n    width: 800px;\r\n  }\r\n  .example-button-row .mat-button-base {\r\n    margin: 8px 8px 8px 0;\r\n  }\r\n  .example-flex-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n  }\r\n  .example-button-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 120px;\r\n  }`\r\n  ],\r\n  template: `\r\n  <section>\r\n  <div class=\"example-label\">Basic</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-button>Basic</button>\r\n    <button mat-button disabled>Disabled</button>\r\n    <button mat-button color=\"primary\">Primary</button>\r\n    <button mat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-button color=\"accent\">Accent</button>\r\n    <button mat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-button color=\"warn\">Warn</button>\r\n    <button mat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Raised</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-raised-button>Basic</button>\r\n    <button mat-raised-button disabled>Disabled</button>\r\n    <button mat-raised-button color=\"primary\">Primary</button>\r\n    <button mat-raised-button color=\"primary\"  disabled>Primary</button>\r\n    <button mat-raised-button color=\"accent\">Accent</button>\r\n    <button mat-raised-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-raised-button color=\"warn\">Warn</button>\r\n    <button mat-raised-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-raised-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Stroked</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-stroked-button>Basic</button>\r\n    <button mat-stroked-button disabled>Disabled</button>\r\n    <button mat-stroked-button color=\"primary\">Primary</button>\r\n    <button mat-stroked-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-stroked-button color=\"accent\">Accent</button>\r\n    <button mat-stroked-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-stroked-button color=\"warn\">Warn</button>\r\n    <button mat-stroked-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-stroked-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Flat</div>\r\n  <div class=\"example-button-row\">\r\n    <button mat-flat-button>Basic</button>\r\n    <button mat-flat-button disabled>Disabled</button>\r\n    <button mat-flat-button color=\"primary\">Primary</button>\r\n    <button mat-flat-button color=\"primary\" disabled>Primary</button>\r\n    <button mat-flat-button color=\"accent\">Accent</button>\r\n    <button mat-flat-button color=\"accent\" disabled>Accent</button>\r\n    <button mat-flat-button color=\"warn\">Warn</button>\r\n    <button mat-flat-button color=\"warn\" disabled>Warn</button>\r\n    <a mat-flat-button href=\"https://www.google.com/\" target=\"_blank\">Link</a>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Icon</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\">\r\n        <mat-icon>home</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"accent\" aria-label=\"Example icon button with a menu icon\">\r\n        <mat-icon>menu</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" aria-label=\"Example icon button with a heart icon\">\r\n        <mat-icon>favorite</mat-icon>\r\n      </button>\r\n      <button mat-icon-button disabled aria-label=\"Example icon button with a open in new tab icon\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"primary\" aria-label=\"Example icon button with a delete icon\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"accent\" aria-label=\"Example icon button with a bookmark icon\">\r\n          <mat-icon>bookmark</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab color=\"warn\" aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-fab disabled aria-label=\"Example icon button with a heart icon\">\r\n          <mat-icon>favorite</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n<mat-divider></mat-divider>\r\n<section>\r\n  <div class=\"example-label\">Mini FAB</div>\r\n  <div class=\"example-button-row\">\r\n    <div class=\"example-flex-container\">\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"primary\" aria-label=\"Example icon button with a menu icon\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"accent\" aria-label=\"Example icon button with a plus one icon\">\r\n          <mat-icon>plus_one</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab color=\"warn\" aria-label=\"Example icon button with a filter list icon\">\r\n          <mat-icon>filter_list</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"example-button-container\">\r\n        <button mat-mini-fab disabled aria-label=\"Example icon button with a home icon\">\r\n          <mat-icon>home</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n  `\r\n})"
                }
            ],
            "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MatCard>",
                    "defaultValue": "(args: MatCard) => ({\r\n  component: MatCard,\r\n  props: args,\r\n  styles: [\r\n    `\r\n    .example-card {\r\n        max-width: 400px;\r\n      }\r\n\r\n      .example-header-image {\r\n        background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\r\n        background-size: cover;\r\n      }\r\n   `\r\n  ],\r\n  template: `\r\n    <mat-card>\r\n    <mat-card-content>Simple card</mat-card-content>\r\n  </mat-card>\r\n  <hr>\r\n<a class=\"mat-card-link\">\r\n<mat-card>\r\n    <mat-card-content>Link Card</mat-card-content>\r\n  </mat-card>\r\n  </a>\r\n  <hr>\r\n\r\n  <mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>Actions Buttons</mat-card-title>\r\n    <mat-card-subtitle>Start</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n<hr>\r\n<mat-card class=\"example-card\">\r\n  <mat-card-header>\r\n    <div mat-card-avatar class=\"example-header-image\"></div>\r\n    <mat-card-title>Shiba Inu</mat-card-title>\r\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\r\n  <mat-card-content>\r\n    <p>\r\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\r\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\r\n      bred for hunting.\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button mat-button>LIKE</button>\r\n    <button mat-button>SHARE</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n    `\r\n})"
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "DEFAULT_TOKENIZE_ITEM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  }",
                    "rawdescription": "Default and naive tokenize function that combines the item's property values into a string.",
                    "description": "<p>Default and naive tokenize function that combines the item&#39;s property values into a string.</p>\n"
                }
            ],
            "projects/data/src/lib/manifest/test-db.ts": [
                {
                    "name": "defaultGetStoreFunc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UseStore | undefined"
                }
            ],
            "projects/data/src/lib/models/DestinyActivityModeCategory.ts": [
                {
                    "name": "DESTINY_ACTIVITY_MODES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyActivityModeCategory[]",
                    "defaultValue": "[NONE, PvE, PvP, PvECompetitive]"
                },
                {
                    "name": "NONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyActivityModeCategory",
                    "defaultValue": "{\r\n  id: 0,\r\n  title: 'All',\r\n  desc: 'Activities that are neither PVP nor PVE, such as social activities.'\r\n}"
                },
                {
                    "name": "PvE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyActivityModeCategory",
                    "defaultValue": "{\r\n  id: 1,\r\n  title: 'PvE',\r\n  desc: 'PvE activities, where you shoot aliens in the face.'\r\n}"
                },
                {
                    "name": "PvECompetitive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyActivityModeCategory",
                    "defaultValue": "{\r\n  id: 3,\r\n  title: 'PvECompetitive',\r\n  desc: 'PVE competitive activities, where you shoot whoever you want whenever you want. Or run around collecting small glowing triangles.'\r\n}"
                },
                {
                    "name": "PvP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DestinyActivityModeCategory",
                    "defaultValue": "{\r\n  id: 2,\r\n  title: 'PvP',\r\n  desc: 'PvP activities, where you shoot your \"friends\".'\r\n}"
                }
            ],
            "projects/data/src/lib/models/DestinyActivityModeType.ts": [
                {
                    "name": "DestinyActivityModeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/DestinyActivityModeType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  None: 0,\r\n  Story: 2,\r\n  Strike: 3,\r\n  Raid: 4,\r\n  AllPvP: 5,\r\n  Patrol: 6,\r\n  AllPvE: 7,\r\n  Reserved9: 9,\r\n  Control: 10,\r\n  Reserved11: 11,\r\n  Clash: 12,\r\n  CrimsonDoubles: 15,\r\n  Nightfall: 16,\r\n  HeroicNightfall: 17,\r\n  AllStrikes: 18,\r\n  IronBanner: 19,\r\n  Reserved20: 20,\r\n  Reserved21: 21,\r\n  Reserved22: 22,\r\n  Reserved24: 24,\r\n  AllMayhem: 25,\r\n  Reserved26: 26,\r\n  Reserved27: 27,\r\n  Reserved28: 28,\r\n  Reserved29: 29,\r\n  Reserved30: 30,\r\n  Supremacy: 31,\r\n  PrivateMatchesAll: 32,\r\n  Survival: 37,\r\n  Countdown: 38,\r\n  TrialsOfTheNine: 39,\r\n  Social: 40,\r\n  TrialsCountdown: 41,\r\n  TrialsSurvival: 42,\r\n  IronBannerControl: 43,\r\n  IronBannerClash: 44,\r\n  IronBannerSupremacy: 45,\r\n  ScoredNightfall: 46,\r\n  ScoredHeroicNightfall: 47,\r\n  Rumble: 48,\r\n  AllDoubles: 49,\r\n  Doubles: 50,\r\n  PrivateMatchesClash: 51,\r\n  PrivateMatchesControl: 52,\r\n  PrivateMatchesSupremacy: 53,\r\n  PrivateMatchesCountdown: 54,\r\n  PrivateMatchesSurvival: 55,\r\n  PrivateMatchesMayhem: 56,\r\n  PrivateMatchesRumble: 57,\r\n  HeroicAdventure: 58,\r\n  Showdown: 59,\r\n  Lockdown: 60,\r\n  Scorched: 61,\r\n  ScorchedTeam: 62,\r\n  Gambit: 63,\r\n  AllPvECompetitive: 64,\r\n  Breakthrough: 65,\r\n  BlackArmoryRun: 66,\r\n  Salvage: 67,\r\n  IronBannerSalvage: 68,\r\n  PvPCompetitive: 69,\r\n  PvPQuickplay: 70,\r\n  ClashQuickplay: 71,\r\n  ClashCompetitive: 72,\r\n  ControlQuickplay: 73,\r\n  ControlCompetitive: 74,\r\n  GambitPrime: 75,\r\n  Reckoning: 76,\r\n  Menagerie: 77,\r\n  VexOffensive: 78,\r\n  NightmareHunt: 79,\r\n  Elimination: 80,\r\n  Momentum: 81,\r\n  Dungeon: 82,\r\n  Sundial: 83,\r\n  TrialsOfOsiris: 84,\r\n  Dares: 85,\r\n  Offensive: 86,\r\n  LostSector: 87,\r\n  Rift: 88,\r\n  ZoneControl: 89,\r\n  IronBannerRift: 90,\r\n  IronBannerZoneControl: 91\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return {\r\n    id: '1',\r\n    name: 'Item 1',\r\n    iconName: 'people',\r\n    type: 'clan'\r\n  };\r\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanSearchAutocompleteComponent>",
                    "defaultValue": "(args: ClanSearchAutocompleteComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealListItem[]",
                    "defaultValue": "new Array(10).fill('').map((x) => {\r\n  return getRandomSLI();\r\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SealsListComponent>",
                    "defaultValue": "(args: SealsListComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts": [
                {
                    "name": "events",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[MOCK_GRID_ITEMS, MOCK_GRID_ITEMS2.slice(0, 20), MOCK_GRID_CATEGORIES]"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BarChartComponent>",
                    "defaultValue": "(args: BarChartComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/components/src/lib/__mocks__/ListViewExporter.ts": [
                {
                    "name": "EXAMPLE_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<MockListItem>>([\r\n  ['id', { label: 'Id', text: (item) => item.id.toString() }],\r\n  ['startDate', { label: 'Start Date', text: (item) => new Date(item.startDate).toDateString() }]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemFilterer.ts": [
                {
                    "name": "EXAMPLE_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      type:'number',\r\n      matcher:(item, filter) => numberMatchesEquality(item.id, filter.value, filter.equality)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemGrouper.ts": [
                {
                    "name": "EXAMPLE_GROUPER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, GrouperMetadata<MockListItem>>([\r\n  [\r\n    'all',\r\n    {\r\n      label: 'All',\r\n      groupingFunction: (items) => {\r\n        return [{ id: 'all', title: 'All', items }];\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'isPublic', {\r\n      label: 'IsPublic',\r\n      groupingFunction: items => getGroupByValue(items, 'isPublic'),\r\n    }\r\n  ],\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemSorter.ts": [
                {
                    "name": "EXAMPLE_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Name',\r\n      comparator: (a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemViewer.ts": [
                {
                    "name": "EXAMPLE_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'id',\r\n      plainText: (item) => `${item.id}`,\r\n      render: (item) => ({ styles: { fontWeight: 'bold' }, text: `${item.id}` })\r\n    }\r\n  ],\r\n  [\r\n    'isPublic',\r\n    { label: 'Is Public', plainText: (item) => `${item.isPublic}`, render: (item) => ({ text: `${item.isPublic}` }) }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Names',\r\n      tooltip: 'testing tooltip',\r\n      plainText: (item) => `${item.name}`,\r\n      render: (item) => ({ text: `${item.name}` })\r\n    }\r\n  ],\r\n  [\r\n    'startDate',\r\n    {\r\n      label: 'Start Date',\r\n      plainText: (item) => `${new Date(item.startDate).toDateString()}`,\r\n      render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` })\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/data/src/lib/utility/random-number.ts": [
                {
                    "name": "getRandomNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/utility/random-number.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts": [
                {
                    "name": "getRandomSLI",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n  return { seal: MOCK_SEAL_DEFINITION, totalMembers: 100, completedCount: getRandomNumber(1, 100) } as SealListItem;\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/app.component.ts": [
                {
                    "name": "gtag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts": [
                {
                    "name": "initialManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/components/src/lib/shared/table-view/table-view.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableViewComponent>",
                    "defaultValue": "(args: TableViewComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanDetailCellComponent>",
                    "defaultValue": "(args: ClanDetailCellComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "stats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanActivityBarChartComponent>",
                    "defaultValue": "(args: ClanActivityBarChartComponent) => ({\r\n  props: args\r\n})"
                },
                {
                    "name": "today",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 189))"
                },
                {
                    "name": "Updating",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MEMBERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "names",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanMemberCardComponent>",
                    "defaultValue": "(args: ClanMemberCardComponent) => ({\r\n  template: `\r\n  <div style=\"height:300px\">\r\n  <app-clan-member-card [cardTitle]=\"cartTitle\" [members]=\"roster\" [isLoading]=\"isLoading\" [itemTemplate]=\"itemTemplate\">\r\n  <ng-template let-member #itemTemplate>\r\n  <div >\r\n  View\r\n  </div>\r\n  </ng-template>\r\n  </app-clan-member-card>\r\n  </div>\r\n `,\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClanInfoComponent>",
                    "defaultValue": "(args: ClanInfoComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/data/src/lib/injection-tokens/location-token.ts": [
                {
                    "name": "LocationToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/injection-tokens/location-token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Location')"
                }
            ],
            "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts": [
                {
                    "name": "LocationToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Location')"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/data/src/lib/manifest/manifest-loader.service.ts": [
                {
                    "name": "MANIFEST_PATH_EXP_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
                },
                {
                    "name": "MANIFEST_PATH_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_KEY'"
                },
                {
                    "name": "STATUS_DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'done'"
                },
                {
                    "name": "STATUS_EXTRACTING_TABLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'extracting tables'"
                },
                {
                    "name": "STATUS_UNZIPPING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'unzipping'"
                },
                {
                    "name": "VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'v2'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts": [
                {
                    "name": "ManifestReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
                }
            ],
            "projects/data/src/lib/models/__mocks__/clan-details.ts": [
                {
                    "name": "MOCK_CLAN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/__mocks__/clan-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  groupId: '2073131',\r\n  name: 'DoD Paternal Chums',\r\n  groupType: 1,\r\n  membershipIdCreated: '22807',\r\n  creationDate: '2017-08-24T21:26:26.668Z',\r\n  modificationDate: '2022-04-09T00:14:51.491Z',\r\n  about:\r\n    'REQUIRED: Follow the instructions in Discord to be considered for a invite to join.\\n\\nClan Discord: https://discord.gg/z3nsx47\\n\\n---------------------\\n\\nWe are a bunch of Guardians with families who are united around the love of Destiny. We have members who are casuals, full time raiders, triumph fanatics and everything between. \\n\\nOur clan:\\n-- PC is our **only** platform of operation.\\n-- We are based in North America.\\n-- Activities are oriented around play times from 7pm to 11pm in US Eastern timezone. \\n\\nWe are recruiting Dads who are:\\n-- Committed to playing with clan members and participating in Discord voice chat.\\n-- Have a Base Power 1520+\\n-- Aged 25 and older. The average age of our group is 41.\\n-- Can demonstrate consistent recent engagement in Destiny 2 (20+hrs across the last month).',\r\n  tags: [],\r\n  memberCount: 93,\r\n  isPublic: true,\r\n  isPublicTopicAdminOnly: false,\r\n  motto: 'Dads of Destiny PC',\r\n  allowChat: true,\r\n  isDefaultPostPublic: false,\r\n  chatSecurity: 0,\r\n  locale: 'en',\r\n  avatarImageIndex: 0,\r\n  homepage: 0,\r\n  membershipOption: 2,\r\n  defaultPublicity: 2,\r\n  theme: 'Group_Community1',\r\n  bannerPath: '/img/Themes/Group_Community1/struct_images/group_top_banner.jpg',\r\n  avatarPath: '/img/profile/avatars/group/defaultGroup.png',\r\n  conversationId: '27030166',\r\n  enableInvitationMessagingForAdmins: false,\r\n  banExpireDate: '2001-01-01T00:00:00Z',\r\n  features: {\r\n    maximumMembers: 100,\r\n    maximumMembershipsOfGroupType: 1,\r\n    capabilities: 31,\r\n    membershipTypes: [1, 2, 3, 5, 6],\r\n    invitePermissionOverride: true,\r\n    updateCulturePermissionOverride: false,\r\n    hostGuidedGamePermissionOverride: 1,\r\n    updateBannerPermissionOverride: false,\r\n    joinLevel: 1\r\n  },\r\n  clanInfo: {\r\n    d2ClanProgressions: {\r\n      '584850370': {\r\n        progressionHash: 584850370,\r\n        dailyProgress: 200000,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 100000,\r\n        weeklyLimit: 100000,\r\n        currentProgress: 200000,\r\n        level: 2,\r\n        levelCap: 6,\r\n        stepIndex: 2,\r\n        progressToNextLevel: 100000,\r\n        nextLevelAt: 125000\r\n      },\r\n      '1273404180': {\r\n        progressionHash: 1273404180,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3381682691': {\r\n        progressionHash: 3381682691,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      },\r\n      '3759191272': {\r\n        progressionHash: 3759191272,\r\n        dailyProgress: 0,\r\n        dailyLimit: 0,\r\n        weeklyProgress: 0,\r\n        weeklyLimit: 0,\r\n        currentProgress: 0,\r\n        level: 1,\r\n        levelCap: 6,\r\n        stepIndex: 1,\r\n        progressToNextLevel: 0,\r\n        nextLevelAt: 1\r\n      }\r\n    },\r\n    clanCallsign: 'DoD',\r\n    clanBannerData: {\r\n      decalId: 4142223387,\r\n      decalColorId: 3379387796,\r\n      decalBackgroundColorId: 3568748754,\r\n      gonfalonId: 1473910866,\r\n      gonfalonColorId: 2157636320,\r\n      gonfalonDetailId: 1664476155,\r\n      gonfalonDetailColorId: 4128900497\r\n    }\r\n  }\r\n}"
                }
            ],
            "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts": [
                {
                    "name": "MOCK_GRID_CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "MOCK_GRID_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "stats"
                },
                {
                    "name": "MOCK_GRID_ITEMS2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "stats2"
                },
                {
                    "name": "REAL_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    date: '2020-07-28',\r\n    seconds: 17980\r\n  },\r\n  {\r\n    date: '2020-07-14',\r\n    seconds: 10799\r\n  },\r\n  {\r\n    date: '2020-07-07',\r\n    seconds: 42980\r\n  },\r\n  {\r\n    date: '2020-06-30',\r\n    seconds: 9096\r\n  },\r\n  {\r\n    date: '2020-06-23',\r\n    seconds: 5380\r\n  },\r\n  {\r\n    date: '2020-06-16',\r\n    seconds: 7985\r\n  },\r\n  {\r\n    date: '2020-02-25',\r\n    seconds: 1118\r\n  },\r\n  {\r\n    date: '2023-02-11',\r\n    seconds: 5502\r\n  },\r\n  {\r\n    date: '2023-05-14',\r\n    seconds: 2589\r\n  },\r\n  {\r\n    date: '2020-05-07',\r\n    seconds: 3810\r\n  },\r\n  {\r\n    date: '2019-12-31',\r\n    seconds: 3928\r\n  },\r\n  {\r\n    date: '2019-12-24',\r\n    seconds: 7161\r\n  },\r\n  {\r\n    date: '2019-12-17',\r\n    seconds: 9598\r\n  },\r\n  {\r\n    date: '2019-12-10',\r\n    seconds: 6755\r\n  },\r\n  {\r\n    date: '2019-12-03',\r\n    seconds: 5923\r\n  },\r\n  {\r\n    date: '2019-11-26',\r\n    seconds: 11169\r\n  },\r\n  {\r\n    date: '2019-11-19',\r\n    seconds: 9496\r\n  },\r\n  {\r\n    date: '2019-11-12',\r\n    seconds: 60783\r\n  },\r\n  {\r\n    date: '2019-11-05',\r\n    seconds: 71285\r\n  },\r\n  {\r\n    date: '2019-10-29',\r\n    seconds: 75989\r\n  },\r\n  {\r\n    date: '2019-10-22',\r\n    seconds: 61420\r\n  },\r\n  {\r\n    date: '2019-10-15',\r\n    seconds: 46780\r\n  },\r\n  {\r\n    date: '2019-10-08',\r\n    seconds: 31837\r\n  },\r\n  {\r\n    date: '2019-10-01',\r\n    seconds: 36309\r\n  },\r\n  {\r\n    date: '2019-09-17',\r\n    seconds: 4481\r\n  },\r\n  {\r\n    date: '2019-09-03',\r\n    seconds: 33579\r\n  },\r\n  {\r\n    date: '2019-08-27',\r\n    seconds: 37958\r\n  },\r\n  {\r\n    date: '2019-08-20',\r\n    seconds: 29367\r\n  },\r\n  {\r\n    date: '2019-08-13',\r\n    seconds: 28290\r\n  },\r\n  {\r\n    date: '2019-08-06',\r\n    seconds: 21828\r\n  },\r\n  {\r\n    date: '2019-07-30',\r\n    seconds: 97254\r\n  },\r\n  {\r\n    date: '2019-07-23',\r\n    seconds: 19456\r\n  }\r\n]"
                },
                {
                    "name": "stats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "stats2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "today",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date(new Date().setDate(new Date().getDate() + ((2 + 7 - new Date().getDay()) % 7) - 189))"
                },
                {
                    "name": "weeks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['week 1', 'week 2', 'week 3']"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItems.ts": [
                {
                    "name": "MOCK_LIST_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockListItem[]",
                    "defaultValue": "names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n})"
                },
                {
                    "name": "names",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
                }
            ],
            "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts": [
                {
                    "name": "MOCK_SEAL_DEFINITION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SealDefinition",
                    "defaultValue": "{\r\n  displayProperties: {\r\n    description: 'Complete Event Challenges during the Festival of the Lost. Progress resets at the end of the event.',\r\n    name: 'Ghost Writer',\r\n    icon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n    iconSequences: [\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n          '/common/destiny2_content/icons/6987d309d0bc4029f3a814d7e5325469.png',\r\n          '/common/destiny2_content/icons/12dcab8ca6809f3a875f24b4dc5a0437.png'\r\n        ]\r\n      },\r\n      {\r\n        frames: [\r\n          '/common/destiny2_content/icons/42df53be3530e75cf88e54f6932827ec.png',\r\n          '/common/destiny2_content/icons/f2515008c74cf3b69242f91edd977176.png',\r\n          '/common/destiny2_content/icons/d31bc05850b70c5094bd23bfe77ba0af.png'\r\n        ]\r\n      }\r\n    ],\r\n    hasIcon: true\r\n  },\r\n  originalIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  rootViewIcon: '/common/destiny2_content/icons/57556a43a2f1611e7e9538db8cd99a30.png',\r\n  nodeType: 3,\r\n  scope: 1,\r\n  completionRecordHash: 1089543274,\r\n  children: {\r\n    presentationNodes: [],\r\n    collectibles: [],\r\n    records: [\r\n      { recordHash: 2402210136, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883618, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883619, nodeDisplayPriority: 0 },\r\n      { recordHash: 263883616, nodeDisplayPriority: 0 },\r\n      { recordHash: 3907371284, nodeDisplayPriority: 0 },\r\n      { recordHash: 4240802932, nodeDisplayPriority: 0 },\r\n      { recordHash: 1276598420, nodeDisplayPriority: 0 },\r\n      { recordHash: 2260243645, nodeDisplayPriority: 0 },\r\n      { recordHash: 170025438, nodeDisplayPriority: 0 },\r\n      { recordHash: 3135128969, nodeDisplayPriority: 0 },\r\n      { recordHash: 3448638613, nodeDisplayPriority: 0 },\r\n      { recordHash: 2895286773, nodeDisplayPriority: 0 },\r\n      { recordHash: 1082927728, nodeDisplayPriority: 0 },\r\n      { recordHash: 4283733196, nodeDisplayPriority: 0 },\r\n      { recordHash: 1644352879, nodeDisplayPriority: 0 },\r\n      { recordHash: 3951338722, nodeDisplayPriority: 0 },\r\n      { recordHash: 3949332075, nodeDisplayPriority: 0 },\r\n      { recordHash: 552478397, nodeDisplayPriority: 0 },\r\n      { recordHash: 2358631133, nodeDisplayPriority: 0 },\r\n      { recordHash: 1321634422, nodeDisplayPriority: 0 }\r\n    ],\r\n    metrics: [],\r\n    craftables: []\r\n  },\r\n  displayStyle: 2,\r\n  screenStyle: 2,\r\n  requirements: { entitlementUnavailableMessage: '' },\r\n  disableChildSubscreenNavigation: false,\r\n  maxCategoryRecordScore: 0,\r\n  presentationNodeType: 1,\r\n  traitIds: [],\r\n  traitHashes: [],\r\n  parentNodeHashes: [616318467],\r\n  hash: 2592822840,\r\n  index: 1319,\r\n  redacted: false,\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/config/app-config.mock.ts": [
                {
                    "name": "MockConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppConfig",
                    "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  production: false,\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts": [
                {
                    "name": "NotificationAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Notification>",
                    "defaultValue": "createEntityAdapter<Notification>({\r\n  selectId: (n: Notification) => n.id,\r\n  sortComparer: false\r\n})"
                },
                {
                    "name": "NotificationInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationState",
                    "defaultValue": "NotificationAdapter.getInitialState()"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts": [
                {
                    "name": "NotificationReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  NotificationInitialState,\r\n  on(addNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(updateNotification, (state, { notification }) => {\r\n    return NotificationAdapter.upsertOne(notification, { ...state });\r\n  }),\r\n  on(removeNotification, (state, { notification }) => {\r\n    return NotificationAdapter.removeOne(notification.id, { ...state });\r\n  })\r\n)"
                }
            ],
            "projects/components/src/lib/pipes/pipes.module.ts": [
                {
                    "name": "pipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/pipes.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  PlaytimePipe,\r\n  PlaytimeMillisecondsPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n]"
                }
            ],
            "projects/components/src/lib/shared/display-options/display-options.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DisplayOptionsComponent>",
                    "defaultValue": "(args: DisplayOptionsComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CollapsibleListComponent>",
                    "defaultValue": "(args: CollapsibleListComponent) => ({\r\n  template: `\r\n    <div style=\"height:300px\">\r\n    <lib-collapsible-list [items]=\"items\" [title]=\"title\" [itemTemplate]=\"itemTemplate\">\r\n    <ng-template let-item #itemTemplate>\r\n    <div >\r\n    View\r\n    </div>\r\n    </ng-template>\r\n    </lib-collapsible-list>\r\n    </div>\r\n   `,\r\n  props: args\r\n})"
                }
            ],
            "projects/components/src/lib/shared/profile-link/profile-link.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/profile-link/profile-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/profile-link/profile-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileLinkComponent>",
                    "defaultValue": "(args: ProfileLinkComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SkeletonChartLoaderComponent>",
                    "defaultValue": "(args: SkeletonChartLoaderComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ActivityCardDetailsComponent>",
                    "defaultValue": "(args: ActivityCardDetailsComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts": [
                {
                    "name": "RECENT_ACTIVITY_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ProfileRecentActivity>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts": [
                {
                    "name": "RECENT_ACTIVITY_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ProfileRecentActivity>>([\r\n  //   [\r\n  //     'id',\r\n  //     {\r\n  //       label: 'ID',\r\n  //       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n  //     }\r\n  //   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) =>\r\n        a.profile?.profile?.data.userInfo.displayName?.toLowerCase() <\r\n        b.profile?.profile?.data.userInfo.displayName?.toLowerCase()\r\n          ? -1\r\n          : 1\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => (a.clan.clanName?.toLowerCase() < b.clan.clanName?.toLowerCase() ? -1 : 1)\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     comparator: (a, b) => ((a.profileActivity.stats.lastWeek || 0) < (b.profileActivity.stats.lastWeek || 0) ? -1 : 1)\r\n  //   }\r\n  // ],\r\n\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastMonth || 0) < (b.profileActivity.stats.lastMonth || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90',\r\n  //     comparator: (a, b) =>\r\n  //       (a.profileActivity.stats.lastNinetyDays || 0) < (b.profileActivity.stats.lastNinetyDays || 0) ? -1 : 1\r\n  //   }\r\n  // ],\r\n  [\r\n    'lastLogin',\r\n    {\r\n      label: 'Last Login',\r\n      comparator: (a, b) =>\r\n        (new Date(a.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900)) <\r\n        (new Date(b.profile.profile.data.dateLastPlayed) || new Date(1 / 1 / 1900))\r\n          ? -1\r\n          : 1\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts": [
                {
                    "name": "RECENT_ACTIVITY_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<ProfileRecentActivity, ViewContext>>([\r\n  [\r\n    'playerName',\r\n    {\r\n      label: 'Display Name',\r\n      isSticky: true,\r\n      plainText: (item: ProfileRecentActivity) => `${item.clanMember?.destinyUserInfo?.displayName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clanMember?.destinyUserInfo?.displayName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      plainText: (item: ProfileRecentActivity) => `${item.clan.clanName}`,\r\n      render: (item: ProfileRecentActivity) => {\r\n        return {\r\n          text: `${item.clan.clanName}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  // [\r\n  //   'lastWeek',\r\n  //   {\r\n  //     label: 'Last Week',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastWeek)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastMonth',\r\n  //   {\r\n  //     label: 'Last Month',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats.lastMonth)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  // [\r\n  //   'lastNinety',\r\n  //   {\r\n  //     label: 'Last 90 Days',\r\n  //     plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n  //       `${context.playTimePipe.transform(item.profileActivity.stats.lastNinetyDays)}`,\r\n  //     render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n  //       return {\r\n  //         text: `${context.playTimePipe.transform(item.profileActivity.stats..lastNinetyDays)}`\r\n  //       };\r\n  //     }\r\n  //   }\r\n  // ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      plainText: (item: ProfileRecentActivity, context: ViewContext) =>\r\n        `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`,\r\n      render: (item: ProfileRecentActivity, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/icons/register-icons.ts": [
                {
                    "name": "registerIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/register-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(registry: MatIconRegistry, domSanitizer: DomSanitizer) => {\r\n    Object.keys(svgIcons).map(name => {\r\n        const path = svgIcons[name];\r\n        registry.addSvgIcon(name, domSanitizer.bypassSecurityTrustResourceUrl(path));\r\n    });\r\n}"
                },
                {
                    "name": "svgIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/register-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    titan: '/assets/icons/titan.svg',\r\n    hunter: '/assets/icons/hunter.svg',\r\n    warlock: '/assets/icons/warlock.svg',\r\n    steam: '/assets/icons/steam.svg',\r\n    stadia: '/assets/icons/stadia.svg',\r\n    playstation: '/assets/icons/playstation.svg',\r\n    xbox: '/assets/icons/xbox.svg',\r\n    twitch: '/assets/icons/twitch-purp.svg',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts": [
                {
                    "name": "SEAL_DETAILS_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<SealClanMember>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts": [
                {
                    "name": "SEAL_DETAILS_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<SealClanMember>>([\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      comparator: (a, b) =>\r\n        compare(getBungieDisplayName(a.profile).toLowerCase(), getBungieDisplayName(b.profile).toLowerCase())\r\n    }\r\n  ],\r\n  [\r\n    'clanName',\r\n    {\r\n      label: 'Clan Name',\r\n      comparator: (a, b) => compare(a.clan.clanName, b.clan.clanName)\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Progress',\r\n      comparator: (a, b) => compare(a.sealProgression.completionPercentage, b.sealProgression.completionPercentage)\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      comparator: (a, b) => compare(a.sealProgression.gildedCount, b.sealProgression.gildedCount)\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      comparator: (a: any, b: any) => a.sealProgression.isCompleted - b.sealProgression.isCompleted\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      comparator: (a: any, b: any) => a.sealProgression.isGilded - b.sealProgression.isGilded\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      // comparator: (a, b) => (a.sealProgression.gildedCount < b.sealProgression.gildedCount ? -1 : 1)\r\n      comparator: (a, b) => compare(a.sealProgression.gildedCount || -10, b.sealProgression.gildedCount || -10)\r\n    }\r\n  ]\r\n])"
                },
                {
                    "name": "sortNumeric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(a: number, b: number) => {\r\n  return a < b ? -1 : 1;\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts": [
                {
                    "name": "SEAL_DETAILS_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<SealClanMember, ViewContext>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     labelClass: '',\r\n  //     plainText: (item: SealClanMember) => `${getMemberName(item.clanMember)}`,\r\n  //     render: (item: SealClanMember) => ({ text: `${getMemberName(item.clanMember)}` })\r\n  //   }\r\n  // ],\r\n  [\r\n    'bungieUnique',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      labelClass: '',\r\n      plainText: (item: SealClanMember) => `${getBungieDisplayName(item?.profile) || ''}`,\r\n      // plainText: (item: ClanRosterItem) => ``,\r\n      render: (item: SealClanMember) => ({ text: `${getBungieDisplayName(item?.profile) || ''}`, classList: [] })\r\n    }\r\n  ],\r\n  [\r\n    'destinyClan',\r\n    {\r\n      label: 'Destiny Clan',\r\n      labelClass: '',\r\n      plainText: (item: SealClanMember) => `${item.clan.clanName}`,\r\n      render: (item: SealClanMember) => ({ text: `${item.clan.clanName}` })\r\n    }\r\n  ],\r\n  [\r\n    'isComplete',\r\n    {\r\n      label: 'Is Completed',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isCompleted ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: item.sealProgression.isCompleted ? TABLE_DONE : TABLE_NOT_DONE\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'isGilded',\r\n    {\r\n      label: 'Is Gilded',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => (item.sealProgression.isGilded ? 'X' : ''),\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: item.sealProgression.isGilded ? TABLE_DONE : TABLE_NOT_DONE\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'gildedCount',\r\n    {\r\n      label: 'Gilded Count',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.gildedCount || ''}`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.gildedCount || ''}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'completeCount',\r\n    {\r\n      label: 'Completed / Total',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) =>\r\n        `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.completedTriumphCount || 0} / ${item.sealProgression.totalTriumphCount}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'progress',\r\n    {\r\n      label: 'Percent Completed',\r\n      labelClass: 'header-text-center',\r\n      plainText: (item: SealClanMember) => `${item.sealProgression.completionPercentage}%`,\r\n      render: (item: SealClanMember) => ({\r\n        classList: ['text-center'],\r\n        text: `${item.sealProgression.completionPercentage}%`\r\n      })\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
                }
            ],
            "projects/data/src/lib/models/time.ts": [
                {
                    "name": "SECONDS_IN_DAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/time.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SECONDS_IN_HOUR * 24"
                },
                {
                    "name": "SECONDS_IN_HOUR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/time.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SECONDS_IN_MINUTE * 60"
                },
                {
                    "name": "SECONDS_IN_MINUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/time.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                },
                {
                    "name": "SECONDS_IN_WEEK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/time.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SECONDS_IN_DAY * 7"
                }
            ],
            "projects/clan-dashboard/src/environments/secrets.ts": [
                {
                    "name": "secretKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/secrets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts": [
                {
                    "name": "selectAllRecentActivityUpdates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) => {\r\n\r\n  return state.map((x) => x.memberRecentActivityUpdate);\r\n})"
                },
                {
                    "name": "selectClansState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ClansState>('clans')"
                },
                {
                    "name": "selectEnabledClanIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
                },
                {
                    "name": "selectEnabledClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
                },
                {
                    "name": "selectLastProfileUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
                },
                {
                    "name": "selectLastRecentActivityUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.memberRecentActivityUpdate) || '';\r\n  })"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts": [
                {
                    "name": "selectClanMemberProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ClansMembersProfilesState>('clansMembersProfiles')"
                },
                {
                    "name": "selectClanMemberProfileStateLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectClanMemberProfileState,\r\n  (state) => state.isLoading\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ClansMembersProfilesAdapter.getSelectors(selectClanMemberProfileState)"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts": [
                {
                    "name": "selectManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
                },
                {
                    "name": "selectManifestError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
                },
                {
                    "name": "selectManifestLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
                },
                {
                    "name": "selectManifestLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
                },
                {
                    "name": "selectManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts": [
                {
                    "name": "selectNotificationsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<NotificationState>('notifications')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NotificationAdapter.getSelectors(selectNotificationsState)"
                }
            ],
            "projects/data/src/lib/models/__mocks__/activity-definition.ts": [
                {
                    "name": "SPIRE_ACTIVITY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/models/__mocks__/activity-definition.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  displayProperties: {\r\n    description: 'Machinations run wild in this dust-ridden ruin. Bring them to heel.',\r\n    name: 'Spire of the Watcher: Normal',\r\n    icon: '/img/misc/missing_icon_d2.png',\r\n    hasIcon: false\r\n  },\r\n  originalDisplayProperties: {\r\n    description: 'Machinations run wild in this dust-ridden ruin. Bring them to heel.',\r\n    name: 'Spire of the Watcher',\r\n    icon: '/img/misc/missing_icon_d2.png',\r\n    hasIcon: false\r\n  },\r\n  selectionScreenDisplayProperties: {\r\n    description: 'A strong fireteam is recommended to overcome this challenge.\\n\\nMatchmaking: OFF',\r\n    name: 'Normal',\r\n    hasIcon: false\r\n  },\r\n  releaseIcon: '/img/misc/missing_icon_d2.png',\r\n  releaseTime: 0,\r\n  completionUnlockHash: 0,\r\n  activityLightLevel: 1570,\r\n  destinationHash: 1615213322,\r\n  placeHash: 2809578934,\r\n  activityTypeHash: 608898761,\r\n  tier: -1,\r\n  pgcrImage: '/img/theme/destiny/bgs/pgcrs/placeholder.jpg',\r\n  rewards: [],\r\n  modifiers: [],\r\n  isPlaylist: false,\r\n  challenges: [\r\n    {\r\n      rewardSiteHash: 0,\r\n      inhibitRewardsUnlockHash: 0,\r\n      objectiveHash: 424208044,\r\n      dummyRewards: [{ itemHash: 73143230, quantity: 0, hasConditionalVisibility: false }]\r\n    }\r\n  ],\r\n  optionalUnlockStrings: [],\r\n  inheritFromFreeRoam: false,\r\n  suppressOtherRewards: false,\r\n  playlistItems: [],\r\n  matchmaking: { isMatchmade: false, minParty: 1, maxParty: 3, maxPlayers: 3, requiresGuardianOath: false },\r\n  loadouts: [],\r\n  isPvP: false,\r\n  insertionPoints: [\r\n    { phaseHash: 3852545214, unlockHash: 0 },\r\n    { phaseHash: 201188049, unlockHash: 0 },\r\n    { phaseHash: 1483068591, unlockHash: 0 },\r\n    { phaseHash: 2027998024, unlockHash: 0 },\r\n    { phaseHash: 1779644342, unlockHash: 0 },\r\n    { phaseHash: 3603277873, unlockHash: 0 },\r\n    { phaseHash: 3934781543, unlockHash: 0 },\r\n    { phaseHash: 2676434388, unlockHash: 0 }\r\n  ],\r\n  activityLocationMappings: [],\r\n  hash: 1262462921,\r\n  index: 412,\r\n  redacted: false,\r\n  blacklisted: false\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/constants/table.ts": [
                {
                    "name": "TABLE_DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/constants/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'<span class=\"mat-icon material-icons\">done</span>'"
                },
                {
                    "name": "TABLE_NOT_DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/constants/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "''"
                }
            ],
            "projects/data/src/lib/injection-tokens/window-token.ts": [
                {
                    "name": "WindowToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/injection-tokens/window-token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('Window')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/data/src/lib/utility/date-utils.ts": [
                {
                    "name": "addDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateToUnixTimeStamp",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieStartDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateArray",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayOfWeek",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstDayOfMonth",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusMinutes",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusWeeks",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "playtime",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unixTimeStampToDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts": [
                {
                    "name": "clanDetailSerializer",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClanDetails",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeProgression",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts": [
                {
                    "name": "clanMemberActivitySerializer",
                    "file": "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "activity",
                            "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts": [
                {
                    "name": "clanMemberRecentActivitySerializer",
                    "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "activity",
                            "type": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trackedDates",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MemberActivityRecentStats",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trackedDates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieStartDate",
                    "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesByWeek",
                    "file": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<MemberActivityRecentStatsActivity>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/manifest/test-db.ts": [
                {
                    "name": "clear",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Clear all values in the store.</p>\n",
                    "args": [
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4934,
                                "end": 4945,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 4928,
                                "end": 4933,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "createStore",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dbName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "UseStore",
                    "jsdoctags": [
                        {
                            "name": "dbName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultGetStore",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "del",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Delete a particular key from the store.</p>\n",
                    "args": [
                        {
                            "name": "key",
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4087,
                                "end": 4090,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4081,
                                "end": 4086,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 4102,
                                "end": 4113,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 4096,
                                "end": 4101,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "delMany",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Delete multiple keys at once.</p>\n",
                    "args": [
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4468,
                                "end": 4472,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keys"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4462,
                                "end": 4467,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>List of keys to delete.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4508,
                                "end": 4519,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 4502,
                                "end": 4507,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "eachCursor",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "store",
                            "type": "IDBObjectStore",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "IDBObjectStore",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entries",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get all entries in the store. Each entry is an array of <code>[key, value]</code>.</p>\n",
                    "args": [
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<[]>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6807,
                                "end": 6818,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 6801,
                                "end": 6806,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get a value by its key.</p>\n",
                    "args": [
                        {
                            "name": "key",
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<T | undefined>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1299,
                                "end": 1302,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1293,
                                "end": 1298,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1314,
                                "end": 1325,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 1308,
                                "end": 1313,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMany",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get multiple values by their keys</p>\n",
                    "args": [
                        {
                            "name": "keys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<T[]>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2701,
                                "end": 2705,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keys"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2695,
                                "end": 2700,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2717,
                                "end": 2728,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 2711,
                                "end": 2716,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "keys",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get all keys in the store.</p>\n",
                    "args": [
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<KeyType[]>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5580,
                                "end": 5591,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 5574,
                                "end": 5579,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "promisifyRequest",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "request",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<T>",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Set a value with a key.</p>\n",
                    "args": [
                        {
                            "name": "key",
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1644,
                                "end": 1647,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1638,
                                "end": 1643,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1659,
                                "end": 1664,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1653,
                                "end": 1658,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1676,
                                "end": 1687,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 1670,
                                "end": 1675,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "setMany",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Set multiple values at once. This is faster than calling set() multiple times.\nIt&#39;s also atomic – if one of the pairs can&#39;t be added, none will be added.</p>\n",
                    "args": [
                        {
                            "name": "entries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2189,
                                "end": 2196,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "entries"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2183,
                                "end": 2188,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Array of entries, where each entry is an array of <code>[key, value]</code>.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2274,
                                "end": 2285,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 2268,
                                "end": 2273,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "update",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Update a value. This lets you see the old value and update it as an atomic operation.</p>\n",
                    "args": [
                        {
                            "name": "key",
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updater",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3148,
                                "end": 3151,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "IDBValidKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3142,
                                "end": 3147,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3163,
                                "end": 3170,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "updater"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3157,
                                "end": 3162,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A callback that takes the old value and returns a new value.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3243,
                                "end": 3254,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 3237,
                                "end": 3242,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                },
                {
                    "name": "values",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get all values in the store.</p>\n",
                    "args": [
                        {
                            "name": "customStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()"
                        }
                    ],
                    "returnType": "Promise<T[]>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6214,
                                "end": 6225,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "customStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "defaultGetStore()",
                            "tagName": {
                                "pos": 6208,
                                "end": 6213,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Method to get a custom store. Use with caution (see the docs).</p>\n"
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/compare.ts": [
                {
                    "name": "compare",
                    "file": "projects/data/src/lib/utility/compare.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-season.ts": [
                {
                    "name": "compare",
                    "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lastWord",
                    "file": "projects/data/src/lib/utility/group-activity-by-season.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "words",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "words",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/exporter.ts": [
                {
                    "name": "convertArrayOfObjectsToCSV",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadCSV",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/viewer.ts": [
                {
                    "name": "convertArrayOfObjectsToCSV",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadCSV",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/utility/filter-matcher.ts": [
                {
                    "name": "dateMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "DateEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "DateEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numberMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "NumberEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "NumberEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stateMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "StateEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "StateEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textArrayMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "filterItems",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function to filter the items. May be used to synchronously filter items.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "context",
                            "type": "M",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metadata",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "M",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metadata",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchItems",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tokenizeItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokenizeItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/format-date.ts": [
                {
                    "name": "formatDate",
                    "file": "projects/data/src/lib/utility/format-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/get-display-name.ts": [
                {
                    "name": "getBungieDisplayName",
                    "file": "projects/data/src/lib/utility/get-display-name.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberName",
                    "file": "projects/data/src/lib/utility/get-display-name.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileName",
                    "file": "projects/data/src/lib/utility/get-display-name.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/profile/profile.serializer.ts": [
                {
                    "name": "getCharacterProgressions",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCharacterRecords",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileItems",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileMetrics",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileRecords",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressionValues",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileSerializer",
                    "file": "projects/data/src/lib/profile/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileMetrics",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileMetrics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts": [
                {
                    "name": "getCharacterProgressions",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCharacterRecords",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileItems",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileMetrics",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileRecords",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressionValues",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileSerializer",
                    "file": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileMetrics",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileMetrics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/get-ids.ts": [
                {
                    "name": "getClanMemberId",
                    "file": "projects/data/src/lib/utility/get-ids.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberProfileId",
                    "file": "projects/data/src/lib/utility/get-ids.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/grouper.ts": [
                {
                    "name": "getGroupByListValues",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that creates a group based on the list of values of the item&#39;s property.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupByValue",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that creates a group based on the value of the item&#39;s property.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupsFromMap",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that transforms a map of groups into a list.</p>\n",
                    "args": [
                        {
                            "name": "groupsMap",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "groupsMap",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts": [
                {
                    "name": "getMembershipType",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-date.ts": [
                {
                    "name": "groupActivities",
                    "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "raw",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "raw",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivitiesByDate",
                    "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivityStatsByDate",
                    "file": "projects/data/src/lib/utility/group-activity-by-date.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-month.ts": [
                {
                    "name": "groupActivitiesByMonth",
                    "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<MemberActivityRecentStatsActivity>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivityStatsByMonth",
                    "file": "projects/data/src/lib/utility/group-activity-by-month.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/group-activity-by-week.ts": [
                {
                    "name": "groupActivitiesByWeek",
                    "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<MemberActivityRecentStatsActivity>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupActivityStatsByWeek",
                    "file": "projects/data/src/lib/utility/group-activity-by-week.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts": [
                {
                    "name": "initStateFromLocalStorage",
                    "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<AppState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/utilities/is-mobile.ts": [
                {
                    "name": "isMobile",
                    "file": "projects/clan-dashboard/src/app/core/utilities/is-mobile.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "boolean"
                }
            ],
            "projects/data/src/lib/injection-tokens/location-token.ts": [
                {
                    "name": "locationProvider",
                    "file": "projects/data/src/lib/injection-tokens/location-token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts": [
                {
                    "name": "locationProvider",
                    "file": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts": [
                {
                    "name": "m",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "c",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/sorter.ts": [
                {
                    "name": "sortItems",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparator",
                            "type": "SortComparator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "C",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparator",
                            "type": "SortComparator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "C",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/utility/try-json-parse.ts": [
                {
                    "name": "tryJSONParse",
                    "file": "projects/data/src/lib/utility/try-json-parse.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T | undefined",
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/injection-tokens/window-token.ts": [
                {
                    "name": "windowProvider",
                    "file": "projects/data/src/lib/injection-tokens/window-token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "projects/data/src/lib/models/enums/MembershipTypes.ts": [
                {
                    "name": "MembershipTypes",
                    "childs": [
                        {
                            "name": "Xbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Psn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Steam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "Blizzard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "Stadia",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "Demon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/models/enums/MembershipTypes.ts"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "childs": [
                        {
                            "name": "ClanDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanDetails"
                        },
                        {
                            "name": "MemberProfiles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberProfiles"
                        },
                        {
                            "name": "MemberActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivities"
                        },
                        {
                            "name": "MemberRecentActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberRecentActivities"
                        },
                        {
                            "name": "BungieInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BungieInfo"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/data/src/lib/stat-aggregators/clan-aggregate-time/clan-aggregate-types.ts": [
                {
                    "name": "AggregateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/clan-aggregate-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                }
            ],
            "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts": [
                {
                    "name": "ClanSearchResultItemType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"player\" | \"clan\"",
                    "file": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/components/src/lib/data/filterer-types.ts": [
                {
                    "name": "DateEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"before\" | \"after\" | \"on\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextFilter | NumberFilter | DateFilter | StateFilter",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "FilterType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"number\" | \"date\" | \"state\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "NumberEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"greaterThan\" | \"lessThan\" | \"equalTo\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "StateEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"is\" | \"notIs\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TextEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contains\" | \"is\" | \"notContains\" | \"notIs\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/data/src/lib/models/DeepPartial.ts": [
                {
                    "name": "DeepPartial",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/models/DeepPartial.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "projects/components/src/lib/data/exporter.ts": [
                {
                    "name": "ExporterContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "FiltererContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<M>",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FiltererMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextFiltererMetadata<T | C> | NumberFiltererMetadata<T | C> | DateFiltererMetadata<T | C> | StateFiltererMetadata<T | C>",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TextFilterAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "projects/components/src/lib/data/viewer.ts": [
                {
                    "name": "RenderedView",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ViewerContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/components/src/lib/data/sorter.ts": [
                {
                    "name": "SortComparator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "SorterContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                }
            ],
            "projects/data/src/lib/manifest/test-db.ts": [
                {
                    "name": "UseStore",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/data/src/lib/manifest/test-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/clan-dashboard/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivate": [
                            "ClanResolveGuard"
                        ],
                        "component": "WrapperComponent",
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./features/clans-details/clans-details-shell/clans-details.module#ClansDetailsModule"
                            },
                            {
                                "path": "roster",
                                "loadChildren": "./features/clans-roster/clans-roster-shell/clans-roster.module#ClansRosterModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-routing.module.ts.ts",
                                                "module": "ClansRosterRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ClansRosterComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ClansRosterModule"
                                    }
                                ]
                            },
                            {
                                "path": "seals",
                                "loadChildren": "./features/seals/seals-shell/seals-routing.module#SealsRoutingModule"
                            },
                            {
                                "path": "activities",
                                "loadChildren": "./features/activities/activities-shell/activities-shell.module#ActivitiesShellModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/activities/activities-shell/activities-shell-routing.module.ts",
                                                "module": "ActivitiesShellRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "loadChildren": "../curated-activities-dashboard/curated-activities-dashboard.module#CuratedActivitiesDashboardModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "projects/clan-dashboard/src/app/features/activities/curated-activities-dashboard/curated-activities-dashboard-routes.module.ts",
                                                                        "module": "CuratedActivitiesDashboardRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "CuratedActivitiesDashboardComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "CuratedActivitiesDashboardModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": ":activityHash",
                                                        "loadChildren": "../activity-detail/activity-detail.module#ActivityDetailModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "projects/clan-dashboard/src/app/features/activities/activity-detail/activity-detail-routes.module.ts",
                                                                        "module": "ActivityDetailRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "ActivityDetailComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "ActivityDetailModule"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ActivitiesShellModule"
                                    }
                                ]
                            },
                            {
                                "path": "player",
                                "loadChildren": "./features/player/player-shell/player-shell.module#PlayerShellModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/player/player-shell/player-shell-routing.module.ts",
                                                "module": "PlayerShellRoutingModule",
                                                "children": [
                                                    {
                                                        "path": ":player-id",
                                                        "component": "PlayerDetailComponent",
                                                        "children": [
                                                            {
                                                                "path": "",
                                                                "loadChildren": "../player-overview/player-overview.module#PlayerOverviewModule",
                                                                "children": [
                                                                    {
                                                                        "kind": "module",
                                                                        "children": [
                                                                            {
                                                                                "name": "routes",
                                                                                "filename": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-dashboard-routing.module.ts",
                                                                                "module": "ClansDetailsRoutingModule",
                                                                                "children": [
                                                                                    {
                                                                                        "path": "",
                                                                                        "component": "ClansDetailsDashboardComponent"
                                                                                    }
                                                                                ],
                                                                                "kind": "module"
                                                                            }
                                                                        ],
                                                                        "module": "PlayerOverviewModule"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "PlayerShellModule"
                                    }
                                ]
                            },
                            {
                                "path": "activity-modes",
                                "loadChildren": "./features/activity-modes/activity-mode-shell/activity-mode-shell.module#ActivityModeShellModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-shell/activity-mode-shell-routing.module.ts",
                                                "module": "ActivityModeShellRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "loadChildren": "../activity-mode-dashboard/activity-mode-dashboard.module#ActivityModeDashboardModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-dashboard/activity-dashboard-routes.module.ts",
                                                                        "module": "ActivityModeDashboardRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "ActivityModeDashboardComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "ActivityModeDashboardModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": ":modeType",
                                                        "loadChildren": "../activity-mode-detail/activity-mode-detail.module#ActivityModeDetailModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-detail/activity-mode-detail-routes.module.ts",
                                                                        "module": "ActivityModeDetailRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "ActivityModeDetailComponent"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "ActivityModeDetailModule"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ActivityModeShellModule"
                                    }
                                ]
                            },
                            {
                                "path": "config",
                                "loadChildren": "./views/config/config.module#ConfigModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/views/config/config-routing.module.ts",
                                                "module": "ConfigRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ConfigComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ConfigModule"
                                    }
                                ]
                            },
                            {
                                "path": "sandbox",
                                "loadChildren": "./features/sandbox/sandbox-shell/sandbox-shell.module#SandboxShellModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/features/sandbox/sandbox-shell/sandbox-shell-routing.module.ts",
                                                "module": "SandboxRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "LookupComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "SandboxShellModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "home",
                        "loadChildren": "./features/clan-search/clan-search-shell/clan-search-shell.module#ClanSearchModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ClanSearchModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "projects/clan-dashboard/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gtag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/constants/table.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/constants/table.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_NOT_DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ClanResolveGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "locationProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/injection-tokens/location-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LocationToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiKeyInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/app-offline-dialog/app-offline-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppOfflineDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/footer-info/footer-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/notifications/notifications.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/settings-menu/settings-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansMembersService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clans-members.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfigMembers",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/season.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SeasonService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/bungie-info-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BungieInfoUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/clan-updater.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfigMembers",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/member-activity-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemberActivityUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/updaters/profile-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initializeClanMemberProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setClanMemberProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansMembersProfilesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClansMembersProfilesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectClanMemberProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectClanMemberProfileStateLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMemberProfileWID",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClansMembersProfilesState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClansMembersProfilesAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans-members-profiles/clan-members-profiles.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialClanMemberProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBungieInfoSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClanMemberActivitySync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClanProfileSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLANS_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClansReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllRecentActivityUpdates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClanIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastProfileUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastRecentActivityUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClanConfigAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialClanState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestComplete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ManifestReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initStateFromLocalStorage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNotificationsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/notifications/notifications.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/utilities/is-mobile.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isMobile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-dashboard/activity-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-detail/activity-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table-metadata/ActivityTableViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/activity-table/activity-table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/components/activity-card-details/activity-card-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityCardDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/curated-activities-dashboard/curated-activities-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CuratedActivitiesDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/data-access/activities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.dungeons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURATED_ACTIVITIES_DUNGEONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.exotic.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURATED_ACTIVITIES_EXOTIC_MISSIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.pinnacle.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURATED_ACTIVITIES_PINNACLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.raids.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURATED_ACTIVITIES_RAIDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CuratedActivity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CuratedActivityGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CuratedActivityGroupDefinitions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURATED_ACTIVITIES_ALL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activities/models/CuratedActivities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURATED_ACTIVITY_GROUPS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-dashboard/activity-mode-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityModeDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-detail/activity-mode-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityModeDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_MODE_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_MODE_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityModeViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-metadata/ActivityModeViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVITY_MODE_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/activity-mode-table/activity-mode-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityModeTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/components/activity-mode-card-details/activity-mode-card-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivityModeCardDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/data-access/activity-mode.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityModeService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/guards/activity-mode.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ActivityModeResolveGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/activity-modes/models/ProfileActivityMode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileRecentActivity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/clan-detail/clan-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/components/clan-detail-cell/clan-detail-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanDetailCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-details/data-access/clan-detail.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanDetailService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/clan-search-curated-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchCuratedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CuratedClan",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "m",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_CLANS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_all",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_pc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_ps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dod_clans_xbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-curated-view/curated_clans.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOD_PC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/clan-search-view/clan-search-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/clan-search-autocomplete/clan-search-autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/components/search-error-dialog/search-error-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchErrorDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/data-access/clan-search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanSearchService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clan-search/models/ClanSearchResultItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanSearchResultItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-activity-card/clans-activity-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansActivityCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details-dashboard/clans-details-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansDetailsDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details/clans-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-highest-light-level-card/clans-highest-light-level-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansHighestLightLevelCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-inactive-card/clans-inactive-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansInactiveCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-recently-active-card/clans-recently-active-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansRecentlyActiveCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "today",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Updating",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-activity-bar-chart/clan-activity-bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanActivityBarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-info/clan-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEMBERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "names",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/components/clan-member-card/clan-member-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanMemberCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details-activities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansDetailsActivitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/data-access/clans-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMembershipType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansRosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster-list/clans-roster.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RosterResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/components/class-cell/class-cell.component.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ClassIconPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/data-access/clans-roster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansRosterService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/models/ClanRosterItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanRosterItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/config/clan-config/clan-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/config/config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/player/data-access/player.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlayerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/player/player-detail/player-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlayerDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/player/player-detail/player-detail.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/player/player-overview/player-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlayerOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/player/player-overview/player-overview.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/data-access/recent-activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecentActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/models/profile-recent-activity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileRecentActivity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "convertToMinutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECENT_ACTIVITY_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivitySorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECENT_ACTIVITY_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity-metadata/RecentActivityViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECENT_ACTIVITY_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecentActivityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/recent-activity/recent-activity-dashboard/recent-activity.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RosterActivityResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/sandbox/lookup/lookup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LookupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seal-member-progress-table/seal-member-progress-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealMemberProgressTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/components/seals-list/seals-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/data-access/seals.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SealsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/models/__mocks__/seal-list-item.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomSLI",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/models/seal-clan-member.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealClanMember",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/models/seal-list-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealListItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortNumeric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details-metadata/SealDetailsViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEAL_DETAILS_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seal-details/seal-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealDetailsResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/seals/seals-dashboard/seals-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SealsDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/shared/models/ClanMemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/config/config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/bungie-info/bungie-info.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BungieInfoWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-recent-activity/clan-activity-recent-activity-getter.worker.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MSGData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-recent-activity/profile-activity-getter.worker.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MSGData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-recent-activity/profile-recent-activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileRecentActivityWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileWorkerServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker/profile-worker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/secrets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secretKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-buttons/mat-buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/theme/components/mat-card/mat-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_GROUPER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockListItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_LIST_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "names",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DataSource",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Exporter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExporterMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExporterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertArrayOfObjectsToCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "downloadCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Filterer",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltererOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltererState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterItems",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "searchItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TOKENIZE_ITEM",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Grouper",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupByListValues",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupByValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupsFromMap",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sorter",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "numberMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stateMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "textArrayMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "textMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Viewer",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedViewWithChildren",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedViewWithText",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedWithComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewLabel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertArrayOfObjectsToCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "downloadCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/register-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/register-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "svgIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-date/bungie-date-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDateTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-date/bungie-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-display-name/bungie-display-name.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDisplayNamePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-profile-url/bungie-profile-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieProfileUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/d2-checklist-url/d2-checklist-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "D2ChecklistUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/destiny-tracker-url/destiny-tracker-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DestinyTrackerUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDungeonReportUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPCUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPSUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStadiaUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/base-dungeon-report.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getXBOXUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/dungeon-report-profile-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DungeonReportProfileUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/dungeon-report-url/dungeon-report-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DungeonReportUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/member-type/member-type.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MemberTypePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/pipes.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PlaytimeMillisecondsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/playtime/playtime.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PlaytimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RaidReportUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPCUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPSUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRaidReportUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStadiaUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/base-raid-report-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getXBOXUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/raid-report-profile-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RaidReportProfileUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/raid-report-url/raid-report-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RaidReportUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/triumph-report/triumph-report.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TriumphReportPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_GRID_CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_GRID_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_GRID_ITEMS2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REAL_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stats2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "today",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/_MOCK_GRID_ITEMS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "weeks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "events",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/bar-chart.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/bar-chart/bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/collapsible-list/collapsible-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollapsibleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/directives/responsive-sidebar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ResponsiveSidebarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisplayOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/profile-link/profile-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/profile-link/profile-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/profile-link/profile-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view-component.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RenderedViewDynamicCompDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Children",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonChartLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/skeleton-chart-loader/skeleton-chart-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TablePage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/storybook/storybook.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorybookService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-clan.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseClanService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-member-activity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseMemberActivityService",
                "coveragePercent": 12,
                "coverageCount": "3/25",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-member-activity.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityCollection",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-member-activity.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterProgressions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProgressionValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BungieInfoService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/bungie-info/bungie-info.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-database.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanDatabase",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanDetailSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "serializeProgression",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-activity/clan-member-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanMemberActivitySerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TrackedDuration",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanMemberRecentActivitySerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanMemberRecentActivityService",
                "coveragePercent": 11,
                "coverageCount": "3/27",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-member-recent-activity/clan-member-recent-activity.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMembersServiceInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanMembersServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanMembersService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/base-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DBObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/hashes/clan-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_LEVEL_HASH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/injection-tokens/location-token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "locationProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/injection-tokens/location-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LocationToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/injection-tokens/window-token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "windowProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/injection-tokens/window-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WindowToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestLoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CachedManifest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_EXP_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_EXTRACTING_TABLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_UNZIPPING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clear",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "defaultGetStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "del",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "delMany",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "eachCursor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "entries",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "get",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMany",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "keys",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "promisifyRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "set",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setMany",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "update",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "values",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/manifest/test-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultGetStoreFunc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActivityStats",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStats",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ActivityStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStatsActivity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/BungieInfo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BungieInfo",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanDetails",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanProgression",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMember",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupsV2GroupUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/CollectionDefinition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyActivityModeCategory",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DESTINY_ACTIVITY_MODES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PvE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PvECompetitive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeCategory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PvP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyActivityModeType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DestinyActivityModeTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/data/src/lib/models/DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStats",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityRecentStats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityRecentStatsActivity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsActivity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValue",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyHistoricalStatsDestinyHistoricalStatsValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityStat",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityStat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityStats",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityTime.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityTime",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberActivityTime.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberActivityTimeActivities",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyEntitiesProfilesDestinyProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyEntitiesProfilesDestinyProfileComponentUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DestinyResponsesDestinyProfileResponseProfile",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MetricDefinition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetricDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/RecordDefinition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecordDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/SealDefinition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SealDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/__mocks__/activity-definition.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SPIRE_ACTIVITY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/__mocks__/clan-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_CLAN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/__mocks__/seal-definition.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_SEAL_DEFINITION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/time.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_DAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/time.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_HOUR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/time.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_MINUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/time.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_WEEK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/cached-profile.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CachedProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterProgressions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProgressionValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/profile/profile.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-activity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/base-clan-aggregate-time.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseClanAggregateTimeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/base-clan-aggregate-time.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/daily-clan-aggregate-time.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DailyClanAggregateTimeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/stat-aggregators/clan-aggregate-time/stat-aggregator-interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatAggregator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/storage/datastore.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataStore",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/storage/idb-key-val.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IdbKeyValService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/compare.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateToUnixTimeStamp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDateArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDayOfWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFirstDayOfMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValidDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusMinutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusWeeks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "playtime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unixTimeStampToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/format-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-display-name.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieDisplayName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-display-name.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMemberName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-display-name.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-ids.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getClanMemberId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/get-ids.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMemberProfileId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-date.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivityStatsByDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-month.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivityStatsByMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-season.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "lastWord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivitiesByWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/group-activity-by-week.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupActivityStatsByWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/random-number.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/try-json-parse.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "tryJSONParse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}