{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-2e046c2170c440af6b92916a33918f4bb6b4ec6fd11fe5566f09d5a411df0d8559bcdb152e2068e8cfa130ff9c35ee79fd02e89c6510f2a549ab26c87b3869b2",
            "file": "projects/clan-dashboard/src/app/core/core.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { ManifestReducer, ManifestState, ManifestEffects } from './store/manifest';\r\nimport { ClansEffects, ClansState, ClansReducer } from './store/clans';\r\nimport { initStateFromLocalStorage } from './store/meta-reducers/init-state-from-local-storage.reducer';\r\n\r\nexport const coreEffects = [ManifestEffects, ClansEffects];\r\n\r\nexport const coreReducers: ActionReducerMap<AppState> = {\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer\r\n};\r\n\r\nexport const metaReducers: MetaReducer<AppState>[] = [initStateFromLocalStorage];\r\n\r\nexport interface AppState {\r\n  manifest: ManifestState;\r\n  clans: ClansState;\r\n}\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CachedManifest",
            "id": "interface-CachedManifest-9d8d1bee2a20baee7f950f0feea97fc96aaa34ea53965c8262d77f8bd9019d28f610cd3fd5a756714aaca78ae530d8e30203f2d2999dce5d3ee41e4f1a25ae2d",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\nimport { ManifestDatabaseService } from './manifest-database.service';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v1';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(private d2service: Destiny2Service, private db: ManifestDatabaseService) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate < nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    return this.db.getValues('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        this.db.closeDatabase('manifest');\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.update('manifest', 'allData', [dbObject]).then((db) => {\r\n            this.db.closeDatabase('manifest');\r\n          });\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfig",
            "id": "interface-ClanConfig-f1fafeb518d27a3c42acec2c70bde180d357001959f17e238189e0bc70c79a7ce8f793341fcd903eddfed8f896254f0aebc9a7560a3f6ee756cbc9b64ad169b0",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\n// export const initialClanState: ClansState = {\r\n//   clans: []\r\n// };\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clanId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "memberUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "profileUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfigMembers",
            "id": "interface-ClanConfigMembers-2d30f581fc637f8dc13d8b05f3c10ed72e0c861de40644ce8548e174d67e512a4f67b87172ac92b33b0caec39b614e8fd2b3ca543334bd5c5cebf9a5a75bcf9d",
            "file": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap, take, filter } from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClanProfileSync } from '../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../workers/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\ninterface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      // tap((x) => console.log('starting')),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      //tap((x) => console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profilesUpdate(clans)),\r\n      // tap((x) => console.log('complete', x))\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        //console.log('merge map', clanConfig.clanId);\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  profilesUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      mergeMap((x) => {\r\n        return this.profileUpdate(x).pipe(map((cm) => x));\r\n        //}\r\n\r\n        //\r\n        //return of(x);\r\n      }, 1),\r\n      toArray(),\r\n   ///   tap((x) => console.log('toarray 2', x))\r\n    );\r\n  }\r\n\r\n  profileUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.profileUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      //      console.log(`Updating ${clan.clanConfig.clanId}`);\r\n      //if (true === true) {\r\n      // this.store.dispatch(\r\n      //   addNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: { progress: 0 } } })\r\n      // );\r\n      const progress = (progressCount) => {\r\n        // this.store.dispatch(\r\n        //   updateNotification({\r\n        //     notification: {\r\n        //       id: 'memberProfile',\r\n        //       title: 'Updating Profiles',\r\n        //       data: { progress: progressCount }\r\n        //     }\r\n        //   })\r\n        // );\r\n        //       console.log('progress', progressCount);\r\n      };\r\n      this.profileWorkerService.loadProfiles(clan.clanConfig.clanId, clan.members, progress);\r\n      return this.profileWorkerService.members.pipe(\r\n        filter((x) => x.length > 0),\r\n        take(1),\r\n        map((x) => {\r\n          // this.store.dispatch(memberProfileActions.loadMemberProfiles({ memberProfiles: x }));\r\n          // this.store.dispatch(\r\n          //   removeNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: 'done' } })\r\n          // );\r\n          // return memberProfileActions.loadMemberProfileSuccess();\r\n          //         console.log(`done ${clan.clanConfig.clanId}`, x);\r\n          this.store.dispatch(updateClanProfileSync({ clanId: clan.clanConfig.clanId }));\r\n          return clan;\r\n        })\r\n      );\r\n    }\r\n    //console.log(`Valid Cache ${clan.clanConfig.clanId}`);\r\n    return of(clan);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanDetails",
            "id": "interface-ClanDetails-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "about",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "memberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanInfo",
            "id": "interface-ClanInfo-c9537a5d010936f22dfb61fc74d474235be034a72a0f57df93376bf8bdf066af11a4797bf682e4e9642aeeb5f749c409c92c62a8d9ba4f9e52c6a73f924914e3",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClans } from '@core/store/clans';\r\nimport { from, of } from 'rxjs';\r\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\r\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\r\n\r\ninterface ClanInfo{\r\n  ClanName: string;\r\n  ClanMemberCount: string;\r\n\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class ClansDetailsService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  clanInfo$ = this.activeClanIds$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          // return of(clanConfig);\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(private store: Store, private dataService: DataService) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "ClanMemberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "ClanName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMember",
            "id": "interface-ClanMember-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "bungieNetUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "destinyUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isOnline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lastOnlineStatusChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "memberType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMembersServiceInterface",
            "id": "interface-ClanMembersServiceInterface-d62de745f09221ef0a8063c3462fc92537d9fd527ac47185e06898e946566a5a619307bbdd734e097c30023e628096a5f605491e39c4b6355bc4cbf40d04eb0a",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ClanMembersServiceInterface {\r\n  getClanMembersSerialized: (clanId: string) => Observable<GroupsV2GroupMember[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "getClanMembersSerialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanProgression",
            "id": "interface-ClanProgression-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dailyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dailyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "levelCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nextLevelAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "progressionHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "progressToNextLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stepIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "weeklyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "weeklyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClansState",
            "id": "interface-ClansState-f1fafeb518d27a3c42acec2c70bde180d357001959f17e238189e0bc70c79a7ce8f793341fcd903eddfed8f896254f0aebc9a7560a3f6ee756cbc9b64ad169b0",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\n// export const initialClanState: ClansState = {\r\n//   clans: []\r\n// };\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "DBObject",
            "id": "interface-DBObject-7de43f518c699151b6f172c5f8ae4278a7bb440561b4db455e983e6bff6d72d70a5887043d459a45798c5c61838453051df6d5d87b37f1d94c0df3919b1ac48b",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 5;\r\n\r\nexport enum StoreId {\r\n  CacheDetails = 'CacheDetails', //TODO: Verify\r\n  ClanDetails = 'ClanDetails',\r\n  ClanRewards = 'ClanRewards', // TODO: Verify\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberActivityStats = 'MemberActivityStats', // TODO: Verify\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\n  ProfileMilestones = 'ProfileMilestones', // TODO  Verfiy\r\n  ProfileMetrics = 'ProfileMetrics', // TODO: Verify\r\n  Raids = 'Raids' // TODO verify\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(name, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "createDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupsV2GroupUserInfoCard",
            "id": "interface-GroupsV2GroupUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "LastSeenDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "LastSeenDisplayNameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ManifestState",
            "id": "interface-ManifestState-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isApiDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-63af9742cb69db8cc3781e27ddd2538b008cfe29c97c20e292d5950dde500cafa8abe1f19cf54845c74971a3cb9dc1214c6dd17c86bfdf0fc9d821eb84bc693f",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyResponsesDestinyProfileResponse } from 'bungie-api-angular';\r\n\r\nexport interface MemberProfile extends DestinyResponsesDestinyProfileResponse {\r\n  id?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "DestinyResponsesDestinyProfileResponse"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-76f98854ebf40d159636c13fe68de9eb9483214b6fd2a0a3996dab7792968fa878651f276726935e7bc32b1ec80f4c07abd524755e49839d5122a4d1a8fd86b1-1",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  private profileComponents = [100, 104, 200, 202, 800, 900];\r\n\r\n  // TODO: Pull this from somewhere else.\r\n  private TRACKED_HASHES = [3902035969, 2770852111];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getProfileFromAPI(member: ClanMember) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.destinyUserInfo.membershipType}/Profile/${\r\n      member.destinyUserInfo.membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              return of();\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) => this.getSerializedProfile(clanId, member, collectionHashes, profileRecords),\r\n        100\r\n      )\r\n    ) as Observable<T>;\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedProfile(clanId, member, [], []), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(profile, this.TRACKED_HASHES, collectionHashes, profileRecords) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberProfile-1"
        },
        {
            "name": "State",
            "id": "interface-State-f1fafeb518d27a3c42acec2c70bde180d357001959f17e238189e0bc70c79a7ce8f793341fcd903eddfed8f896254f0aebc9a7560a3f6ee756cbc9b64ad169b0",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\n// export const initialClanState: ClansState = {\r\n//   clans: []\r\n// };\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState"
        },
        {
            "name": "State",
            "id": "interface-State-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e-1",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserUserInfoCard",
            "id": "interface-UserUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ActivityDefinitionService",
            "id": "injectable-ActivityDefinitionService-1f5510b4a23118a63d0a1e34a2639fdb113b22b34b461b39119448980cdda9e61d633669b6e0023ba4aa63a2d8dd313ae8aca02481e13c7a6700727a7bcfae2f",
            "file": "projects/clan-dashboard/src/app/core/definition-services/activity-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityDefinitionService  extends BaseDefinitionService<DestinyDefinitionsDestinyActivityDefinition> {}{\r\n}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ActivityModeDefinitionService",
            "id": "injectable-ActivityModeDefinitionService-8c396bade508f0cd61136e4ba5a2bb555e28e246d289b3ed3708d7d2794d961b159289e7a4cec5bda02957e0638b500c7ddbd70d7ad78d1a19430fc8363e44f5",
            "file": "projects/clan-dashboard/src/app/core/definition-services/activity-mode-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsDestinyActivityModeDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityModeDefinitionService extends BaseDefinitionService<DestinyDefinitionsDestinyActivityModeDefinition> {}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ClanDetailsService",
            "id": "injectable-ClanDetailsService-4ffd97651d511047431abb64375079e99f7e2ecf12d189f52826ac26d3e20dfc09d7996730c5ac234b8177e60789364147bacaf9addcedef88695d96ba96c43d",
            "file": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanDetails'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanDetails",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupV2Service } from 'bungie-api-angular';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { clanDetailSerializer } from './clan-detail-serializer';\r\nimport { CLAN_LEVEL_HASH } from '../../hashes/clan-details';\r\n\r\n@Injectable()\r\nexport class ClanDetailsService extends BaseClanService {\r\n  // private tableName: StoreId = 'ClanDetails';\r\n  private rowId = 'ClanDetails';\r\n\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n  private getClanDetailsFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetGroup(clanId as unknown as number);\r\n  }\r\n\r\n  private getClanDetails(clanId: string) {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanDetailsFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              const clanDetails = clanDetailSerializer(clanDetail.Response.detail, [CLAN_LEVEL_HASH]);\r\n              this.updateDB(clanId, this.rowId, clanDetails);\r\n\r\n              return clanDetails;\r\n            }\r\n            throw Error('Clan Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getClanDetailsSerialized(clanId: string) {\r\n    return this.getClanDetails(clanId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClanMembersService",
            "id": "injectable-ClanMembersService-621927e444c1fa804e9188f8d03c2618407ebb00476b7357ad29523ed927c081b383792067b983df2827461a794642d1f160ca07a94b78cc723c4449199424da",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanMembers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanMembers",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from, Observable } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n\r\n@Injectable()\r\nexport class ClanMembersService extends BaseClanService implements ClanMembersServiceInterface {\r\n  private rowId = 'ClanMembers';\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n\r\n  private getClanMembersFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetMembersOfGroup(1, clanId as unknown as number);\r\n  }\r\n\r\n  private getClanMembers(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanMembersFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              this.updateDB(clanId, this.rowId, clanDetail.Response.results);\r\n\r\n              return clanDetail.Response.results;\r\n            }\r\n            throw Error('Clan Members Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO do a lightweight cache\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return this.getClanMembers(clanId).pipe(\r\n      map((x) => {\r\n        // TODO; Serialize\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClansDetailsService",
            "id": "injectable-ClansDetailsService-c9537a5d010936f22dfb61fc74d474235be034a72a0f57df93376bf8bdf066af11a4797bf682e4e9642aeeb5f749c409c92c62a8d9ba4f9e52c6a73f924914e3",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clanInfo$",
                    "defaultValue": "this.activeClanIds$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          // return of(clanConfig);\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClans } from '@core/store/clans';\r\nimport { from, of } from 'rxjs';\r\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\r\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\r\n\r\ninterface ClanInfo{\r\n  ClanName: string;\r\n  ClanMemberCount: string;\r\n\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class ClansDetailsService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  clanInfo$ = this.activeClanIds$.pipe(\r\n    switchMap((clanConfigs) => {\r\n      return from(clanConfigs).pipe(\r\n        mergeMap((clanConfig) => {\r\n          // return of(clanConfig);\r\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId);\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(private store: Store, private dataService: DataService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansEffects",
            "id": "injectable-ClansEffects-0a4bea4991df58a7d260511766235787a9d0ecc431fe4a07eedec2a766753995ffeee1eafa63ae21eb18cadc129383934528c114929fb3757297d13bc8b9fe35",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
            "properties": [
                {
                    "name": "persistSettings$",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(clanActions.addClan, clanActions.removeClan, clanActions.setClans, clanActions.updateClan),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "updateLastProfileSync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        // console.log(clanToUpdate);\r\n        // clanToUpdate.profileUpdate = new Date().toString();\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { LocalStorageService } from '@core/services/local-storage.service';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType, concatLatestFrom } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of, combineLatest, merge } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n// import { loadManifest, loadManifestComplete, loadManifestFailure } from './manifest.actions';\r\nimport * as clanActions from './clans.actions';\r\nimport { selectClansState } from './clans.selectors';\r\nimport { tap, withLatestFrom, distinctUntilChanged, filter } from 'rxjs/operators';\r\n\r\nconst CLANS_KEY = 'clans';\r\n@Injectable()\r\nexport class ClansEffects {\r\n  constructor(private actions$: Actions, private store: Store, private localStorageService: LocalStorageService) {}\r\n\r\n  persistSettings$ = createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(clanActions.addClan, clanActions.removeClan, clanActions.setClans, clanActions.updateClan),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  updateLastProfileSync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        // console.log(clanToUpdate);\r\n        // clanToUpdate.profileUpdate = new Date().toString();\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n\r\n  // loadManifest$ = createEffect(() => {\r\n  //   return this.actions$.pipe(\r\n  //     ofType(loadManifest),\r\n  //     switchMap(() => {\r\n  //       return this.manifestService.loadManifest().pipe(\r\n  //         map(() => {\r\n  //           return loadManifestComplete();\r\n  //         }),\r\n  //         catchError(async (error) => loadManifestFailure(error))\r\n  //       );\r\n  //     })\r\n  //   );\r\n  // });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansRosterService",
            "id": "injectable-ClansRosterService-9337b4c88ce24d08e59c41bc0e9cb7ed3069e2ca0e8f20f520e60fa5cc81ab229af27a09cda49ed19526b256a526faa76b0f10efb285680af159d08f70633ba6",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.service.ts",
            "properties": [
                {
                    "name": "activeClanPeople$",
                    "defaultValue": "this.activeClanUpdateDates$.pipe(\r\n    map((x) => {\r\n      return (\r\n        combineLatest([this.activeClansId$, this.activeClanUpdateDates$]),\r\n        map(([clans, clanDates]) => {\r\n          return clans;\r\n        })\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "activeClansId$",
                    "defaultValue": "this.store.select(selectEnabledClanIds)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "activeClanUpdateDates$",
                    "defaultValue": "this.activeClansId$.pipe(\r\n    switchMap((clanIds) => {\r\n      const arraySelectors = clanIds.map((clanId) => {\r\n        return this.store.select(selectLastProfileUpdate(clanId));\r\n      });\r\n\r\n      return combineLatest(arraySelectors);\r\n      // return from(clanIds).pipe(\r\n      //   switchMap((clanId) => {\r\n      //     console.log('', clanId);\r\n      //     return this.store.select(selectLastProfileUpdate(clanId));\r\n      //   })\r\n\r\n      //   // tap((x) => {\r\n      //   //   console.log('tapping1', x);\r\n      //   // })\r\n      // );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "clanMembers$",
                    "defaultValue": "this.activeClansId$.pipe(\r\n    switchMap((activeClanIds) => {\r\n      console.log('active clans');\r\n      return from(activeClanIds).pipe(\r\n        mergeMap((clanId) => {\r\n          console.log('mmerge map');\r\n          return this.memberService.getClanMembersSerialized(clanId).pipe(\r\n            map((result) => {\r\n              return { clanId, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      );\r\n    }),\r\n    tap((x) => console.log(x))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfiles<MemberProfile>(clanAndMembers.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              map((result: MemberProfile) => {\r\n                return {\r\n                  clanId: clanAndMembers.clanId,\r\n                  members: clanAndMembers.members.find(\r\n                    (x) => x.destinyUserInfo?.membershipId == result.profile.data.userInfo?.membershipId\r\n                  ),\r\n                  profiles: result\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClanIds, selectEnabledClans, selectLastProfileUpdate } from '@core/store/clans';\r\nimport { forkJoin, from, map, mergeMap, switchMap, tap, toArray, combineLatest, distinctUntilChanged } from 'rxjs';\r\n// import {} from '@destiny/data/';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Injectable()\r\nexport class ClansRosterService {\r\n  activeClansId$ = this.store.select(selectEnabledClanIds);\r\n\r\n  activeClanUpdateDates$ = this.activeClansId$.pipe(\r\n    switchMap((clanIds) => {\r\n      const arraySelectors = clanIds.map((clanId) => {\r\n        return this.store.select(selectLastProfileUpdate(clanId));\r\n      });\r\n\r\n      return combineLatest(arraySelectors);\r\n      // return from(clanIds).pipe(\r\n      //   switchMap((clanId) => {\r\n      //     console.log('', clanId);\r\n      //     return this.store.select(selectLastProfileUpdate(clanId));\r\n      //   })\r\n\r\n      //   // tap((x) => {\r\n      //   //   console.log('tapping1', x);\r\n      //   // })\r\n      // );\r\n    })\r\n  );\r\n\r\n  clanMembers$ = this.activeClansId$.pipe(\r\n    switchMap((activeClanIds) => {\r\n      console.log('active clans');\r\n      return from(activeClanIds).pipe(\r\n        mergeMap((clanId) => {\r\n          console.log('mmerge map');\r\n          return this.memberService.getClanMembersSerialized(clanId).pipe(\r\n            map((result) => {\r\n              return { clanId, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      );\r\n    }),\r\n    tap((x) => console.log(x))\r\n  );\r\n\r\n  clanProfiles$ = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfiles<MemberProfile>(clanAndMembers.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              map((result: MemberProfile) => {\r\n                return {\r\n                  clanId: clanAndMembers.clanId,\r\n                  members: clanAndMembers.members.find(\r\n                    (x) => x.destinyUserInfo?.membershipId == result.profile.data.userInfo?.membershipId\r\n                  ),\r\n                  profiles: result\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  // Whenever activeClanUpdateDates gets updated. Run this observable.\r\n  activeClanPeople$ = this.activeClanUpdateDates$.pipe(\r\n    map((x) => {\r\n      return (\r\n        combineLatest([this.activeClansId$, this.activeClanUpdateDates$]),\r\n        map(([clans, clanDates]) => {\r\n          return clans;\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileService: ProfileService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanUpdaterService",
            "id": "injectable-ClanUpdaterService-2d30f581fc637f8dc13d8b05f3c10ed72e0c861de40644ce8548e174d67e512a4f67b87172ac92b33b0caec39b614e8fd2b3ca543334bd5c5cebf9a5a75bcf9d",
            "file": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "memberUpdate",
                    "args": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profilesUpdate",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileUpdate",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap, take, filter } from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClanProfileSync } from '../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../workers/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\ninterface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      // tap((x) => console.log('starting')),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      //tap((x) => console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profilesUpdate(clans)),\r\n      // tap((x) => console.log('complete', x))\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        //console.log('merge map', clanConfig.clanId);\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  profilesUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      mergeMap((x) => {\r\n        return this.profileUpdate(x).pipe(map((cm) => x));\r\n        //}\r\n\r\n        //\r\n        //return of(x);\r\n      }, 1),\r\n      toArray(),\r\n   ///   tap((x) => console.log('toarray 2', x))\r\n    );\r\n  }\r\n\r\n  profileUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.profileUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      //      console.log(`Updating ${clan.clanConfig.clanId}`);\r\n      //if (true === true) {\r\n      // this.store.dispatch(\r\n      //   addNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: { progress: 0 } } })\r\n      // );\r\n      const progress = (progressCount) => {\r\n        // this.store.dispatch(\r\n        //   updateNotification({\r\n        //     notification: {\r\n        //       id: 'memberProfile',\r\n        //       title: 'Updating Profiles',\r\n        //       data: { progress: progressCount }\r\n        //     }\r\n        //   })\r\n        // );\r\n        //       console.log('progress', progressCount);\r\n      };\r\n      this.profileWorkerService.loadProfiles(clan.clanConfig.clanId, clan.members, progress);\r\n      return this.profileWorkerService.members.pipe(\r\n        filter((x) => x.length > 0),\r\n        take(1),\r\n        map((x) => {\r\n          // this.store.dispatch(memberProfileActions.loadMemberProfiles({ memberProfiles: x }));\r\n          // this.store.dispatch(\r\n          //   removeNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: 'done' } })\r\n          // );\r\n          // return memberProfileActions.loadMemberProfileSuccess();\r\n          //         console.log(`done ${clan.clanConfig.clanId}`, x);\r\n          this.store.dispatch(updateClanProfileSync({ clanId: clan.clanConfig.clanId }));\r\n          return clan;\r\n        })\r\n      );\r\n    }\r\n    //console.log(`Valid Cache ${clan.clanConfig.clanId}`);\r\n    return of(clan);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-deaa322a3b7e2c1a0c821dc259fbcafd8abac7ad5b1cfcb6db3a6b90e49769a71382b4566241aa68194864bf1b44155a93c1f82ba8b84d51115c69c5914f4ce1",
            "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTests that localStorage exists, can be written to, and read from.",
                    "description": "<p>Tests that localStorage exists, can be written to, and read from.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nconst APP_PREFIX = 'D2DASH-';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() {}\r\n\r\n  static loadInitialState() {\r\n    return Object.keys(localStorage).reduce((state: any, storageKey) => {\r\n      if (storageKey.includes(APP_PREFIX)) {\r\n        const stateKeys = storageKey\r\n          .replace(APP_PREFIX, '')\r\n          //.toLowerCase()\r\n          .split('.')\r\n          .map((key) =>\r\n            key\r\n              .split('-')\r\n              .map((token, index) => (index === 0 ? token : token.charAt(0).toUpperCase() + token.slice(1)))\r\n              .join('')\r\n          );\r\n        let currentStateRef = state;\r\n        stateKeys.forEach((key, index) => {\r\n          if (index === stateKeys.length - 1) {\r\n            currentStateRef[key] = JSON.parse(localStorage.getItem(storageKey));\r\n            return;\r\n          }\r\n          currentStateRef[key] = currentStateRef[key] || {};\r\n          currentStateRef = currentStateRef[key];\r\n        });\r\n      }\r\n      return state;\r\n    }, {});\r\n  }\r\n\r\n  setItem(key: string, value: any) {\r\n    localStorage.setItem(`${APP_PREFIX}${key}`, JSON.stringify(value));\r\n  }\r\n\r\n  getItem(key: string) {\r\n    return JSON.parse(localStorage.getItem(`${APP_PREFIX}${key}`));\r\n  }\r\n\r\n  removeItem(key: string) {\r\n    localStorage.removeItem(`${APP_PREFIX}${key}`);\r\n  }\r\n\r\n  /** Tests that localStorage exists, can be written to, and read from. */\r\n  testLocalStorage() {\r\n    const testValue = 'testValue';\r\n    const testKey = 'testKey';\r\n    let retrievedValue: string;\r\n    const errorMessage = 'localStorage did not return expected value';\r\n\r\n    this.setItem(testKey, testValue);\r\n    retrievedValue = this.getItem(testKey);\r\n    this.removeItem(testKey);\r\n\r\n    if (retrievedValue !== testValue) {\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ManifestDatabaseService",
            "id": "injectable-ManifestDatabaseService-6f8892c42255d27eabc0ee0cfc52060927c17710ed345276ac4757ad4d90e58199cff3b4fd91c7ebc90ac959cfac592532666a46c43c9bd1ff932bb4eb846a3b",
            "file": "projects/data/src/lib/manifest/manifest-database.service.ts",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValues",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppIndexedDb, StoreId } from '../db/app-indexed-db';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestDatabaseService {\r\n\r\n  private database: AppIndexedDb;\r\n\r\n  getValues(repository: string): Promise<any[]> {\r\n    return this.getDatabase(repository).getAllData('allData');\r\n  }\r\n\r\n  closeDatabase(repository: string) {\r\n    return this.getDatabase(repository).close();\r\n  }\r\n\r\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\r\n    return this.getDatabase(repository).updateValues(entities, type);\r\n  }\r\n\r\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\r\n    return this.getDatabase(repository).removeValues(ids, type);\r\n  }\r\n\r\n  removeAll(repository: string, type: StoreId) {\r\n    return this.getDatabase(repository).removeAllValues(type);\r\n  }\r\n\r\n  private getDatabase(repository: string) {\r\n    if (this.database && this.database.name === repository) {\r\n      return this.database;\r\n    }\r\n\r\n    if (this.database) {\r\n      this.database.close();\r\n    }\r\n\r\n    this.database = new AppIndexedDb(repository);\r\n    return this.database;\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "ManifestEffects",
            "id": "injectable-ManifestEffects-365e4c14b9d9983fc71afee97b3b3a3080268ca76b81b9493e833c34cccebae3a9781fc6a66d1ac6ba3315d77320f826302b85d101dea8fdd0f254c3a0646d40",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
            "properties": [
                {
                    "name": "loadManifest$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { loadManifest, loadManifestComplete, loadManifestFailure } from './manifest.actions';\r\n\r\n@Injectable()\r\nexport class ManifestEffects {\r\n  constructor(private actions$: Actions, private manifestService: ManifestService, private store: Store) {}\r\n\r\n  loadManifest$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestLoaderService",
            "id": "injectable-ManifestLoaderService-9d8d1bee2a20baee7f950f0feea97fc96aaa34ea53965c8262d77f8bd9019d28f610cd3fd5a756714aaca78ae530d8e30203f2d2999dce5d3ee41e4f1a25ae2d",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getManifest",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getManifestFromCache",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadManifestData",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'"
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CachedManifest>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pruneTables",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestDefinitionsArchive",
                    "args": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\nimport { ManifestDatabaseService } from './manifest-database.service';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v1';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(private d2service: Destiny2Service, private db: ManifestDatabaseService) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate < nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    return this.db.getValues('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        this.db.closeDatabase('manifest');\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.update('manifest', 'allData', [dbObject]).then((db) => {\r\n            this.db.closeDatabase('manifest');\r\n          });\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "ManifestDatabaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "ManifestDatabaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestService",
            "id": "injectable-ManifestService-83693eadd9ff46e43c2471b7e08353f1f8aaef8728209cb5c2edbfabb5e3a958bb4f694e4764661300c1007ad2bbe0fc6eb7f6835e7ffee8fa14ed6dbc201898",
            "file": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadManifest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivityDefinitionService } from '@core/definition-services/activity-definition.service';\r\nimport { ActivityModeDefinitionService } from '@core/definition-services/activity-mode-definition.service';\r\nimport { MilestoneDefinitionService } from '@core/definition-services/milestone-definition.service';\r\nimport { PresentationNodeDefinitionService } from '@core/definition-services/presentation-node-definition.service';\r\nimport { ManifestLoaderService } from '@destiny/data/manifest';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestService {\r\n  constructor(\r\n    private loader: ManifestLoaderService,\r\n    private activityService: ActivityDefinitionService,\r\n    private activityModeService: ActivityModeDefinitionService,\r\n    private milestoneDefinitionService: MilestoneDefinitionService,\r\n    private presentationNodeDefinitionService: PresentationNodeDefinitionService\r\n  ) {}\r\n\r\n  loadManifest() {\r\n    console.time('loadManifest');\r\n    const tables = [\r\n      //'DestinyChecklistDefinition',\r\n      //'DestinyObjectiveDefinition',\r\n      //'DestinyStatDefinition',\r\n      //'DestinyVendorDefinition',\r\n      //'DestinyInventoryItemDefinition',\r\n      //'DestinyClassDefinition',\r\n      //'DestinySandboxPerkDefinition',\r\n      //'DestinyEnergyTypeDefinition',\r\n      //'DestinyCollectibleDefinition',\r\n      'DestinyPresentationNodeDefinition',\r\n      //'DestinyRecordDefinition',\r\n      'DestinySeasonDefinition',\r\n      //'DestinySeasonPassDefinition',\r\n      'DestinyMilestoneDefinition',\r\n      'DestinyActivityDefinition',\r\n      'DestinyActivityModeDefinition'\r\n      //'DestinyPlaceDefinition',\r\n      //'DestinyFactionDefinition'\r\n    ];\r\n    return this.loader\r\n      .loadManifestData('en', tables)\r\n      .pipe(\r\n        map((x) => {\r\n          if (x && x.data) {\r\n            if (x.data.DestinyActivityModeDefinition) {\r\n              this.activityModeService.initializeCache(x.data.DestinyActivityModeDefinition);\r\n            }\r\n            if (x.data.DestinyActivityDefinition) {\r\n              this.activityService.initializeCache(x.data.DestinyActivityDefinition);\r\n            }\r\n\r\n            if (x.data.DestinyMilestoneDefinition) {\r\n              this.milestoneDefinitionService.initializeCache(x.data.DestinyMilestoneDefinition);\r\n            }\r\n            if (x.data.DestinyPresentationNodeDefinition) {\r\n              this.presentationNodeDefinitionService.initializeCache(x.data.DestinyPresentationNodeDefinition);\r\n            }\r\n          }\r\n\r\n          console.timeEnd('loadManifest');\r\n          return true;\r\n        })\r\n      )\r\n      // .catch((err: any) => {\r\n      //   console.error(err);\r\n      // });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "presentationNodeDefinitionService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "presentationNodeDefinitionService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MilestoneDefinitionService",
            "id": "injectable-MilestoneDefinitionService-f2e895e7c658849bccec2344fe20302066ad808eb408ac1aa06da71f08e1f0868f5fe67640dc25f2065cf4387fd00418eb3c1f991ff566c5d644aa0050872b83",
            "file": "projects/clan-dashboard/src/app/core/definition-services/milestone-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsMilestonesDestinyMilestoneDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MilestoneDefinitionService extends BaseDefinitionService<DestinyDefinitionsMilestonesDestinyMilestoneDefinition> {}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "PresentationNodeDefinitionService",
            "id": "injectable-PresentationNodeDefinitionService-309c4c6b9d8ea09fe4c9fa9633d482d63323e32723d74cca8bee213311e18c1ce1f523fdf2b57262f087e3efbab1cc89ea909ae1aec1f774d2400f9c46699420",
            "file": "projects/clan-dashboard/src/app/core/definition-services/presentation-node-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DestinyDefinitionsPresentationDestinyPresentationNodeDefinition } from 'bungie-api-angular';\r\nimport { BaseDefinitionService } from './base-definition.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PresentationNodeDefinitionService  extends BaseDefinitionService<DestinyDefinitionsPresentationDestinyPresentationNodeDefinition> {\r\n\r\n}\r\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ProfileWorkerService",
            "id": "injectable-ProfileWorkerService-984df647caa04506c73226811b8f919ddff1282dadfc7cec17610960c2255df70f7b68259a28ee2adecf75a0fd7cdec3d30ce20c6607aee68b3663cd1e63c8ca",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker.service.ts",
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n//import { MemberProfile, ClanMember } from 'bungie-models';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileWorkerService {\r\n  constructor() {}\r\n  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n  //members: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n\r\n  // loadProfiles(clanId: string, clanMembers: ClanMember[], progress?: (done) => any): void {\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): void {\r\n    console.log('url', import.meta.url);\r\n    const worker = new Worker(new URL('./profile.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        this.members.next(data.data);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      apiKey: environment.apiKey\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "ClanResolveGuard",
            "id": "injectable-ClanResolveGuard-d5d4908d137aac682979d92489836f0124cad9451d75ed4dc8a985d10ad1233f97a48db491bb278fb07c1985ab57c00caf093f150ed860d1baad26e4f9bd5f46",
            "file": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { map, Observable, of } from 'rxjs';\r\nimport { selectTotalClans } from '@core/store/clans/clans.selectors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanResolveGuard implements CanActivate {\r\n  constructor(private store: Store, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.store.select(selectTotalClans).pipe(\r\n      map((clans) => {\r\n        if (!clans || clans === 0) {\r\n          return this.router.parseUrl('/clan-search');\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ApiKeyInterceptor",
            "id": "injectable-ApiKeyInterceptor-4793ba3d596c9301d951ef639da9925af9cd9d50355437590e973583799c64856dafc927815e578d58deadbab7aa24486d98923a4fb232f487887b71dc7d3e25",
            "file": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\n@Injectable()\r\nexport class ApiKeyInterceptor implements HttpInterceptor {\r\n  constructor(private appConfig: AppConfig) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add the header to the cloned request\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('x-api-key', this.appConfig.apiKey)\r\n    });\r\n\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppConfig",
            "id": "class-AppConfig-49551c7b8b5d5f8c35a0d597ba45e8e5ebc6b3e6a37df0edd1dde17c2f58e40508079d1297763b3d3f50dc627cdbdba9ba183415559b023e51d3cbb8bd8e88cf",
            "file": "projects/clan-dashboard/src/app/core/config/app-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DeepPartial } from '@destiny/data/models';\r\nimport { baseConstants } from '../../../environments/constants';\r\n\r\nexport class AppConfig {\r\n  readonly constants: DeepPartial<typeof baseConstants>\r\n  readonly apiKey: string;\r\n  readonly appVersion: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "constants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeepPartial<>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-6d580bd28cedc748c5beca3ce1092e9b9ead3d26da9ec543171d7fb8703433d851bfb8cc2dfa5a6ef78b3782c8bdeac8e62ae11122207cfe4ba9b68466ce17ea",
            "file": "projects/data/src/lib/db/app-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 2;\r\n\r\nexport type StoreId = 'allData';\r\n\r\nexport const STORE_IDS: StoreId[] = ['allData'];\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string) {\r\n    super(name, DB_VERSION, STORE_IDS);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-7de43f518c699151b6f172c5f8ae4278a7bb440561b4db455e983e6bff6d72d70a5887043d459a45798c5c61838453051df6d5d87b37f1d94c0df3919b1ac48b-1",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 5;\r\n\r\nexport enum StoreId {\r\n  CacheDetails = 'CacheDetails', //TODO: Verify\r\n  ClanDetails = 'ClanDetails',\r\n  ClanRewards = 'ClanRewards', // TODO: Verify\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberActivityStats = 'MemberActivityStats', // TODO: Verify\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\n  ProfileMilestones = 'ProfileMilestones', // TODO  Verfiy\r\n  ProfileMetrics = 'ProfileMetrics', // TODO: Verify\r\n  Raids = 'Raids' // TODO verify\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(name, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppIndexedDb-1"
        },
        {
            "name": "BaseAppIndexedDb",
            "id": "class-BaseAppIndexedDb-3c58fdf90e634c7efc4dd8ead1dec13ae0634a9481b5078880e95aa3f94fe2a97b7fcd2706398629fb9d9a8aec8e9322fda670bb47a580f6a7042ca05a5a2743",
            "file": "projects/data/src/lib/db/base-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { openDB, deleteDB, IDBPDatabase } from 'idb';\r\n\r\nexport class BaseAppIndexedDb {\r\n  name: string;\r\n  dbVersion: number;\r\n  storeIds: string[];\r\n\r\n  private db: Promise<IDBPDatabase>;\r\n\r\n  constructor(name: string, dbVersion: number, storeIds: string[], initializeValues: boolean = true) {\r\n    this.dbVersion = dbVersion;\r\n    this.storeIds = storeIds;\r\n\r\n    if (initializeValues) {\r\n      this.resetInitialValues();\r\n    }\r\n    this.name = name;\r\n    this.openDb();\r\n  }\r\n\r\n  close() {\r\n    return this.db.then((db) => db.close());\r\n  }\r\n\r\n  private resetInitialValues() {}\r\n\r\n  getAllData(store: string) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).getAll();\r\n    });\r\n  }\r\n\r\n  getById(store: string, id) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).get(id);\r\n    });\r\n  }\r\n\r\n  removeData() {\r\n   return this.db\r\n      .then((db) => {\r\n        this.resetInitialValues();\r\n        db.close();\r\n        return deleteDB(this.name);\r\n      })\r\n      .then(() => this.openDb());\r\n  }\r\n\r\n  purgeDatabase() {\r\n    return this.close().then((db) => {\r\n      return deleteDB(this.name);\r\n    });\r\n  }\r\n\r\n  updateValues(values: any[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      values.forEach((v) => store.put(v));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeValues(ids: string[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      ids.forEach((id) => store.delete(id));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeAllValues(collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      return store.clear();\r\n    });\r\n  }\r\n\r\n  private openDb() {\r\n    const base = this;\r\n    this.db = openDB(this.name, this.dbVersion, {\r\n      upgrade(db, oldVersion, newVersion, transaction) {\r\n        base.storeIds.forEach((collectionId) => {\r\n          if (!db.objectStoreNames.contains(collectionId)) {\r\n            const objectStore = db.createObjectStore(collectionId, {\r\n              keyPath: 'id'\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseClanService",
            "id": "class-BaseClanService-90d92405f1a8d87d72776f077a0069b1779211a0acb8aac1176886061d068381f2947a77145820dc5e02ed0ec5c89597e4bfda437238aa39f499ab6b36bc2475",
            "file": "projects/data/src/lib/clan/base-clan.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { isValidDate, nowPlusMinutes } from '../utility/date-utils';\r\n\r\nexport class BaseClanService {\r\n  tableName;\r\n  constructor(private clanDbBase: ClanDatabase, private tableNameBase: StoreId) {\r\n    this.tableName = tableNameBase;\r\n  }\r\n\r\n  getDataFromCache(clanId: string, rowId: string): Promise<DBObject> {\r\n    return this.clanDbBase.getById(clanId, this.tableNameBase, rowId);\r\n  }\r\n\r\n  getAllDataFromCache(clanId: string): Promise<DBObject[]> {\r\n    return this.clanDbBase.getAll(clanId, this.tableNameBase);\r\n  }\r\n\r\n  isCacheValid(cachedData: DBObject, minuteExpiration: number, lastActivity?: Date) {\r\n    if (cachedData && cachedData.createDate) {\r\n      const cacheDate = cachedData.createDate;\r\n      let expireDate;\r\n      if (isValidDate(lastActivity)) {\r\n        if (minuteExpiration === 0) {\r\n          expireDate = lastActivity;\r\n        } else {\r\n          const minuteXP = nowPlusMinutes(-minuteExpiration);\r\n          const lastActivityXP = lastActivity;\r\n          expireDate = minuteXP > lastActivityXP ? lastActivityXP : minuteXP;\r\n        }\r\n      } else {\r\n        expireDate = nowPlusMinutes(-minuteExpiration);\r\n      }\r\n      return cacheDate > expireDate;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateDB(clanId: string, rowId: string, data: any) {\r\n    this.clanDbBase.update(clanId, this.tableName, [\r\n      {\r\n        id: rowId,\r\n        createDate: new Date(),\r\n        data: data\r\n      }\r\n    ]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseDefinitionService",
            "id": "class-BaseDefinitionService-3f1a4648ea287776f456b1f058117617b612ec6fd42a4596d0f7c570dd5d6b28cab6983914692317701e0b3089ced78ea8977fc313cb46dba973f2df08bdab4c",
            "file": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class BaseDefinitionService<T> {\r\n  definitions: T[];\r\n  initializeCache(defs: T[]) {\r\n    this.definitions = defs;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanDatabase",
            "id": "class-ClanDatabase-d4554586ba756bab37c72e8ecc429978a222da3fd687c5d0c8ca0d55a4ff7ebb74cc4a7366cdba4a5e58e79aef2ecedcc7110da4549e503e49abb695db557e4e",
            "file": "projects/data/src/lib/clan/clan-database.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AppIndexedDb, StoreId, DBObject } from '../db/clan-indexed-db';\r\n\r\nexport class ClanDatabase {\r\n  private database: AppIndexedDb;\r\n\r\n\r\n  getAll(repository: string, type: StoreId): Promise<DBObject[]> {\r\n    return this.getDatabase(repository).getAllData(type);\r\n  }\r\n\r\n  getById(repository: string, type: StoreId, id: string): Promise<DBObject> {\r\n    return this.getDatabase(repository).getById(type, id);\r\n  }\r\n\r\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\r\n    return this.getDatabase(repository).updateValues(entities, type);\r\n  }\r\n\r\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\r\n    return this.getDatabase(repository).removeValues(ids, type);\r\n  }\r\n\r\n  removeAll(repository: string, type: StoreId) {\r\n    return this.getDatabase(repository).removeAllValues(type);\r\n  }\r\n\r\n  deleteDatabase(repository: string) {\r\n    return this.getDatabase(repository, false).purgeDatabase();\r\n  }\r\n\r\n  private getDatabase(repository: string, initializeValues: boolean = true) {\r\n    if (this.database && this.database.name === repository) {\r\n      return this.database;\r\n    }\r\n\r\n    if (this.database) {\r\n      this.database.close();\r\n    }\r\n\r\n    this.database = new AppIndexedDb(repository, initializeValues);\r\n    return this.database;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanMembersServiceMock",
            "id": "class-ClanMembersServiceMock-007118e7e7cc0e00831f7ed9cb4b7195838d5fc7c7db3339ef6303539664ddf1582d4d0d3c52c8202dbc6079eee9a9ee069ca6235c9bd28f3465cfcb34c4fb5f",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nexport class ClanMembersServiceMock implements ClanMembersServiceInterface {\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    console.log('returning');\r\n    return of([]);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ClanMembersServiceInterface"
            ]
        },
        {
            "name": "ProfileService",
            "id": "class-ProfileService-76f98854ebf40d159636c13fe68de9eb9483214b6fd2a0a3996dab7792968fa878651f276726935e7bc32b1ec80f4c07abd524755e49839d5122a4d1a8fd86b1",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  private profileComponents = [100, 104, 200, 202, 800, 900];\r\n\r\n  // TODO: Pull this from somewhere else.\r\n  private TRACKED_HASHES = [3902035969, 2770852111];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getProfileFromAPI(member: ClanMember) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.destinyUserInfo.membershipType}/Profile/${\r\n      member.destinyUserInfo.membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              return of();\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) => this.getSerializedProfile(clanId, member, collectionHashes, profileRecords),\r\n        100\r\n      )\r\n    ) as Observable<T>;\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedProfile(clanId, member, [], []), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(profile, this.TRACKED_HASHES, collectionHashes, profileRecords) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "profileComponents",
                    "defaultValue": "[100, 104, 200, 202, 800, 900]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "defaultValue": "StoreId.MemberProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "TRACKED_HASHES",
                    "defaultValue": "[3902035969, 2770852111]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfilesWithProgress",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileWorkerServiceMock",
            "id": "class-ProfileWorkerServiceMock-bb4952e9bfda54453fa61f22c1caef9fc33b840aeef62b54441e0683fc9e2175b310bb090b7c153db66ce86b12dec7c8f3157598da51ae597c5dbf96eb47aa8e",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, delay, of, take, tap } from 'rxjs';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\nexport class ProfileWorkerServiceMock {\r\n  constructor() {}\r\n  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): void {\r\n    of(true)\r\n      .pipe(\r\n        delay(10),\r\n        tap(() => progress({ progress: 10 })),\r\n        delay(10),\r\n        tap(() => progress({ progress: 20 })),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this.members.next([{}, {}]);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-884d4dac78da42545c2d51f1f6f007d43cd768bb4464ab381231e80f9ed11281c1d20c14c6921b6b1aeaae278dd38e7335bc7140c40a24a6f612b506add4e7b2",
            "file": "projects/clan-dashboard/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "manifestState$",
                    "defaultValue": "this.store.select(selectManifestState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "test",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'clan-dashboard'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { environment } from '../environments/environment';\r\nimport { AppState } from '@core/core.state';\r\nimport { loadManifest, selectManifestState } from '@core/store/manifest';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'clan-dashboard';\r\n  test = ''; // environment.apiKey;\r\n\r\n  manifestState$ = this.store.select(selectManifestState);\r\n\r\n  constructor(private store: Store) {\r\n    this.store.dispatch(loadManifest());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"manifestState$ | async as manifestState\">\r\n  <ng-container *ngIf=\"manifestState.loading === false && manifestState.loaded === true else loading\">\r\n    <div class=\"content-wrapper\">\r\n      <router-outlet #o=\"outlet\"></router-outlet>\r\n\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"manifestState.error\">\r\n    <h1>Error State</h1>\r\n  </ng-container>\r\n\r\n\r\n  <ng-template #loading>\r\n    <h1>Loading Manifest</h1>\r\n\r\n  </ng-template>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8ceaf520f96e5437b08eeda244d84efb29effe62ddca4fc38eaa229085c2a1126c5715e61445bae741505aca1e4d377b350cb05fadd1dc45d9b2bbf7527029f1",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ClansDetailsComponent",
            "id": "component-ClansDetailsComponent-97e88b263bc686d385ebf4bde9c2b0871b37253dee2f4b52de2d9ab87baa203acd5ac6429cbbcae6e87ed7c20220784b58a384098adcbe068741a364dfeed153",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-details",
            "styleUrls": [
                "./clans-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clansInfo$",
                    "defaultValue": "this.clansDetailsService.clanInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ClansDetailsService } from './clans-details.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-details',\r\n  templateUrl: './clans-details.component.html',\r\n  styleUrls: ['./clans-details.component.scss']\r\n})\r\nexport class ClansDetailsComponent {\r\n  constructor(private clansDetailsService: ClansDetailsService) {}\r\n  clansInfo$ = this.clansDetailsService.clanInfo$;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>clans-details works!</p>\r\n<ng-container *ngIf=\"clansInfo$ | async as clansInfo\">\r\n  <ng-container *ngFor=\"let clanInfo of clansInfo\">\r\n    <h1>{{clanInfo.name}} - {{clanInfo.clanInfo.clanCallsign}}</h1>\r\n    <h2>Member Count - {{clanInfo.memberCount}}</h2>\r\n    <h2>{{clanInfo.clanInfo.d2ClanProgressions['584850370'].level}} /\r\n      {{clanInfo.clanInfo.d2ClanProgressions['584850370'].levelCap}}</h2>\r\n    <hr>\r\n\r\n  </ng-container>\r\n\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ClanSearchComponent",
            "id": "component-ClanSearchComponent-58495835de9bac3ed33e8913cb5e5894a60961a6994efe4847a76f19eb76bc2680ff6b701d3542e2d878f528a605eab5638a63c68e96e223c055298d7b8ec3cc",
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search",
            "styleUrls": [
                "./clan-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clans$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { addClan, selectAllClans } from '@core/store/clans';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-clan-search',\r\n  templateUrl: './clan-search.component.html',\r\n  styleUrls: ['./clan-search.component.scss']\r\n})\r\nexport class ClanSearchComponent {\r\n  constructor(private store: Store) {}\r\n\r\n  clans$ = this.store.select(selectAllClans);\r\n  addClan(clanId: string) {\r\n    this.store.dispatch(addClan({ clanId }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clan-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>clan-search works!</p>\r\n{{(clans$ | async) | json}}\r\n<button (click)=\"addClan('2073131')\">DoD-PC - Chums</button>\r\n<button (click)=\"addClan('4859164')\">DoD-PC - Champs</button>\r\n<a routerLink=\"/\">Let's Go</a>\r\n"
        },
        {
            "name": "ClansRosterComponent",
            "id": "component-ClansRosterComponent-fb4e1dfceafa46b90712f4dcd8c8a4dc34d136d6bda82652410493b655e10cb1ae1a1c0c4be87969b98fcd38fa843eb421c4db028371e5cd65220a9eab837b49",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-roster",
            "styleUrls": [
                "./clans-roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-roster.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "members$",
                    "defaultValue": "this.clansRosterService.clanMembers$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "profiles$",
                    "defaultValue": "this.clansRosterService.clanProfiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "stuff$",
                    "defaultValue": "this.clansRosterService.activeClanUpdateDates$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stuff2$",
                    "defaultValue": "this.clansRosterService.activeClanPeople$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ClansRosterService } from './clans-roster.service';\r\n\r\n@Component({\r\n  selector: 'app-clans-roster',\r\n  templateUrl: './clans-roster.component.html',\r\n  styleUrls: ['./clans-roster.component.scss']\r\n})\r\nexport class ClansRosterComponent implements OnInit {\r\n  constructor(private clansRosterService: ClansRosterService) {}\r\n  stuff$ = this.clansRosterService.activeClanUpdateDates$;\r\n  stuff2$ = this.clansRosterService.activeClanPeople$;\r\n  members$ = this.clansRosterService.clanMembers$;\r\n  profiles$ = this.clansRosterService.clanProfiles$;\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>clans-roster works!</p>\r\n<!-- {{(stuff$ | async) | json}} -->\r\n<hr>\r\n{{(stuff2$ | async) | json}}\r\n<hr>\r\n<div style=\"height:100px; overflow:scroll\">\r\n  {{(members$ | async) | json}}}\r\n</div>\r\n<div style=\"height:100px; overflow:scroll\">\r\n\r\n  {{(profiles$ | async) | json}}}\r\n</div>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-7077bff6e13dd8161f4ed7be9b97388a47336fab1e7cd2368357378f6433077bf40fd804d8f57fbe6f11f6155c907e34848008b6e2584e97cff36a9da657ce03",
            "file": "projects/clan-dashboard/src/app/views/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dashboard works!</p>\r\n<app-clans-details></app-clans-details>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bda17aa3451a9f731685153f2587877b8267c32007f05e7abad3581336e6bc02346a1b660e8c69c4d90b4526b6e047b3ac1f4246252c9dc83985c9148aab5e97",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            primary\r\n            size=\"small\"\r\n            primary=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-1fc7c24c98b4f0b0f413d91f5a6126f11ad55647457f5a7f372b7f83fe8ecd6dbe67b5ca4b826ed20b9bfbc04d5606b15f82a203b1311f98b18bd28ec9f4fc7c",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nsection h2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nsection p {\r\n  margin: 1em 0;\r\n}\r\n\r\nsection a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nsection ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nsection li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nsection .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\nsection .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nsection .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\nsection .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RenderedViewComponent",
            "id": "component-RenderedViewComponent-fa628025d662d044916467ef6e552eb838f490b7320a87dc90d03e32b86878e8f81975bc6589dfa4920ce499074f10366037d23ed4068d26a9dd388da2b5c76a",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-rendered-view",
            "styleUrls": [
                "./rendered-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rendered-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-rendered-view',\r\n  templateUrl: './rendered-view.component.html',\r\n  styleUrls: ['./rendered-view.component.scss']\r\n})\r\nexport class RenderedViewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./rendered-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>rendered-view works!</p>\r\n"
        },
        {
            "name": "RosterComponent",
            "id": "component-RosterComponent-c295280506afb1ad13c0bff7d6d0ed5734362cf10100f7696285a27ab8eef43e5597c25a27ebe3598ff517e5edd60988a01c0745ef4a099b48fe832b6180eef8",
            "file": "projects/clan-dashboard/src/app/views/roster/roster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-roster",
            "styleUrls": [
                "./roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roster.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-roster',\n  templateUrl: './roster.component.html',\n  styleUrls: ['./roster.component.scss']\n})\nexport class RosterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>roster works!</p>\n<app-clans-roster></app-clans-roster>\n"
        },
        {
            "name": "TableViewComponent",
            "id": "component-TableViewComponent-ce099051a9c6cbb697786b4d96dbd83dd5be32eb7565c45553bfc0f0e8089e3c093c9ff48c51e28d953eae63b7c9818642aee6f262bdb3fd71395c7a1e347171",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-table-view",
            "styleUrls": [
                "./table-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  styleUrls: ['./table-view.component.scss']\r\n})\r\nexport class TableViewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>table-view works!</p>\r\n"
        },
        {
            "name": "WrapperComponent",
            "id": "component-WrapperComponent-3a6d6ee78f86b3957f97250bd6063386b51396d4436c7c1f4882ad0b0aba16bf7bba2c80cfb277ef6cea40b7b4070e53bce303705c3696bbcd95bdaa58947410",
            "file": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wrapper",
            "styleUrls": [
                "./wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { take } from 'rxjs';\r\nimport { ClanUpdaterService } from '../../services/clan-updater.service';\r\n\r\n@Component({\r\n  selector: 'app-wrapper',\r\n  templateUrl: './wrapper.component.html',\r\n  styleUrls: ['./wrapper.component.scss']\r\n})\r\nexport class WrapperComponent implements OnInit {\r\n  constructor(private clanUpdaterService: ClanUpdaterService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.clanUpdaterService.update().pipe(take(1)).subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>wrapper works!</p>\r\n<a routerLink=\"/\">Dashboard</a>\r\n<a routerLink=\"/roster\">Roster</a>\r\n\r\n\r\n<router-outlet></router-outlet>\r\n\r\nstuff\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e8b0281cefd0e4f23a26c6d95d5fe63076a19a089aefd4ce31447be309678bd8a950e326dd0eec9f54785180b6b6d47b477fb78a1ce667c0e6543c1c8467c834",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CoreModule } from '@core/core.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b2fa48c375cfd2ce5907d54cac3ec16e7245bd8648e3ae2f91763c6054b8649d68b76a05dc1b8b0e550718bdd976ca206561afc263bb178e5f40cc3d6ef3a79a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardModule } from './views/dashboard/dashboard.module';\r\nimport { ClanResolveGuard } from '@core/guards/clan.guard';\r\nimport { WrapperComponent } from '@core/layout/wrapper/wrapper.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    canActivate: [ClanResolveGuard],\r\n    component: WrapperComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () => \"import('./views/dashboard/dashboard.module').then((module) => module.DashboardModule)\"\r\n      },\r\n      {\r\n        path: 'roster',\r\n        loadChildren: () => \"import('./views/roster/roster.module').then((module) => module.RosterModule)\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'clan-search',\r\n    // TODO: Clan Guard\r\n    //canActivate: [ClanResolveGuard],\r\n    loadChildren: () => \"import('./views/clan-search/clan-search.module').then((module) => module.ClanSearchModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanDbModule",
            "id": "module-ClanDbModule-a7659e7698215fdbc3cc007d80bdab805a3016762af2da6106cf677c3b19c613fe261e552b025375ebfcdb7f2e7fc076a669173db4cf97ec8630de05ddce88ee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/data/src/lib/clan/clan-db.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanDetailsService } from './clan-details/clan-details.service';\r\nimport { ClanDatabase } from './clan-database';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [ClanDetailsService, ClanDatabase]\r\n})\r\nexport class ClanDbModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClanDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsModule",
            "id": "module-ClansDetailsModule-f4122bdaf69f0fcd276290c4bb3d69faf074371b3a2fdbcc0b7f069b9d28da24eee3c531c1a7548e672e4bc084dd12108ba41792bab1f9ee7812dafbcd8ee4c3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansDetailsComponent } from './clans-details.component';\r\nimport { ClansDetailsService } from './clans-details.service';\r\n\r\n@NgModule({\r\n  declarations: [ClansDetailsComponent],\r\n  providers: [ClansDetailsService],\r\n  exports: [ClansDetailsComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class ClansDetailsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchModule",
            "id": "module-ClanSearchModule-9186d01fa88e50d0267f776cb6cfa302a3df57ed4da77aa66802566b188005787d8b9f2534acaa031b36fdcbc287840fcec1702c48e74a7b2bb60fa449c60959",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\nimport { ClanSearchRoutingModule } from './clan-search-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [ClanSearchComponent],\r\n  imports: [CommonModule, ClanSearchRoutingModule]\r\n})\r\nexport class ClanSearchModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-7b32126c4ac10ad4d41495d3e6340eb73a2ca569a768db1452896998b467bd8486530a74a9ae94928c5b7b6c02b192896507fd51aa3c65ad0ade622cbeb6d820",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-4968af02374a2937591f6e2a9582bb8f245e696e074def8216dc36ca2f462aa48d7c3bf7714479fd101f2940581b10b3f649df87d8298c24e4ef5bbb929cdf4c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClansRosterComponent } from './clans-roster.component';\r\nimport { ClansRosterService } from './clans-roster.service';\r\n\r\n@NgModule({\r\n  declarations: [ClansRosterComponent],\r\n  providers: [ClansRosterService],\r\n  exports: [ClansRosterComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class ClansRosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansRosterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-e8fed4b2c156e99252d0a5e9f809d696f424da3f7b889cadc9beea5a30cb3092a60bccf3feebe3fddc7581cd0d845505428943ba20f0b2122f5f89235b7028e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AppConfig } from './config/app-config';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ApiKeyInterceptor } from './interceptors/apikey.interceptor';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { coreReducers, coreEffects, metaReducers } from './core.state';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { Configuration } from 'bungie-api-angular';\r\nimport { ClanDbModule } from '@destiny/data/clan';\r\nimport { LayoutModule } from './layout/layout.module';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    ClanDbModule,\r\n    LayoutModule,\r\n    StoreModule.forRoot(coreReducers, { metaReducers }),\r\n    EffectsModule.forRoot(coreEffects),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\r\n  ],\r\n  providers: [\r\n    ClanMembersService,\r\n    {\r\n      provide: ProfileService,\r\n      useFactory: (canDB) => {\r\n        return new ProfileService(canDB, environment.apiKey);\r\n      },\r\n      deps: [ClanDatabase]\r\n    },\r\n    { provide: AppConfig, useValue: environment },\r\n    // {\r\n    //   provide: Configuration,\r\n    //   useFactory: () => new Configuration(\r\n    //     {\r\n\r\n    //       //basePath: environment.apiUrl,\r\n    //       //accessToken: authService.getAccessToken.bind(authService)\r\n    //     }\r\n    //   ),\r\n    //   multi: false\r\n    // },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ApiKeyInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CoreModule {\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: CoreModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CoreModule is already loaded. Import only in AppModule');\r\n    }\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiKeyInterceptor"
                        },
                        {
                            "name": "ClanMembersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDbModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-33e1179d0ef9044089301ff8ff7cec0392e4a184c957209a3894f956486bb615c0a27dc31166277fa7bb03f3731b210c6d317caaf08b4a7ecdcc77cfa27f28eb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\n//import {} from '@features/\r\nimport { ClansDetailsModule } from '@features/clans-details';\r\n\r\n@NgModule({\r\n  declarations: [DashboardComponent],\r\n  imports: [CommonModule, DashboardRoutingModule, ClansDetailsModule]\r\n})\r\nexport class DashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansDetailsModule"
                        },
                        {
                            "name": "DashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-97df5871caa8c0d9687fa80e1d35dc593a5a6870824c92ba0a4dfbff9db686ef833314388a345e93fda40ed7f39ae64ce4fd9cd5dec3db30369756e382156f9d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DashboardComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-88d39b464e3dcdeb16ec8da4ba324887800c8c993cce6bb35048e687c19f43b8ba0dd04200a5ceb43dd22975153aeeb1970ffd24d9af16150539635edad6f8fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WrapperComponent } from './wrapper/wrapper.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [WrapperComponent],\n  imports: [CommonModule, RouterModule]\n})\nexport class LayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RenderedViewModule",
            "id": "module-RenderedViewModule-9a51ed259de3f490dd2d8b249c3ee488ddb860c1c269c971c96d6551372b7d4dc7ebf9c09fd7e0b401c058bfcaa76ab7caf1eedc9970dcebae803e9739054a6e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RenderedViewComponent } from './rendered-view.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RenderedViewComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class RenderedViewModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RosterModule",
            "id": "module-RosterModule-664d80d93710cfdeea7126563ac398402ffc27f8b759bace2d10cf40bf3a1909a507bf7530dd08529eba949d2c4598d72eb7b3fbec5d247ee70e919ec0adecc4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/roster/roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RosterComponent } from './roster.component';\r\nimport { RosterRoutingModule } from './roster-routing.module';\r\nimport { ClansRosterModule } from '@features/clans-roster';\r\n\r\n@NgModule({\r\n  declarations: [RosterComponent],\r\n  imports: [CommonModule, RosterRoutingModule, ClansRosterModule]\r\n})\r\nexport class RosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RosterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansRosterModule"
                        },
                        {
                            "name": "RosterRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RosterRoutingModule",
            "id": "module-RosterRoutingModule-6ef324c894c2bf606e9f8184eed1171c67c483b9436864da8ba294baf4a9cf266a48bbb229d08e950453f5549451782e61a840a06ecd5f120badcb2535d71038",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/roster/roster-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RosterComponent } from './roster.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RosterComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RosterRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-e8886111f38cdd66856109356cd0b022c45b0da84513b42af7c3bf5f73ff6c7a0fb19f2e1047981843940e60ef632068359f2105b93957785fccba0db4fb53d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableViewComponent } from './table-view/table-view.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TableViewComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string }>())"
            },
            {
                "name": "APP_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'D2DASH-'"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Clans] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Manifest] - '"
            },
            {
                "name": "baseConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  PROFILE_UPDATING_EXP_MINUTES: 180\r\n}"
            },
            {
                "name": "CLAN_LEVEL_HASH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/hashes/clan-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'584850370'"
            },
            {
                "name": "ClanConfigAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ClanConfig>",
                "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
            },
            {
                "name": "CLANS_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'clans'"
            },
            {
                "name": "ClansReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      //const newClangConfig = {}\r\n      return ClanConfigAdapter.upsertOne({ clanId, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n  //  on(updateClanProfileSync, (state, {}): ClanState => {\r\n\r\n  // }),\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "coreEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ManifestEffects, ClansEffects]"
            },
            {
                "name": "coreReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer\r\n}"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "DefaultClanConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClanConfig",
                "defaultValue": "{\r\n  enabled: true\r\n} as ClanConfig"
            },
            {
                "name": "envConfigFile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "set-env.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`export const secretKeys = {\r\n  apiKey: '${process.env.API_KEY}',\r\n};\r\n`"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "fs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "set-env.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "name": "initialClanState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClansState",
                "defaultValue": "ClanConfigAdapter.getInitialState({})"
            },
            {
                "name": "initialManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ManifestState",
                "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('load'))"
            },
            {
                "name": "loadManifestComplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('complete'))"
            },
            {
                "name": "loadManifestFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MANIFEST_PATH_EXP_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
            },
            {
                "name": "MANIFEST_PATH_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_KEY'"
            },
            {
                "name": "ManifestReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[initStateFromLocalStorage]"
            },
            {
                "name": "MockConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppConfig",
                "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "removeClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secretKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/secrets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
            },
            {
                "name": "selectClansState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ClansState>('clans')"
            },
            {
                "name": "selectEnabledClanIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
            },
            {
                "name": "selectEnabledClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
            },
            {
                "name": "selectLastProfileUpdate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
            },
            {
                "name": "selectManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
            },
            {
                "name": "selectManifestError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
            },
            {
                "name": "selectManifestLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
            },
            {
                "name": "selectManifestLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
            },
            {
                "name": "selectManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
            },
            {
                "name": "setClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "STATUS_DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'done'"
            },
            {
                "name": "STATUS_EXTRACTING_TABLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'extracting tables'"
            },
            {
                "name": "STATUS_UNZIPPING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'unzipping'"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "['allData']"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "[\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n]"
            },
            {
                "name": "targetPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "set-env.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'./projects/clan-dashboard/src/environments/secrets.ts'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RenderedViewComponent>",
                "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "updateClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
            },
            {
                "name": "updateClanProfileSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
            },
            {
                "name": "VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'v1'"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
            }
        ],
        "functions": [
            {
                "name": "addDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanDetailSerializer",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClanDetails",
                "jsdoctags": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateToUnixTimeStamp",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBungieStartDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterProgressions",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDateArray",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDayOfWeek",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFirstDayOfMonth",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileItems",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileRecords",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProgressionValues",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initStateFromLocalStorage",
                "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<AppState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isValidDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusMinutes",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusWeeks",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "playtime",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileSerializer",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "serializeProgression",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unixTimeStampToDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DeepPartial",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/models/DeepPartial.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "StoreId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            }
        ],
        "enumerations": [
            {
                "name": "StoreId",
                "childs": [
                    {
                        "name": "CacheDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CacheDetails"
                    },
                    {
                        "name": "ClanDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanDetails"
                    },
                    {
                        "name": "ClanRewards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanRewards"
                    },
                    {
                        "name": "MemberProfiles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberProfiles"
                    },
                    {
                        "name": "MemberActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivities"
                    },
                    {
                        "name": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivityStats"
                    },
                    {
                        "name": "MemberRecentActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberRecentActivities"
                    },
                    {
                        "name": "ProfileMilestones",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ProfileMilestones"
                    },
                    {
                        "name": "ProfileMetrics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ProfileMetrics"
                    },
                    {
                        "name": "Raids",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Raids"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts"
            }
        ],
        "groupedVariables": {
            "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts": [
                {
                    "name": "addClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string }>())"
                },
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Clans] - '"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                },
                {
                    "name": "removeClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
                },
                {
                    "name": "setClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
                },
                {
                    "name": "updateClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
                },
                {
                    "name": "updateClanProfileSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
                }
            ],
            "projects/clan-dashboard/src/app/core/services/local-storage.service.ts": [
                {
                    "name": "APP_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'D2DASH-'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Manifest] - '"
                },
                {
                    "name": "loadManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('load'))"
                },
                {
                    "name": "loadManifestComplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('complete'))"
                },
                {
                    "name": "loadManifestFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                }
            ],
            "projects/clan-dashboard/src/environments/constants.ts": [
                {
                    "name": "baseConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  PROFILE_UPDATING_EXP_MINUTES: 180\r\n}"
                }
            ],
            "projects/data/src/lib/hashes/clan-details.ts": [
                {
                    "name": "CLAN_LEVEL_HASH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/hashes/clan-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'584850370'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts": [
                {
                    "name": "ClanConfigAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ClanConfig>",
                    "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
                },
                {
                    "name": "DefaultClanConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "defaultValue": "{\r\n  enabled: true\r\n} as ClanConfig"
                },
                {
                    "name": "initialClanState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "defaultValue": "ClanConfigAdapter.getInitialState({})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts": [
                {
                    "name": "CLANS_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'clans'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts": [
                {
                    "name": "ClansReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      //const newClangConfig = {}\r\n      return ClanConfigAdapter.upsertOne({ clanId, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n  //  on(updateClanProfileSync, (state, {}): ClanState => {\r\n\r\n  // }),\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
                }
            ],
            "projects/clan-dashboard/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/data/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/clan-dashboard/src/app/core/core.state.ts": [
                {
                    "name": "coreEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ManifestEffects, ClansEffects]"
                },
                {
                    "name": "coreReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer\r\n}"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[initStateFromLocalStorage]"
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "['allData']"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "[\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n]"
                }
            ],
            "set-env.ts": [
                {
                    "name": "envConfigFile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "set-env.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`export const secretKeys = {\r\n  apiKey: '${process.env.API_KEY}',\r\n};\r\n`"
                },
                {
                    "name": "fs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "set-env.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "name": "targetPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "set-env.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'./projects/clan-dashboard/src/environments/secrets.ts'"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts": [
                {
                    "name": "initialManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/data/src/lib/manifest/manifest-loader.service.ts": [
                {
                    "name": "MANIFEST_PATH_EXP_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
                },
                {
                    "name": "MANIFEST_PATH_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_KEY'"
                },
                {
                    "name": "STATUS_DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'done'"
                },
                {
                    "name": "STATUS_EXTRACTING_TABLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'extracting tables'"
                },
                {
                    "name": "STATUS_UNZIPPING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'unzipping'"
                },
                {
                    "name": "VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'v1'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts": [
                {
                    "name": "ManifestReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
                }
            ],
            "projects/clan-dashboard/src/app/core/config/app-config.mock.ts": [
                {
                    "name": "MockConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppConfig",
                    "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
                }
            ],
            "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RenderedViewComponent>",
                    "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/clan-dashboard/src/environments/secrets.ts": [
                {
                    "name": "secretKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/secrets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts": [
                {
                    "name": "selectClansState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ClansState>('clans')"
                },
                {
                    "name": "selectEnabledClanIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
                },
                {
                    "name": "selectEnabledClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
                },
                {
                    "name": "selectLastProfileUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts": [
                {
                    "name": "selectManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
                },
                {
                    "name": "selectManifestError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
                },
                {
                    "name": "selectManifestLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
                },
                {
                    "name": "selectManifestLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
                },
                {
                    "name": "selectManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/data/src/lib/utility/date-utils.ts": [
                {
                    "name": "addDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateToUnixTimeStamp",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieStartDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateArray",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayOfWeek",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstDayOfMonth",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusMinutes",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusWeeks",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "playtime",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unixTimeStampToDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts": [
                {
                    "name": "clanDetailSerializer",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClanDetails",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeProgression",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/profiles/profile.serializer.ts": [
                {
                    "name": "getCharacterProgressions",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileItems",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileRecords",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressionValues",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileSerializer",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts": [
                {
                    "name": "initStateFromLocalStorage",
                    "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<AppState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "childs": [
                        {
                            "name": "CacheDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CacheDetails"
                        },
                        {
                            "name": "ClanDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanDetails"
                        },
                        {
                            "name": "ClanRewards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanRewards"
                        },
                        {
                            "name": "MemberProfiles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberProfiles"
                        },
                        {
                            "name": "MemberActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivities"
                        },
                        {
                            "name": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivityStats"
                        },
                        {
                            "name": "MemberRecentActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberRecentActivities"
                        },
                        {
                            "name": "ProfileMilestones",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ProfileMilestones"
                        },
                        {
                            "name": "ProfileMetrics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ProfileMetrics"
                        },
                        {
                            "name": "Raids",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Raids"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/data/src/lib/models/DeepPartial.ts": [
                {
                    "name": "DeepPartial",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/models/DeepPartial.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/clan-dashboard/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivate": [
                            "ClanResolveGuard"
                        ],
                        "component": "WrapperComponent",
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./views/dashboard/dashboard.module#DashboardModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/views/dashboard/dashboard-routing.module.ts",
                                                "module": "DashboardRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "DashboardComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "DashboardModule"
                                    }
                                ]
                            },
                            {
                                "path": "roster",
                                "loadChildren": "./views/roster/roster.module#RosterModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/views/roster/roster-routing.module.ts",
                                                "module": "RosterRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "RosterComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "RosterModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "clan-search",
                        "loadChildren": "./views/clan-search/clan-search.module#ClanSearchModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/clan-dashboard/src/app/views/clan-search/clan-search-routing.module.ts",
                                        "module": "ClanSearchRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ClanSearchComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ClanSearchModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/clan-dashboard/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/activity-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/activity-mode-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityModeDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/milestone-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MilestoneDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/presentation-node-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PresentationNodeDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ClanResolveGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiKeyInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfigMembers",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClanProfileSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLANS_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClansReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClanIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastProfileUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClanConfigAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialClanState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestComplete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ManifestReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initStateFromLocalStorage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansRosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansRosterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/roster/roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileWorkerServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/secrets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secretKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-clan.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseClanService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-database.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanDatabase",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanDetailSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "serializeProgression",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMembersServiceInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanMembersServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanMembersService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterProgressions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProgressionValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/base-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DBObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/hashes/clan-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_LEVEL_HASH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-database.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestDatabaseService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestLoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CachedManifest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_EXP_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_EXTRACTING_TABLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_UNZIPPING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanDetails",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanProgression",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMember",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupsV2GroupUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateToUnixTimeStamp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDateArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDayOfWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFirstDayOfMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValidDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusMinutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusWeeks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "playtime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unixTimeStampToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "set-env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "envConfigFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "set-env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "set-env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "targetPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}