{
    "pipes": [
        {
            "name": "BungieDatePipe",
            "id": "pipe-BungieDatePipe-e123588f0d85899fbdfeecd50b2af84499dfcd1253234a3d1593631fb5189c574272cb837095c382c2b8f240a05d31c21830777dcd720ed7dca5d4eb8a18fc84",
            "file": "projects/components/src/lib/pipes/bungie-date/bungie-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'bungieDate'\r\n})\r\nexport class BungieDatePipe extends DatePipe implements PipeTransform {\r\n\r\n  constructor(@Inject(LOCALE_ID) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override transform(date: Date): any {\r\n    return super.transform(date, 'yyyy-MM-dd');\r\n  }\r\n}\r\n"
        },
        {
            "name": "BungieDateTimePipe",
            "id": "pipe-BungieDateTimePipe-2e67c8cd25646d7199b620b906312eb141c53a8b64d1db03a7757c78a910d2007730503440b0460edf8ed29d32a521bfc2501f2df745ce2e2fe67be3237c9271",
            "file": "projects/components/src/lib/pipes/bungie-date/bungie-date-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bungieDateTime",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'bungieDateTime'\r\n})\r\nexport class BungieDateTimePipe extends DatePipe implements PipeTransform {\r\n  constructor(@Inject(LOCALE_ID) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override transform(date: Date): any {\r\n    return super.transform(date, 'yyyy-MM-dd h:mm a');\r\n  }\r\n}\r\n"
        },
        {
            "name": "MemberTypePipe",
            "id": "pipe-MemberTypePipe-cac8cba040a879a01a0a9a7084b035dcb7703190a669046163ec9484ddab90c8975463e284aee7d29381b66704a667769cda89139f098547f2d38f350fa5dcb8",
            "file": "projects/components/src/lib/pipes/member-type/member-type.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "memberType",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MembershipTypes } from '@destiny/data/models/enums';\r\n\r\n@Pipe({\r\n  name: 'memberType'\r\n})\r\nexport class MemberTypePipe implements PipeTransform {\r\n  transform(value: number): string {\r\n    switch (value) {\r\n      case MembershipTypes.Xbox:\r\n        return 'xbox';\r\n      case MembershipTypes.Psn:\r\n        return 'playstation';\r\n      case MembershipTypes.Steam:\r\n        return 'steam';\r\n      case MembershipTypes.Stadia:\r\n        return 'stadia';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-2e046c2170c440af6b92916a33918f4bb6b4ec6fd11fe5566f09d5a411df0d8559bcdb152e2068e8cfa130ff9c35ee79fd02e89c6510f2a549ab26c87b3869b2",
            "file": "projects/clan-dashboard/src/app/core/core.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { ManifestReducer, ManifestState, ManifestEffects } from './store/manifest';\r\nimport { ClansEffects, ClansState, ClansReducer } from './store/clans';\r\nimport { initStateFromLocalStorage } from './store/meta-reducers/init-state-from-local-storage.reducer';\r\n\r\nexport const coreEffects = [ManifestEffects, ClansEffects];\r\n\r\nexport const coreReducers: ActionReducerMap<AppState> = {\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer\r\n};\r\n\r\nexport const metaReducers: MetaReducer<AppState>[] = [initStateFromLocalStorage];\r\n\r\nexport interface AppState {\r\n  manifest: ManifestState;\r\n  clans: ClansState;\r\n}\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CachedManifest",
            "id": "interface-CachedManifest-9d8d1bee2a20baee7f950f0feea97fc96aaa34ea53965c8262d77f8bd9019d28f610cd3fd5a756714aaca78ae530d8e30203f2d2999dce5d3ee41e4f1a25ae2d",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\nimport { ManifestDatabaseService } from './manifest-database.service';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v1';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(private d2service: Destiny2Service, private db: ManifestDatabaseService) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate < nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    return this.db.getValues('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        this.db.closeDatabase('manifest');\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.update('manifest', 'allData', [dbObject]).then((db) => {\r\n            this.db.closeDatabase('manifest');\r\n          });\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfig",
            "id": "interface-ClanConfig-f1fafeb518d27a3c42acec2c70bde180d357001959f17e238189e0bc70c79a7ce8f793341fcd903eddfed8f896254f0aebc9a7560a3f6ee756cbc9b64ad169b0",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\n// export const initialClanState: ClansState = {\r\n//   clans: []\r\n// };\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clanId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "memberUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "profileUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanConfigMembers",
            "id": "interface-ClanConfigMembers-2d30f581fc637f8dc13d8b05f3c10ed72e0c861de40644ce8548e174d67e512a4f67b87172ac92b33b0caec39b614e8fd2b3ca543334bd5c5cebf9a5a75bcf9d",
            "file": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap, take, filter } from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClanProfileSync } from '../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../workers/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\ninterface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      // tap((x) => console.log('starting')),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      //tap((x) => console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profilesUpdate(clans)),\r\n      // tap((x) => console.log('complete', x))\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        //console.log('merge map', clanConfig.clanId);\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  profilesUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      mergeMap((x) => {\r\n        return this.profileUpdate(x).pipe(map((cm) => x));\r\n        //}\r\n\r\n        //\r\n        //return of(x);\r\n      }, 1),\r\n      toArray(),\r\n   ///   tap((x) => console.log('toarray 2', x))\r\n    );\r\n  }\r\n\r\n  profileUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.profileUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      //      console.log(`Updating ${clan.clanConfig.clanId}`);\r\n      //if (true === true) {\r\n      // this.store.dispatch(\r\n      //   addNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: { progress: 0 } } })\r\n      // );\r\n      const progress = (progressCount) => {\r\n        // this.store.dispatch(\r\n        //   updateNotification({\r\n        //     notification: {\r\n        //       id: 'memberProfile',\r\n        //       title: 'Updating Profiles',\r\n        //       data: { progress: progressCount }\r\n        //     }\r\n        //   })\r\n        // );\r\n        //       console.log('progress', progressCount);\r\n      };\r\n      this.profileWorkerService.loadProfiles(clan.clanConfig.clanId, clan.members, progress);\r\n      return this.profileWorkerService.members.pipe(\r\n        filter((x) => x.length > 0),\r\n        take(1),\r\n        map((x) => {\r\n          // this.store.dispatch(memberProfileActions.loadMemberProfiles({ memberProfiles: x }));\r\n          // this.store.dispatch(\r\n          //   removeNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: 'done' } })\r\n          // );\r\n          // return memberProfileActions.loadMemberProfileSuccess();\r\n          //         console.log(`done ${clan.clanConfig.clanId}`, x);\r\n          this.store.dispatch(updateClanProfileSync({ clanId: clan.clanConfig.clanId }));\r\n          return clan;\r\n        })\r\n      );\r\n    }\r\n    //console.log(`Valid Cache ${clan.clanConfig.clanId}`);\r\n    return of(clan);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "clanConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanDetails",
            "id": "interface-ClanDetails-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "about",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clanInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "memberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanInfo",
            "id": "interface-ClanInfo-4bd6065fc63a0b6c22f6845c8c690e96f87b0fc2c3dea174cb8a5694a216970274534001488783bdee9743953d849695fbf1c54006ceb567cdd8863886c8d69a",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { selectEnabledClans } from '@core/store/clans';\nimport { from, of } from 'rxjs';\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\n\ninterface ClanInfo{\n  ClanName: string;\n  ClanMemberCount: string;\n\n}\n\n\n@Injectable()\nexport class ClansDetailsService {\n  activeClanIds$ = this.store.select(selectEnabledClans);\n\n  clanInfo$ = this.activeClanIds$.pipe(\n    switchMap((clanConfigs) => {\n      return from(clanConfigs).pipe(\n        mergeMap((clanConfig) => {\n          // return of(clanConfig);\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId);\n        }),\n        toArray()\n      );\n    })\n  );\n\n  constructor(private store: Store, private dataService: DataService) {}\n}\n",
            "properties": [
                {
                    "name": "ClanMemberCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "ClanName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMember",
            "id": "interface-ClanMember-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "bungieNetUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "destinyUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupUserInfoCard",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isOnline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "joinDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lastOnlineStatusChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "memberType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMemberProfile",
            "id": "interface-ClanMemberProfile-163a5c137b3749adc4003746eb7fbd0cb8df624d741b08f81151f231e1ae9a18533cc380a1136d8f69230fa0f59b7f58730217f556ee7466754378efcb3fee24",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClanIds, selectEnabledClans, selectLastProfileUpdate } from '@core/store/clans';\r\nimport { forkJoin, from, map, mergeMap, switchMap, tap, toArray, combineLatest, distinctUntilChanged, Observable } from 'rxjs';\r\n// import {} from '@destiny/data/';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface ClanMemberProfile {\r\n  clanId: string;\r\n  member: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n}\r\n\r\n@Injectable()\r\nexport class ClansRosterService {\r\n  activeClansId$ = this.store.select(selectEnabledClanIds);\r\n\r\n  activeClanUpdateDates$ = this.activeClansId$.pipe(\r\n    switchMap((clanIds) => {\r\n      const arraySelectors = clanIds.map((clanId) => {\r\n        return this.store.select(selectLastProfileUpdate(clanId));\r\n      });\r\n\r\n      return combineLatest(arraySelectors);\r\n      // return from(clanIds).pipe(\r\n      //   switchMap((clanId) => {\r\n      //     console.log('', clanId);\r\n      //     return this.store.select(selectLastProfileUpdate(clanId));\r\n      //   })\r\n\r\n      //   // tap((x) => {\r\n      //   //   console.log('tapping1', x);\r\n      //   // })\r\n      // );\r\n    })\r\n  );\r\n\r\n  clanMembers$ = this.activeClansId$.pipe(\r\n    switchMap((activeClanIds) => {\r\n      console.log('active clans');\r\n      return from(activeClanIds).pipe(\r\n        mergeMap((clanId) => {\r\n          console.log('mmerge map');\r\n          return this.memberService.getClanMembersSerialized(clanId).pipe(\r\n            map((result) => {\r\n              return { clanId, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      );\r\n    }),\r\n    tap((x) => console.log(x))\r\n  );\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfiles<MemberProfile>(clanAndMembers.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              map((result: MemberProfile) => {\r\n                return {\r\n                  clanId: clanAndMembers.clanId,\r\n                  member: clanAndMembers.members.find(\r\n                    (x) => x.destinyUserInfo?.membershipId == result.profile.data.userInfo?.membershipId\r\n                  ),\r\n                  profile: result\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  // Whenever activeClanUpdateDates gets updated. Run this observable.\r\n  activeClanPeople$ = this.activeClanUpdateDates$.pipe(\r\n    map((x) => {\r\n      return (\r\n        combineLatest([this.activeClansId$, this.activeClanUpdateDates$]),\r\n        map(([clans, clanDates]) => {\r\n          return clans;\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileService: ProfileService\r\n  ) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "clanId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "member",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupsV2GroupMember",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanMembersServiceInterface",
            "id": "interface-ClanMembersServiceInterface-d62de745f09221ef0a8063c3462fc92537d9fd527ac47185e06898e946566a5a619307bbdd734e097c30023e628096a5f605491e39c4b6355bc4cbf40d04eb0a",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ClanMembersServiceInterface {\r\n  getClanMembersSerialized: (clanId: string) => Observable<GroupsV2GroupMember[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "getClanMembersSerialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClanProgression",
            "id": "interface-ClanProgression-7a45cd20e6c4ebaf40bf15b19e5ed0870a1369a42aa365f31a81c9a957364fa5918fddebf387eec45ac32eaac8454776f57815da920e793dfdea40479f8a47f1",
            "file": "projects/data/src/lib/models/ClanDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanDetails {\r\n  groupId: string;\r\n  name: string;\r\n  creationDate: string;\r\n  about: string;\r\n  memberCount: number;\r\n\r\n  clanInfo: {\r\n    clanCallsign: string;\r\n    d2ClanProgressions?: { [key: string]: ClanProgression };\r\n  };\r\n}\r\n\r\ninterface ClanProgression {\r\n  progressionHash?: number;\r\n  dailyProgress?: number;\r\n  dailyLimit?: number;\r\n  weeklyProgress?: number;\r\n  weeklyLimit?: number;\r\n  currentProgress?: number;\r\n  level?: number;\r\n  levelCap?: number;\r\n  stepIndex?: number;\r\n  progressToNextLevel?: number;\r\n  nextLevelAt?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dailyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dailyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "levelCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nextLevelAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "progressionHash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "progressToNextLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stepIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "weeklyLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "weeklyProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClansState",
            "id": "interface-ClansState-f1fafeb518d27a3c42acec2c70bde180d357001959f17e238189e0bc70c79a7ce8f793341fcd903eddfed8f896254f0aebc9a7560a3f6ee756cbc9b64ad169b0",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\n// export const initialClanState: ClansState = {\r\n//   clans: []\r\n// };\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "DataLabel",
            "id": "interface-DataLabel-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceMetadata",
            "id": "interface-DataSourceMetadata-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "accessor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceOptions",
            "id": "interface-DataSourceOptions-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]> | T[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DataSourceMetadata<T>>",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DateFilter",
            "id": "interface-DateFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateEquality",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DateFiltererMetadata",
            "id": "interface-DateFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DBObject",
            "id": "interface-DBObject-7de43f518c699151b6f172c5f8ae4278a7bb440561b4db455e983e6bff6d72d70a5887043d459a45798c5c61838453051df6d5d87b37f1d94c0df3919b1ac48b",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 5;\r\n\r\nexport enum StoreId {\r\n  CacheDetails = 'CacheDetails', //TODO: Verify\r\n  ClanDetails = 'ClanDetails',\r\n  ClanRewards = 'ClanRewards', // TODO: Verify\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberActivityStats = 'MemberActivityStats', // TODO: Verify\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\n  ProfileMilestones = 'ProfileMilestones', // TODO  Verfiy\r\n  ProfileMetrics = 'ProfileMetrics', // TODO: Verify\r\n  Raids = 'Raids' // TODO verify\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(name, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "createDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExporterMetadata",
            "id": "interface-ExporterMetadata-8cd58574103f490abd8865195ac12ebafbcb8fefe499a340291fb2ac5efe11ef8059137c2f5406fee9f8297a45cce6cad7f2bfd7ad925b1aabacc736d17b6b09",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  //contextProvider?: SorterContextProvider<C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    items$.pipe(take(1)).subscribe((items) => {\r\n      const keys = [];\r\n      this.metadata.forEach((value, key) => keys.push(key));\r\n      const formattedObj = items.map((item) => {\r\n        const obj = {};\r\n        keys.forEach((key) => {\r\n          const config = this.metadata.get(key);\r\n          obj[config.label] = config.text(item, null);\r\n        });\r\n        return obj;\r\n      });\r\n      downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n    });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExporterOptions",
            "id": "interface-ExporterOptions-8cd58574103f490abd8865195ac12ebafbcb8fefe499a340291fb2ac5efe11ef8059137c2f5406fee9f8297a45cce6cad7f2bfd7ad925b1aabacc736d17b6b09",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  //contextProvider?: SorterContextProvider<C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    items$.pipe(take(1)).subscribe((items) => {\r\n      const keys = [];\r\n      this.metadata.forEach((value, key) => keys.push(key));\r\n      const formattedObj = items.map((item) => {\r\n        const obj = {};\r\n        keys.forEach((key) => {\r\n          const config = this.metadata.get(key);\r\n          obj[config.label] = config.text(item, null);\r\n        });\r\n        return obj;\r\n      });\r\n      downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n    });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "properties": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ExporterMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FiltererOptions",
            "id": "interface-FiltererOptions-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltererContextProvider<C>",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FiltererState",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | FiltererMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "tokenizeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FiltererState",
            "id": "interface-FiltererState-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterOption",
            "id": "interface-FilterOption-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperMetadata",
            "id": "interface-GrouperMetadata-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "groupingFunction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "titleTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperOptions",
            "id": "interface-GrouperOptions-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GrouperState",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | GrouperMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GrouperState",
            "id": "interface-GrouperState-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupLabel",
            "id": "interface-GroupLabel-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GroupsV2GroupUserInfoCard",
            "id": "interface-GroupsV2GroupUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "LastSeenDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "LastSeenDisplayNameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Item",
            "id": "interface-Item-2afc297e65f52bcbaf66db812cd4926bcc190c419455cccb3fa17382b57a0daad1399a171b37511cef94bd23871e24f65d3f029c3f3917aef4326619ea2385cc",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\n\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnInit {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  @Input() loading: boolean;\r\n\r\n  itemCount: Observable<number>;\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 100, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    // TODO: Cannot be in ngOnInit since the inputs may change\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n      map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n    );\r\n    this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n\r\n    this.renderedHtml = this.renderedData.pipe(\r\n      map((items) => {\r\n        const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n        items.forEach((item) => {\r\n          const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n          this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n          renderedHtml.set(item, itemRenderedViews);\r\n        });\r\n        return renderedHtml;\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    this.exporter.exportData('', this.renderedData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "assignees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "dbAdded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "dbModified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "reporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ManifestState",
            "id": "interface-ManifestState-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isApiDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-63af9742cb69db8cc3781e27ddd2538b008cfe29c97c20e292d5950dde500cafa8abe1f19cf54845c74971a3cb9dc1214c6dd17c86bfdf0fc9d821eb84bc693f",
            "file": "projects/data/src/lib/models/MemberProfile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DestinyResponsesDestinyProfileResponse } from 'bungie-api-angular';\r\n\r\nexport interface MemberProfile extends DestinyResponsesDestinyProfileResponse {\r\n  id?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "DestinyResponsesDestinyProfileResponse"
        },
        {
            "name": "MemberProfile",
            "id": "interface-MemberProfile-76f98854ebf40d159636c13fe68de9eb9483214b6fd2a0a3996dab7792968fa878651f276726935e7bc32b1ec80f4c07abd524755e49839d5122a4d1a8fd86b1-1",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  private profileComponents = [100, 104, 200, 202, 800, 900];\r\n\r\n  // TODO: Pull this from somewhere else.\r\n  private TRACKED_HASHES = [3902035969, 2770852111];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getProfileFromAPI(member: ClanMember) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.destinyUserInfo.membershipType}/Profile/${\r\n      member.destinyUserInfo.membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              return of();\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) => this.getSerializedProfile(clanId, member, collectionHashes, profileRecords),\r\n        100\r\n      )\r\n    ) as Observable<T>;\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedProfile(clanId, member, [], []), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(profile, this.TRACKED_HASHES, collectionHashes, profileRecords) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MemberProfile-1"
        },
        {
            "name": "MockListItem",
            "id": "interface-MockListItem-2d0f4d57b8580d738e53b9671eccd9d51750034e3ac75e1b4c75264c5c67b47b8664cce69bd0238a060f0f0fe865010b0c899febdcdd892f43623f5183860662",
            "file": "projects/components/src/lib/__mocks__/ListItems.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MockListItem {\r\n  id: number;\r\n  name: string;\r\n  startDate: string;\r\n  isPublic;\r\n}\r\nconst names = [\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n];\r\n\r\nexport const MOCK_LIST_ITEMS: MockListItem[] = names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n});\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NumberFilter",
            "id": "interface-NumberFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberEquality",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NumberFiltererMetadata",
            "id": "interface-NumberFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedViewWithChildren",
            "id": "interface-RenderedViewWithChildren-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RenderedView[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedViewWithText",
            "id": "interface-RenderedViewWithText-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RenderedWithComponent",
            "id": "interface-RenderedWithComponent-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RosterResources",
            "id": "interface-RosterResources-fc531b51b28a70d2e9aa2ffc20086e9505e0fb119c6167c513e6470278726ba176970548d1dc345f1e583af9441f1c59d9dbfcc8b1bac11aba31a2529f22e7c2",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewRef } from '@angular/core';\nimport { DataSource, Filterer, Grouper, Sorter, Viewer } from '@destiny/components';\nimport { combineLatest, filter, map, Observable, of } from 'rxjs';\nimport { CLAN_ROSTER_VIEWER_METADATA } from './clan-roster-metadata';\nimport { CLAN_ROSTER_FILTERER_METADATA } from './clan-roster-metadata/ClanRosterFilterer';\nimport { CLAN_ROSTER_SORTER_METADATA } from './clan-roster-metadata/ClanRosterSorter';\nimport { ClanMemberProfile, ClansRosterService } from './clans-roster.service';\n\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\ninterface RosterResources {\n  loading: Observable<boolean>;\n  viewer: Viewer;\n  filterer: Filterer;\n  //grouper: Grouper;\n  sorter: Sorter;\n  dataSource: DataSource;\n}\n\n@Component({\n  selector: 'app-clans-roster',\n  templateUrl: './clans-roster.component.html',\n  styleUrls: ['./clans-roster.component.scss']\n})\nexport class ClansRosterComponent implements OnInit {\n  constructor(\n    private clansRosterService: ClansRosterService,\n    private bungieDatePage: BungieDatePipe,\n    private bungieDateTimePipe: BungieDateTimePipe\n  ) {}\n  // stuff2$ = this.clansRosterService.activeClanPeople$;\n  //members$ = this.clansRosterService.clanMembers$;\n  profiles$ = this.clansRosterService.clanProfiles$;\n\n  rosterViewer = new Viewer({\n    metadata: CLAN_ROSTER_VIEWER_METADATA,\n    contextProvider: this.createViewContextProvider()\n  });\n  rosterFilter = new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA });\n  rosterSorter = new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA });\n\n  rosterInfo$: Observable<RosterResources> = combineLatest([this.clansRosterService.clanProfiles$]).pipe(\n    map(([clanProfiles]) => {\n      return {\n        loading: of(false),\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\n        viewer: this.rosterViewer,\n        filterer: this.rosterFilter,\n        sorter: this.rosterSorter\n      };\n    }),\n    filter((ds) => !!ds)\n  );\n\n  createViewContextProvider() {\n    return of((item: ClanMemberProfile) => ({\n      item,\n      datePipe: this.bungieDatePage,\n      dateTimePipe: this.bungieDateTimePipe\n    }));\n  }\n\n  ngOnInit(): void {}\n}\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSource",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filterer",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sorter",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Viewer",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterMetadata",
            "id": "interface-SorterMetadata-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "comparator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortComparator<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterOptions",
            "id": "interface-SorterOptions-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterContextProvider<C>",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterState",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SorterMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SorterState",
            "id": "interface-SorterState-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "reverse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SortLabel",
            "id": "interface-SortLabel-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-f1fafeb518d27a3c42acec2c70bde180d357001959f17e238189e0bc70c79a7ce8f793341fcd903eddfed8f896254f0aebc9a7560a3f6ee756cbc9b64ad169b0",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface ClanConfig {\r\n  clanId: string;\r\n  enabled: boolean;\r\n  memberUpdate: string;\r\n  profileUpdate: string;\r\n}\r\n\r\nexport interface ClansState extends EntityState<ClanConfig> {}\r\n\r\nexport const ClanConfigAdapter: EntityAdapter<ClanConfig> = createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n});\r\n\r\nexport const initialClanState: ClansState = ClanConfigAdapter.getInitialState({});\r\n\r\n// export const initialClanState: ClansState = {\r\n//   clans: []\r\n// };\r\n\r\nexport interface State extends AppState {\r\n  clans: ClansState;\r\n}\r\n\r\nexport const DefaultClanConfig: ClanConfig = {\r\n  enabled: true\r\n} as ClanConfig;\r\n",
            "properties": [
                {
                    "name": "clans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState"
        },
        {
            "name": "State",
            "id": "interface-State-131b4100b676e6afdcb7a015551bb0f8564442648cedb162ded16187cb885b9911957e72609eee56f2d9b52c64d22f893a395f71f6a04a4fbb73b7d373464f0e-1",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AppState } from '@core/core.state';\r\n\r\nexport interface ManifestState {\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: any;\r\n  isApiDown: boolean;\r\n}\r\n\r\nexport const initialManifestState: ManifestState = {\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n};\r\n\r\nexport interface State extends AppState {\r\n  manifest: ManifestState;\r\n}\r\n",
            "properties": [
                {
                    "name": "manifest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AppState",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "StateFilter",
            "id": "interface-StateFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateEquality",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateFiltererMetadata",
            "id": "interface-StateFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "states",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TablePage",
            "id": "interface-TablePage-2afc297e65f52bcbaf66db812cd4926bcc190c419455cccb3fa17382b57a0daad1399a171b37511cef94bd23871e24f65d3f029c3f3917aef4326619ea2385cc",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\n\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnInit {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  @Input() loading: boolean;\r\n\r\n  itemCount: Observable<number>;\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 100, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    // TODO: Cannot be in ngOnInit since the inputs may change\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n      map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n    );\r\n    this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n\r\n    this.renderedHtml = this.renderedData.pipe(\r\n      map((items) => {\r\n        const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n        items.forEach((item) => {\r\n          const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n          this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n          renderedHtml.set(item, itemRenderedViews);\r\n        });\r\n        return renderedHtml;\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    this.exporter.exportData('', this.renderedData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextFilter",
            "id": "interface-TextFilter-266020bfcb6071a3579e00fd36fec6dbc989d0fb6a151ad1fd956f5fccea081c4e810aee6327041ac24eaada9b29938843e564f3cfd0975b27369d4457c17616",
            "file": "projects/components/src/lib/data/filterer-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TextEquality = 'contains' | 'is' | 'notContains' | 'notIs';\r\nexport type NumberEquality = 'greaterThan' | 'lessThan' | 'equalTo';\r\nexport type DateEquality = 'before' | 'after' | 'on';\r\nexport type StateEquality = 'is' | 'notIs';\r\n\r\nexport interface TextFilter {\r\n  id: string;\r\n  type: 'text';\r\n  value: string;\r\n  equality: TextEquality;\r\n}\r\n\r\nexport interface NumberFilter {\r\n  id: string;\r\n  type: 'number';\r\n  value: number;\r\n  equality: NumberEquality;\r\n}\r\n\r\nexport interface DateFilter {\r\n  id: string;\r\n  type: 'date';\r\n  date: string;\r\n  equality: DateEquality;\r\n}\r\n\r\nexport interface StateFilter {\r\n  id: string;\r\n  type: 'state';\r\n  state: string;\r\n  equality: StateEquality;\r\n}\r\n\r\nexport type Filter = TextFilter | NumberFilter | DateFilter | StateFilter;\r\n\r\nexport type FilterType = 'text' | 'number' | 'date' | 'state';\r\n",
            "properties": [
                {
                    "name": "equality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextEquality",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextFiltererMetadata",
            "id": "interface-TextFiltererMetadata-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextFilterAutocomplete<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "matcher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserUserInfoCard",
            "id": "interface-UserUserInfoCard-eeda80929ab0808b05c25031d072319ec4c1a2beb25f24c56431cd3d3b0cec9e94897aae273c7ee7bb3d42240d5036a53b674cd9dc098454bdec69a68df20d2e",
            "file": "projects/data/src/lib/models/ClanMember.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClanMember {\r\n  // Needed for DB\r\n  id?: number;\r\n  memberType?: number;\r\n  isOnline?: boolean;\r\n  lastOnlineStatusChange?: number;\r\n  groupId?: number;\r\n  destinyUserInfo?: GroupsV2GroupUserInfoCard;\r\n  bungieNetUserInfo?: UserUserInfoCard;\r\n  joinDate?: string;\r\n}\r\nexport interface UserUserInfoCard {\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\nexport interface GroupsV2GroupUserInfoCard {\r\n  LastSeenDisplayName?: string;\r\n\r\n  LastSeenDisplayNameType?: number;\r\n\r\n  supplementalDisplayName?: string;\r\n\r\n  iconPath?: string;\r\n\r\n  crossSaveOverride?: number;\r\n\r\n  applicableMembershipTypes?: Array<number>;\r\n\r\n  isPublic?: boolean;\r\n\r\n  membershipType?: number;\r\n\r\n  membershipId?: number;\r\n\r\n  displayName?: string;\r\n\r\n  bungieGlobalDisplayName?: string;\r\n\r\n  bungieGlobalDisplayNameCode?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "applicableMembershipTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bungieGlobalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bungieGlobalDisplayNameCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "crossSaveOverride",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "iconPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "membershipId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "membershipType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "supplementalDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewContext",
            "id": "interface-ViewContext-67bcb2d2ea72235cbc7753800b80b9ce2f010004245403c15487d10cad84121dcdc949945919c12696a6ef0de377c2f5c631447726e8ee4ea26189b5783c39bc",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ViewerMetadata } from '@destiny/components';\r\n\r\nimport { ClanMemberProfile } from '../clans-roster.service';\r\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\r\nimport { MemberTypeComponent } from '@destiny/components/icons';\r\n\r\ninterface ViewContext {\r\n  item: ClanMemberProfile;\r\n  datePipe: BungieDatePipe;\r\n  dateTimePipe: BungieDateTimePipe;\r\n}\r\nconst LANG = 'en-us';\r\n\r\nexport const CLAN_ROSTER_VIEWER_METADATA = new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      render: (item: ClanMemberProfile) => ({\r\n        //        styles: {},\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member.destinyUserInfo.membershipType }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member.destinyUserInfo.displayName}` })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member.bungieNetUserInfo?.displayName}` })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      render: (item: ClanMemberProfile) => ({ text: `TODO` })\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n]);\r\n",
            "properties": [
                {
                    "name": "datePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDatePipe",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dateTimePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BungieDateTimePipe",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanMemberProfile",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerMetadata",
            "id": "interface-ViewerMetadata-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "render",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerOptions",
            "id": "interface-ViewerOptions-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerContextProvider<T | C>",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerState",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewerMetadata<T, C>>",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewerState",
            "id": "interface-ViewerState-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ViewLabel",
            "id": "interface-ViewLabel-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ActivityDefinitionService",
            "id": "injectable-ActivityDefinitionService-4b4f0901d7e54271e86d2e6bf86f3e80a4a399f9825f72ca146bdcf5477f811c6d713237a044e3fcedc85b04c7f91822650d9f923a27d74046768bca7c94e78b",
            "file": "projects/clan-dashboard/src/app/core/definition-services/activity-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DestinyDefinitionsDestinyActivityDefinition } from 'bungie-api-angular';\nimport { BaseDefinitionService } from './base-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityDefinitionService  extends BaseDefinitionService<DestinyDefinitionsDestinyActivityDefinition> {}{\n}\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ActivityModeDefinitionService",
            "id": "injectable-ActivityModeDefinitionService-747f48f713435384dca120cffb286130ea9cf2842bd2f8b8cf316ce00d545b787807ee6b1c72cbc3ad49c397f68c7f4bdfb031da98a3eb1cef646f878e25b24a",
            "file": "projects/clan-dashboard/src/app/core/definition-services/activity-mode-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DestinyDefinitionsDestinyActivityModeDefinition } from 'bungie-api-angular';\nimport { BaseDefinitionService } from './base-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityModeDefinitionService extends BaseDefinitionService<DestinyDefinitionsDestinyActivityModeDefinition> {}\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ClanDetailsService",
            "id": "injectable-ClanDetailsService-4ffd97651d511047431abb64375079e99f7e2ecf12d189f52826ac26d3e20dfc09d7996730c5ac234b8177e60789364147bacaf9addcedef88695d96ba96c43d",
            "file": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanDetails'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanDetails",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanDetailsSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupV2Service } from 'bungie-api-angular';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { clanDetailSerializer } from './clan-detail-serializer';\r\nimport { CLAN_LEVEL_HASH } from '../../hashes/clan-details';\r\n\r\n@Injectable()\r\nexport class ClanDetailsService extends BaseClanService {\r\n  // private tableName: StoreId = 'ClanDetails';\r\n  private rowId = 'ClanDetails';\r\n\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n  private getClanDetailsFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetGroup(clanId as unknown as number);\r\n  }\r\n\r\n  private getClanDetails(clanId: string) {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanDetailsFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              const clanDetails = clanDetailSerializer(clanDetail.Response.detail, [CLAN_LEVEL_HASH]);\r\n              this.updateDB(clanId, this.rowId, clanDetails);\r\n\r\n              return clanDetails;\r\n            }\r\n            throw Error('Clan Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getClanDetailsSerialized(clanId: string) {\r\n    return this.getClanDetails(clanId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClanMembersService",
            "id": "injectable-ClanMembersService-621927e444c1fa804e9188f8d03c2618407ebb00476b7357ad29523ed927c081b383792067b983df2827461a794642d1f160ca07a94b78cc723c4449199424da",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
            "properties": [
                {
                    "name": "rowId",
                    "defaultValue": "'ClanMembers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getClanMembers",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersFromAPI",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseClanService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nimport { map, take, catchError, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { of, from, Observable } from 'rxjs';\r\nimport { BaseClanService } from '../base-clan.service';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n\r\n@Injectable()\r\nexport class ClanMembersService extends BaseClanService implements ClanMembersServiceInterface {\r\n  private rowId = 'ClanMembers';\r\n  constructor(private groupService: GroupV2Service, private clanDb: ClanDatabase) {\r\n    super(clanDb, StoreId.ClanDetails);\r\n  }\r\n\r\n  private getClanMembersFromAPI(clanId: string) {\r\n    return this.groupService.groupV2GetMembersOfGroup(1, clanId as unknown as number);\r\n  }\r\n\r\n  private getClanMembers(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return from(this.getDataFromCache(clanId.toString(), this.rowId)).pipe(\r\n      switchMap((cachedData) => {\r\n        if (this.isCacheValid(cachedData, 10)) {\r\n          return of(cachedData?.data);\r\n        }\r\n\r\n        return this.getClanMembersFromAPI(clanId).pipe(\r\n          map((clanDetail) => {\r\n            if (clanDetail.Response) {\r\n              this.updateDB(clanId, this.rowId, clanDetail.Response.results);\r\n\r\n              return clanDetail.Response.results;\r\n            }\r\n            throw Error('Clan Members Not found');\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO do a lightweight cache\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    return this.getClanMembers(clanId).pipe(\r\n      map((x) => {\r\n        // TODO; Serialize\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupV2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseClanService",
            "type": "injectable"
        },
        {
            "name": "ClansDetailsService",
            "id": "injectable-ClansDetailsService-4bd6065fc63a0b6c22f6845c8c690e96f87b0fc2c3dea174cb8a5694a216970274534001488783bdee9743953d849695fbf1c54006ceb567cdd8863886c8d69a",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clanInfo$",
                    "defaultValue": "this.activeClanIds$.pipe(\n    switchMap((clanConfigs) => {\n      return from(clanConfigs).pipe(\n        mergeMap((clanConfig) => {\n          // return of(clanConfig);\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId);\n        }),\n        toArray()\n      );\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { selectEnabledClans } from '@core/store/clans';\nimport { from, of } from 'rxjs';\nimport { map, mergeMap, toArray, switchMap } from 'rxjs/operators';\nimport { ClanDetailsService as DataService } from '@destiny/data/clan/clan-details';\n\ninterface ClanInfo{\n  ClanName: string;\n  ClanMemberCount: string;\n\n}\n\n\n@Injectable()\nexport class ClansDetailsService {\n  activeClanIds$ = this.store.select(selectEnabledClans);\n\n  clanInfo$ = this.activeClanIds$.pipe(\n    switchMap((clanConfigs) => {\n      return from(clanConfigs).pipe(\n        mergeMap((clanConfig) => {\n          // return of(clanConfig);\n          return this.dataService.getClanDetailsSerialized(clanConfig.clanId);\n        }),\n        toArray()\n      );\n    })\n  );\n\n  constructor(private store: Store, private dataService: DataService) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansEffects",
            "id": "injectable-ClansEffects-0a4bea4991df58a7d260511766235787a9d0ecc431fe4a07eedec2a766753995ffeee1eafa63ae21eb18cadc129383934528c114929fb3757297d13bc8b9fe35",
            "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
            "properties": [
                {
                    "name": "persistSettings$",
                    "defaultValue": "createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(clanActions.addClan, clanActions.removeClan, clanActions.setClans, clanActions.updateClan),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "updateLastProfileSync$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        // console.log(clanToUpdate);\r\n        // clanToUpdate.profileUpdate = new Date().toString();\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { LocalStorageService } from '@core/services/local-storage.service';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType, concatLatestFrom } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of, combineLatest, merge } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n// import { loadManifest, loadManifestComplete, loadManifestFailure } from './manifest.actions';\r\nimport * as clanActions from './clans.actions';\r\nimport { selectClansState } from './clans.selectors';\r\nimport { tap, withLatestFrom, distinctUntilChanged, filter } from 'rxjs/operators';\r\n\r\nconst CLANS_KEY = 'clans';\r\n@Injectable()\r\nexport class ClansEffects {\r\n  constructor(private actions$: Actions, private store: Store, private localStorageService: LocalStorageService) {}\r\n\r\n  persistSettings$ = createEffect(\r\n    () => {\r\n      return this.actions$.pipe(\r\n        ofType(clanActions.addClan, clanActions.removeClan, clanActions.setClans, clanActions.updateClan),\r\n        concatLatestFrom(() => this.store.select(selectClansState)),\r\n        tap(([action, clans]) => this.localStorageService.setItem(CLANS_KEY, clans))\r\n      );\r\n    },\r\n    { dispatch: false }\r\n  );\r\n\r\n  updateLastProfileSync$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(clanActions.updateClanProfileSync),\r\n      concatLatestFrom(() => this.store.select(selectClansState)),\r\n      map(([action, clans]) => {\r\n        const clanToUpdate = clans.entities[action.clanId];\r\n        // console.log(clanToUpdate);\r\n        // clanToUpdate.profileUpdate = new Date().toString();\r\n        return clanActions.updateClan({ clan: { ...clanToUpdate, profileUpdate: new Date().toString() } });\r\n      })\r\n    );\r\n  });\r\n\r\n  // loadManifest$ = createEffect(() => {\r\n  //   return this.actions$.pipe(\r\n  //     ofType(loadManifest),\r\n  //     switchMap(() => {\r\n  //       return this.manifestService.loadManifest().pipe(\r\n  //         map(() => {\r\n  //           return loadManifestComplete();\r\n  //         }),\r\n  //         catchError(async (error) => loadManifestFailure(error))\r\n  //       );\r\n  //     })\r\n  //   );\r\n  // });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClansRosterService",
            "id": "injectable-ClansRosterService-163a5c137b3749adc4003746eb7fbd0cb8df624d741b08f81151f231e1ae9a18533cc380a1136d8f69230fa0f59b7f58730217f556ee7466754378efcb3fee24",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.service.ts",
            "properties": [
                {
                    "name": "activeClanPeople$",
                    "defaultValue": "this.activeClanUpdateDates$.pipe(\r\n    map((x) => {\r\n      return (\r\n        combineLatest([this.activeClansId$, this.activeClanUpdateDates$]),\r\n        map(([clans, clanDates]) => {\r\n          return clans;\r\n        })\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "activeClansId$",
                    "defaultValue": "this.store.select(selectEnabledClanIds)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "activeClanUpdateDates$",
                    "defaultValue": "this.activeClansId$.pipe(\r\n    switchMap((clanIds) => {\r\n      const arraySelectors = clanIds.map((clanId) => {\r\n        return this.store.select(selectLastProfileUpdate(clanId));\r\n      });\r\n\r\n      return combineLatest(arraySelectors);\r\n      // return from(clanIds).pipe(\r\n      //   switchMap((clanId) => {\r\n      //     console.log('', clanId);\r\n      //     return this.store.select(selectLastProfileUpdate(clanId));\r\n      //   })\r\n\r\n      //   // tap((x) => {\r\n      //   //   console.log('tapping1', x);\r\n      //   // })\r\n      // );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "clanMembers$",
                    "defaultValue": "this.activeClansId$.pipe(\r\n    switchMap((activeClanIds) => {\r\n      console.log('active clans');\r\n      return from(activeClanIds).pipe(\r\n        mergeMap((clanId) => {\r\n          console.log('mmerge map');\r\n          return this.memberService.getClanMembersSerialized(clanId).pipe(\r\n            map((result) => {\r\n              return { clanId, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      );\r\n    }),\r\n    tap((x) => console.log(x))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "clanProfiles$",
                    "defaultValue": "this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfiles<MemberProfile>(clanAndMembers.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              map((result: MemberProfile) => {\r\n                return {\r\n                  clanId: clanAndMembers.clanId,\r\n                  member: clanAndMembers.members.find(\r\n                    (x) => x.destinyUserInfo?.membershipId == result.profile.data.userInfo?.membershipId\r\n                  ),\r\n                  profile: result\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClanMemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectEnabledClanIds, selectEnabledClans, selectLastProfileUpdate } from '@core/store/clans';\r\nimport { forkJoin, from, map, mergeMap, switchMap, tap, toArray, combineLatest, distinctUntilChanged, Observable } from 'rxjs';\r\n// import {} from '@destiny/data/';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { MemberProfile } from '@destiny/data/models';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\n\r\nexport interface ClanMemberProfile {\r\n  clanId: string;\r\n  member: GroupsV2GroupMember;\r\n  profile: MemberProfile;\r\n}\r\n\r\n@Injectable()\r\nexport class ClansRosterService {\r\n  activeClansId$ = this.store.select(selectEnabledClanIds);\r\n\r\n  activeClanUpdateDates$ = this.activeClansId$.pipe(\r\n    switchMap((clanIds) => {\r\n      const arraySelectors = clanIds.map((clanId) => {\r\n        return this.store.select(selectLastProfileUpdate(clanId));\r\n      });\r\n\r\n      return combineLatest(arraySelectors);\r\n      // return from(clanIds).pipe(\r\n      //   switchMap((clanId) => {\r\n      //     console.log('', clanId);\r\n      //     return this.store.select(selectLastProfileUpdate(clanId));\r\n      //   })\r\n\r\n      //   // tap((x) => {\r\n      //   //   console.log('tapping1', x);\r\n      //   // })\r\n      // );\r\n    })\r\n  );\r\n\r\n  clanMembers$ = this.activeClansId$.pipe(\r\n    switchMap((activeClanIds) => {\r\n      console.log('active clans');\r\n      return from(activeClanIds).pipe(\r\n        mergeMap((clanId) => {\r\n          console.log('mmerge map');\r\n          return this.memberService.getClanMembersSerialized(clanId).pipe(\r\n            map((result) => {\r\n              return { clanId, members: result };\r\n            })\r\n          );\r\n        }),\r\n        toArray()\r\n      );\r\n    }),\r\n    tap((x) => console.log(x))\r\n  );\r\n\r\n  clanProfiles$: Observable<ClanMemberProfile[]> = this.clanMembers$.pipe(\r\n    switchMap((clansAndMembers) => {\r\n      return from(clansAndMembers).pipe(\r\n        mergeMap((clanAndMembers) => {\r\n          return this.profileService\r\n            .getSerializedProfiles<MemberProfile>(clanAndMembers.clanId, clanAndMembers.members, [], [])\r\n            .pipe(\r\n              map((result: MemberProfile) => {\r\n                return {\r\n                  clanId: clanAndMembers.clanId,\r\n                  member: clanAndMembers.members.find(\r\n                    (x) => x.destinyUserInfo?.membershipId == result.profile.data.userInfo?.membershipId\r\n                  ),\r\n                  profile: result\r\n                };\r\n              })\r\n            );\r\n        }),\r\n        toArray()\r\n      );\r\n    })\r\n  );\r\n\r\n  // Whenever activeClanUpdateDates gets updated. Run this observable.\r\n  activeClanPeople$ = this.activeClanUpdateDates$.pipe(\r\n    map((x) => {\r\n      return (\r\n        combineLatest([this.activeClansId$, this.activeClanUpdateDates$]),\r\n        map(([clans, clanDates]) => {\r\n          return clans;\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileService: ProfileService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClanUpdaterService",
            "id": "injectable-ClanUpdaterService-2d30f581fc637f8dc13d8b05f3c10ed72e0c861de40644ce8548e174d67e512a4f67b87172ac92b33b0caec39b614e8fd2b3ca543334bd5c5cebf9a5a75bcf9d",
            "file": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
            "properties": [
                {
                    "name": "activeClanIds$",
                    "defaultValue": "this.store.select(selectEnabledClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "memberUpdate",
                    "args": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeClans",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profilesUpdate",
                    "args": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers[]>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clans",
                            "type": "ClanConfigMembers[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileUpdate",
                    "args": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClanConfigMembers>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clan",
                            "type": "ClanConfigMembers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { mergeMap, map, catchError, toArray, switchMap, tap, take, filter } from 'rxjs/operators';\r\nimport { ClanConfig, selectEnabledClans, updateClanProfileSync } from '../store/clans';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { GroupsV2GroupMember } from 'bungie-api-angular';\r\nimport { ProfileWorkerService } from '../../workers/profile-worker.service';\r\nimport { nowPlusMinutes } from 'projects/data/src/lib/utility/date-utils';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\ninterface ClanConfigMembers {\r\n  clanConfig: ClanConfig;\r\n  members: GroupsV2GroupMember[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanUpdaterService {\r\n  activeClanIds$ = this.store.select(selectEnabledClans);\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private memberService: ClanMembersService,\r\n    private profileWorkerService: ProfileWorkerService,\r\n    private appConfig: AppConfig\r\n  ) {}\r\n\r\n  update() {\r\n    return this.activeClanIds$.pipe(\r\n      // tap((x) => console.log('starting')),\r\n      switchMap((activeClans) => this.memberUpdate(activeClans)),\r\n      //tap((x) => console.log('Member Update Complete', x)),\r\n      switchMap((clans) => this.profilesUpdate(clans)),\r\n      // tap((x) => console.log('complete', x))\r\n    );\r\n  }\r\n\r\n  memberUpdate(activeClans) {\r\n    return from(activeClans).pipe(\r\n      mergeMap((clanConfig: ClanConfig) => {\r\n        //console.log('merge map', clanConfig.clanId);\r\n        return this.memberService.getClanMembersSerialized(clanConfig.clanId).pipe(\r\n          map((members) => ({\r\n            members,\r\n            clanConfig\r\n          }))\r\n        );\r\n      }, 1),\r\n      toArray()\r\n    );\r\n  }\r\n\r\n  profilesUpdate(clans: ClanConfigMembers[]): Observable<ClanConfigMembers[]> {\r\n    return from(clans).pipe(\r\n      mergeMap((x) => {\r\n        return this.profileUpdate(x).pipe(map((cm) => x));\r\n        //}\r\n\r\n        //\r\n        //return of(x);\r\n      }, 1),\r\n      toArray(),\r\n   ///   tap((x) => console.log('toarray 2', x))\r\n    );\r\n  }\r\n\r\n  profileUpdate(clan: ClanConfigMembers): Observable<ClanConfigMembers> {\r\n    const lastUpdate = new Date(clan.clanConfig.profileUpdate || '1/1/1900');\r\n    const staleDate = nowPlusMinutes(-this.appConfig.constants.PROFILE_UPDATING_EXP_MINUTES);\r\n\r\n    if (staleDate > lastUpdate) {\r\n      //      console.log(`Updating ${clan.clanConfig.clanId}`);\r\n      //if (true === true) {\r\n      // this.store.dispatch(\r\n      //   addNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: { progress: 0 } } })\r\n      // );\r\n      const progress = (progressCount) => {\r\n        // this.store.dispatch(\r\n        //   updateNotification({\r\n        //     notification: {\r\n        //       id: 'memberProfile',\r\n        //       title: 'Updating Profiles',\r\n        //       data: { progress: progressCount }\r\n        //     }\r\n        //   })\r\n        // );\r\n        //       console.log('progress', progressCount);\r\n      };\r\n      this.profileWorkerService.loadProfiles(clan.clanConfig.clanId, clan.members, progress);\r\n      return this.profileWorkerService.members.pipe(\r\n        filter((x) => x.length > 0),\r\n        take(1),\r\n        map((x) => {\r\n          // this.store.dispatch(memberProfileActions.loadMemberProfiles({ memberProfiles: x }));\r\n          // this.store.dispatch(\r\n          //   removeNotification({ notification: { id: 'memberProfile', title: 'Updating Profiles', data: 'done' } })\r\n          // );\r\n          // return memberProfileActions.loadMemberProfileSuccess();\r\n          //         console.log(`done ${clan.clanConfig.clanId}`, x);\r\n          this.store.dispatch(updateClanProfileSync({ clanId: clan.clanConfig.clanId }));\r\n          return clan;\r\n        })\r\n      );\r\n    }\r\n    //console.log(`Valid Cache ${clan.clanConfig.clanId}`);\r\n    return of(clan);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "ClanMembersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileWorkerService",
                        "type": "ProfileWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-deaa322a3b7e2c1a0c821dc259fbcafd8abac7ad5b1cfcb6db3a6b90e49769a71382b4566241aa68194864bf1b44155a93c1f82ba8b84d51115c69c5914f4ce1",
            "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTests that localStorage exists, can be written to, and read from.",
                    "description": "<p>Tests that localStorage exists, can be written to, and read from.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nconst APP_PREFIX = 'D2DASH-';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n  constructor() {}\r\n\r\n  static loadInitialState() {\r\n    return Object.keys(localStorage).reduce((state: any, storageKey) => {\r\n      if (storageKey.includes(APP_PREFIX)) {\r\n        const stateKeys = storageKey\r\n          .replace(APP_PREFIX, '')\r\n          //.toLowerCase()\r\n          .split('.')\r\n          .map((key) =>\r\n            key\r\n              .split('-')\r\n              .map((token, index) => (index === 0 ? token : token.charAt(0).toUpperCase() + token.slice(1)))\r\n              .join('')\r\n          );\r\n        let currentStateRef = state;\r\n        stateKeys.forEach((key, index) => {\r\n          if (index === stateKeys.length - 1) {\r\n            currentStateRef[key] = JSON.parse(localStorage.getItem(storageKey));\r\n            return;\r\n          }\r\n          currentStateRef[key] = currentStateRef[key] || {};\r\n          currentStateRef = currentStateRef[key];\r\n        });\r\n      }\r\n      return state;\r\n    }, {});\r\n  }\r\n\r\n  setItem(key: string, value: any) {\r\n    localStorage.setItem(`${APP_PREFIX}${key}`, JSON.stringify(value));\r\n  }\r\n\r\n  getItem(key: string) {\r\n    return JSON.parse(localStorage.getItem(`${APP_PREFIX}${key}`));\r\n  }\r\n\r\n  removeItem(key: string) {\r\n    localStorage.removeItem(`${APP_PREFIX}${key}`);\r\n  }\r\n\r\n  /** Tests that localStorage exists, can be written to, and read from. */\r\n  testLocalStorage() {\r\n    const testValue = 'testValue';\r\n    const testKey = 'testKey';\r\n    let retrievedValue: string;\r\n    const errorMessage = 'localStorage did not return expected value';\r\n\r\n    this.setItem(testKey, testValue);\r\n    retrievedValue = this.getItem(testKey);\r\n    this.removeItem(testKey);\r\n\r\n    if (retrievedValue !== testValue) {\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ManifestDatabaseService",
            "id": "injectable-ManifestDatabaseService-4900196c103294835dd90dccfb33f969429c45cd912d8e0add1655782bb3ff18106efad66bfa68a11075e9f74953c4e1e22ac7cf13da867a65ab67d4969544da",
            "file": "projects/data/src/lib/manifest/manifest-database.service.ts",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValues",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AppIndexedDb, StoreId } from '../db/app-indexed-db';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ManifestDatabaseService {\n\n  private database: AppIndexedDb;\n\n  getValues(repository: string): Promise<any[]> {\n    return this.getDatabase(repository).getAllData('allData');\n  }\n\n  closeDatabase(repository: string) {\n    return this.getDatabase(repository).close();\n  }\n\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\n    return this.getDatabase(repository).updateValues(entities, type);\n  }\n\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\n    return this.getDatabase(repository).removeValues(ids, type);\n  }\n\n  removeAll(repository: string, type: StoreId) {\n    return this.getDatabase(repository).removeAllValues(type);\n  }\n\n  private getDatabase(repository: string) {\n    if (this.database && this.database.name === repository) {\n      return this.database;\n    }\n\n    if (this.database) {\n      this.database.close();\n    }\n\n    this.database = new AppIndexedDb(repository);\n    return this.database;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ManifestEffects",
            "id": "injectable-ManifestEffects-365e4c14b9d9983fc71afee97b3b3a3080268ca76b81b9493e833c34cccebae3a9781fc6a66d1ac6ba3315d77320f826302b85d101dea8fdd0f254c3a0646d40",
            "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
            "properties": [
                {
                    "name": "loadManifest$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AppState } from '@core/core.state';\r\nimport { ManifestService } from '@core/services/manifest.service';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { loadManifest, loadManifestComplete, loadManifestFailure } from './manifest.actions';\r\n\r\n@Injectable()\r\nexport class ManifestEffects {\r\n  constructor(private actions$: Actions, private manifestService: ManifestService, private store: Store) {}\r\n\r\n  loadManifest$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(loadManifest),\r\n      switchMap(() => {\r\n        return this.manifestService.loadManifest().pipe(\r\n          map(() => {\r\n            return loadManifestComplete();\r\n          }),\r\n          catchError(async (error) => loadManifestFailure(error))\r\n        );\r\n      })\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manifestService",
                        "type": "ManifestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestLoaderService",
            "id": "injectable-ManifestLoaderService-9d8d1bee2a20baee7f950f0feea97fc96aaa34ea53965c8262d77f8bd9019d28f610cd3fd5a756714aaca78ae530d8e30203f2d2999dce5d3ee41e4f1a25ae2d",
            "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getManifest",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getManifestFromCache",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadManifestData",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'"
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CachedManifest>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'en'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pruneTables",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keys",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestDefinitionsArchive",
                    "args": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dbPath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableNames",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { Destiny2Service } from 'bungie-api-angular';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { nowPlusMinutes } from '../utility/date-utils';\r\nimport { ManifestDatabaseService } from './manifest-database.service';\r\n\r\nexport const STATUS_EXTRACTING_TABLES = 'extracting tables';\r\nexport const STATUS_UNZIPPING = 'unzipping';\r\nexport const STATUS_DONE = 'done';\r\nconst MANIFEST_PATH_KEY = 'MANIFEST_PATH_KEY';\r\nconst MANIFEST_PATH_EXP_KEY = 'MANIFEST_PATH_EXP_KEY';\r\n\r\nconst VERSION = 'v1';\r\n\r\nexport interface CachedManifest {\r\n  id: string;\r\n  data: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestLoaderService {\r\n  constructor(private d2service: Destiny2Service, private db: ManifestDatabaseService) {}\r\n  private getManifestFromCache(language: string) {\r\n    const jsonPath = window.localStorage.getItem(MANIFEST_PATH_KEY);\r\n    const jsonPathExp = window.localStorage.getItem(MANIFEST_PATH_EXP_KEY);\r\n    if (jsonPathExp && jsonPath) {\r\n      const jsonDate = new Date(jsonPathExp);\r\n      if (jsonDate < nowPlusMinutes(-60)) {\r\n        return of(jsonPath);\r\n      }\r\n    }\r\n    return this.getManifest(language).pipe(\r\n      map((x) => {\r\n        window.localStorage.setItem(MANIFEST_PATH_KEY, x);\r\n        window.localStorage.setItem(MANIFEST_PATH_EXP_KEY, new Date().toString());\r\n        return x;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getManifest(language: string) {\r\n    return this.d2service.destiny2GetDestinyManifest().pipe(\r\n      map((response) => {\r\n        return response.Response.jsonWorldContentPaths[language];\r\n      })\r\n    );\r\n  }\r\n\r\n  pruneTables(obj, keys) {\r\n    if (!keys.length) {\r\n      return obj;\r\n    }\r\n\r\n    return keys.reduce((acc, key) => {\r\n      return {\r\n        ...acc,\r\n        [key]: obj[key]\r\n      };\r\n    }, {});\r\n  }\r\n\r\n  requestDefinitionsArchive(dbPath, tableNames) {\r\n    // TODO This takes about a second and a half to execute\r\n    return this.db.getValues('manifest').then((cachedValue) => {\r\n      const versionKey = `${VERSION}:${dbPath}`;\r\n\r\n      if (cachedValue && cachedValue.length > 0 && cachedValue.find((x) => x.id === versionKey)) {\r\n        this.db.closeDatabase('manifest');\r\n        return cachedValue.find((x) => x.id === versionKey);\r\n      }\r\n\r\n      return fetch(`https://www.bungie.net${dbPath}`).then((x) => {\r\n        return x.json().then((y) => {\r\n          const prunedTables = this.pruneTables(y, tableNames);\r\n          const dbObject = { id: versionKey, data: prunedTables };\r\n          this.db.update('manifest', 'allData', [dbObject]).then((db) => {\r\n            this.db.closeDatabase('manifest');\r\n          });\r\n\r\n          return dbObject;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public loadManifestData(language: string = 'en', tableNames): Observable<CachedManifest> {\r\n    return this.getManifestFromCache(language).pipe(\r\n      take(1),\r\n      switchMap((path) => this.requestDefinitionsArchive(path, tableNames))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "ManifestDatabaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "d2service",
                        "type": "Destiny2Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "ManifestDatabaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ManifestService",
            "id": "injectable-ManifestService-83693eadd9ff46e43c2471b7e08353f1f8aaef8728209cb5c2edbfabb5e3a958bb4f694e4764661300c1007ad2bbe0fc6eb7f6835e7ffee8fa14ed6dbc201898",
            "file": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadManifest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivityDefinitionService } from '@core/definition-services/activity-definition.service';\r\nimport { ActivityModeDefinitionService } from '@core/definition-services/activity-mode-definition.service';\r\nimport { MilestoneDefinitionService } from '@core/definition-services/milestone-definition.service';\r\nimport { PresentationNodeDefinitionService } from '@core/definition-services/presentation-node-definition.service';\r\nimport { ManifestLoaderService } from '@destiny/data/manifest';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManifestService {\r\n  constructor(\r\n    private loader: ManifestLoaderService,\r\n    private activityService: ActivityDefinitionService,\r\n    private activityModeService: ActivityModeDefinitionService,\r\n    private milestoneDefinitionService: MilestoneDefinitionService,\r\n    private presentationNodeDefinitionService: PresentationNodeDefinitionService\r\n  ) {}\r\n\r\n  loadManifest() {\r\n    console.time('loadManifest');\r\n    const tables = [\r\n      //'DestinyChecklistDefinition',\r\n      //'DestinyObjectiveDefinition',\r\n      //'DestinyStatDefinition',\r\n      //'DestinyVendorDefinition',\r\n      //'DestinyInventoryItemDefinition',\r\n      //'DestinyClassDefinition',\r\n      //'DestinySandboxPerkDefinition',\r\n      //'DestinyEnergyTypeDefinition',\r\n      //'DestinyCollectibleDefinition',\r\n      'DestinyPresentationNodeDefinition',\r\n      //'DestinyRecordDefinition',\r\n      'DestinySeasonDefinition',\r\n      //'DestinySeasonPassDefinition',\r\n      'DestinyMilestoneDefinition',\r\n      'DestinyActivityDefinition',\r\n      'DestinyActivityModeDefinition'\r\n      //'DestinyPlaceDefinition',\r\n      //'DestinyFactionDefinition'\r\n    ];\r\n    return this.loader\r\n      .loadManifestData('en', tables)\r\n      .pipe(\r\n        map((x) => {\r\n          if (x && x.data) {\r\n            if (x.data.DestinyActivityModeDefinition) {\r\n              this.activityModeService.initializeCache(x.data.DestinyActivityModeDefinition);\r\n            }\r\n            if (x.data.DestinyActivityDefinition) {\r\n              this.activityService.initializeCache(x.data.DestinyActivityDefinition);\r\n            }\r\n\r\n            if (x.data.DestinyMilestoneDefinition) {\r\n              this.milestoneDefinitionService.initializeCache(x.data.DestinyMilestoneDefinition);\r\n            }\r\n            if (x.data.DestinyPresentationNodeDefinition) {\r\n              this.presentationNodeDefinitionService.initializeCache(x.data.DestinyPresentationNodeDefinition);\r\n            }\r\n          }\r\n\r\n          console.timeEnd('loadManifest');\r\n          return true;\r\n        })\r\n      )\r\n      // .catch((err: any) => {\r\n      //   console.error(err);\r\n      // });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "presentationNodeDefinitionService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "loader",
                        "type": "ManifestLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityModeService",
                        "type": "ActivityModeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "milestoneDefinitionService",
                        "type": "MilestoneDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "presentationNodeDefinitionService",
                        "type": "PresentationNodeDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MilestoneDefinitionService",
            "id": "injectable-MilestoneDefinitionService-46b98527b64306d72cb790fdd79acd5047e87e3f671de2ce4267e66dd588eef9b08ccd697f89bbd4df7d9e02cd2546f23f4ba31be7074fa9547f8f589fb86654",
            "file": "projects/clan-dashboard/src/app/core/definition-services/milestone-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DestinyDefinitionsMilestonesDestinyMilestoneDefinition } from 'bungie-api-angular';\nimport { BaseDefinitionService } from './base-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MilestoneDefinitionService extends BaseDefinitionService<DestinyDefinitionsMilestonesDestinyMilestoneDefinition> {}\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "PresentationNodeDefinitionService",
            "id": "injectable-PresentationNodeDefinitionService-6738f747fdb7e2e3fad9b0625213d57ea7ba534e285dfe33915ac8787df556e4dd46559f70b037222b15d8666ec8735f79a5aa166371058d461d05db1a785e9f",
            "file": "projects/clan-dashboard/src/app/core/definition-services/presentation-node-definition.service.ts",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseDefinitionService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DestinyDefinitionsPresentationDestinyPresentationNodeDefinition } from 'bungie-api-angular';\nimport { BaseDefinitionService } from './base-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PresentationNodeDefinitionService  extends BaseDefinitionService<DestinyDefinitionsPresentationDestinyPresentationNodeDefinition> {\n\n}\n",
            "extends": "BaseDefinitionService",
            "type": "injectable"
        },
        {
            "name": "ProfileWorkerService",
            "id": "injectable-ProfileWorkerService-984df647caa04506c73226811b8f919ddff1282dadfc7cec17610960c2255df70f7b68259a28ee2adecf75a0fd7cdec3d30ce20c6607aee68b3663cd1e63c8ca",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker.service.ts",
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n//import { MemberProfile, ClanMember } from 'bungie-models';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileWorkerService {\r\n  constructor() {}\r\n  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n  //members: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n\r\n  // loadProfiles(clanId: string, clanMembers: ClanMember[], progress?: (done) => any): void {\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): void {\r\n    console.log('url', import.meta.url);\r\n    const worker = new Worker(new URL('./profile.worker', import.meta.url));\r\n    worker.onmessage = ({ data }) => {\r\n      if (data.type === 'progress') {\r\n        progress(data.data);\r\n      } else if (data.type === 'complete') {\r\n        this.members.next(data.data);\r\n      }\r\n    };\r\n\r\n    worker.postMessage({\r\n      clanId,\r\n      clanMembers,\r\n      apiKey: environment.apiKey\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "StorybookService",
            "id": "injectable-StorybookService-ee71627bfa4c7884f3ba6720a3b94ca2b896ad045923dea37bd9154e189bf288d1384ee7fa0bd293385daaadbf69c9bff571f58c5c949a6da401b0a305dd773c",
            "file": "projects/components/src/lib/storybook/storybook.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from '../icons/register-icons';\r\n\r\n@Injectable()\r\nexport class StorybookService {\r\n\r\n    constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n        registerIcons(iconRegistry, domSanitizer);\r\n }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "ClanResolveGuard",
            "id": "injectable-ClanResolveGuard-d5d4908d137aac682979d92489836f0124cad9451d75ed4dc8a985d10ad1233f97a48db491bb278fb07c1985ab57c00caf093f150ed860d1baad26e4f9bd5f46",
            "file": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { map, Observable, of } from 'rxjs';\r\nimport { selectTotalClans } from '@core/store/clans/clans.selectors';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClanResolveGuard implements CanActivate {\r\n  constructor(private store: Store, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.store.select(selectTotalClans).pipe(\r\n      map((clans) => {\r\n        if (!clans || clans === 0) {\r\n          return this.router.parseUrl('/clan-search');\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ApiKeyInterceptor",
            "id": "injectable-ApiKeyInterceptor-4793ba3d596c9301d951ef639da9925af9cd9d50355437590e973583799c64856dafc927815e578d58deadbab7aa24486d98923a4fb232f487887b71dc7d3e25",
            "file": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AppConfig } from '@core/config/app-config';\r\n\r\n@Injectable()\r\nexport class ApiKeyInterceptor implements HttpInterceptor {\r\n  constructor(private appConfig: AppConfig) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add the header to the cloned request\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('x-api-key', this.appConfig.apiKey)\r\n    });\r\n\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "appConfig",
                        "type": "AppConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppConfig",
            "id": "class-AppConfig-49551c7b8b5d5f8c35a0d597ba45e8e5ebc6b3e6a37df0edd1dde17c2f58e40508079d1297763b3d3f50dc627cdbdba9ba183415559b023e51d3cbb8bd8e88cf",
            "file": "projects/clan-dashboard/src/app/core/config/app-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DeepPartial } from '@destiny/data/models';\r\nimport { baseConstants } from '../../../environments/constants';\r\n\r\nexport class AppConfig {\r\n  readonly constants: DeepPartial<typeof baseConstants>\r\n  readonly apiKey: string;\r\n  readonly appVersion: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "constants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeepPartial<>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-6d580bd28cedc748c5beca3ce1092e9b9ead3d26da9ec543171d7fb8703433d851bfb8cc2dfa5a6ef78b3782c8bdeac8e62ae11122207cfe4ba9b68466ce17ea",
            "file": "projects/data/src/lib/db/app-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 2;\r\n\r\nexport type StoreId = 'allData';\r\n\r\nexport const STORE_IDS: StoreId[] = ['allData'];\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string) {\r\n    super(name, DB_VERSION, STORE_IDS);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppIndexedDb",
            "id": "class-AppIndexedDb-7de43f518c699151b6f172c5f8ae4278a7bb440561b4db455e983e6bff6d72d70a5887043d459a45798c5c61838453051df6d5d87b37f1d94c0df3919b1ac48b-1",
            "file": "projects/data/src/lib/db/clan-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BaseAppIndexedDb } from './base-indexed-db';\r\n\r\nconst DB_VERSION = 5;\r\n\r\nexport enum StoreId {\r\n  CacheDetails = 'CacheDetails', //TODO: Verify\r\n  ClanDetails = 'ClanDetails',\r\n  ClanRewards = 'ClanRewards', // TODO: Verify\r\n  MemberProfiles = 'MemberProfiles',\r\n  MemberActivities = 'MemberActivities',\r\n  MemberActivityStats = 'MemberActivityStats', // TODO: Verify\r\n  MemberRecentActivities = 'MemberRecentActivities',\r\n  ProfileMilestones = 'ProfileMilestones', // TODO  Verfiy\r\n  ProfileMetrics = 'ProfileMetrics', // TODO: Verify\r\n  Raids = 'Raids' // TODO verify\r\n}\r\n\r\nexport const STORE_IDS: StoreId[] = [\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n];\r\n\r\nexport interface DBObject {\r\n  id: string;\r\n  data: any;\r\n  createDate: Date;\r\n}\r\n\r\nexport class AppIndexedDb extends BaseAppIndexedDb {\r\n  constructor(name: string, initializeValues: boolean = true) {\r\n    super(name, DB_VERSION, STORE_IDS, initializeValues);\r\n  }\r\n\r\n  override getAllData(store: StoreId) {\r\n    return super.getAllData(store);\r\n  }\r\n\r\n  override getById(store: StoreId, id) {\r\n    return super.getById(store, id);\r\n  }\r\n\r\n  override updateValues(values: DBObject[], collectionId: string) {\r\n    return super.updateValues(values, collectionId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "DBObject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseAppIndexedDb"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAppIndexedDb",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppIndexedDb-1"
        },
        {
            "name": "BaseAppIndexedDb",
            "id": "class-BaseAppIndexedDb-3c58fdf90e634c7efc4dd8ead1dec13ae0634a9481b5078880e95aa3f94fe2a97b7fcd2706398629fb9d9a8aec8e9322fda670bb47a580f6a7042ca05a5a2743",
            "file": "projects/data/src/lib/db/base-indexed-db.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { openDB, deleteDB, IDBPDatabase } from 'idb';\r\n\r\nexport class BaseAppIndexedDb {\r\n  name: string;\r\n  dbVersion: number;\r\n  storeIds: string[];\r\n\r\n  private db: Promise<IDBPDatabase>;\r\n\r\n  constructor(name: string, dbVersion: number, storeIds: string[], initializeValues: boolean = true) {\r\n    this.dbVersion = dbVersion;\r\n    this.storeIds = storeIds;\r\n\r\n    if (initializeValues) {\r\n      this.resetInitialValues();\r\n    }\r\n    this.name = name;\r\n    this.openDb();\r\n  }\r\n\r\n  close() {\r\n    return this.db.then((db) => db.close());\r\n  }\r\n\r\n  private resetInitialValues() {}\r\n\r\n  getAllData(store: string) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).getAll();\r\n    });\r\n  }\r\n\r\n  getById(store: string, id) {\r\n    return this.db.then((db) => {\r\n      return db.transaction(store, 'readonly').objectStore(store).get(id);\r\n    });\r\n  }\r\n\r\n  removeData() {\r\n   return this.db\r\n      .then((db) => {\r\n        this.resetInitialValues();\r\n        db.close();\r\n        return deleteDB(this.name);\r\n      })\r\n      .then(() => this.openDb());\r\n  }\r\n\r\n  purgeDatabase() {\r\n    return this.close().then((db) => {\r\n      return deleteDB(this.name);\r\n    });\r\n  }\r\n\r\n  updateValues(values: any[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      values.forEach((v) => store.put(v));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeValues(ids: string[], collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      ids.forEach((id) => store.delete(id));\r\n      return transaction.done;\r\n    });\r\n  }\r\n\r\n  removeAllValues(collectionId: string) {\r\n    return this.db.then((db) => {\r\n      const transaction = db.transaction(collectionId, 'readwrite');\r\n      const store = transaction.objectStore(collectionId);\r\n      return store.clear();\r\n    });\r\n  }\r\n\r\n  private openDb() {\r\n    const base = this;\r\n    this.db = openDB(this.name, this.dbVersion, {\r\n      upgrade(db, oldVersion, newVersion, transaction) {\r\n        base.storeIds.forEach((collectionId) => {\r\n          if (!db.objectStoreNames.contains(collectionId)) {\r\n            const objectStore = db.createObjectStore(collectionId, {\r\n              keyPath: 'id'\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dbVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeIds",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initializeValues",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBPDatabase>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dbVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "storeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllData",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "purgeDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAllValues",
                    "args": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeValues",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetInitialValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseClanService",
            "id": "class-BaseClanService-90d92405f1a8d87d72776f077a0069b1779211a0acb8aac1176886061d068381f2947a77145820dc5e02ed0ec5c89597e4bfda437238aa39f499ab6b36bc2475",
            "file": "projects/data/src/lib/clan/base-clan.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ClanDatabase } from './clan-database';\r\nimport { DBObject, StoreId } from '../db/clan-indexed-db';\r\nimport { isValidDate, nowPlusMinutes } from '../utility/date-utils';\r\n\r\nexport class BaseClanService {\r\n  tableName;\r\n  constructor(private clanDbBase: ClanDatabase, private tableNameBase: StoreId) {\r\n    this.tableName = tableNameBase;\r\n  }\r\n\r\n  getDataFromCache(clanId: string, rowId: string): Promise<DBObject> {\r\n    return this.clanDbBase.getById(clanId, this.tableNameBase, rowId);\r\n  }\r\n\r\n  getAllDataFromCache(clanId: string): Promise<DBObject[]> {\r\n    return this.clanDbBase.getAll(clanId, this.tableNameBase);\r\n  }\r\n\r\n  isCacheValid(cachedData: DBObject, minuteExpiration: number, lastActivity?: Date) {\r\n    if (cachedData && cachedData.createDate) {\r\n      const cacheDate = cachedData.createDate;\r\n      let expireDate;\r\n      if (isValidDate(lastActivity)) {\r\n        if (minuteExpiration === 0) {\r\n          expireDate = lastActivity;\r\n        } else {\r\n          const minuteXP = nowPlusMinutes(-minuteExpiration);\r\n          const lastActivityXP = lastActivity;\r\n          expireDate = minuteXP > lastActivityXP ? lastActivityXP : minuteXP;\r\n        }\r\n      } else {\r\n        expireDate = nowPlusMinutes(-minuteExpiration);\r\n      }\r\n      return cacheDate > expireDate;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateDB(clanId: string, rowId: string, data: any) {\r\n    this.clanDbBase.update(clanId, this.tableName, [\r\n      {\r\n        id: rowId,\r\n        createDate: new Date(),\r\n        data: data\r\n      }\r\n    ]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "clanDbBase",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableNameBase",
                        "type": "StoreId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "getAllDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cachedData",
                            "type": "DBObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minuteExpiration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastActivity",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDB",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseDefinitionService",
            "id": "class-BaseDefinitionService-3f1a4648ea287776f456b1f058117617b612ec6fd42a4596d0f7c570dd5d6b28cab6983914692317701e0b3089ced78ea8977fc313cb46dba973f2df08bdab4c",
            "file": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class BaseDefinitionService<T> {\r\n  definitions: T[];\r\n  initializeCache(defs: T[]) {\r\n    this.definitions = defs;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "definitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "initializeCache",
                    "args": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "defs",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanDatabase",
            "id": "class-ClanDatabase-d4554586ba756bab37c72e8ecc429978a222da3fd687c5d0c8ca0d55a4ff7ebb74cc4a7366cdba4a5e58e79aef2ecedcc7110da4549e503e49abb695db557e4e",
            "file": "projects/data/src/lib/clan/clan-database.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AppIndexedDb, StoreId, DBObject } from '../db/clan-indexed-db';\r\n\r\nexport class ClanDatabase {\r\n  private database: AppIndexedDb;\r\n\r\n\r\n  getAll(repository: string, type: StoreId): Promise<DBObject[]> {\r\n    return this.getDatabase(repository).getAllData(type);\r\n  }\r\n\r\n  getById(repository: string, type: StoreId, id: string): Promise<DBObject> {\r\n    return this.getDatabase(repository).getById(type, id);\r\n  }\r\n\r\n  update(repository: string, type: StoreId, entities: any[]): Promise<void> {\r\n    return this.getDatabase(repository).updateValues(entities, type);\r\n  }\r\n\r\n  remove(repository: string, type: StoreId, ids: string[]): Promise<void> {\r\n    return this.getDatabase(repository).removeValues(ids, type);\r\n  }\r\n\r\n  removeAll(repository: string, type: StoreId) {\r\n    return this.getDatabase(repository).removeAllValues(type);\r\n  }\r\n\r\n  deleteDatabase(repository: string) {\r\n    return this.getDatabase(repository, false).purgeDatabase();\r\n  }\r\n\r\n  private getDatabase(repository: string, initializeValues: boolean = true) {\r\n    if (this.database && this.database.name === repository) {\r\n      return this.database;\r\n    }\r\n\r\n    if (this.database) {\r\n      this.database.close();\r\n    }\r\n\r\n    this.database = new AppIndexedDb(repository, initializeValues);\r\n    return this.database;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppIndexedDb",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject[]>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DBObject>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatabase",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "AppIndexedDb",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "initializeValues",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAll",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "repository",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "StoreId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entities",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClanMembersServiceMock",
            "id": "class-ClanMembersServiceMock-007118e7e7cc0e00831f7ed9cb4b7195838d5fc7c7db3339ef6303539664ddf1582d4d0d3c52c8202dbc6079eee9a9ee069ca6235c9bd28f3465cfcb34c4fb5f",
            "file": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Destiny2Service, GroupsV2GroupMember, GroupV2Service } from 'bungie-api-angular';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ClanMembersServiceInterface } from './clan-members.interface';\r\n//import { DBObject, StoreId } from '../app-indexed-db';\r\n\r\nexport class ClanMembersServiceMock implements ClanMembersServiceInterface {\r\n  getClanMembersSerialized(clanId: string): Observable<GroupsV2GroupMember[]> {\r\n    console.log('returning');\r\n    return of([]);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getClanMembersSerialized",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GroupsV2GroupMember[]>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ClanMembersServiceInterface"
            ]
        },
        {
            "name": "DataSource",
            "id": "class-DataSource-45fd0986623b5e064a2b0de0983277abedf3aeabf2b0bd6f07a0843619f281f414f3660139c43f5f7977301eb28d2460a2cac88f89a07cb1a31fa26c719b43d5",
            "file": "projects/components/src/lib/data/data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Observable, of} from 'rxjs';\r\n\r\nexport interface DataSourceMetadata<T> {\r\n  label: string;\r\n  type: string;\r\n  accessor: (item: T) => any;\r\n}\r\n\r\nexport interface DataLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DataSourceOptions<T> {\r\n  data?: Observable<T[]>|T[];\r\n  metadata?: Map<string, DataSourceMetadata<T>>;\r\n}\r\n\r\nexport class DataSource<T = any> {\r\n  private metadata: Map<string, DataSourceMetadata<T>>;\r\n\r\n  data: Observable<T[]>;\r\n\r\n  constructor(options: DataSourceOptions<T> = {}) {\r\n    if (options.data instanceof Observable) {\r\n      this.data = options.data as Observable<T[]>;\r\n    } else if (Array.isArray(options.data)) {\r\n      this.data = of(options.data);\r\n    } else {\r\n      this.data = of([]);\r\n    }\r\n\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  getDataLabelsWithType(type: string): DataLabel[] {\r\n    const dataLabelsWithType: DataLabel[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      if (value.type === type) {\r\n        dataLabelsWithType.push({id: key, label: value.label});\r\n      }\r\n    });\r\n    return dataLabelsWithType;\r\n  }\r\n\r\n  getDataProperty<V = any>(id: string, item: T): V {\r\n    return this.metadata.get(id).accessor(item);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "DataSourceOptions<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "DataSourceOptions<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DataSourceMetadata<T>>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDataLabelsWithType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataLabel[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataProperty",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "V",
                    "typeParameters": [
                        "V"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Exporter",
            "id": "class-Exporter-8cd58574103f490abd8865195ac12ebafbcb8fefe499a340291fb2ac5efe11ef8059137c2f5406fee9f8297a45cce6cad7f2bfd7ad925b1aabacc736d17b6b09",
            "file": "projects/components/src/lib/data/exporter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, take } from 'rxjs';\r\n\r\nexport interface ExporterMetadata<T = any, C = any> {\r\n  label: string;\r\n  text: (item: T, context: C) => string | null;\r\n}\r\nexport interface ExporterOptions<T, C> {\r\n  metadata?: Map<string, ExporterMetadata<T, C>>;\r\n  //contextProvider?: SorterContextProvider<C>;\r\n  // initialState?: SorterState;\r\n}\r\n\r\nexport class Exporter<T = any, C = any> {\r\n  private metadata: Map<string, ExporterMetadata<T, C>>;\r\n\r\n  constructor(options: ExporterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n  }\r\n\r\n  exportData(name: string, items$: Observable<T[]>): void {\r\n    items$.pipe(take(1)).subscribe((items) => {\r\n      const keys = [];\r\n      this.metadata.forEach((value, key) => keys.push(key));\r\n      const formattedObj = items.map((item) => {\r\n        const obj = {};\r\n        keys.forEach((key) => {\r\n          const config = this.metadata.get(key);\r\n          obj[config.label] = config.text(item, null);\r\n        });\r\n        return obj;\r\n      });\r\n      downloadCSV({ filename: `${name}-${new Date().getTime()}` }, formattedObj);\r\n    });\r\n  }\r\n}\r\n\r\nfunction downloadCSV(args, stockData) {\r\n  let data, filename, link;\r\n  let csv = convertArrayOfObjectsToCSV({\r\n    data: stockData\r\n  });\r\n  if (csv == null) {\r\n    return;\r\n  }\r\n\r\n  filename = args.filename || 'export.csv';\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv;\r\n  }\r\n  data = encodeURI(csv);\r\n\r\n  link = document.createElement('a');\r\n  link.setAttribute('href', data);\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nfunction convertArrayOfObjectsToCSV(args) {\r\n  let result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n  data = args.data || null;\r\n  if (data == null || !data.length) {\r\n    return null;\r\n  }\r\n\r\n  columnDelimiter = args.columnDelimiter || ',';\r\n  lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n  keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  data.forEach(function (item) {\r\n    ctr = 0;\r\n    keys.forEach(function (key) {\r\n      if (ctr > 0) {\r\n        result += columnDelimiter;\r\n      }\r\n\r\n      result += item[key];\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ExporterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ExporterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ExporterMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "exportData",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Filterer",
            "id": "class-Filterer-bcb7b8ca0b03703bd848fff1c46af5a180f8a15dcc9aff327a2f92635536d07869bae3bc4ec6d513e40b18b5ac750c15990ecc3f713e0343a9a39534c1d6a517",
            "file": "projects/components/src/lib/data/filterer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith, take} from 'rxjs/operators';\r\nimport {\r\n  DateFilter,\r\n  Filter,\r\n  FilterType,\r\n  NumberFilter,\r\n  StateFilter,\r\n  TextFilter\r\n} from './filterer-types';\r\n\r\nexport type TextFilterAutocomplete<T = any, C = any> = (items: T[], c: C) => string[];\r\n\r\nexport interface TextFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'text';\r\n  matcher: (item: T, q: TextFilter, c: C) => boolean;\r\n  autocomplete?: TextFilterAutocomplete<T, C>;\r\n}\r\n\r\nexport interface NumberFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'number';\r\n  matcher: (item: T, q: NumberFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface DateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'date';\r\n  matcher: (item: T, q: DateFilter, c: C) => boolean;\r\n}\r\n\r\nexport interface StateFiltererMetadata<T = any, C = any> {\r\n  label: string;\r\n  type: 'state';\r\n  matcher: (item: T, q: StateFilter, c: C) => boolean;\r\n  states: string[];\r\n}\r\n\r\nexport type FiltererMetadata<T = any, C = any> = TextFiltererMetadata<T, C> |\r\n  NumberFiltererMetadata<T, C> | DateFiltererMetadata<T, C> | StateFiltererMetadata<T, C>;\r\n\r\nexport interface FiltererState {\r\n  filters: Filter[];\r\n  search: string;\r\n}\r\n\r\nexport interface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  type: FilterType;\r\n}\r\n\r\nexport type FiltererContextProvider<M> = Observable<M>;\r\n\r\nexport interface FiltererOptions<T, C> {\r\n  metadata?: Map<string, FiltererMetadata<T, C>>;\r\n  contextProvider?: FiltererContextProvider<C>;\r\n  initialState?: FiltererState;\r\n  tokenizeItem?: (item: T) => string;\r\n}\r\n\r\n/** Default and naive tokenize function that combines the item's property values into a string. */\r\nconst DEFAULT_TOKENIZE_ITEM =\r\n  (data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  };\r\n\r\nexport class Filterer<T = any, C = any> {\r\n  private readonly metadata: Map<string, FiltererMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  private readonly tokenizeItem: (item: T) => string;\r\n\r\n  state = new ReplaySubject<FiltererState>(1);\r\n\r\n  constructor(options: FiltererOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {filters: [], search: ''});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n    this.tokenizeItem = options.tokenizeItem || DEFAULT_TOKENIZE_ITEM;\r\n  }\r\n\r\n  /** Gets a stream that returns the items and updates whenever the filters or search changes. */\r\n  filter(): (items: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state, this.contextProvider).pipe(\r\n        map(([items, state, contextProvider]) => {\r\n          const filters = state.filters;\r\n          const search = state.search;\r\n          const filteredItems = filterItems(items, filters, contextProvider, this.metadata);\r\n          return searchItems(filteredItems, search, this.tokenizeItem);\r\n        }));\r\n    };\r\n  }\r\n\r\n  setState(state: FiltererState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: FiltererState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n\r\n      const filtersEquivalent =\r\n        JSON.stringify(state.filters.sort()) === JSON.stringify(otherState.filters.sort());\r\n      const searchEquivalent = state.search === otherState.search;\r\n\r\n      return filtersEquivalent && searchEquivalent;\r\n    }));\r\n  }\r\n\r\n  getFilterOptions(): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    this.metadata.forEach((value, key) => {\r\n      filterOptions.push({id: key, label: value.label, type: value.type});\r\n    });\r\n    return filterOptions;\r\n  }\r\n\r\n  getStateFilterOptions(id: string): string[] {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'state') {\r\n      throw Error(`Cannot get state options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return filtererMetadata.states;\r\n  }\r\n\r\n  transformTextFilterOptions(id: string): (items: Observable<T[]>) => Observable<string[]> {\r\n    const filtererMetadata = this.metadata.get(id);\r\n\r\n    if (filtererMetadata.type !== 'text') {\r\n      throw Error(`Cannot get text options for filters with type ${filtererMetadata.type}`);\r\n    }\r\n\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.contextProvider).pipe(map(([items, context]) => {\r\n        if (!filtererMetadata.autocomplete) {\r\n          return [];\r\n        }\r\n        return filtererMetadata.autocomplete(items, context);\r\n      }));\r\n    };\r\n  }\r\n\r\n  add(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      filters.push(filter);\r\n      this.setState({...state, filters});\r\n    });\r\n  }\r\n\r\n  remove(filter: Filter) {\r\n    this.state.pipe(take(1)).subscribe(state => {\r\n      const filters = state.filters.slice();\r\n      const index = state.filters.indexOf(filter);\r\n\r\n      if (index !== -1) {\r\n        filters.splice(index, 1);\r\n        this.setState({...state, filters});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** Utility function to filter the items. May be used to synchronously filter items. */\r\nexport function filterItems<T, M>(\r\n  items: T[], filters: Filter[] = [], context: M, metadata: Map<string, FiltererMetadata<T, M>>) {\r\n  return items.filter(item => {\r\n    return filters.every(filter => {\r\n      const filterMetadata = metadata.get(filter.id);\r\n      if (!filterMetadata || !filterMetadata.matcher) {\r\n        throw Error('Missing matcher for ' + filter.id);\r\n      }\r\n\r\n      switch (filterMetadata.type) {\r\n        case 'text':\r\n          return filterMetadata.matcher(item, filter as TextFilter, context);\r\n        case 'date':\r\n          return filterMetadata.matcher(item, filter as DateFilter, context);\r\n        case 'number':\r\n          return filterMetadata.matcher(item, filter as NumberFilter, context);\r\n        case 'state':\r\n          return filterMetadata.matcher(item, filter as StateFilter, context);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function searchItems<T>(items: T[], search: string, tokenizeItem: (item: T) => string): T[] {\r\n  return !search ? items : items.filter(item => {\r\n    const tokens = search.split(' OR ');\r\n    return tokens.some(token => {\r\n      return tokenizeItem(item).indexOf(token.toLowerCase()) !== -1;\r\n    });\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "FiltererOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "FiltererOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | FiltererMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<FiltererState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "tokenizeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets a stream that returns the items and updates whenever the filters or search changes.",
                    "description": "<p>Gets a stream that returns the items and updates whenever the filters or search changes.</p>\n"
                },
                {
                    "name": "getFilterOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "FilterOption[]",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStateFilterOptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "Filter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FiltererState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformTextFilterOptions",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Group",
            "id": "class-Group-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Grouper",
            "id": "class-Grouper-13e5cb0f5ad461a32fd0f9ad74f78d6dec4249e9ac4c56fba8ef09c10064a4e1200f2c34c9d7b289bd031392b4e223d4744af36a8b7365f71ae58bfa5d4eebf8",
            "file": "projects/components/src/lib/data/grouper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, mergeMap, startWith } from 'rxjs/operators';\r\n\r\nexport interface GrouperState {\r\n  group: string;\r\n}\r\n\r\nexport class Group<T> {\r\n  id: string;\r\n  title: string;\r\n  items: T[];\r\n}\r\n\r\nexport interface GrouperMetadata<T = any, C = any> {\r\n  label: string;\r\n  groupingFunction: (items: T[]) => Group<T>[];\r\n  titleTransform?: (title: string, c: C) => string;\r\n}\r\n\r\nexport interface GroupLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport interface GrouperOptions<T, C> {\r\n  metadata?: Map<string, GrouperMetadata<T, C>>;\r\n  contextProvider?: Observable<C>;\r\n  initialState?: GrouperState;\r\n}\r\n\r\nexport class Grouper<T = any, C = any> {\r\n  private metadata: Map<string, GrouperMetadata<T, C>>;\r\n\r\n  private contextProvider: Observable<C>;\r\n\r\n  state = new ReplaySubject<GrouperState>(1);\r\n\r\n  constructor(options: GrouperOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n\r\n    if (options.initialState) {\r\n      this.state.next(options.initialState);\r\n    } else if (this.metadata.size > 0) {\r\n      this.state.next({ group: this.getGroups()[0].id });\r\n    }\r\n  }\r\n\r\n  group(): (items$: Observable<T[]>) => Observable<Group<T>[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest(items$, this.state).pipe(\r\n        mergeMap(([items, state]) => this.performGrouping(items, state.group)),\r\n        map((itemGroups) => itemGroups.sort((a, b) => (a.title < b.title ? -1 : 1)))\r\n      );\r\n    };\r\n  }\r\n\r\n  getGroups(): GroupLabel[] {\r\n    const groups: GroupLabel[] = [];\r\n    this.metadata.forEach((value, key) => groups.push({ id: key, label: value.label }));\r\n    return groups;\r\n  }\r\n\r\n  setState(state: GrouperState) {\r\n    this.state.next({ ...state });\r\n  }\r\n\r\n  isEquivalent(otherState?: GrouperState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n\r\n        return state.group === otherState.group;\r\n      })\r\n    );\r\n  }\r\n\r\n  private performGrouping(items: T[], groupId: string): Observable<Group<T>[]> {\r\n    const groupMetadata = this.getGroupMetadata(groupId);\r\n    const groups = groupMetadata.groupingFunction(items);\r\n\r\n    const titleTransform = groupMetadata.titleTransform || ((title: string) => title);\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        groups.forEach((g) => {\r\n          g.title = titleTransform(g.title, context);\r\n        });\r\n        return groups;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getGroupMetadata(group: string): GrouperMetadata<T, C> {\r\n    const config = this.metadata.get(group);\r\n\r\n    if (!config) {\r\n      throw Error(`Missing metadata for group ${group}`);\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n\r\n/** Utility function that creates a group based on the value of the item's property. */\r\nexport function getGroupByValue<T>(items: T[], property: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n\r\n  items.forEach((item: any) => {\r\n    const value = item[property];\r\n    if (!valueMap.has(value)) {\r\n      valueMap.set(value, []);\r\n    }\r\n\r\n    valueMap.get(value).push(item);\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that creates a group based on the list of values of the item's property. */\r\nexport function getGroupByListValues<T>(items: T[], key: string): Group<T>[] {\r\n  const valueMap: Map<string, T[]> = new Map();\r\n  items.forEach((item: any) => {\r\n    let values: any[] = item[key];\r\n    if (!values || !values.length) {\r\n      values = [null];\r\n    }\r\n    values.forEach((value: any) => {\r\n      if (!valueMap.get(value)) {\r\n        valueMap.set(value, []);\r\n      }\r\n      valueMap.get(value).push(item);\r\n    });\r\n  });\r\n\r\n  return getGroupsFromMap(valueMap);\r\n}\r\n\r\n/** Utility function that transforms a map of groups into a list. */\r\nexport function getGroupsFromMap<T>(groupsMap: Map<string, T[]>): Group<T>[] {\r\n  const groups: Group<T>[] = [];\r\n  groupsMap.forEach((items, title) => {\r\n    title = `${title}`; // TItle should always be a string, even if the ID is something else.\r\n    groups.push({ id: title, title, items });\r\n  });\r\n\r\n  return groups;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "GrouperOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "GrouperOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<C>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | GrouperMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<GrouperState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "getGroupMetadata",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GrouperMetadata<T, C>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "GroupLabel[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "group",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Group[]>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performGrouping",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Group[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "GrouperState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileService",
            "id": "class-ProfileService-76f98854ebf40d159636c13fe68de9eb9483214b6fd2a0a3996dab7792968fa878651f276726935e7bc32b1ec80f4c07abd524755e49839d5122a4d1a8fd86b1",
            "file": "projects/data/src/lib/clan/profiles/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { map, catchError, mergeMap, bufferTime, toArray } from 'rxjs/operators';\r\nimport { Observable, from, of } from 'rxjs';\r\n\r\n//import { StoreId } from '../app-indexed-db';\r\n\r\nimport { profileSerializer } from './profile.serializer';\r\nimport { nowPlusDays, unixTimeStampToDate } from '../../utility/date-utils';\r\nimport { StoreId } from '../../db/clan-indexed-db';\r\nimport { ClanDatabase } from '../clan-database';\r\nimport { ClanMember } from '../../models/ClanMember';\r\n//import { MemberProfile } from '../../models/MemberProfile';\r\n// import { ClanMember } from 'projects/bungie-models/src/lib/models/ClanMember';\r\n// import { latestSeason } from 'projects/bungie-models/src/lib/entities/seasons/season-latest';\r\ninterface MemberProfile {}\r\n\r\nexport class ProfileService {\r\n  private tableName: StoreId = StoreId.MemberProfiles;\r\n  private concurrentRequests = 20;\r\n  // 100 Profiles\r\n  // 104 Profile Progression\r\n  // 200 Characters\r\n  // 202 Character progression\r\n  // 800 Collections\r\n  // 900 Milestones\r\n  private profileComponents = [100, 104, 200, 202, 800, 900];\r\n\r\n  // TODO: Pull this from somewhere else.\r\n  private TRACKED_HASHES = [3902035969, 2770852111];\r\n\r\n  constructor(private clanDb: ClanDatabase, private apiKey: string) {}\r\n\r\n  private getProfileId(member: ClanMember) {\r\n    return `${member.destinyUserInfo.membershipType}-${member.destinyUserInfo.membershipId}`;\r\n  }\r\n\r\n  private getProfileFromCache(clanId: string, member: ClanMember) {\r\n    return this.clanDb.getById(clanId, this.tableName, this.getProfileId(member));\r\n  }\r\n\r\n  private getProfileFromAPI(member: ClanMember) {\r\n    const url = `https://www.bungie.net/Platform/Destiny2/${member.destinyUserInfo.membershipType}/Profile/${\r\n      member.destinyUserInfo.membershipId\r\n    }/?components=${this.profileComponents.join(',')}`;\r\n\r\n    return new Observable((observer) => {\r\n      fetch(url, { headers: { 'X-API-Key': this.apiKey } })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          observer.next(data);\r\n          observer.complete();\r\n        })\r\n        .catch((err) => observer.error(err));\r\n    });\r\n  }\r\n\r\n  getProfile(clanId: string, member: ClanMember): Observable<any> {\r\n    return from(this.getProfileFromCache(clanId, member)).pipe(\r\n      mergeMap((cachedData) => {\r\n        if (cachedData && cachedData.createDate) {\r\n          const cacheDate = cachedData.createDate;\r\n          const lastStatusChange = unixTimeStampToDate(member.lastOnlineStatusChange);\r\n          const staleXP = nowPlusDays(-1);\r\n          // Make sure we recapture new data after season change\r\n          const expireDate = staleXP > lastStatusChange ? staleXP : lastStatusChange;\r\n\r\n          if (cacheDate > expireDate) {\r\n            return of(cachedData?.data);\r\n          }\r\n        }\r\n        return this.getProfileFromAPI(member).pipe(\r\n          map((memberProfileResponse: any) => {\r\n            if (memberProfileResponse.Response) {\r\n              this.clanDb.update(clanId, this.tableName, [\r\n                {\r\n                  id: this.getProfileId(member),\r\n                  createDate: new Date(),\r\n                  data: memberProfileResponse.Response\r\n                }\r\n              ]);\r\n\r\n              return memberProfileResponse.Response;\r\n            }\r\n          }),\r\n          catchError((error) => {\r\n            if (cachedData && cachedData.data) {\r\n              return of(cachedData.data);\r\n            }\r\n            if (error?.error?.ErrorStatus === 'DestinyAccountNotFound') {\r\n              return of();\r\n            }\r\n            throw error;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getSerializedProfiles<T>(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<T> {\r\n    return from(members).pipe(\r\n      mergeMap(\r\n        (member) => this.getSerializedProfile(clanId, member, collectionHashes, profileRecords),\r\n        100\r\n      )\r\n    ) as Observable<T>;\r\n  }\r\n\r\n  getSerializedProfilesWithProgress(\r\n    clanId: string,\r\n    members: ClanMember[],\r\n    progress?: (done) => any\r\n  ): Observable<MemberProfile[]> {\r\n    let complete = 0;\r\n    return from(members)\r\n      .pipe(mergeMap((member) => this.getSerializedProfile(clanId, member, [], []), this.concurrentRequests))\r\n      .pipe(\r\n        bufferTime(1000, undefined, 100),\r\n        /**\r\n         * Don't continue processing if the timer in `bufferTime` was reached and\r\n         *   there are no buffered companies.\r\n         */\r\n        mergeMap((memberResp) => {\r\n          complete += memberResp.length;\r\n          if (progress) {\r\n            progress(complete);\r\n          }\r\n          return memberResp;\r\n        }),\r\n        toArray()\r\n      );\r\n  }\r\n\r\n  getSerializedProfile(\r\n    clanId: string,\r\n    member: ClanMember,\r\n    collectionHashes: any[],\r\n    profileRecords: any[]\r\n  ): Observable<MemberProfile> {\r\n    return this.getProfile(clanId, member).pipe(\r\n      map((profile) => {\r\n        return profileSerializer(profile, this.TRACKED_HASHES, collectionHashes, profileRecords) as MemberProfile;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "clanDb",
                        "type": "ClanDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "concurrentRequests",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "profileComponents",
                    "defaultValue": "[100, 104, 200, 202, 800, 900]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tableName",
                    "defaultValue": "StoreId.MemberProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "TRACKED_HASHES",
                    "defaultValue": "[3902035969, 2770852111]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromAPI",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileFromCache",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileId",
                    "args": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfile",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "ClanMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSerializedProfilesWithProgress",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MemberProfile[]>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "members",
                            "type": "ClanMember[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileWorkerServiceMock",
            "id": "class-ProfileWorkerServiceMock-bb4952e9bfda54453fa61f22c1caef9fc33b840aeef62b54441e0683fc9e2175b310bb090b7c153db66ce86b12dec7c8f3157598da51ae597c5dbf96eb47aa8e",
            "file": "projects/clan-dashboard/src/app/workers/profile-worker.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, delay, of, take, tap } from 'rxjs';\r\nimport { MemberProfile } from '@destiny/data/models';\r\n\r\nexport class ProfileWorkerServiceMock {\r\n  constructor() {}\r\n  members: BehaviorSubject<MemberProfile[]> = new BehaviorSubject([]);\r\n\r\n  loadProfiles(clanId: string, clanMembers: any[], progress?: (done) => any): void {\r\n    of(true)\r\n      .pipe(\r\n        delay(10),\r\n        tap(() => progress({ progress: 10 })),\r\n        delay(10),\r\n        tap(() => progress({ progress: 20 })),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this.members.next([{}, {}]);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "properties": [
                {
                    "name": "members",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MemberProfile[]>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clanMembers",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progress",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "done",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Sorter",
            "id": "class-Sorter-c09137ab5d43fd609c396313e8caf2a377316e87e3952b786a4f573c85a61401ef116622f39985c64243cfb158eeded7645e899bc4d3f2a07bcffcfbd47436f3",
            "file": "projects/components/src/lib/data/sorter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {combineLatest, EMPTY, Observable, ReplaySubject} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\nexport interface SorterState {\r\n  sort: string;\r\n  reverse: boolean;\r\n}\r\n\r\nexport type SortComparator<T, C> = (a: T, b: T, context: C) => number;\r\n\r\nexport interface SorterMetadata<T = any, C = any> {\r\n  label: string;\r\n  comparator: SortComparator<T, C>;\r\n}\r\n\r\nexport type SorterContextProvider<C> = Observable<C>;\r\n\r\nexport interface SortLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nfunction sortItems<T, C>(\r\n    items: T[], comparator: SortComparator<T, C>, reverse: boolean, context: C) {\r\n  items.sort((a, b) => comparator(a, b, context));\r\n\r\n  if (reverse) {\r\n    items.reverse();\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport interface SorterOptions<T, C> {\r\n  metadata?: Map<string, SorterMetadata<T, C>>;\r\n  contextProvider?: SorterContextProvider<C>;\r\n  initialState?: SorterState;\r\n}\r\n\r\nexport class Sorter<T = any, C = any> {\r\n  private metadata: Map<string, SorterMetadata<T, C>>;\r\n\r\n  private contextProvider: SorterContextProvider<C>;\r\n\r\n  state = new ReplaySubject<SorterState>(1);\r\n\r\n  constructor(options: SorterOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.state.next(options.initialState || {sort: this.getSorts()[0].id, reverse: false});\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(null));\r\n  }\r\n\r\n  sort(): (items$: Observable<T[]>) => Observable<T[]> {\r\n    return (items$: Observable<T[]>) => {\r\n      return combineLatest([items$, this.state, this.contextProvider])\r\n          .pipe(map(([items, state, context]) => {\r\n            const sortMetadata = this.metadata.get(state.sort);\r\n            if (!sortMetadata) {\r\n              throw new Error(`No configuration set up for sort ${state.sort}`);\r\n            }\r\n\r\n            return sortItems(items, sortMetadata.comparator, state.reverse, context);\r\n          }));\r\n    };\r\n  }\r\n\r\n  getSorts(): SortLabel[] {\r\n    const sorts: SortLabel[] = [];\r\n    this.metadata.forEach((value, key) => sorts.push({id: key, label: value.label}));\r\n    return sorts;\r\n  }\r\n\r\n  setState(state: SorterState) {\r\n    this.state.next({...state});\r\n  }\r\n\r\n  isEquivalent(otherState?: SorterState): Observable<boolean> {\r\n    return this.state.pipe(map(state => {\r\n      if (!otherState) {\r\n        return false;\r\n      }\r\n      return state.sort === otherState.sort && state.reverse === otherState.reverse;\r\n    }));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "SorterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "SorterOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SorterContextProvider<C>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SorterMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<SorterState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "getSorts",
                    "args": [],
                    "optional": false,
                    "returnType": "SortLabel[]",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "SorterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Viewer",
            "id": "class-Viewer-1db9ef397be672f8b079def26cd2cda6cf13e0563c2c1df36bbb0c77cb6fed1ceca96fcc0e314ceeeae976efdf2cc2f311d27e6af71d9c560e9c31269d380ab2",
            "file": "projects/components/src/lib/data/viewer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { combineLatest, EMPTY, Observable, ReplaySubject } from 'rxjs';\r\nimport { map, startWith, take } from 'rxjs/operators';\r\n\r\nexport interface ViewerState {\r\n  views: string[];\r\n}\r\n\r\ninterface RenderedViewWithText {\r\n  text: string;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\ninterface RenderedWithComponent {\r\n  component: any;\r\n  data: any;\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\ninterface RenderedViewWithChildren {\r\n  children: RenderedView[];\r\n  classList?: string;\r\n  styles?: { [key in string]: string };\r\n}\r\n\r\nexport type RenderedView = RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent;\r\n\r\nexport interface ViewerMetadata<T = any, C = any> {\r\n  label: string;\r\n  render: (item: T, context: C) => RenderedView | null;\r\n}\r\n\r\nexport interface ViewLabel {\r\n  id: string;\r\n  label: string;\r\n}\r\n\r\nexport type ViewerContextProvider<T, C> = Observable<(item: T) => C>;\r\n\r\nexport interface ViewerOptions<T, C> {\r\n  metadata?: Map<string, ViewerMetadata<T, C>>;\r\n  contextProvider?: ViewerContextProvider<T, C>;\r\n  initialState?: ViewerState;\r\n}\r\n\r\n/** The viewer carries information to render the items to the view. */\r\nexport class Viewer<T = any, C = any> {\r\n  private metadata: Map<string, ViewerMetadata<T, C>>;\r\n\r\n  private contextProvider: ViewerContextProvider<T, C>;\r\n\r\n  state = new ReplaySubject<ViewerState>(1);\r\n\r\n  constructor(options: ViewerOptions<T, C> = {}) {\r\n    this.metadata = options.metadata || new Map();\r\n    this.setState(options.initialState || { views: this.getViews().map((v) => v.id) });\r\n    this.contextProvider = options.contextProvider || EMPTY.pipe(startWith(() => null));\r\n  }\r\n\r\n  getViews(): ViewLabel[] {\r\n    const views: ViewLabel[] = [];\r\n    this.metadata.forEach((value, key) => views.push({ id: key, label: value.label }));\r\n    return views;\r\n  }\r\n\r\n  toggle(view: string) {\r\n    this.state.pipe(take(1)).subscribe((state) => {\r\n      const views = state.views;\r\n\r\n      const newViews = [...views];\r\n      const index = views.indexOf(view);\r\n      if (index !== -1) {\r\n        newViews.splice(index, 1);\r\n      } else {\r\n        newViews.push(view);\r\n      }\r\n\r\n      this.setState({ views: newViews });\r\n    });\r\n  }\r\n\r\n  setState(state: ViewerState) {\r\n    // Remove any state keys that are not valid\r\n    const views = state.views.filter((view) => !!this.metadata.get(view));\r\n    this.state.next({ views });\r\n  }\r\n\r\n  isEquivalent(otherState?: ViewerState): Observable<boolean> {\r\n    return this.state.pipe(\r\n      map((state) => {\r\n        if (!otherState) {\r\n          return false;\r\n        }\r\n        const thisViews = state.views.slice().sort();\r\n        const otherViews = otherState.views.slice().sort();\r\n\r\n        return thisViews.length === otherViews.length && thisViews.every((v, i) => otherViews[i] === v);\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedViews(item: T): Observable<RenderedView[]> {\r\n    return combineLatest(this.state, this.contextProvider).pipe(\r\n      map(([state, context]) => {\r\n        const views = state.views.map((v) => this.metadata.get(v));\r\n        return views.map((view) => view.render(item, context(item)));\r\n      })\r\n    );\r\n  }\r\n\r\n  getRenderedView(item: T, view: string): Observable<RenderedView> {\r\n    return this.contextProvider.pipe(\r\n      map((context) => {\r\n        return this.metadata.get(view).render(item, context(item));\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ViewerOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ViewerOptions<T | C>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contextProvider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewerContextProvider<T | C>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewerMetadata<T, C>>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "new ReplaySubject<ViewerState>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "description": "<p>The viewer carries information to render the items to the view.</p>\n",
            "rawdescription": "\nThe viewer carries information to render the items to the view.",
            "methods": [
                {
                    "name": "getRenderedView",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RenderedView>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRenderedViews",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RenderedView[]>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getViews",
                    "args": [],
                    "optional": false,
                    "returnType": "ViewLabel[]",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEquivalent",
                    "args": [
                        {
                            "name": "otherState",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otherState",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ViewerState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RenderedViewDynamicCompDirective",
            "id": "directive-RenderedViewDynamicCompDirective-e67db51be723fe5e12601ae6ace0d5347a7e6b23a52db707710e51f6088ab322e474ada5819ca2512dd0becd664d520b14baf59f4b81b4934340f740e9b1bd44",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view-component.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: '[libDynamicComp]'\r\n})\r\nexport class RenderedViewDynamicCompDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}\r\n",
            "selector": "[libDynamicComp]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f329bbd401f5ad6ae0c7caa057813a94ae5b4705f3813c9e734629c3d1e988de01a4b7bff7ac94da1bce9a4026a92a480ddca62bbcc470438d89577550327d2c",
            "file": "projects/clan-dashboard/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "manifestState$",
                    "defaultValue": "this.store.select(selectManifestState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "test",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "defaultValue": "'clan-dashboard'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { environment } from '../environments/environment';\r\nimport { AppState } from '@core/core.state';\r\nimport { loadManifest, selectManifestState } from '@core/store/manifest';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { registerIcons } from '@destiny/components/icons';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'clan-dashboard';\r\n  test = ''; // environment.apiKey;\r\n\r\n  manifestState$ = this.store.select(selectManifestState);\r\n\r\n  constructor(private store: Store, iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n\r\n    this.store.dispatch(loadManifest());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"manifestState$ | async as manifestState\">\r\n  <ng-container *ngIf=\"manifestState.loading === false && manifestState.loaded === true else loading\">\r\n    <div class=\"content-wrapper\">\r\n      <router-outlet #o=\"outlet\"></router-outlet>\r\n\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"manifestState.error\">\r\n    <h1>Error State</h1>\r\n  </ng-container>\r\n\r\n\r\n  <ng-template #loading>\r\n    <h1>Loading Manifest</h1>\r\n\r\n  </ng-template>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ClansDetailsComponent",
            "id": "component-ClansDetailsComponent-e98ba07ce5e9eea1f29a751345323496dac54a0af9b938220679711e05b39a4e9e131e6e7bd8c99377fccd86eb33c7d439d02d221a8bff2c8f3f8a1cb3bd0433",
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-details",
            "styleUrls": [
                "./clans-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clansInfo$",
                    "defaultValue": "this.clansDetailsService.clanInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ClansDetailsService } from './clans-details.service';\n\n@Component({\n  selector: 'app-clans-details',\n  templateUrl: './clans-details.component.html',\n  styleUrls: ['./clans-details.component.scss']\n})\nexport class ClansDetailsComponent {\n  constructor(private clansDetailsService: ClansDetailsService) {}\n  clansInfo$ = this.clansDetailsService.clanInfo$;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "clansDetailsService",
                        "type": "ClansDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>clans-details works!</p>\r\n<lib-member-type [type]=\"'1'\"></lib-member-type>\r\n<ng-container *ngIf=\"clansInfo$ | async as clansInfo\">\r\n  <ng-container *ngFor=\"let clanInfo of clansInfo\">\r\n    <h1>{{clanInfo.name}} - {{clanInfo.clanInfo.clanCallsign}}</h1>\r\n    <h2>Member Count - {{clanInfo.memberCount}}</h2>\r\n    <h2>{{clanInfo.clanInfo.d2ClanProgressions['584850370'].level}} /\r\n      {{clanInfo.clanInfo.d2ClanProgressions['584850370'].levelCap}}</h2>\r\n    <hr>\r\n\r\n  </ng-container>\r\n\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ClanSearchComponent",
            "id": "component-ClanSearchComponent-58495835de9bac3ed33e8913cb5e5894a60961a6994efe4847a76f19eb76bc2680ff6b701d3542e2d878f528a605eab5638a63c68e96e223c055298d7b8ec3cc",
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clan-search",
            "styleUrls": [
                "./clan-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clan-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clans$",
                    "defaultValue": "this.store.select(selectAllClans)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "addClan",
                    "args": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clanId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { addClan, selectAllClans } from '@core/store/clans';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-clan-search',\r\n  templateUrl: './clan-search.component.html',\r\n  styleUrls: ['./clan-search.component.scss']\r\n})\r\nexport class ClanSearchComponent {\r\n  constructor(private store: Store) {}\r\n\r\n  clans$ = this.store.select(selectAllClans);\r\n  addClan(clanId: string) {\r\n    this.store.dispatch(addClan({ clanId }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clan-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>clan-search works!</p>\r\n{{(clans$ | async) | json}}\r\n<button (click)=\"addClan('2073131')\">DoD-PC - Chums</button>\r\n<button (click)=\"addClan('4859164')\">DoD-PC - Champs</button>\r\n<a routerLink=\"/\">Let's Go</a>\r\n"
        },
        {
            "name": "ClansRosterComponent",
            "id": "component-ClansRosterComponent-fc531b51b28a70d2e9aa2ffc20086e9505e0fb119c6167c513e6470278726ba176970548d1dc345f1e583af9441f1c59d9dbfcc8b1bac11aba31a2529f22e7c2",
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clans-roster",
            "styleUrls": [
                "./clans-roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clans-roster.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "profiles$",
                    "defaultValue": "this.clansRosterService.clanProfiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "rosterFilter",
                    "defaultValue": "new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "rosterInfo$",
                    "defaultValue": "combineLatest([this.clansRosterService.clanProfiles$]).pipe(\n    map(([clanProfiles]) => {\n      return {\n        loading: of(false),\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\n        viewer: this.rosterViewer,\n        filterer: this.rosterFilter,\n        sorter: this.rosterSorter\n      };\n    }),\n    filter((ds) => !!ds)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RosterResources>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "rosterSorter",
                    "defaultValue": "new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "rosterViewer",
                    "defaultValue": "new Viewer({\n    metadata: CLAN_ROSTER_VIEWER_METADATA,\n    contextProvider: this.createViewContextProvider()\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "createViewContextProvider",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewRef } from '@angular/core';\nimport { DataSource, Filterer, Grouper, Sorter, Viewer } from '@destiny/components';\nimport { combineLatest, filter, map, Observable, of } from 'rxjs';\nimport { CLAN_ROSTER_VIEWER_METADATA } from './clan-roster-metadata';\nimport { CLAN_ROSTER_FILTERER_METADATA } from './clan-roster-metadata/ClanRosterFilterer';\nimport { CLAN_ROSTER_SORTER_METADATA } from './clan-roster-metadata/ClanRosterSorter';\nimport { ClanMemberProfile, ClansRosterService } from './clans-roster.service';\n\nimport { BungieDatePipe, BungieDateTimePipe } from '@destiny/components/pipes/bungie-date';\ninterface RosterResources {\n  loading: Observable<boolean>;\n  viewer: Viewer;\n  filterer: Filterer;\n  //grouper: Grouper;\n  sorter: Sorter;\n  dataSource: DataSource;\n}\n\n@Component({\n  selector: 'app-clans-roster',\n  templateUrl: './clans-roster.component.html',\n  styleUrls: ['./clans-roster.component.scss']\n})\nexport class ClansRosterComponent implements OnInit {\n  constructor(\n    private clansRosterService: ClansRosterService,\n    private bungieDatePage: BungieDatePipe,\n    private bungieDateTimePipe: BungieDateTimePipe\n  ) {}\n  // stuff2$ = this.clansRosterService.activeClanPeople$;\n  //members$ = this.clansRosterService.clanMembers$;\n  profiles$ = this.clansRosterService.clanProfiles$;\n\n  rosterViewer = new Viewer({\n    metadata: CLAN_ROSTER_VIEWER_METADATA,\n    contextProvider: this.createViewContextProvider()\n  });\n  rosterFilter = new Filterer({ metadata: CLAN_ROSTER_FILTERER_METADATA });\n  rosterSorter = new Sorter({ metadata: CLAN_ROSTER_SORTER_METADATA });\n\n  rosterInfo$: Observable<RosterResources> = combineLatest([this.clansRosterService.clanProfiles$]).pipe(\n    map(([clanProfiles]) => {\n      return {\n        loading: of(false),\n        dataSource: new DataSource<ClanMemberProfile>({ data: clanProfiles }),\n        viewer: this.rosterViewer,\n        filterer: this.rosterFilter,\n        sorter: this.rosterSorter\n      };\n    }),\n    filter((ds) => !!ds)\n  );\n\n  createViewContextProvider() {\n    return of((item: ClanMemberProfile) => ({\n      item,\n      datePipe: this.bungieDatePage,\n      dateTimePipe: this.bungieDateTimePipe\n    }));\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clans-roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDatePage",
                        "type": "BungieDatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "clansRosterService",
                        "type": "ClansRosterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDatePage",
                        "type": "BungieDatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bungieDateTimePipe",
                        "type": "BungieDateTimePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>clans-roster works!</p>\r\n<!-- {{(stuff$ | async) | json}} -->\r\n<!-- <hr>\r\nstuff2:\r\n{{(stuff2$ | async) | json}}\r\n<hr>\r\n<div style=\"height:100px; overflow:scroll\">\r\n  <pre>\r\n  {{(members$ | async) | json}}}\r\n</pre>\r\n</div> -->\r\n<!-- <div style=\"height:600px; overflow:scroll\">\r\n\r\n  <pre>\r\n  {{(profiles$ | async) | json}}}\r\n  </pre>\r\n</div> -->\r\n<lib-table-view *ngIf=\"rosterInfo$ | async as rosterInfo\" [dataSource]=\"rosterInfo.dataSource\"\r\n  [viewer]=\"rosterInfo.viewer\"\r\n  [filterer]=\"rosterInfo.filterer\"\r\n  [sorter]=\"rosterInfo.sorter\">\r\n\r\n</lib-table-view>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-4efd686c4f7fc90f8d88765a4b9650d38dda11bff4590e4d821e4c04e88343f97c325a6a5f577e74ac4e8e7a25840a1a90818ceb53c37e31c5d477da3a081956",
            "file": "projects/clan-dashboard/src/app/views/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dashboard works!</p>\n<app-clans-details></app-clans-details>\n"
        },
        {
            "name": "DisplayOptionsComponent",
            "id": "component-DisplayOptionsComponent-38514466fe57a6105ad2e413cadac09baecc8ffb4366024a0837c3ba76eb3578a03b8ed8fe764e6c1dfff3479c0cd9f2786520ce0144f16534eb1e0131d560cb",
            "file": "projects/components/src/lib/shared/display-options/display-options.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-display-options",
            "styleUrls": [
                "./display-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./display-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "grouper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Grouper",
                    "decorators": []
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Sorter",
                    "decorators": []
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Viewer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sorts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleViewKey",
                    "args": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { take } from 'rxjs';\nimport { Grouper, GroupLabel } from '../../data/grouper';\nimport { Sorter, SortLabel } from '../../data/sorter';\nimport { Viewer, ViewLabel } from '../../data/viewer';\n\n@Component({\n  selector: 'lib-display-options',\n  templateUrl: './display-options.component.html',\n  imports: [CommonModule, FormsModule, MatButtonModule, MatMenuModule, MatIconModule],\n  standalone: true,\n  styleUrls: ['./display-options.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DisplayOptionsComponent implements OnChanges {\n  groups: GroupLabel[];\n\n  sorts: SortLabel[];\n\n  views: ViewLabel[];\n\n  @Input() grouper: Grouper;\n\n  @Input() sorter: Sorter;\n\n  @Input() viewer: Viewer;\n\n  constructor() {}\n\n  ngOnChanges(simpleChanges: SimpleChanges) {\n    if (simpleChanges['grouper']) {\n      this.groups = this.grouper ? this.grouper.getGroups() : [];\n    }\n    if (simpleChanges['sorter']) {\n      this.sorts = this.sorter ? this.sorter.getSorts() : [];\n    }\n    if (simpleChanges['viewer']) {\n      this.views = this.viewer ? this.viewer.getViews() : [];\n    }\n  }\n\n  setGroup(group: string) {\n    this.grouper.setState({ group });\n  }\n\n  setSort(sort: string) {\n    this.sorter.state.pipe(take(1)).subscribe((state) => {\n      let reverse = state.reverse;\n      if (state.sort === sort) {\n        reverse = !reverse;\n      } else {\n        reverse = false;\n      }\n\n      this.sorter.setState({ ...state, sort, reverse });\n    });\n  }\n\n  toggleViewKey(view: string) {\n    this.viewer.toggle(view);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.mat-button {\r\n  min-width: 0;\r\n  display: block;\r\n  padding: 0 8px;\r\n}\r\n\r\n.button-content {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.options-menu-trigger {\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  font-size: 12px;\r\n}\r\n\r\nbutton.mat-menu-item {\r\n  mat-icon {\r\n    visibility: hidden;\r\n  }\r\n\r\n  &.selected {\r\n    font-weight: bold;\r\n    mat-icon {\r\n      visibility: visible;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-menu-item {\r\n  //@include slim-menu-item();\r\n}\r\n",
                    "styleUrl": "./display-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<button mat-button [mat-menu-trigger-for]=\"rootMenu\">\n  <div class=\"options-menu-trigger\"> Display Options </div>\n</button>\n\n<mat-menu #rootMenu=\"matMenu\">\n  <button *ngIf=\"grouper\" mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">\n    Group By\n  </button>\n  <button *ngIf=\"sorter\" mat-menu-item [matMenuTriggerFor]=\"sortingMenu\">\n    Sort By\n  </button>\n  <button *ngIf=\"viewer\" mat-menu-item [matMenuTriggerFor]=\"viewingMenu\">\n    View\n  </button>\n</mat-menu>\n\n<!-- Group Menu -->\n<mat-menu #groupingMenu=\"matMenu\">\n  <button mat-menu-item *ngFor=\"let group of groups\"\n          [class.selected]=\"(grouper.state | async).group === group.id\"\n          (click)=\"setGroup(group.id); $event.stopPropagation();\">\n    <div class=\"button-content\">\n      <mat-icon>check</mat-icon>\n      {{group.label}}\n    </div>\n  </button>\n</mat-menu>\n\n<!-- Sort Menu -->\n<mat-menu #sortingMenu=\"matMenu\">\n  <button mat-menu-item *ngFor=\"let sort of sorts\"\n          [class.selected]=\"(sorter.state | async).sort === sort.id\"\n          (click)=\"setSort(sort.id); $event.stopPropagation();\">\n    <div class=\"button-content\">\n      <mat-icon>\n        {{(sorter.state | async).reverse ? 'arrow_downward' : 'arrow_upward'}}\n      </mat-icon>\n      {{sort.label}}\n    </div>\n  </button>\n</mat-menu>\n\n<!-- View Menu -->\n<mat-menu #viewingMenu=\"matMenu\">\n  <button mat-menu-item *ngFor=\"let view of views\"\n          [class.selected]=\"(viewer.state | async).views.indexOf(view.id) !== -1\"\n          (click)=\"viewer.toggle(view.id); $event.stopPropagation();\">\n    <div class=\"button-content\">\n      <mat-icon>check</mat-icon>\n      {{view.label}}\n    </div>\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-b83fc17e6688681d205facbd77e82b1e18db76ecfd511b35e01fe04e2e34fee75b677ecd09c1de49e875fa412a258df79f5a952fb50a5f1b9bad0541da4f6cea",
            "file": "projects/components/src/lib/icons/member-type.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-icons",
            "styleUrls": [],
            "styles": [],
            "template": "<lib-member-type [type]=\"1\"></lib-member-type>\n<lib-member-type [type]=\"2\"></lib-member-type>\n<lib-member-type [type]=\"3\"></lib-member-type>\n<lib-member-type [type]=\"4\"></lib-member-type>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { moduleMetadata } from '@storybook/angular';\r\n/// import { ActivityGridComponent } from './activity-grid.component';\r\n// import { ActivityGridModule } from './activity-grid.module';\r\n// import {MOCK_GRID_ITEMS} from './_MOCK_GRID_ITEMS';\r\n// import { ClanWeeklyProgressComponent } from './clan-weekly-progress.component';\r\n// import { ClanWeeklyProgressModule } from './clan-weekly-progress.module';\r\n//import { MOCK_WEEKLY_PROGRESS } from './_MOCK_WEEKLY_PROGRESS';\r\nimport { StorybookModule } from '../storybook/storybook.module';\r\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from './register-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconsModule } from './icons.module';\r\n\r\n@Component({\r\n  selector: 'lib-icons',\r\n  template: `\r\n    <lib-member-type [type]=\"1\"></lib-member-type>\r\n    <lib-member-type [type]=\"2\"></lib-member-type>\r\n    <lib-member-type [type]=\"3\"></lib-member-type>\r\n    <lib-member-type [type]=\"4\"></lib-member-type>\r\n  `\r\n})\r\nclass IconComponent {\r\n  constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  exports: [IconComponent],\r\n  imports: [CommonModule, MatIconModule, HttpClientModule, IconsModule]\r\n})\r\nclass IconTestModule {}\r\n\r\nexport default {\r\n  title: 'Icons / Member Type',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [IconTestModule, StorybookModule]\r\n    })\r\n  ]\r\n};\r\n\r\nexport const base = () => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n});\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MemberTypeComponent",
            "id": "component-MemberTypeComponent-64b1c68a9249321bc133a82389c0258365483611d11a01e1699b9c46f4dc1c77b22594aea9a6709b92a165dfcc2431fe6cd44e02780fe6befeec9d093c704bd4",
            "file": "projects/components/src/lib/icons/member-type.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-member-type",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-icon [svgIcon]=\"type | memberType\" class=\"ico-{{type | memberType}}\"></mat-icon>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-member-type',\r\n  template: `<mat-icon [svgIcon]=\"type | memberType\" class=\"ico-{{type | memberType}}\"></mat-icon>`,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MemberTypeComponent  {\r\n  @Input()\r\n  type;\r\n  constructor(){\r\n  console.log('stuff');\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            }
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RenderedViewComponent",
            "id": "component-RenderedViewComponent-b25b6c54ae7b2fa9d9b73ce4f60c78d46f96165cdc97b6f34328f24b0748b3ce98cc0a192663096b1dbd24edb7363e159df405121141707a926265bbf0f9cee6",
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-rendered-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rendered-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "childrenViews",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "RenderedView[]",
                    "decorators": []
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "libDynamicComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RenderedViewDynamicCompDirective",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "RenderedViewDynamicCompDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RenderedView[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RenderedView } from '../../data/viewer';\r\nimport { RenderedViewDynamicCompDirective } from './rendered-view-component.directive';\r\n\r\n@Component({\r\n  selector: 'lib-rendered-view',\r\n  templateUrl: './rendered-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RenderedViewComponent implements OnInit {\r\n  @ViewChild(RenderedViewDynamicCompDirective, { static: true }) libDynamicComp!: RenderedViewDynamicCompDirective;\r\n  views: Observable<RenderedView[]>;\r\n\r\n  @Input() text: string;\r\n\r\n  @Input() childrenViews: RenderedView[] = [];\r\n  @Input() component: any;\r\n  @Input() data: any;\r\n\r\n  ngOnInit() {\r\n    // TODO: Keep eye on this for performance.\r\n    if (this.component) {\r\n\r\n      console.log('component');\r\n      const viewContainerRef = this.libDynamicComp.viewContainerRef;\r\n      viewContainerRef.clear();\r\n\r\n      const componentRef = viewContainerRef.createComponent(this.component);\r\n      for (const property in this.data) {\r\n        componentRef.instance[property] = this.data[property];\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "{{text}}\r\n<ng-template libDynamicComp></ng-template>\r\n<ng-container *ngFor=\"let view of childrenViews\">\r\n  <lib-rendered-view *ngIf=\"view\" [class]=\"view.classList || ''\" [ngStyle]=\"view.styles || {}\" [text]=\"view['text']\"\r\n    [childrenViews]=\"view['children']\">\r\n  </lib-rendered-view>\r\n</ng-container>\r\n"
        },
        {
            "name": "RosterComponent",
            "id": "component-RosterComponent-13fef27e12d35f403d76fc5d9f3e90d6ac2f62c4c78ada455442ebcb03be8145fc22144e41bd96b374b9fb4ae6c358b1a6f7c46f02768f073898eea716eca0f4",
            "file": "projects/clan-dashboard/src/app/views/roster/roster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-roster",
            "styleUrls": [
                "./roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roster.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-roster',\r\n  templateUrl: './roster.component.html',\r\n  styleUrls: ['./roster.component.scss']\r\n})\r\nexport class RosterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>roster works!</p>\r\n<app-clans-roster></app-clans-roster>\r\n"
        },
        {
            "name": "TableViewComponent",
            "id": "component-TableViewComponent-2afc297e65f52bcbaf66db812cd4926bcc190c419455cccb3fa17382b57a0daad1399a171b37511cef94bd23871e24f65d3f029c3f3917aef4326619ea2385cc",
            "file": "projects/components/src/lib/shared/table-view/table-view.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-table-view",
            "styleUrls": [
                "./table-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "DataSource",
                    "decorators": []
                },
                {
                    "name": "exporter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "Exporter",
                    "decorators": []
                },
                {
                    "name": "filterer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "Filterer",
                    "decorators": []
                },
                {
                    "name": "grouper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "Grouper",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sorter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "Sorter",
                    "decorators": []
                },
                {
                    "name": "viewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "Viewer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "page",
                    "defaultValue": "new BehaviorSubject({ size: 100, index: 0 })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TablePage>",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "renderedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "renderedHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Map<Item, Map<string, Observable<RenderedView>>>>",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "views",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methodsClass": [
                {
                    "name": "export",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay } from 'rxjs';\r\n\r\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { RenderedViewComponent } from '../rendered-view/rendered-view.component';\r\nimport { DisplayOptionsComponent } from '../display-options/display-options.component';\r\n\r\nimport { RenderedView, Viewer, ViewLabel } from '../../data/viewer';\r\nimport { Exporter } from '../../data/exporter';\r\nimport { DataSource } from '../../data/data-source';\r\nimport { Filterer } from '../../data/filterer';\r\nimport { Grouper } from '../../data/grouper';\r\nimport { Sorter } from '../../data/sorter';\r\nimport { RenderedViewModule } from '../rendered-view/rendered-view.module';\r\n\r\nexport interface Item {\r\n  id: string;\r\n  assignees: string[];\r\n  body: string;\r\n  title: string;\r\n  comments: number;\r\n  labels: string[];\r\n  number: number;\r\n  state: string;\r\n  reporter: string;\r\n  created: string;\r\n  closed: string;\r\n  updated: string;\r\n  // reactions: Reactions;\r\n  pr: boolean;\r\n  url: string;\r\n  //  statuses: ItemStatus[];\r\n  dbAdded?: string;\r\n  dbModified?: string;\r\n}\r\n\r\ninterface TablePage {\r\n  index: number;\r\n  size: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-table-view',\r\n  templateUrl: './table-view.component.html',\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    RenderedViewModule,\r\n    MatPaginatorModule,\r\n    MatDividerModule,\r\n    DisplayOptionsComponent\r\n  ],\r\n  standalone: true,\r\n  styleUrls: ['./table-view.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnInit {\r\n  displayedColumns: Observable<string[]>;\r\n\r\n  views: ViewLabel[];\r\n\r\n  renderedHtml: Observable<Map<Item, Map<string, Observable<RenderedView>>>>;\r\n\r\n  @Input() filterer: Filterer;\r\n\r\n  @Input() viewer: Viewer;\r\n\r\n  @Input() grouper: Grouper;\r\n\r\n  @Input() sorter: Sorter;\r\n\r\n  @Input() dataSource: DataSource;\r\n\r\n  @Input() exporter: Exporter;\r\n\r\n  @Input() loading: boolean;\r\n\r\n  itemCount: Observable<number>;\r\n\r\n  page: BehaviorSubject<TablePage> = new BehaviorSubject({ size: 100, index: 0 });\r\n\r\n  renderedData: Observable<Item[]>;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    // TODO: Cannot be in ngOnInit since the inputs may change\r\n    const curatedData = this.dataSource.data.pipe(this.filterer.filter(), this.sorter.sort());\r\n    this.renderedData = combineLatest([curatedData, this.page]).pipe(\r\n      map(([data, page]) => data.slice(page.index * page.size, page.index * page.size + page.size))\r\n    );\r\n    this.itemCount = curatedData.pipe(map((d) => d.length));\r\n\r\n    this.views = this.viewer.getViews();\r\n    this.displayedColumns = this.viewer.state.pipe(\r\n      map((state) => {\r\n        return this.views.map((v) => v.id).filter((v) => state.views.indexOf(v) !== -1);\r\n      })\r\n    );\r\n\r\n    this.renderedHtml = this.renderedData.pipe(\r\n      map((items) => {\r\n        const renderedHtml = new Map<Item, Map<string, Observable<RenderedView>>>();\r\n        items.forEach((item) => {\r\n          const itemRenderedViews = new Map<string, Observable<RenderedView>>();\r\n          this.views.forEach((view) => itemRenderedViews.set(view.id, this.viewer.getRenderedView(item, view.id)));\r\n          renderedHtml.set(item, itemRenderedViews);\r\n        });\r\n        return renderedHtml;\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  setPage(event: PageEvent) {\r\n    this.page.next({ index: event.pageIndex, size: event.pageSize });\r\n  }\r\n  export() {\r\n    this.exporter.exportData('', this.renderedData);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n}\r\n\r\n.filter {\r\n  max-width: 650px;\r\n  margin: 8px auto;\r\n  width: 100%;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n}\r\n\r\n.item-count {\r\n  padding-left: 24px;\r\n}\r\n\r\nadvanced-search {\r\n  flex: 1;\r\n  margin-top: 12px;\r\n  padding-left: 24px;\r\n  max-width: 650px;\r\n}\r\n\r\n.header-actions {\r\n  padding: 16px;\r\n}\r\n\r\n.table-container {\r\n  overflow: auto;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n\r\n  td {\r\n    padding-top: 4px;\r\n    padding-bottom: 4px;\r\n  }\r\n}\r\n\r\n.mat-menu-item {\r\n//   @include slim-menu-item();\r\n}\r\n",
                    "styleUrl": "./table-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 87
            },
            "implements": [
                "OnInit"
            ],
            "templateData": " <div class=\"header theme-background-card\">\r\n   <!-- <advanced-search [filterer]=\"filterer\" [dataSource]=\"dataSource\">\r\n  </advanced-search> -->\r\n\r\n   <div class=\"header-actions\">\r\n     <lib-display-options [sorter]=\"sorter\" [viewer]=\"viewer\"></lib-display-options>\r\n     <button (click)=\"export()\">Export</button>\r\n   </div>\r\n </div>\r\n\r\n <div class=\"table-container\">\r\n   <table mat-table [dataSource]=\"renderedData\">\r\n     <ng-container *ngFor=\"let view of views\" [matColumnDef]=\"view.id\">\r\n       <th mat-header-cell *matHeaderCellDef>\r\n         {{view.label}}\r\n       </th>\r\n       <td mat-cell *matCellDef=\"let item\">\r\n         <ng-container *ngIf=\"(renderedHtml | async).get(item).get(view.id) | async as view\">\r\n           <lib-rendered-view *ngIf=\"view\" [class]=\"view.classList || ''\" [ngStyle]=\"view.styles || {}\"\r\n             [text]=\"view['text'] || ''\" [childrenViews]=\"view['children'] || null\">\r\n           </lib-rendered-view>\r\n         </ng-container>\r\n       </td>\r\n     </ng-container>\r\n\r\n     <tr mat-header-row *matHeaderRowDef=\"displayedColumns | async; sticky: true\"></tr>\r\n     <tr mat-row *matRowDef=\"let item; columns: displayedColumns | async;\"></tr>\r\n   </table>\r\n </div>\r\n\r\n <mat-divider></mat-divider>\r\n\r\n <mat-paginator (page)=\"setPage($event)\" [pageSize]=\"(page | async).size\" [length]=\"itemCount | async\">\r\n </mat-paginator>\r\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-b5d93ced0ac1d4c6c14ce70620e7cba69df81cf0f900220a8d9bdd73890a04450333e56ca385dd9e401d92a457c1549564c87705584a6a42472752ab72e3c9e9",
            "file": "projects/components/src/lib/shared/rendered-view/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-test",
            "styleUrls": [
                "./test.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "test",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n})\nexport class TestComponent implements OnInit {\n  @Input() test: string = 'default';\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>test works!</p>\n{{test}}\n"
        },
        {
            "name": "WrapperComponent",
            "id": "component-WrapperComponent-3a6d6ee78f86b3957f97250bd6063386b51396d4436c7c1f4882ad0b0aba16bf7bba2c80cfb277ef6cea40b7b4070e53bce303705c3696bbcd95bdaa58947410",
            "file": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wrapper",
            "styleUrls": [
                "./wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { take } from 'rxjs';\r\nimport { ClanUpdaterService } from '../../services/clan-updater.service';\r\n\r\n@Component({\r\n  selector: 'app-wrapper',\r\n  templateUrl: './wrapper.component.html',\r\n  styleUrls: ['./wrapper.component.scss']\r\n})\r\nexport class WrapperComponent implements OnInit {\r\n  constructor(private clanUpdaterService: ClanUpdaterService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.clanUpdaterService.update().pipe(take(1)).subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "clanUpdaterService",
                        "type": "ClanUpdaterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>wrapper works!</p>\r\n<a routerLink=\"/\">Dashboard</a>\r\n<a routerLink=\"/roster\">Roster</a>\r\n\r\n\r\n<router-outlet></router-outlet>\r\n\r\nstuff\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8fa8b8c86f7dd4bca1ee3bdc7b10d95f4e054c7aef2500be998fee69c34ff1556e53b66b91c5d3ff3650f5b2829cb41c3afd4ff643da3d2a47d0e18f404a314f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from '@core/core.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule, BrowserAnimationsModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b2fa48c375cfd2ce5907d54cac3ec16e7245bd8648e3ae2f91763c6054b8649d68b76a05dc1b8b0e550718bdd976ca206561afc263bb178e5f40cc3d6ef3a79a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardModule } from './views/dashboard/dashboard.module';\r\nimport { ClanResolveGuard } from '@core/guards/clan.guard';\r\nimport { WrapperComponent } from '@core/layout/wrapper/wrapper.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    canActivate: [ClanResolveGuard],\r\n    component: WrapperComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () => \"import('./views/dashboard/dashboard.module').then((module) => module.DashboardModule)\"\r\n      },\r\n      {\r\n        path: 'roster',\r\n        loadChildren: () => \"import('./views/roster/roster.module').then((module) => module.RosterModule)\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'clan-search',\r\n    // TODO: Clan Guard\r\n    //canActivate: [ClanResolveGuard],\r\n    loadChildren: () => \"import('./views/clan-search/clan-search.module').then((module) => module.ClanSearchModule)\"\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanDbModule",
            "id": "module-ClanDbModule-a7659e7698215fdbc3cc007d80bdab805a3016762af2da6106cf677c3b19c613fe261e552b025375ebfcdb7f2e7fc076a669173db4cf97ec8630de05ddce88ee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/data/src/lib/clan/clan-db.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ClanDetailsService } from './clan-details/clan-details.service';\r\nimport { ClanDatabase } from './clan-database';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  providers: [ClanDetailsService, ClanDatabase]\r\n})\r\nexport class ClanDbModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClanDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansDetailsModule",
            "id": "module-ClansDetailsModule-1c272529f5cb551c216b155423876f132c01dbfe482b5d8f80ee286ceef37ab1b467c76f2ec321d1a6bd1a7bb3abe9106857e17f826d74e7534a417a3f1c6225",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-details/clans-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClansDetailsComponent } from './clans-details.component';\nimport { ClansDetailsService } from './clans-details.service';\nimport { IconsModule } from '@destiny/components/icons';\n\n@NgModule({\n  declarations: [ClansDetailsComponent],\n  providers: [ClansDetailsService],\n  exports: [ClansDetailsComponent],\n  imports: [CommonModule, IconsModule]\n})\nexport class ClansDetailsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansDetailsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchModule",
            "id": "module-ClanSearchModule-3b76ecc9a9ad9644435c3c051adca2eb80c73a8bf247082c6209a20f09720946c52370271e04f6ecf6581992be60d0bfe693d07fa80361c394c6680158cb9441",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClanSearchComponent } from './clan-search.component';\nimport { ClanSearchRoutingModule } from './clan-search-routing.module';\n\n@NgModule({\n  declarations: [ClanSearchComponent],\n  imports: [CommonModule, ClanSearchRoutingModule]\n})\nexport class ClanSearchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClanSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanSearchRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClanSearchRoutingModule",
            "id": "module-ClanSearchRoutingModule-7b32126c4ac10ad4d41495d3e6340eb73a2ca569a768db1452896998b467bd8486530a74a9ae94928c5b7b6c02b192896507fd51aa3c65ad0ade622cbeb6d820",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/clan-search/clan-search-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ClanSearchComponent } from './clan-search.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ClanSearchComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClanSearchRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClansRosterModule",
            "id": "module-ClansRosterModule-8083f5936e811411e09dffa85dd442f66b79593e29420a21bc21658e2b3bcc461ea57dade6c6c7641231519b0b126de3809410deb2aa5a9676bd2b9ca6b9404a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClansRosterComponent } from './clans-roster.component';\nimport { ClansRosterService } from './clans-roster.service';\n// import {} from '@destiny/data\nimport { TableViewComponent } from '@destiny/components/shared/table-view';\nimport { PipesModule } from '@destiny/components/pipes';\n\n@NgModule({\n  declarations: [ClansRosterComponent],\n  providers: [ClansRosterService],\n  exports: [ClansRosterComponent],\n  imports: [CommonModule, TableViewComponent, PipesModule]\n})\nexport class ClansRosterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClansRosterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TableViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClansRosterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-e8fed4b2c156e99252d0a5e9f809d696f424da3f7b889cadc9beea5a30cb3092a60bccf3feebe3fddc7581cd0d845505428943ba20f0b2122f5f89235b7028e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AppConfig } from './config/app-config';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ApiKeyInterceptor } from './interceptors/apikey.interceptor';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { coreReducers, coreEffects, metaReducers } from './core.state';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { Configuration } from 'bungie-api-angular';\r\nimport { ClanDbModule } from '@destiny/data/clan';\r\nimport { LayoutModule } from './layout/layout.module';\r\nimport { ClanMembersService } from '@destiny/data/clan/clan-members';\r\nimport { ProfileService } from 'projects/data/src/lib/clan/profiles/profile.service';\r\nimport { ClanDatabase } from 'projects/data/src/lib/clan/clan-database';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    ClanDbModule,\r\n    LayoutModule,\r\n    StoreModule.forRoot(coreReducers, { metaReducers }),\r\n    EffectsModule.forRoot(coreEffects),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\r\n  ],\r\n  providers: [\r\n    ClanMembersService,\r\n    {\r\n      provide: ProfileService,\r\n      useFactory: (canDB) => {\r\n        return new ProfileService(canDB, environment.apiKey);\r\n      },\r\n      deps: [ClanDatabase]\r\n    },\r\n    { provide: AppConfig, useValue: environment },\r\n    // {\r\n    //   provide: Configuration,\r\n    //   useFactory: () => new Configuration(\r\n    //     {\r\n\r\n    //       //basePath: environment.apiUrl,\r\n    //       //accessToken: authService.getAccessToken.bind(authService)\r\n    //     }\r\n    //   ),\r\n    //   multi: false\r\n    // },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ApiKeyInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CoreModule {\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: CoreModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CoreModule is already loaded. Import only in AppModule');\r\n    }\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiKeyInterceptor"
                        },
                        {
                            "name": "ClanMembersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClanDbModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-a1166c0fccc1eeb8466a289337257ef60755015c7ca0bd2f307aed1d7a05902b2c61686c1f352223ef3f7fb8bc73992716e0afe0b8817bc410cdb1e67962023c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\n//import {} from '@features/\nimport { ClansDetailsModule } from '@features/clans-details';\n\n@NgModule({\n  declarations: [DashboardComponent],\n  imports: [CommonModule, DashboardRoutingModule, ClansDetailsModule]\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansDetailsModule"
                        },
                        {
                            "name": "DashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-97df5871caa8c0d9687fa80e1d35dc593a5a6870824c92ba0a4dfbff9db686ef833314388a345e93fda40ed7f39ae64ce4fd9cd5dec3db30369756e382156f9d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DashboardComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconsModule",
            "id": "module-IconsModule-6d047f7034bef873f0fdcfe67bc71f3b91a83acb6e70a4831722e926045ca17722ff1a52b4426bc79529901448a5a2018c806e4b599ec9b9f940ad2660ee156e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/icons/icons.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MemberTypeComponent } from './member-type.component';\r\nimport { PipesModule } from '../pipes/pipes.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [MemberTypeComponent],\r\n  exports: [MemberTypeComponent],\r\n  imports: [CommonModule, PipesModule, MatIconModule]\r\n})\r\nexport class IconsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MemberTypeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MemberTypeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconTestModule",
            "id": "module-IconTestModule-b83fc17e6688681d205facbd77e82b1e18db76ecfd511b35e01fe04e2e34fee75b677ecd09c1de49e875fa412a258df79f5a952fb50a5f1b9bad0541da4f6cea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/icons/member-type.stories.ts",
            "methods": [],
            "sourceCode": "import { moduleMetadata } from '@storybook/angular';\r\n/// import { ActivityGridComponent } from './activity-grid.component';\r\n// import { ActivityGridModule } from './activity-grid.module';\r\n// import {MOCK_GRID_ITEMS} from './_MOCK_GRID_ITEMS';\r\n// import { ClanWeeklyProgressComponent } from './clan-weekly-progress.component';\r\n// import { ClanWeeklyProgressModule } from './clan-weekly-progress.module';\r\n//import { MOCK_WEEKLY_PROGRESS } from './_MOCK_WEEKLY_PROGRESS';\r\nimport { StorybookModule } from '../storybook/storybook.module';\r\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from './register-icons';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { IconsModule } from './icons.module';\r\n\r\n@Component({\r\n  selector: 'lib-icons',\r\n  template: `\r\n    <lib-member-type [type]=\"1\"></lib-member-type>\r\n    <lib-member-type [type]=\"2\"></lib-member-type>\r\n    <lib-member-type [type]=\"3\"></lib-member-type>\r\n    <lib-member-type [type]=\"4\"></lib-member-type>\r\n  `\r\n})\r\nclass IconComponent {\r\n  constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n    registerIcons(iconRegistry, domSanitizer);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  exports: [IconComponent],\r\n  imports: [CommonModule, MatIconModule, HttpClientModule, IconsModule]\r\n})\r\nclass IconTestModule {}\r\n\r\nexport default {\r\n  title: 'Icons / Member Type',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [IconTestModule, StorybookModule]\r\n    })\r\n  ]\r\n};\r\n\r\nexport const base = () => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n});\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-78ece4c4f608af582ae37997f0b9cf5216b0736b3a72e492cb743473100c2ce801b480263be9eaf09522c7edac71dc374a6cc63dc3ab1b022e5ea20e903ad1c6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/core/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WrapperComponent } from './wrapper/wrapper.component';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [WrapperComponent],\r\n  imports: [CommonModule, RouterModule]\r\n})\r\nexport class LayoutModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-60b9d5686027222407128d51f5fc4a6a4f504da6af817b8e0ccffdb2269eb9d34657badbece1617cc540baaec76cecd78274ba06cfd01791d1515b557b56ac0a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n// import { DateAgoPipe } from './date-ago.pipe';\r\n// import { ClassTypeTextPipe } from './class-type/class-type-text.pipe';\r\n// import { RaceTypeTextPipe } from './race-type/race-type-text.pipe';\r\n// import { GenderTypeTextPipe } from './gender-type/gender-type-text.pipe';\r\n// import { RaidReportUrlPipe } from './raid-report-url/raid-report-url.pipe';\r\n// import { DestinyTrackerUrlPipe } from './destiny-tracker-url/destiny-tracker-url.pipe';\r\n// import { BungieProfileUrlPipe } from './bungie-profile-url/bungie-profile-url.pipe';\r\n// import { RaidReportProfileUrlPipe } from './raid-report-url/raid-report-profile-url.pipe';\r\n// import { PlaytimePipe, PlaytimeMillisecondsPipe } from './playtime/playtime.pipe';\r\n// import { DungeonReportUrlPipe } from './dungeon-report-url/dungeon-report-url.pipe';\r\n// import { DungeonReportProfileUrlPipe } from './dungeon-report-url/dungeon-report-profile-url.pipe';\r\nimport { BungieDatePipe } from './bungie-date/bungie-date.pipe';\r\nimport { BungieDateTimePipe } from './bungie-date/bungie-date-time.pipe';\r\nimport { MemberTypePipe } from './member-type/member-type.pipe';\r\n// import { SortByClassPipe } from './sortByClass/sort-by-class.pipe';\r\n// import { RaidCompletionTotalPipe } from './raid-completion-total/raid-completion-total.pipe';\r\n// import { MetricTotalPipe } from './metric-total/metric-total.pipe';\r\n// import { InCollectionsPipe } from './in-collections/in-collections.pipe';\r\n// import { InCollectionsTotalPipe } from './in-collections/in-collections-total.pipe';\r\n// import { D2ChecklistUrlPipe } from './d2-checklist-url/d2-checklist-url.pipe';\r\n// import { TriumphReportPipe } from './triumph-report/triumph-report.pipe';\r\n\r\nconst pipes = [\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n];\r\n\r\n@NgModule({\r\n  providers: [...pipes],\r\n  declarations: [...pipes],\r\n  exports: [...pipes],\r\n  imports: [CommonModule]\r\n})\r\nexport class PipesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BungieDatePipe"
                        },
                        {
                            "name": "BungieDateTimePipe"
                        },
                        {
                            "name": "MemberTypePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BungieDatePipe"
                        },
                        {
                            "name": "BungieDateTimePipe"
                        },
                        {
                            "name": "MemberTypePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RenderedViewModule",
            "id": "module-RenderedViewModule-40973cac22f4c243eddeb3850b7f29855894d00c21c0663dec111c61d1efc866fa71dc22b7186a1092e3069100e88d54bbebc59c5b04dbba639ec0948b575e85",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/rendered-view/rendered-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RenderedViewComponent } from './rendered-view.component';\r\nimport { RenderedViewDynamicCompDirective } from './rendered-view-component.directive';\r\n\r\n@NgModule({\r\n  declarations: [RenderedViewComponent, RenderedViewDynamicCompDirective],\r\n  exports: [RenderedViewComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class RenderedViewModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        },
                        {
                            "name": "RenderedViewDynamicCompDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RenderedViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RosterModule",
            "id": "module-RosterModule-664d80d93710cfdeea7126563ac398402ffc27f8b759bace2d10cf40bf3a1909a507bf7530dd08529eba949d2c4598d72eb7b3fbec5d247ee70e919ec0adecc4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/roster/roster.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RosterComponent } from './roster.component';\r\nimport { RosterRoutingModule } from './roster-routing.module';\r\nimport { ClansRosterModule } from '@features/clans-roster';\r\n\r\n@NgModule({\r\n  declarations: [RosterComponent],\r\n  imports: [CommonModule, RosterRoutingModule, ClansRosterModule]\r\n})\r\nexport class RosterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RosterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClansRosterModule"
                        },
                        {
                            "name": "RosterRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RosterRoutingModule",
            "id": "module-RosterRoutingModule-6ef324c894c2bf606e9f8184eed1171c67c483b9436864da8ba294baf4a9cf266a48bbb229d08e950453f5549451782e61a840a06ecd5f120badcb2535d71038",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/clan-dashboard/src/app/views/roster/roster-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RosterComponent } from './roster.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RosterComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RosterRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-b422cf796ba298eca6e3c9fd6243af1ad1cf9380a8f23bb80bce0c40fc25725d4891162d3cd674a1bd71c6548fbfdd200d034853c398813fa0ebf57847a0f5f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookModule",
            "id": "module-StorybookModule-a722b52f5c0ee0f0c71251a61a0a3d843fbfeee5b90202d74ddc7c980c544a8cafc5ded7dd566ff1f37c31a294afc16234f8ddb968c8d0fd4563f83938eccf73",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/components/src/lib/storybook/storybook.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { StorybookService } from './storybook.service';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { registerIcons } from '../icons/register-icons';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    providers: [],\r\n    imports: [CommonModule, BrowserAnimationsModule, HttpClientModule]\r\n})\r\nexport class StorybookModule {\r\n    constructor(iconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\r\n        registerIcons(iconRegistry, domSanitizer);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string }>())"
            },
            {
                "name": "AND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' AND '"
            },
            {
                "name": "APP_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'D2DASH-'"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/member-type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n})"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Clans] - '"
            },
            {
                "name": "base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[Manifest] - '"
            },
            {
                "name": "baseConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  PROFILE_UPDATING_EXP_MINUTES: 180\r\n}"
            },
            {
                "name": "Children",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CLAN_LEVEL_HASH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/hashes/clan-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'584850370'"
            },
            {
                "name": "CLAN_ROSTER_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
            },
            {
                "name": "CLAN_ROSTER_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<ClanMemberProfile>>([\r\n//   [\r\n//     'id',\r\n//     {\r\n//       label: 'ID',\r\n//       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n//     }\r\n//   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) => (a.member.destinyUserInfo.displayName.toLowerCase() < b.member.destinyUserInfo.displayName.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n ])"
            },
            {
                "name": "CLAN_ROSTER_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      render: (item: ClanMemberProfile) => ({\r\n        //        styles: {},\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member.destinyUserInfo.membershipType }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member.destinyUserInfo.displayName}` })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member.bungieNetUserInfo?.displayName}` })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      render: (item: ClanMemberProfile) => ({ text: `TODO` })\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
            },
            {
                "name": "ClanConfigAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ClanConfig>",
                "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
            },
            {
                "name": "CLANS_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'clans'"
            },
            {
                "name": "ClansReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      //const newClangConfig = {}\r\n      return ClanConfigAdapter.upsertOne({ clanId, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n  //  on(updateClanProfileSync, (state, {}): ClanState => {\r\n\r\n  // }),\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
            },
            {
                "name": "Components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "coreEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ManifestEffects, ClansEffects]"
            },
            {
                "name": "coreReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer\r\n}"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "DEFAULT_TOKENIZE_ITEM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  }",
                "rawdescription": "Default and naive tokenize function that combines the item's property values into a string.",
                "description": "<p>Default and naive tokenize function that combines the item&#39;s property values into a string.</p>\n"
            },
            {
                "name": "DefaultClanConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClanConfig",
                "defaultValue": "{\r\n  enabled: true\r\n} as ClanConfig"
            },
            {
                "name": "envConfigFile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "set-env.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`export const secretKeys = {\r\n  apiKey: '${process.env.API_KEY}',\r\n};\r\n`"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
            },
            {
                "name": "EXAMPLE_EXPORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ExporterMetadata<MockListItem>>([\r\n  ['id', { label: 'Id', text: (item) => item.id.toString() }],\r\n  ['startDate', { label: 'Start Date', text: (item) => new Date(item.startDate).toDateString() }]\r\n])"
            },
            {
                "name": "EXAMPLE_FILTERER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, FiltererMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      type:'number',\r\n      matcher:(item, filter) => numberMatchesEquality(item.id, filter.value, filter.equality)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "EXAMPLE_GROUPER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, GrouperMetadata<MockListItem>>([\r\n  [\r\n    'all',\r\n    {\r\n      label: 'All',\r\n      groupingFunction: (items) => {\r\n        return [{ id: 'all', title: 'All', items }];\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'isPublic', {\r\n      label: 'IsPublic',\r\n      groupingFunction: items => getGroupByValue(items, 'isPublic'),\r\n    }\r\n  ],\r\n])"
            },
            {
                "name": "EXAMPLE_SORTER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, SorterMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Name',\r\n      comparator: (a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
            },
            {
                "name": "EXAMPLE_VIEWER_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, ViewerMetadata<MockListItem>>([\r\n  ['id', { label: 'id', render: (item) => ({ styles: { fontWeight: 'bold' }, text: `${item.id}` }) }],\r\n  ['isPublic', { label: 'Is Public', render: (item) => ({ text: `${item.isPublic}` }) }],\r\n  ['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  ['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
            },
            {
                "name": "fs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "set-env.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "name": "initialClanState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ClansState",
                "defaultValue": "ClanConfigAdapter.getInitialState({})"
            },
            {
                "name": "initialManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ManifestState",
                "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
            },
            {
                "name": "LANG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'en-us'"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('load'))"
            },
            {
                "name": "loadManifestComplete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('complete'))"
            },
            {
                "name": "loadManifestFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MANIFEST_PATH_EXP_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
            },
            {
                "name": "MANIFEST_PATH_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'MANIFEST_PATH_KEY'"
            },
            {
                "name": "ManifestReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[initStateFromLocalStorage]"
            },
            {
                "name": "MOCK_LIST_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockListItem[]",
                "defaultValue": "names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n})"
            },
            {
                "name": "MockConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppConfig",
                "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "name",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sr) => `${base}${sr}`"
            },
            {
                "name": "names",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
            },
            {
                "name": "OR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' OR '"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "packageJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../../../../package.json')"
            },
            {
                "name": "pipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/pipes/pipes.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "registerIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/register-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(registry: MatIconRegistry, domSanitizer: DomSanitizer) => {\r\n    Object.keys(svgIcons).map(name => {\r\n        const path = svgIcons[name];\r\n        registry.addSvgIcon(name, domSanitizer.bypassSecurityTrustResourceUrl(path));\r\n    });\r\n    console.log('registering icons', registry.getNamedSvgIcon('twitch'));\r\n}"
            },
            {
                "name": "removeClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secretKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/environments/secrets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
            },
            {
                "name": "selectClansState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ClansState>('clans')"
            },
            {
                "name": "selectEnabledClanIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
            },
            {
                "name": "selectEnabledClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
            },
            {
                "name": "selectLastProfileUpdate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
            },
            {
                "name": "selectManifest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
            },
            {
                "name": "selectManifestError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
            },
            {
                "name": "selectManifestLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
            },
            {
                "name": "selectManifestLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
            },
            {
                "name": "selectManifestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
            },
            {
                "name": "setClans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "STATUS_DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'done'"
            },
            {
                "name": "STATUS_EXTRACTING_TABLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'extracting tables'"
            },
            {
                "name": "STATUS_UNZIPPING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'unzipping'"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "['allData']"
            },
            {
                "name": "STORE_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoreId[]",
                "defaultValue": "[\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n]"
            },
            {
                "name": "svgIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/icons/register-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    titan: '/assets/icons/titan.svg',\r\n    hunter: '/assets/icons/hunter.svg',\r\n    warlock: '/assets/icons/warlock.svg',\r\n    steam: '/assets/icons/steam.svg',\r\n    stadia: '/assets/icons/stadia.svg',\r\n    playstation: '/assets/icons/playstation.svg',\r\n    xbox: '/assets/icons/xbox.svg',\r\n    twitch: '/assets/icons/twitch-purp.svg',\r\n}"
            },
            {
                "name": "targetPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "set-env.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'./projects/clan-dashboard/src/environments/secrets.ts'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DisplayOptionsComponent>",
                "defaultValue": "(args: DisplayOptionsComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RenderedViewComponent>",
                "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableViewComponent>",
                "defaultValue": "(args: TableViewComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "updateClan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
            },
            {
                "name": "updateClanProfileSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
            },
            {
                "name": "VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'v1'"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
            }
        ],
        "functions": [
            {
                "name": "addDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "days",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clanDetailSerializer",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClanDetails",
                "jsdoctags": [
                    {
                        "name": "group",
                        "type": "GroupsV2GroupV2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertArrayOfObjectsToCSV",
                "file": "projects/components/src/lib/data/exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "DateEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterDateStr",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "DateEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateToUnixTimeStamp",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "downloadCSV",
                "file": "projects/components/src/lib/data/exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stockData",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterItems",
                "file": "projects/components/src/lib/data/filterer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function to filter the items. May be used to synchronously filter items.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "context",
                        "type": "M",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metadata",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "M",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metadata",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBungieStartDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCharacterProgressions",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDateArray",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stopDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDayOfWeek",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dayIndex",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFirstDayOfMonth",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupByListValues",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that creates a group based on the list of values of the item&#39;s property.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupByValue",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that creates a group based on the value of the item&#39;s property.</p>\n",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGroupsFromMap",
                "file": "projects/components/src/lib/data/grouper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Utility function that transforms a map of groups into a list.</p>\n",
                "args": [
                    {
                        "name": "groupsMap",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Group[]",
                "jsdoctags": [
                    {
                        "name": "groupsMap",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileItems",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProfileRecords",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecordHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getProgressionValues",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prog",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initStateFromLocalStorage",
                "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<AppState>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isValidDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "d",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusDays",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "days",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusMinutes",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "minutes",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nowPlusWeeks",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "weeks",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "numberMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "NumberEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterNumber",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "NumberEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "playtime",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showSeconds",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileSerializer",
                "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "p",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "collectionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRecords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "searchItems",
                "file": "projects/components/src/lib/data/filterer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenizeItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenizeItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "serializeProgression",
                "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "clanInfo",
                        "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "progressionHashes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortItems",
                "file": "projects/components/src/lib/data/sorter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "comparator",
                        "type": "SortComparator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reverse",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "C",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "items",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "comparator",
                        "type": "SortComparator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reverse",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "C",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stateMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputState",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "StateEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputState",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "StateEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textArrayMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textMatchesEquality",
                "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "inputValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "inputValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equality",
                        "type": "TextEquality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unixTimeStampToDate",
                "file": "projects/data/src/lib/utility/date-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "uts",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DateEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"before\" | \"after\" | \"on\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DeepPartial",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/models/DeepPartial.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextFilter | NumberFilter | DateFilter | StateFilter",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FiltererContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<M>",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FiltererMetadata",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextFiltererMetadata<T | C> | NumberFiltererMetadata<T | C> | DateFiltererMetadata<T | C> | StateFiltererMetadata<T | C>",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FilterType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"number\" | \"date\" | \"state\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "NumberEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"greaterThan\" | \"lessThan\" | \"equalTo\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RenderedView",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent",
                "file": "projects/components/src/lib/data/viewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SortComparator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/data/sorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "SorterContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/sorter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "StateEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"is\" | \"notIs\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "StoreId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/data/src/lib/db/app-indexed-db.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "TextEquality",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contains\" | \"is\" | \"notContains\" | \"notIs\"",
                "file": "projects/components/src/lib/data/filterer-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TextFilterAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/data/filterer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ViewerContextProvider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Observable<C>",
                "file": "projects/components/src/lib/data/viewer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "MembershipTypes",
                "childs": [
                    {
                        "name": "Xbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Psn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Steam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "Blizzard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "Stadia",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "Demon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/models/enums/MembershipTypes.ts"
            },
            {
                "name": "StoreId",
                "childs": [
                    {
                        "name": "CacheDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CacheDetails"
                    },
                    {
                        "name": "ClanDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanDetails"
                    },
                    {
                        "name": "ClanRewards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ClanRewards"
                    },
                    {
                        "name": "MemberProfiles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberProfiles"
                    },
                    {
                        "name": "MemberActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivities"
                    },
                    {
                        "name": "MemberActivityStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberActivityStats"
                    },
                    {
                        "name": "MemberRecentActivities",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MemberRecentActivities"
                    },
                    {
                        "name": "ProfileMilestones",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ProfileMilestones"
                    },
                    {
                        "name": "ProfileMetrics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ProfileMetrics"
                    },
                    {
                        "name": "Raids",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Raids"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/data/src/lib/db/clan-indexed-db.ts"
            }
        ],
        "groupedVariables": {
            "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts": [
                {
                    "name": "addClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Add Clan'), props<{ clanId: string }>())"
                },
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Clans] - '"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                },
                {
                    "name": "removeClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Remove Clan'), props<{ clanId: string }>())"
                },
                {
                    "name": "setClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Set Clans'), props<{ clanIds: ClanConfig[] }>())"
                },
                {
                    "name": "updateClan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan'), props<{ clan: ClanConfig }>())"
                },
                {
                    "name": "updateClanProfileSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('Update Clan Sync'), props<{ clanId: string }>())"
                }
            ],
            "projects/components/src/lib/data/utility/filter-matcher.ts": [
                {
                    "name": "AND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' AND '"
                },
                {
                    "name": "OR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' OR '"
                }
            ],
            "projects/clan-dashboard/src/app/core/services/local-storage.service.ts": [
                {
                    "name": "APP_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'D2DASH-'"
                }
            ],
            "projects/components/src/lib/icons/member-type.stories.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/member-type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: IconComponent,\r\n  template: `\r\n    <lib-icons></lib-icons>\r\n   `,\r\n  props: {}\r\n})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts": [
                {
                    "name": "base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[Manifest] - '"
                },
                {
                    "name": "loadManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('load'))"
                },
                {
                    "name": "loadManifestComplete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('complete'))"
                },
                {
                    "name": "loadManifestFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(name('failure'), props<{ error: any }>())"
                },
                {
                    "name": "name",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sr) => `${base}${sr}`"
                }
            ],
            "projects/clan-dashboard/src/environments/constants.ts": [
                {
                    "name": "baseConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  PROFILE_UPDATING_EXP_MINUTES: 180\r\n}"
                }
            ],
            "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts": [
                {
                    "name": "Children",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RenderedViewComponent>",
                    "defaultValue": "(args: RenderedViewComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/data/src/lib/hashes/clan-details.ts": [
                {
                    "name": "CLAN_LEVEL_HASH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/hashes/clan-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'584850370'"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterFilterer.ts": [
                {
                    "name": "CLAN_ROSTER_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<ClanMemberProfile>>([\r\n  // [\r\n  //   'destinyDisplayName',\r\n  //   {\r\n  //     label: 'Destiny Display Name',\r\n  //     type: 'text',\r\n  //     matcher: (item, filter) =>\r\n  //       textMatchesEquality(item.member.destinyUserInfo.displayName, filter.value, filter.equality)\r\n  //   }\r\n  // ]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterSorter.ts": [
                {
                    "name": "CLAN_ROSTER_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<ClanMemberProfile>>([\r\n//   [\r\n//     'id',\r\n//     {\r\n//       label: 'ID',\r\n//       comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n//     }\r\n//   ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      comparator: (a, b) => (a.member.destinyUserInfo.displayName.toLowerCase() < b.member.destinyUserInfo.displayName.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n ])"
                }
            ],
            "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts": [
                {
                    "name": "CLAN_ROSTER_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<ClanMemberProfile, ViewContext>>([\r\n  [\r\n    'platform',\r\n    {\r\n      label: 'Platform',\r\n      render: (item: ClanMemberProfile) => ({\r\n        //        styles: {},\r\n        component: MemberTypeComponent,\r\n        data: { type: item.member.destinyUserInfo.membershipType }\r\n        //text: `${item.member.destinyUserInfo.membershipType}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'destinyDisplayName',\r\n    {\r\n      label: 'Destiny Display Name',\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member.destinyUserInfo.displayName}` })\r\n    }\r\n  ],\r\n  [\r\n    'bungieDisplayName',\r\n    {\r\n      label: 'Bungie Display Name',\r\n      render: (item: ClanMemberProfile) => ({ text: `${item.member.bungieNetUserInfo?.displayName}` })\r\n    }\r\n  ],\r\n  [\r\n    'characters',\r\n    {\r\n      label: 'Characters',\r\n      render: (item: ClanMemberProfile) => ({ text: `TODO` })\r\n    }\r\n  ],\r\n  [\r\n    'powerLevel',\r\n    {\r\n      label: '+',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileProgression?.data?.seasonalArtifact?.powerBonus}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'activeTriumph',\r\n    {\r\n      label: 'Active Triumph',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.activeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'lifetimeTriumph',\r\n    {\r\n      label: 'Lifetime Triumph',\r\n      render: (item: ClanMemberProfile) => ({\r\n        text: `${item.profile?.profileRecords?.data?.lifetimeScore}`\r\n      })\r\n    }\r\n  ],\r\n  [\r\n    'clanJoinDate',\r\n    {\r\n      label: 'Clan Join Date',\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.datePipe.transform(item.member?.joinDate as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'dateLastPlayed',\r\n    {\r\n      label: 'Last Played',\r\n      render: (item: ClanMemberProfile, context: ViewContext) => {\r\n        return {\r\n          text: `${context.dateTimePipe.transform(item.profile?.profile.data.dateLastPlayed as unknown as Date)}`\r\n        };\r\n      }\r\n    }\r\n  ]\r\n\r\n  //['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  //['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
                },
                {
                    "name": "LANG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'en-us'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts": [
                {
                    "name": "ClanConfigAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ClanConfig>",
                    "defaultValue": "createEntityAdapter<ClanConfig>({\r\n  selectId: (cc: ClanConfig) => cc.clanId,\r\n  sortComparer: false\r\n})"
                },
                {
                    "name": "DefaultClanConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClanConfig",
                    "defaultValue": "{\r\n  enabled: true\r\n} as ClanConfig"
                },
                {
                    "name": "initialClanState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClansState",
                    "defaultValue": "ClanConfigAdapter.getInitialState({})"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts": [
                {
                    "name": "CLANS_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'clans'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts": [
                {
                    "name": "ClansReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialClanState,\r\n  on(addClan, (state, { clanId }) => {\r\n    const clans = state.ids.map((c) => c);\r\n\r\n    if (clans.indexOf(clanId) === -1) {\r\n      //const newClangConfig = {}\r\n      return ClanConfigAdapter.upsertOne({ clanId, ...DefaultClanConfig }, { ...state });\r\n    }\r\n\r\n    return {\r\n      ...state\r\n    };\r\n  }),\r\n  //  on(updateClanProfileSync, (state, {}): ClanState => {\r\n\r\n  // }),\r\n  on(updateClan, (state, { clan }): ClansState => {\r\n    return ClanConfigAdapter.upsertOne(clan, { ...state });\r\n  }),\r\n  on(removeClan, (state, { clanId }): ClansState => {\r\n    return ClanConfigAdapter.removeOne(clanId, { ...state });\r\n  }),\r\n  on(setClans, (state, { clanIds }): ClansState => ClanConfigAdapter.setAll(clanIds, { ...state }))\r\n)"
                }
            ],
            "projects/clan-dashboard/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/data/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/clan-dashboard/src/app/core/core.state.ts": [
                {
                    "name": "coreEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ManifestEffects, ClansEffects]"
                },
                {
                    "name": "coreReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  manifest: ManifestReducer,\r\n  clans: ClansReducer\r\n}"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/core.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[initStateFromLocalStorage]"
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "['allData']"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                },
                {
                    "name": "STORE_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoreId[]",
                    "defaultValue": "[\r\n  StoreId.CacheDetails,\r\n  StoreId.ClanDetails,\r\n  StoreId.ClanRewards,\r\n  StoreId.MemberProfiles,\r\n  StoreId.MemberActivities,\r\n  StoreId.MemberRecentActivities,\r\n  StoreId.ProfileMilestones,\r\n  StoreId.MemberActivityStats,\r\n  StoreId.ProfileMetrics,\r\n  StoreId.Raids\r\n]"
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "DEFAULT_TOKENIZE_ITEM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: any) => {\r\n    return Object.keys(data)\r\n      .reduce(\r\n        (currentTerm: string, key: string) => {\r\n          return currentTerm + (data as {[key: string]: any})[key] + '☺';\r\n        },\r\n        '')\r\n      .toLowerCase();\r\n  }",
                    "rawdescription": "Default and naive tokenize function that combines the item's property values into a string.",
                    "description": "<p>Default and naive tokenize function that combines the item&#39;s property values into a string.</p>\n"
                }
            ],
            "set-env.ts": [
                {
                    "name": "envConfigFile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "set-env.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`export const secretKeys = {\r\n  apiKey: '${process.env.API_KEY}',\r\n};\r\n`"
                },
                {
                    "name": "fs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "set-env.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "name": "targetPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "set-env.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'./projects/clan-dashboard/src/environments/secrets.ts'"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: { ...baseConstants },\r\n  production: true,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/clan-dashboard/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  constants: {...baseConstants},\r\n  production: false,\r\n  apiKey: secretKeys.apiKey,\r\n  appVersion: packageJson.version\r\n}"
                },
                {
                    "name": "packageJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../../../../package.json')"
                }
            ],
            "projects/components/src/lib/__mocks__/ListViewExporter.ts": [
                {
                    "name": "EXAMPLE_EXPORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ExporterMetadata<MockListItem>>([\r\n  ['id', { label: 'Id', text: (item) => item.id.toString() }],\r\n  ['startDate', { label: 'Start Date', text: (item) => new Date(item.startDate).toDateString() }]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemFilterer.ts": [
                {
                    "name": "EXAMPLE_FILTERER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, FiltererMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      type:'number',\r\n      matcher:(item, filter) => numberMatchesEquality(item.id, filter.value, filter.equality)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemGrouper.ts": [
                {
                    "name": "EXAMPLE_GROUPER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, GrouperMetadata<MockListItem>>([\r\n  [\r\n    'all',\r\n    {\r\n      label: 'All',\r\n      groupingFunction: (items) => {\r\n        return [{ id: 'all', title: 'All', items }];\r\n      }\r\n    }\r\n  ],\r\n  [\r\n    'isPublic', {\r\n      label: 'IsPublic',\r\n      groupingFunction: items => getGroupByValue(items, 'isPublic'),\r\n    }\r\n  ],\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemSorter.ts": [
                {
                    "name": "EXAMPLE_SORTER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, SorterMetadata<MockListItem>>([\r\n  [\r\n    'id',\r\n    {\r\n      label: 'ID',\r\n      comparator: (a, b) => (a.id < b.id ? -1 : 1)\r\n    }\r\n  ],\r\n  [\r\n    'name',\r\n    {\r\n      label: 'Name',\r\n      comparator: (a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1)\r\n    }\r\n  ]\r\n])"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItemViewer.ts": [
                {
                    "name": "EXAMPLE_VIEWER_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, ViewerMetadata<MockListItem>>([\r\n  ['id', { label: 'id', render: (item) => ({ styles: { fontWeight: 'bold' }, text: `${item.id}` }) }],\r\n  ['isPublic', { label: 'Is Public', render: (item) => ({ text: `${item.isPublic}` }) }],\r\n  ['name', { label: 'Name', render: (item) => ({ text: `${item.name}` }) }],\r\n  ['startDate', { label: 'Start Date', render: (item) => ({ text: `${new Date(item.startDate).toDateString()}` }) }]\r\n])"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts": [
                {
                    "name": "initialManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ManifestState",
                    "defaultValue": "{\r\n  loading: false,\r\n  loaded: false,\r\n  error: null,\r\n  isApiDown: false\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/data/src/lib/manifest/manifest-loader.service.ts": [
                {
                    "name": "MANIFEST_PATH_EXP_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_EXP_KEY'"
                },
                {
                    "name": "MANIFEST_PATH_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'MANIFEST_PATH_KEY'"
                },
                {
                    "name": "STATUS_DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'done'"
                },
                {
                    "name": "STATUS_EXTRACTING_TABLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'extracting tables'"
                },
                {
                    "name": "STATUS_UNZIPPING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'unzipping'"
                },
                {
                    "name": "VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'v1'"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts": [
                {
                    "name": "ManifestReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialManifestState,\r\n  on(\r\n    loadManifest,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: true\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestComplete,\r\n    (state): ManifestState => ({\r\n      ...state,\r\n      loaded: true,\r\n      loading: false\r\n    })\r\n  ),\r\n  on(\r\n    loadManifestFailure,\r\n    (state, { error }): ManifestState => ({\r\n      ...state,\r\n      loaded: false,\r\n      loading: false,\r\n      error\r\n    })\r\n  )\r\n)"
                }
            ],
            "projects/components/src/lib/__mocks__/ListItems.ts": [
                {
                    "name": "MOCK_LIST_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockListItem[]",
                    "defaultValue": "names.map((name, index) => {\r\n  return {\r\n    id: index,\r\n    isPublic: true,\r\n    name: name,\r\n    startDate: new Date().toString()\r\n  };\r\n})"
                },
                {
                    "name": "names",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/__mocks__/ListItems.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'Sweeney Herring',\r\n  'Jacquelyn Malone',\r\n  'Wheeler Figueroa',\r\n  'Phillips Mill',\r\n  'Buchanan Cole',\r\n  'Saundra Fitzpatrick',\r\n  'Clara Campos',\r\n  'James Barr',\r\n  'Veronica Pitts',\r\n  'Veronica Pitt3'\r\n]"
                }
            ],
            "projects/clan-dashboard/src/app/core/config/app-config.mock.ts": [
                {
                    "name": "MockConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppConfig",
                    "defaultValue": "{\r\n  apiKey: '',\r\n  appVersion: '',\r\n  constants: {\r\n    PROFILE_UPDATING_EXP_MINUTES: 10\r\n  }\r\n}"
                }
            ],
            "projects/components/src/lib/pipes/pipes.module.ts": [
                {
                    "name": "pipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/pipes/pipes.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // DateAgoPipe,\r\n  // ClassTypeTextPipe,\r\n  // RaceTypeTextPipe,\r\n  // GenderTypeTextPipe,\r\n  // RaidReportUrlPipe,\r\n  // DestinyTrackerUrlPipe,\r\n  // BungieProfileUrlPipe,\r\n  // RaidReportProfileUrlPipe,\r\n  // PlaytiePipe,\r\n  // PlaytimeMillisecondsPipe,\r\n  // DungeonReportUrlPipe,\r\n  // DungeonReportProfileUrlPipe,\r\n  BungieDatePipe,\r\n  BungieDateTimePipe,\r\n  MemberTypePipe\r\n  // SortByClassPipe,\r\n  // RaidCompletionTotalPipe,\r\n  // MetricTotalPipe,\r\n  // InCollectionsPipe,\r\n  // InCollectionsTotalPipe,\r\n  // D2ChecklistUrlPipe,\r\n  // TriumphReportPipe\r\n]"
                }
            ],
            "projects/components/src/lib/shared/display-options/display-options.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DisplayOptionsComponent>",
                    "defaultValue": "(args: DisplayOptionsComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/components/src/lib/shared/table-view/table-view.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableViewComponent>",
                    "defaultValue": "(args: TableViewComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "projects/components/src/lib/icons/register-icons.ts": [
                {
                    "name": "registerIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/register-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(registry: MatIconRegistry, domSanitizer: DomSanitizer) => {\r\n    Object.keys(svgIcons).map(name => {\r\n        const path = svgIcons[name];\r\n        registry.addSvgIcon(name, domSanitizer.bypassSecurityTrustResourceUrl(path));\r\n    });\r\n    console.log('registering icons', registry.getNamedSvgIcon('twitch'));\r\n}"
                },
                {
                    "name": "svgIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/icons/register-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    titan: '/assets/icons/titan.svg',\r\n    hunter: '/assets/icons/hunter.svg',\r\n    warlock: '/assets/icons/warlock.svg',\r\n    steam: '/assets/icons/steam.svg',\r\n    stadia: '/assets/icons/stadia.svg',\r\n    playstation: '/assets/icons/playstation.svg',\r\n    xbox: '/assets/icons/xbox.svg',\r\n    twitch: '/assets/icons/twitch-purp.svg',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/environments/secrets.ts": [
                {
                    "name": "secretKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/environments/secrets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiKey: 'ebe6e29e62be48f98959ebd0a90974ef',\r\n}"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts": [
                {
                    "name": "selectClansState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ClansState>('clans')"
                },
                {
                    "name": "selectEnabledClanIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) =>\r\n  state.filter((c) => c.enabled === true).map((x) => x.clanId)\r\n)"
                },
                {
                    "name": "selectEnabledClans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectAllClans, (state) => state.filter((c) => c.enabled === true))"
                },
                {
                    "name": "selectLastProfileUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(clanId: string) =>\r\n  createSelector(selectAllClanEntities, (state) => {\r\n    return (clanId && state[clanId]?.profileUpdate) || '';\r\n  })"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ClanConfigAdapter.getSelectors(selectClansState)"
                }
            ],
            "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts": [
                {
                    "name": "selectManifest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifestState, (state: ManifestState) => state)"
                },
                {
                    "name": "selectManifestError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.error)"
                },
                {
                    "name": "selectManifestLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loaded)"
                },
                {
                    "name": "selectManifestLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectManifest, (state: ManifestState) => state.loading)"
                },
                {
                    "name": "selectManifestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ManifestState>('manifest')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/data/src/lib/utility/date-utils.ts": [
                {
                    "name": "addDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateToUnixTimeStamp",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBungieStartDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateArray",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stopDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayOfWeek",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dayIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstDayOfMonth",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusDays",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "days",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusMinutes",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nowPlusWeeks",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "weeks",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "playtime",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showSeconds",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unixTimeStampToDate",
                    "file": "projects/data/src/lib/utility/date-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "uts",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts": [
                {
                    "name": "clanDetailSerializer",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClanDetails",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "GroupsV2GroupV2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeProgression",
                    "file": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "clanInfo",
                            "type": "GroupsV2GroupV2ClanInfoAndInvestment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/exporter.ts": [
                {
                    "name": "convertArrayOfObjectsToCSV",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadCSV",
                    "file": "projects/components/src/lib/data/exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stockData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/utility/filter-matcher.ts": [
                {
                    "name": "dateMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "DateEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterDateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "DateEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numberMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "NumberEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "NumberEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stateMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "StateEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "StateEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textArrayMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textMatchesEquality",
                    "file": "projects/components/src/lib/data/utility/filter-matcher.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equality",
                            "type": "TextEquality",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "filterItems",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function to filter the items. May be used to synchronously filter items.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "context",
                            "type": "M",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metadata",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "M",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metadata",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchItems",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tokenizeItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokenizeItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/data/src/lib/clan/profiles/profile.serializer.ts": [
                {
                    "name": "getCharacterProgressions",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileItems",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileRecords",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecordHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgressionValues",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prog",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "profileSerializer",
                    "file": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "progressionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionHashes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profileRecords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/grouper.ts": [
                {
                    "name": "getGroupByListValues",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that creates a group based on the list of values of the item&#39;s property.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupByValue",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that creates a group based on the value of the item&#39;s property.</p>\n",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupsFromMap",
                    "file": "projects/components/src/lib/data/grouper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Utility function that transforms a map of groups into a list.</p>\n",
                    "args": [
                        {
                            "name": "groupsMap",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Group[]",
                    "jsdoctags": [
                        {
                            "name": "groupsMap",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts": [
                {
                    "name": "initStateFromLocalStorage",
                    "file": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<AppState>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/components/src/lib/data/sorter.ts": [
                {
                    "name": "sortItems",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparator",
                            "type": "SortComparator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "C",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparator",
                            "type": "SortComparator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "C",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/data/src/lib/models/enums/MembershipTypes.ts": [
                {
                    "name": "MembershipTypes",
                    "childs": [
                        {
                            "name": "Xbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Psn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Steam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "Blizzard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "Stadia",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "Demon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/models/enums/MembershipTypes.ts"
                }
            ],
            "projects/data/src/lib/db/clan-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "childs": [
                        {
                            "name": "CacheDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CacheDetails"
                        },
                        {
                            "name": "ClanDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanDetails"
                        },
                        {
                            "name": "ClanRewards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ClanRewards"
                        },
                        {
                            "name": "MemberProfiles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberProfiles"
                        },
                        {
                            "name": "MemberActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivities"
                        },
                        {
                            "name": "MemberActivityStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberActivityStats"
                        },
                        {
                            "name": "MemberRecentActivities",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MemberRecentActivities"
                        },
                        {
                            "name": "ProfileMilestones",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ProfileMilestones"
                        },
                        {
                            "name": "ProfileMetrics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ProfileMetrics"
                        },
                        {
                            "name": "Raids",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Raids"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/data/src/lib/db/clan-indexed-db.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/components/src/lib/data/filterer-types.ts": [
                {
                    "name": "DateEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"before\" | \"after\" | \"on\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextFilter | NumberFilter | DateFilter | StateFilter",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "FilterType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"number\" | \"date\" | \"state\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "NumberEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"greaterThan\" | \"lessThan\" | \"equalTo\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "StateEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"is\" | \"notIs\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TextEquality",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contains\" | \"is\" | \"notContains\" | \"notIs\"",
                    "file": "projects/components/src/lib/data/filterer-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/data/src/lib/models/DeepPartial.ts": [
                {
                    "name": "DeepPartial",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/models/DeepPartial.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "projects/components/src/lib/data/filterer.ts": [
                {
                    "name": "FiltererContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<M>",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FiltererMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextFiltererMetadata<T | C> | NumberFiltererMetadata<T | C> | DateFiltererMetadata<T | C> | StateFiltererMetadata<T | C>",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TextFilterAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/data/filterer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "projects/components/src/lib/data/viewer.ts": [
                {
                    "name": "RenderedView",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "RenderedViewWithText | RenderedViewWithChildren | RenderedWithComponent",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ViewerContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/viewer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/components/src/lib/data/sorter.ts": [
                {
                    "name": "SortComparator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "SorterContextProvider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Observable<C>",
                    "file": "projects/components/src/lib/data/sorter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/data/src/lib/db/app-indexed-db.ts": [
                {
                    "name": "StoreId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/data/src/lib/db/app-indexed-db.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/clan-dashboard/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivate": [
                            "ClanResolveGuard"
                        ],
                        "component": "WrapperComponent",
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./views/dashboard/dashboard.module#DashboardModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/views/dashboard/dashboard-routing.module.ts",
                                                "module": "DashboardRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "DashboardComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "DashboardModule"
                                    }
                                ]
                            },
                            {
                                "path": "roster",
                                "loadChildren": "./views/roster/roster.module#RosterModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "projects/clan-dashboard/src/app/views/roster/roster-routing.module.ts",
                                                "module": "RosterRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "RosterComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "RosterModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "clan-search",
                        "loadChildren": "./views/clan-search/clan-search.module#ClanSearchModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/clan-dashboard/src/app/views/clan-search/clan-search-routing.module.ts",
                                        "module": "ClanSearchRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ClanSearchComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ClanSearchModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/clan-dashboard/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/config/app-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/core.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/activity-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/activity-mode-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityModeDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/base-definition.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/milestone-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MilestoneDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/definition-services/presentation-node-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PresentationNodeDefinitionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/guards/clan.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ClanResolveGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/interceptors/apikey.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ApiKeyInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/layout/wrapper/wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanUpdaterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/clan-updater.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfigMembers",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/local-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APP_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/services/manifest.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateClanProfileSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLANS_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClansReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClanIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEnabledClans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLastProfileUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClansState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClanConfigAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultClanConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/clans/clans.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialClanState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestComplete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadManifestFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "name",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ManifestReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/manifest/manifest.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialManifestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/core/store/meta-reducers/init-state-from-local-storage.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initStateFromLocalStorage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-details/clans-details.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_ROSTER_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clan-roster-metadata/ClanRosterViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClansRosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RosterResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClansRosterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/features/clans-roster/clans-roster.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/clan-search/clan-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClanSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/views/roster/roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileWorkerServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/app/workers/profile-worker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "packageJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/environments/secrets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secretKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/clan-dashboard/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemFilterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_FILTERER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemGrouper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_GROUPER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemSorter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_SORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItemViewer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_VIEWER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockListItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_LIST_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListItems.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "names",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/__mocks__/ListViewExporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_EXPORTER_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DataSource",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/data-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Exporter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExporterMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExporterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertArrayOfObjectsToCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/exporter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "downloadCSV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Filterer",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltererOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FiltererState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextFiltererMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterItems",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "searchItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/filterer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TOKENIZE_ITEM",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Grouper",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GrouperState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupByListValues",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupByValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/grouper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGroupsFromMap",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sorter",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SorterState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/sorter.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "numberMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stateMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "textArrayMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "textMatchesEquality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/utility/filter-matcher.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Viewer",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedViewWithChildren",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedViewWithText",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RenderedWithComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewerState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/data/viewer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/member-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/register-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/icons/register-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "svgIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-date/bungie-date-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDateTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/bungie-date/bungie-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BungieDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/member-type/member-type.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MemberTypePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/pipes/pipes.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisplayOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/display-options/display-options.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view-component.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RenderedViewDynamicCompDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderedViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Children",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/rendered-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/rendered-view/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TablePage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/shared/table-view/table-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/storybook/storybook.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorybookService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/base-clan.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseClanService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-database.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanDatabase",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clanDetailSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-detail-serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "serializeProgression",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-details/clan-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMembersServiceInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClanMembersServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/clan-members/clan-members.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClanMembersService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCharacterProgressions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProfileRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getProgressionValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.serializer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/clan/profiles/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/app-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/base-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppIndexedDb",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DBObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/db/clan-indexed-db.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/hashes/clan-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLAN_LEVEL_HASH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-database.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestDatabaseService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManifestLoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CachedManifest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_EXP_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANIFEST_PATH_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_EXTRACTING_TABLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS_UNZIPPING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/manifest/manifest-loader.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanDetails",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanDetails.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanProgression",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClanMember",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupsV2GroupUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/ClanMember.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserUserInfoCard",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/models/MemberProfile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberProfile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateToUnixTimeStamp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBungieStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDateArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDayOfWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFirstDayOfMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValidDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusMinutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nowPlusWeeks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "playtime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/lib/utility/date-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unixTimeStampToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/data/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "set-env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "envConfigFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "set-env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "set-env.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "targetPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}